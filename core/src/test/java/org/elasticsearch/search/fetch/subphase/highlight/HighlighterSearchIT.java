begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.subphase.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ScoreMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|AbstractQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IdsQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MultiMatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|FunctionScoreQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|RandomScoreFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|MatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|chrono
operator|.
name|ISOChronology
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|searchRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|boolQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|boostingQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|commonTermsQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|constantScoreQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|existsQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|fuzzyQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchPhrasePrefixQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchPhraseQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|multiMatchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|nestedQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|prefixQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|queryStringQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|rangeQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|regexpQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|typeQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|wildcardQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|highlight
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|searchSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHighlight
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNotHighlighted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|RegexMatcher
operator|.
name|matches
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|HighlighterSearchIT
specifier|public
class|class
name|HighlighterSearchIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|ALL_TYPES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ALL_TYPES
init|=
operator|new
name|String
index|[]
block|{
literal|"plain"
block|,
literal|"postings"
block|,
literal|"fvh"
block|,
literal|"unified"
block|}
decl_stmt|;
DECL|field|UNIFIED_AND_NULL
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|UNIFIED_AND_NULL
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|,
literal|"unified"
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testHighlightingWithStoredKeyword
specifier|public
name|void
name|testHighlightingWithStoredKeyword
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mappings
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|)
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>foo</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHighlightingWithWildcardName
specifier|public
name|void
name|testHighlightingWithWildcardName
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test the kibana case with * as fieldname that will try highlight all fields including meta fields
name|XContentBuilder
name|mappings
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|ALL_TYPES
control|)
block|{
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"*"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>text</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHighlightingWhenFieldsAreNotStoredThereIsNoSource
specifier|public
name|void
name|testHighlightingWhenFieldsAreNotStoredThereIsNoSource
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mappings
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"unstored_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"unstored_text"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|ALL_TYPES
control|)
block|{
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"*"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>text</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unstored_text"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// see #3486
DECL|method|testHighTermFrequencyDoc
specifier|public
name|void
name|testHighTermFrequencyDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"name"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets,store="
operator|+
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6000
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"abc"
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|startsWith
argument_list|(
literal|"<em>abc</em><em>abc</em><em>abc</em><em>abc</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNgramHighlightingWithBrokenPositions
specifier|public
name|void
name|testNgramHighlightingWithBrokenPositions
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"search_autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.token_chars"
argument_list|,
literal|"letter,digit"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.type"
argument_list|,
literal|"nGram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type"
argument_list|,
literal|"word_delimiter"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.filter.wordDelimiter.type_table"
argument_list|,
literal|"& => ALPHANUM"
argument_list|,
literal|"| => ALPHANUM"
argument_list|,
literal|"! => ALPHANUM"
argument_list|,
literal|"? => ALPHANUM"
argument_list|,
literal|". => ALPHANUM"
argument_list|,
literal|"- => ALPHANUM"
argument_list|,
literal|"# => ALPHANUM"
argument_list|,
literal|"% => ALPHANUM"
argument_list|,
literal|"+ => ALPHANUM"
argument_list|,
literal|", => ALPHANUM"
argument_list|,
literal|"~ => ALPHANUM"
argument_list|,
literal|": => ALPHANUM"
argument_list|,
literal|"/ => ALPHANUM"
argument_list|,
literal|"^ => ALPHANUM"
argument_list|,
literal|"$ => ALPHANUM"
argument_list|,
literal|"@ => ALPHANUM"
argument_list|,
literal|") => ALPHANUM"
argument_list|,
literal|"( => ALPHANUM"
argument_list|,
literal|"] => ALPHANUM"
argument_list|,
literal|"[ => ALPHANUM"
argument_list|,
literal|"} => ALPHANUM"
argument_list|,
literal|"{ => ALPHANUM"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type.split_on_numerics"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_word_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_number_parts"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_words"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_numbers"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.autocomplete.tokenizer"
argument_list|,
literal|"autocomplete"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.autocomplete.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.search_autocomplete.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.search_autocomplete.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"ARCOTEL Hotels Deutschland"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name.autocomplete"
argument_list|,
literal|"deut tel"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name.autocomplete"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name.autocomplete"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"ARCO<em>TEL</em> Ho<em>tel</em>s<em>Deut</em>schland"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiPhraseCutoff
specifier|public
name|void
name|testMultiPhraseCutoff
parameter_list|()
throws|throws
name|IOException
block|{
comment|/*          * MultiPhraseQuery can literally kill an entire node if there are too many terms in the          * query. We cut off and extract terms if there are more than 16 terms in the query          */
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"body"
argument_list|,
literal|"type=text,analyzer=custom_analyzer,search_analyzer=custom_analyzer,term_vector=with_positions_offsets"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type"
argument_list|,
literal|"word_delimiter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type.split_on_numerics"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_word_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_number_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_words"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_numbers"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.custom_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.custom_analyzer.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com http://elasticsearch.org http://xing.com "
operator|+
literal|"http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature Test: "
operator|+
literal|"http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com "
operator|+
literal|"http://twitter.com this is a test for highlighting feature"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com "
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"body"
argument_list|,
literal|0
argument_list|,
name|startsWith
argument_list|(
literal|"<em>Test: http://www.facebook.com</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com http://elasticsearch.org http://xing.com "
operator|+
literal|"http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature Test: "
operator|+
literal|"http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com "
operator|+
literal|"http://twitter.com this is a test for highlighting feature"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"body"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>Test</em>:<em>http://www.facebook.com</em> "
operator|+
literal|"<em>http://elasticsearch.org</em><em>http://xing.com</em><em>http://cnn.com</em> http://quora.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNgramHighlighting
specifier|public
name|void
name|testNgramHighlighting
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"name"
argument_list|,
literal|"type=text,analyzer=name_index_analyzer,search_analyzer=name_search_analyzer,"
operator|+
literal|"term_vector=with_positions_offsets"
argument_list|,
literal|"name2"
argument_list|,
literal|"type=text,analyzer=name2_index_analyzer,search_analyzer=name_search_analyzer,"
operator|+
literal|"term_vector=with_positions_offsets"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.type"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.token_chars"
argument_list|,
literal|"letter,digit"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.type"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name_index_analyzer.tokenizer"
argument_list|,
literal|"my_ngramt"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name2_index_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name2_index_analyzer.filter"
argument_list|,
literal|"my_ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name_search_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"logicacmg ehemals avinci - the know how company"
argument_list|,
literal|"name2"
argument_list|,
literal|"logicacmg ehemals avinci - the know how company"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica m"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>c<em>m</em>g ehe<em>m</em>als avinci - the know how co<em>m</em>pany"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica ma"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehe<em>ma</em>ls avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehemals avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica m"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logicacmg</em><em>ehemals</em> avinci - the know how<em>company</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica ma"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logicacmg</em><em>ehemals</em> avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"name2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logicacmg</em> ehemals avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureNoNegativeOffsets
specifier|public
name|void
name|testEnsureNoNegativeOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"no_long_term"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets"
argument_list|,
literal|"long_term"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"no_long_term"
argument_list|,
literal|"This is a test where foo is highlighed and should be highlighted"
argument_list|,
literal|"long_term"
argument_list|,
literal|"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed "
operator|+
literal|"and should be highlighted"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"long_term"
argument_list|,
literal|"thisisaverylongwordandmakessurethisfails foo highlighed"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"long_term"
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"long_term"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>thisisaverylongwordandmakessurethisfails</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"no_long_term"
argument_list|,
literal|"test foo highlighed"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"no_long_term"
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</b>"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<b>"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"no_long_term"
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"no_long_term"
argument_list|,
literal|"test foo highlighed"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"no_long_term"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</b>"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<b>"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"no_long_term"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"a<b>test</b> where<b>foo</b> is<b>highlighed</b> and"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSourceLookupHighlightingUsingPlainHighlighter
specifier|public
name|void
name|testSourceLookupHighlightingUsingPlainHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// we don't store title and don't use term vector, now lets see if it works...
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"attachments.body"
argument_list|,
literal|"attachment"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"attachments.body"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"attachments.body"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"attachments.body"
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSourceLookupHighlightingUsingFastVectorHighlighter
specifier|public
name|void
name|testSourceLookupHighlightingUsingFastVectorHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// we don't store title, now lets see if it works...
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"attachments.body"
argument_list|,
literal|"attachment"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"attachments.body"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"attachments.body"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"attachments.body"
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSourceLookupHighlightingUsingPostingsHighlighter
specifier|public
name|void
name|testSourceLookupHighlightingUsingPostingsHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// we don't store title, now lets see if it works...
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch. Hopefully it works."
argument_list|,
literal|"This is the second bug to perform highlighting on."
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment for this test"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
comment|//asking for the whole field to be highlighted
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch. Hopefully it works."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the second<em>bug</em> to perform highlighting on."
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
comment|//sentences will be generated out of each value
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the second<em>bug</em> to perform highlighting on."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"attachments.body"
argument_list|,
literal|"attachment"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"attachments.body"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"attachments.body"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> for this test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"attachments.body"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testHighlightIssue1994
specifier|public
name|void
name|testHighlightIssue1994
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,store=false"
argument_list|,
literal|"titleTV"
argument_list|,
literal|"type=text,store=false,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|titles
init|=
operator|new
name|String
index|[]
block|{
literal|"This is a test on the highlighting bug present in elasticsearch"
block|,
literal|"The bug is bugging us"
block|}
decl_stmt|;
name|indexRandom
argument_list|(
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
name|titles
argument_list|,
literal|"titleTV"
argument_list|,
name|titles
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"titleTV"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"some text to highlight"
block|,
literal|"highlight other text"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|field
argument_list|(
literal|"titleTV"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>bug</em> is bugging us"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"titleTV"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"titleTV"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>bug</em> is bugging us"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"titleTV"
argument_list|,
literal|"highlight"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"titleTV"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"titleTV"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"some text to<em>highlight</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"titleTV"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"<em>highlight</em> other text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGlobalHighlightingSettingsOverriddenAtFieldLevel
specifier|public
name|void
name|testGlobalHighlightingSettingsOverriddenAtFieldLevel
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this is a test"
block|,
literal|"this is the second test"
block|}
argument_list|,
literal|"field2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this is another test"
block|,
literal|"yet another test"
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1 and field2 produces different tags"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<global>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</global>"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<field2>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</field2>"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|50
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"<global>test</global>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"<global>test</global>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is another<field2>test</field2>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Issue #5175
DECL|method|testHighlightingOnWildcardFields
specifier|public
name|void
name|testHighlightingOnWildcardFields
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field-postings"
argument_list|,
literal|"type=text,index_options=offsets"
argument_list|,
literal|"field-fvh"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets"
argument_list|,
literal|"field-plain"
argument_list|,
literal|"type=text"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field-postings"
argument_list|,
literal|"This is the first test sentence. Here is the second one."
argument_list|,
literal|"field-fvh"
argument_list|,
literal|"This is the test with term_vectors"
argument_list|,
literal|"field-plain"
argument_list|,
literal|"This is the test for the plain highlighter"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field*"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
comment|//postings hl doesn't support require_field_match, its field needs to be queried directly
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field-postings"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field*"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field-postings"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is the first<xxx>test</xxx> sentence."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field-fvh"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<xxx>test</xxx> with term_vectors"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field-plain"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<xxx>test</xxx> for the plain highlighter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForceSourceWithSourceDisabled
specifier|public
name|void
name|testForceSourceWithSourceDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
literal|"field2"
argument_list|,
literal|"second field content"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|//works using stored field
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
operator|.
name|forceSource
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|containsString
argument_list|(
literal|"source is forced for fields [field1] but type [type1] has disabled _source"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|searchSource
init|=
name|SearchSourceBuilder
operator|.
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|forceSource
argument_list|(
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|searchSource
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|containsString
argument_list|(
literal|"source is forced for fields [field1] but type [type1] has disabled _source"
argument_list|)
argument_list|)
expr_stmt|;
name|searchSource
operator|=
name|SearchSourceBuilder
operator|.
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|forceSource
argument_list|(
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"field*"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|searchSource
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|matches
argument_list|(
literal|"source is forced for fields \\[field\\d, field\\d\\] but type \\[type1\\] has disabled _source"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPlainHighlighter
specifier|public
name|void
name|testPlainHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFastVectorHighlighter
specifier|public
name|void
name|testFastVectorHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching with boundary characters"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
operator|.
name|boundaryChars
argument_list|(
operator|new
name|char
index|[]
block|{
literal|' '
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching with boundary characters on the field"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|30
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|boundaryChars
argument_list|(
operator|new
name|char
index|[]
block|{
literal|' '
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The FHV can spend a long time highlighting degenerate documents if      * phraseLimit is not set. Its default is now reasonably low.      */
DECL|method|testFVHManyMatches
specifier|public
name|void
name|testFVHManyMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// Index one megabyte of "t   " over and over and over again
name|String
name|pattern
init|=
literal|"t   "
decl_stmt|;
name|String
name|value
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
literal|1024
operator|*
literal|256
operator|/
name|pattern
operator|.
name|length
argument_list|()
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|value
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1 with default phrase limit"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"t"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|defaultPhraseLimit
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|defaultPhraseLimit
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|containsString
argument_list|(
literal|"<xxx>t</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1 with large phrase limit"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"t"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|phraseLimit
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|largePhraseLimit
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|largePhraseLimit
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|containsString
argument_list|(
literal|"<xxx>t</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * I hate comparing times because it can be inconsistent but default is          * in the neighborhood of 300ms and the large phrase limit is in the          * neighborhood of 8 seconds.          */
name|assertThat
argument_list|(
name|defaultPhraseLimit
operator|.
name|getTookInMillis
argument_list|()
argument_list|,
name|lessThan
argument_list|(
name|largePhraseLimit
operator|.
name|getTookInMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchedFieldsFvhRequireFieldMatch
specifier|public
name|void
name|testMatchedFieldsFvhRequireFieldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|checkMatchedFieldsCase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchedFieldsFvhNoRequireFieldMatch
specifier|public
name|void
name|testMatchedFieldsFvhNoRequireFieldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|checkMatchedFieldsCase
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMatchedFieldsCase
specifier|private
name|void
name|checkMatchedFieldsCase
parameter_list|(
name|boolean
name|requireFieldMatch
parameter_list|)
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"english"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"english"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"running with scissors"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"cat cat junk junk junk junk junk junk junk cats junk junk"
argument_list|,
literal|"bar"
argument_list|,
literal|"cat cat junk junk junk junk junk junk junk cats junk junk"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"foo"
argument_list|,
literal|"weird"
argument_list|,
literal|"bar"
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Field
name|fooField
init|=
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|25
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
name|requireFieldMatch
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|req
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
argument_list|)
decl_stmt|;
comment|// First check highlighting without any matched fields set
name|SearchResponse
name|resp
init|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And that matching a subfield doesn't automatically highlight it
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"foo.plain:running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"running with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the subfield to the list of matched fields but don't match it.  Everything should still work
comment|// like before we added it.
name|fooField
operator|=
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|25
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
name|requireFieldMatch
argument_list|)
expr_stmt|;
name|fooField
operator|.
name|matchedFields
argument_list|(
literal|"foo"
argument_list|,
literal|"foo.plain"
argument_list|)
expr_stmt|;
name|req
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now make half the matches come from the stored field and half from just a matched field.
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"foo.plain:running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now remove the stored field from the matched field list.  That should work too.
name|fooField
operator|=
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|25
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
name|requireFieldMatch
argument_list|)
expr_stmt|;
name|fooField
operator|.
name|matchedFields
argument_list|(
literal|"foo.plain"
argument_list|)
expr_stmt|;
name|req
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"foo.plain:running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with scissors"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now make sure boosted fields don't blow up when matched fields is both the subfield and stored field.
name|fooField
operator|=
operator|new
name|Field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|25
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
name|requireFieldMatch
argument_list|)
expr_stmt|;
name|fooField
operator|.
name|matchedFields
argument_list|(
literal|"foo"
argument_list|,
literal|"foo.plain"
argument_list|)
expr_stmt|;
name|req
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"foo.plain:running^5 scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now just all matches are against the matched field.  This still returns highlighting.
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"foo.plain:running foo.plain:scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And all matched field via the queryString's field parameter, just in case
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finding the same string two ways is ok too
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"run foo.plain:running^5 scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// But we use the best found score when sorting fragments
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"cats foo.plain:cats^5"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"junk junk<em>cats</em> junk junk"
argument_list|)
argument_list|)
expr_stmt|;
comment|// which can also be written by searching on the subfield
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"cats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"junk junk<em>cats</em> junk junk"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Speaking of two fields, you can have two fields, only one of which has matchedFields enabled
name|QueryBuilder
name|twoFieldsQuery
init|=
name|queryStringQuery
argument_list|(
literal|"cats"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|,
literal|5
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar.plain"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Field
name|barField
init|=
operator|new
name|Field
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|25
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
name|requireFieldMatch
argument_list|)
decl_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|twoFieldsQuery
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
operator|.
name|field
argument_list|(
name|barField
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"junk junk<em>cats</em> junk junk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"bar"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>cat</em><em>cat</em> junk junk junk junk"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And you can enable matchedField highlighting on both
name|barField
operator|.
name|matchedFields
argument_list|(
literal|"bar"
argument_list|,
literal|"bar.plain"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|twoFieldsQuery
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
operator|.
name|field
argument_list|(
name|barField
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"junk junk<em>cats</em> junk junk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"bar"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"junk junk<em>cats</em> junk junk"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setting a matchedField that isn't searched/doesn't exist is simply ignored.
name|barField
operator|.
name|matchedFields
argument_list|(
literal|"bar"
argument_list|,
literal|"candy"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|twoFieldsQuery
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
operator|.
name|field
argument_list|(
name|barField
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"junk junk<em>cats</em> junk junk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"bar"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>cat</em><em>cat</em> junk junk junk junk"
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the stored field doesn't have a value it doesn't matter what you match, you get nothing.
name|barField
operator|.
name|matchedFields
argument_list|(
literal|"bar"
argument_list|,
literal|"foo.plain"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
operator|.
name|field
argument_list|(
name|barField
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the stored field is found but the matched field isn't then you don't get a result either.
name|fooField
operator|.
name|matchedFields
argument_list|(
literal|"bar.plain"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar.plain"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
operator|.
name|field
argument_list|(
name|barField
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// But if you add the stored field to the list of matched fields then you'll get a result again
name|fooField
operator|.
name|matchedFields
argument_list|(
literal|"foo"
argument_list|,
literal|"bar.plain"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"running scissors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar.plain"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
operator|.
name|field
argument_list|(
name|barField
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>running</em> with<em>scissors</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// You _can_ highlight fields that aren't subfields of one another.
name|resp
operator|=
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"weird"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar.plain"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|fooField
argument_list|)
operator|.
name|field
argument_list|(
name|barField
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>weird</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
argument_list|,
literal|0
argument_list|,
literal|"bar"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>resul</em>t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|req
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"result"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo.plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar.plain"
argument_list|)
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|containsString
argument_list|(
literal|"IndexOutOfBoundsException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFastVectorHighlighterManyDocs
specifier|public
name|void
name|testFastVectorHighlighterManyDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|COUNT
init|=
name|between
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"test "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing docs"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching explicitly on field1 and highlighting on it"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
name|i
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>test</em> "
operator|+
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|type1TermVectorMapping
specifier|public
name|XContentBuilder
name|type1TermVectorMapping
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|testSameContent
specifier|public
name|void
name|testSameContent
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,store=true,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> "
operator|+
literal|"present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFastVectorHighlighterOffsetParameter
specifier|public
name|void
name|testFastVectorHighlighterOffsetParameter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,store=true,term_vector=with_positions_offsets"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEscapeHtml
specifier|public
name|void
name|testEscapeHtml
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,store=true"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a html escaping highlighting test for *&? elasticsearch"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|startsWith
argument_list|(
literal|"This is a html escaping highlighting<em>test</em> for *&amp;?"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testEscapeHtmlVector
specifier|public
name|void
name|testEscapeHtmlVector
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,store=true,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a html escaping highlighting test for *&? elasticsearch"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"highlighting<em>test</em> for *&amp;? elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultiMapperVectorWithStore
specifier|public
name|void
name|testMultiMapperVectorWithStore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"classic"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title.key"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultiMapperVectorFromSource
specifier|public
name|void
name|testMultiMapperVectorFromSource
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"classic"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title.key
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title.key"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultiMapperNoVectorWithStore
specifier|public
name|void
name|testMultiMapperNoVectorWithStore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"classic"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title.key"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultiMapperNoVectorFromSource
specifier|public
name|void
name|testMultiMapperNoVectorFromSource
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"classic"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title.key
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"title.key"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFastVectorHighlighterShouldFailIfNoTermVectors
specifier|public
name|void
name|testFastVectorHighlighterShouldFailIfNoTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,store=true,term_vector=no"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test for the enabling fast vector highlighter"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|containsString
argument_list|(
literal|"the field [title] should be indexed with term vector with position offsets to be "
operator|+
literal|"used with fast vector highlighter"
argument_list|)
argument_list|)
expr_stmt|;
comment|//should not fail if there is a wildcard
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"tit*"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisableFastVectorHighlighter
specifier|public
name|void
name|testDisableFastVectorHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,store=true,term_vector=with_positions_offsets,analyzer=classic"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test for the workaround for the fast vector highlighting SOLR-3724"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test for the workaround"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Because of SOLR-3724 nothing is highlighted when FVH is used
name|assertNotHighlighted
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
block|}
comment|// Using plain highlighter instead of FVH
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test for the workaround"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is a<em>test</em> for the<em>workaround</em> for the fast vector highlighting SOLR-3724"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Using plain highlighter instead of FVH on the field level
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test for the workaround"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"title"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|search
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is a<em>test</em> for the<em>workaround</em> for the fast vector highlighting SOLR-3724"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFSHHighlightAllMvFragments
specifier|public
name|void
name|testFSHHighlightAllMvFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"tags"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"tags"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this is a really long tag i would like to highlight"
block|,
literal|"here is another one that is very long and has the tag token near the end"
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"tag"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"tags"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"tags"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"this is a really long<em>tag</em> i would like to highlight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"tags"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"here is another one that is very long and has the<em>tag</em> token near the end"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoostingQuery
specifier|public
name|void
name|testBoostingQuery
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boostingQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"brown"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBoostingQueryTermVector
specifier|public
name|void
name|testBoostingQueryTermVector
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boostingQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"brown"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonTermsQuery
specifier|public
name|void
name|testCommonTermsQuery
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCommonTermsTermVector
specifier|public
name|void
name|testCommonTermsTermVector
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhrasePrefix
specifier|public
name|void
name|testPhrasePrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.synonym.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.synonym.filter"
argument_list|,
literal|"synonym"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"quick => fast"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type2"
argument_list|,
literal|"field4"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets,analyzer=synonym"
argument_list|,
literal|"field3"
argument_list|,
literal|"type=text,analyzer=synonym"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field0"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick browse button is a fancy thing, right bro?"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field0"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field0"
argument_list|,
literal|"quick bro"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field0"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field0"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick bro"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"The<x>quick browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"The<x>quick browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// with synonyms
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field4"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
literal|"field3"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field4"
argument_list|,
literal|"The quick browse button is a fancy thing, right bro?"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field4"
argument_list|,
literal|"a quick fast blue car"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|postFilter
argument_list|(
name|typeQuery
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field3"
argument_list|,
literal|"fast bro"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field3"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field4"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|postFilter
argument_list|(
name|typeQuery
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field4"
argument_list|,
literal|"the fast bro"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field4"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"<x>The quick browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The quick brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The</x><x>quick</x><x>browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The</x><x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|,
literal|"field4"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"<x>The quick browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The quick brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The</x><x>quick</x><x>browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The</x><x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field4"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|postFilter
argument_list|(
name|typeQuery
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field4"
argument_list|,
literal|"a fast quick blue ca"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field4"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"<x>a quick fast blue car</x>"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<x>a</x><x>quick</x><x>fast</x><x>blue</x><x>car</x>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPlainHighlightDifferentFragmenter
specifier|public
name|void
name|testPlainHighlightDifferentFragmenter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"tags"
argument_list|,
literal|"type=text"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"tags"
argument_list|,
literal|"this is a really long tag i would like to highlight"
argument_list|,
literal|"here is another one that is very long tag and has the tag token near the end"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"long tag"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|2
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"tags"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"this is a really<em>long</em><em>tag</em> i would like to highlight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"tags"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"here is another one that is very<em>long</em><em>tag</em> and has the tag token near the end"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"long tag"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|2
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"span"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"tags"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"this is a really<em>long</em><em>tag</em> i would like to highlight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"tags"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"here is another one that is very<em>long</em><em>tag</em> and has the tag token near the end"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"long tag"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|2
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|containsString
argument_list|(
literal|"unknown fragmenter option [invalid] for the field [tags]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPlainHighlighterMultipleFields
specifier|public
name|void
name|testPlainHighlighterMultipleFields
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"field1"
argument_list|,
literal|"The<b>quick<b> brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"The<b>slow<b> brown fox"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<1>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</1>"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<2>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</2>"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<b>quick<b> brown<1>fox</1>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<b>slow<b> brown<2>fox</2>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFastVectorHighlighterMultipleFields
specifier|public
name|void
name|testFastVectorHighlighterMultipleFields
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"field1"
argument_list|,
literal|"The<b>quick<b> brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"The<b>slow<b> brown fox"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<1>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</1>"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<2>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</2>"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<b>quick<b> brown<1>fox</1>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<b>slow<b> brown<2>fox</2>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingStoredField
specifier|public
name|void
name|testMissingStoredField
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"highlight_field"
argument_list|,
literal|"type=text,store=true"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"highlight"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|// This query used to fail when the field to highlight was absent
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"highlight"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"highlight_field"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Issue #3211
DECL|method|testNumericHighlighting
specifier|public
name|void
name|testNumericHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"text"
argument_list|,
literal|"type=text"
argument_list|,
literal|"byte"
argument_list|,
literal|"type=byte"
argument_list|,
literal|"short"
argument_list|,
literal|"type=short"
argument_list|,
literal|"int"
argument_list|,
literal|"type=integer"
argument_list|,
literal|"long"
argument_list|,
literal|"type=long"
argument_list|,
literal|"float"
argument_list|,
literal|"type=float"
argument_list|,
literal|"double"
argument_list|,
literal|"type=double"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"elasticsearch test"
argument_list|,
literal|"byte"
argument_list|,
literal|25
argument_list|,
literal|"short"
argument_list|,
literal|42
argument_list|,
literal|"int"
argument_list|,
literal|100
argument_list|,
literal|"long"
argument_list|,
operator|-
literal|1
argument_list|,
literal|"float"
argument_list|,
literal|3.2f
argument_list|,
literal|"double"
argument_list|,
literal|42.42
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|field
argument_list|(
literal|"short"
argument_list|)
operator|.
name|field
argument_list|(
literal|"int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"long"
argument_list|)
operator|.
name|field
argument_list|(
literal|"float"
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Highlighting of numeric fields is not supported, but it should not raise errors
comment|// (this behavior is consistent with version 0.20)
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|// Issue #3200
DECL|method|testResetTwice
specifier|public
name|void
name|testResetTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.my_analyzer.type"
argument_list|,
literal|"pattern"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.my_analyzer.pattern"
argument_list|,
literal|"\\s+"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|,
literal|"type=text,analyzer=my_analyzer"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"elasticsearch test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
comment|// PatternAnalyzer will throw an exception if it is resetted twice
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHighlightUsesHighlightQuery
specifier|public
name|void
name|testHighlightUsesHighlightQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"text"
argument_list|,
literal|"type=text,"
operator|+
name|randomStoreField
argument_list|()
operator|+
literal|"term_vector=with_positions_offsets,index_options=offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"Testing the highlight query feature"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|ALL_TYPES
control|)
block|{
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|HighlightBuilder
name|highlightBuilder
init|=
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"testing"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlightBuilder
argument_list|)
decl_stmt|;
name|Matcher
argument_list|<
name|String
argument_list|>
name|searchQueryMatcher
init|=
name|equalTo
argument_list|(
literal|"<em>Testing</em> the highlight query feature"
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|search
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|searchQueryMatcher
argument_list|)
expr_stmt|;
name|field
operator|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|Matcher
argument_list|<
name|String
argument_list|>
name|hlQueryMatcher
init|=
name|equalTo
argument_list|(
literal|"Testing the highlight<em>query</em> feature"
argument_list|)
decl_stmt|;
name|field
operator|.
name|highlightQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"query"
argument_list|)
argument_list|)
expr_stmt|;
name|highlightBuilder
operator|=
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"testing"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlightBuilder
argument_list|)
expr_stmt|;
name|response
operator|=
name|search
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|hlQueryMatcher
argument_list|)
expr_stmt|;
comment|// Make sure the highlightQuery is taken into account when it is set on the highlight context instead of the field
name|highlightBuilder
operator|.
name|highlightQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"query"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
operator|.
name|highlightQuery
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|response
operator|=
name|search
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|hlQueryMatcher
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomStoreField
specifier|private
specifier|static
name|String
name|randomStoreField
parameter_list|()
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
literal|"store=true,"
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|testHighlightNoMatchSize
specifier|public
name|void
name|testHighlightNoMatchSize
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"text"
argument_list|,
literal|"type=text,"
operator|+
name|randomStoreField
argument_list|()
operator|+
literal|"term_vector=with_positions_offsets,index_options=offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|text
init|=
literal|"I am pretty long so some of me should get cut off. Second sentence"
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// When you don't set noMatchSize you don't get any results if there isn't anything to highlight.
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|21
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|// When noMatchSize is set to 0 you also shouldn't get any
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|// When noMatchSize is between 0 and the size of the string
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The FVH also works but the fragment is longer than the plain highlighter because of boundary_max_scan
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Postings hl also works but the fragment is the whole first sentence (size ignored)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unified hl also works but the fragment is the whole first sentence (size ignored)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can also ask for a fragment longer than the input string and get the whole string
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|//no difference using postings hl as the noMatchSize is ignored (just needs to be greater than 0)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|//no difference using unified hl as the noMatchSize is ignored (just needs to be greater than 0)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can also ask for a fragment exactly the size of the input field and get the whole field
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|//no difference using postings hl as the noMatchSize is ignored (just needs to be greater than 0)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|//no difference using unified hl as the noMatchSize is ignored (just needs to be greater than 0)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|// You can set noMatchSize globally in the highlighter as well
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't break if noMatchSize is less than zero though
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHighlightNoMatchSizeWithMultivaluedFields
specifier|public
name|void
name|testHighlightNoMatchSizeWithMultivaluedFields
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"text"
argument_list|,
literal|"type=text,"
operator|+
name|randomStoreField
argument_list|()
operator|+
literal|"term_vector=with_positions_offsets,index_options=offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|text1
init|=
literal|"I am pretty long so some of me should get cut off. We'll see how that goes."
decl_stmt|;
name|String
name|text2
init|=
literal|"I am short"
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{
name|text1
block|,
name|text2
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// The no match fragment should come from the first value of a multi-valued field
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|21
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Postings hl also works but the fragment is the whole first sentence (size ignored)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unified hl also works but the fragment is the whole first sentence (size ignored)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some of me should get cut off."
argument_list|)
argument_list|)
expr_stmt|;
comment|// And noMatchSize returns nothing when the first entry is empty string!
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|,
name|text2
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|IdsQueryBuilder
name|idsQueryBuilder
init|=
name|QueryBuilders
operator|.
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|addIds
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|// But if the field was actually empty then you should get no highlighting field
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|idsQueryBuilder
operator|=
name|QueryBuilders
operator|.
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|addIds
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|// Same for if the field doesn't even exist on the document
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|idsQueryBuilder
operator|=
name|QueryBuilders
operator|.
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|addIds
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|idsQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"postings"
argument_list|)
expr_stmt|;
comment|// Again same if the field isn't mapped
name|field
operator|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"unmapped"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHighlightNoMatchSizeNumberOfFragments
specifier|public
name|void
name|testHighlightNoMatchSizeNumberOfFragments
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"text"
argument_list|,
literal|"type=text,"
operator|+
name|randomStoreField
argument_list|()
operator|+
literal|"term_vector=with_positions_offsets,index_options=offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|text1
init|=
literal|"This is the first sentence. This is the second sentence."
operator|+
name|HighlightUtils
operator|.
name|PARAGRAPH_SEPARATOR
decl_stmt|;
name|String
name|text2
init|=
literal|"This is the third sentence. This is the fourth sentence."
decl_stmt|;
name|String
name|text3
init|=
literal|"This is the fifth sentence"
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{
name|text1
block|,
name|text2
block|,
name|text3
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// The no match fragment should come from the first value of a multi-valued field
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|0
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is the first"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is the first sentence"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Postings hl also works but the fragment is the whole first sentence (size ignored)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is the first sentence."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unified hl also works but the fragment is the whole first sentence (size ignored)
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is the first sentence."
argument_list|)
argument_list|)
expr_stmt|;
comment|//if there's a match we only return the values with matches (whole value as number_of_fragments == 0)
name|MatchQueryBuilder
name|queryBuilder
init|=
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"third fifth"
argument_list|)
decl_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>third</em> sentence. This is the fourth sentence."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>fifth</em> sentence"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>third</em> sentence. This is the fourth sentence."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>fifth</em> sentence"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>third</em> sentence. This is the fourth sentence."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>fifth</em> sentence"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"unified"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>third</em> sentence. This is the fourth sentence."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|equalTo
argument_list|(
literal|"This is the<em>fifth</em> sentence"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPostingsHighlighter
specifier|public
name|void
name|testPostingsHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy quick dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on field1, highlighting on field1"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on field2, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy<xxx>quick</xxx> dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on field2, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|//phrase query results in highlighting all different terms regardless of their positions
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx><xxx>brown</xxx> fox jumps over the lazy<xxx>quick</xxx> dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx><xxx>brown</xxx> fox jumps over the lazy quick dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//lets fall back to the standard highlighter then, what people would do to highlight query matches
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on field2, highlighting on field2, falling back to the plain highlighter"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx><xxx>brown</xxx> fox jumps over the lazy quick dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterMultipleFields
specifier|public
name|void
name|testPostingsHighlighterMultipleFields
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"field1"
argument_list|,
literal|"The<b>quick<b> brown fox. Second sentence."
argument_list|,
literal|"field2"
argument_list|,
literal|"The<b>slow<b> brown fox. Second sentence."
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<1>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</1>"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|true
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<b>quick<b> brown<1>fox</1>."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterNumberOfFragments
specifier|public
name|void
name|testPostingsHighlighterNumberOfFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog. The lazy red fox jumps over the quick dog. "
operator|+
literal|"The quick brown dog jumps over the lazy fox."
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog. The lazy red fox jumps over the quick dog. "
operator|+
literal|"The quick brown dog jumps over the lazy fox."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|5
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<field1>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</field1>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<field1>fox</field1> jumps over the lazy dog."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The lazy red<field1>fox</field1> jumps over the quick dog."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown dog jumps over the lazy<field1>fox</field1>."
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"The quick brown fox jumps over the lazy dog. Second sentence not finished"
block|,
literal|"The lazy red fox jumps over the quick dog."
block|,
literal|"The quick brown dog jumps over the lazy fox."
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|0
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<field1>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</field1>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|searchHit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|searchHit
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|assertHighlight
argument_list|(
name|searchHit
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<field1>fox</field1> jumps over the lazy dog. "
operator|+
literal|"The lazy red<field1>fox</field1> jumps over the quick dog. "
operator|+
literal|"The quick brown dog jumps over the lazy<field1>fox</field1>."
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"2"
operator|.
name|equals
argument_list|(
name|searchHit
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|assertHighlight
argument_list|(
name|searchHit
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<field1>fox</field1> jumps over the lazy dog. Second sentence not finished"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchHit
argument_list|,
literal|"field1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|equalTo
argument_list|(
literal|"The lazy red<field1>fox</field1> jumps over the quick dog."
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchHit
argument_list|,
literal|"field1"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown dog jumps over the lazy<field1>fox</field1>."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Only hits with id 1 and 2 are returned"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testMultiMatchQueryHighlight
specifier|public
name|void
name|testMultiMatchQueryHighlight
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|highlighterTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"fvh"
block|,
literal|"plain"
block|,
literal|"postings"
block|,
literal|"unified"
block|}
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|20
argument_list|,
literal|30
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|String
name|highlighterType
init|=
name|rarely
argument_list|()
condition|?
literal|null
else|:
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|highlighterTypes
argument_list|)
decl_stmt|;
name|MultiMatchQueryBuilder
operator|.
name|Type
index|[]
name|supportedQueryTypes
decl_stmt|;
if|if
condition|(
literal|"postings"
operator|.
name|equals
argument_list|(
name|highlighterType
argument_list|)
condition|)
block|{
comment|/*                  * phrase_prefix is not supported by postings highlighter, as it rewrites against an empty reader, the prefix will never                  * match any term                  */
name|supportedQueryTypes
operator|=
operator|new
name|MultiMatchQueryBuilder
operator|.
name|Type
index|[]
block|{
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|BEST_FIELDS
block|,
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
block|,
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|MOST_FIELDS
block|,
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|PHRASE
block|}
expr_stmt|;
block|}
else|else
block|{
name|supportedQueryTypes
operator|=
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
name|MultiMatchQueryBuilder
operator|.
name|Type
name|matchQueryType
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|supportedQueryTypes
argument_list|)
decl_stmt|;
name|MultiMatchQueryBuilder
name|multiMatchQueryBuilder
init|=
name|multiMatchQuery
argument_list|(
literal|"the quick brown fox"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|type
argument_list|(
name|matchQueryType
argument_list|)
decl_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|multiMatchQueryBuilder
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|highlightQuery
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|multiMatchQueryBuilder
else|:
literal|null
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|highlighterType
argument_list|)
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|true
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<field1>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</field1>"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running multi-match type: [{}] highlight with type: [{}]"
argument_list|,
name|matchQueryType
argument_list|,
name|highlighterType
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"<field1>The quick brown fox</field1> jumps over"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"<field1>The</field1><field1>quick</field1><field1>brown</field1><field1>fox</field1> jumps over"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterOrderByScore
specifier|public
name|void
name|testPostingsHighlighterOrderByScore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"This sentence contains one match, not that short. This sentence contains two sentence matches. "
operator|+
literal|"This one contains no matches."
block|,
literal|"This is the second value's first sentence. This one contains no matches. "
operator|+
literal|"This sentence contains three sentence occurrences (sentence)."
block|,
literal|"One sentence match here and scored lower since the text is quite long, not that appealing. "
operator|+
literal|"This one contains no matches."
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"sentence"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFieldMap
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|highlightFieldMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|HighlightField
name|field1
init|=
name|highlightFieldMap
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field1
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field1
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This<em>sentence</em> contains three<em>sentence</em> occurrences (<em>sentence</em>)."
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field1
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This<em>sentence</em> contains two<em>sentence</em> matches."
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field1
operator|.
name|fragments
argument_list|()
index|[
literal|2
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is the second value's first<em>sentence</em>."
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field1
operator|.
name|fragments
argument_list|()
index|[
literal|3
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This<em>sentence</em> contains one match, not that short."
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field1
operator|.
name|fragments
argument_list|()
index|[
literal|4
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"One<em>sentence</em> match here and scored lower since the text is quite long, not that appealing."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterEscapeHtml
specifier|public
name|void
name|testPostingsHighlighterEscapeHtml
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"title"
argument_list|,
literal|"type=text,"
operator|+
name|randomStoreField
argument_list|()
operator|+
literal|"index_options=offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a html escaping highlighting test for *&? elasticsearch"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|)
operator|.
name|encoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
name|i
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"This is a html escaping highlighting<em>test</em> for *&amp;?"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPostingsHighlighterMultiMapperWithStore
specifier|public
name|void
name|testPostingsHighlighterMultiMapperWithStore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"classic"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test . Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
comment|//lets make sure we analyze the query and we highlight the resulting terms
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"This is a Test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|SearchHit
name|hit
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//stopwords are not highlighted since not indexed
name|assertHighlight
argument_list|(
name|hit
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em> ."
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title.key"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|//stopwords are now highlighted since we used only whitespace analyzer here
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"title.key"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em> ."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterMultiMapperFromSource
specifier|public
name|void
name|testPostingsHighlighterMultiMapperFromSource
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"classic"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title.key
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title.key"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"title.key"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterShouldFailIfNoOffsets
specifier|public
name|void
name|testPostingsHighlighterShouldFailIfNoOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"docs"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequestBuilders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test for the postings highlighter"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|containsString
argument_list|(
literal|"the field [title] should be indexed with positions and offsets in the "
operator|+
literal|"postings list to be used with postings highlighter"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|containsString
argument_list|(
literal|"the field [title] should be indexed with positions and offsets in the "
operator|+
literal|"postings list to be used with postings highlighter"
argument_list|)
argument_list|)
expr_stmt|;
comment|//should not fail if there is a wildcard
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"tit*"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"postings"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPostingsHighlighterBoostingQuery
specifier|public
name|void
name|testPostingsHighlighterBoostingQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog! Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boostingQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"brown"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<x>brown</x> fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterCommonTermsQuery
specifier|public
name|void
name|testPostingsHighlighterCommonTermsQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog! Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|type1PostingsffsetsMapping
specifier|private
specifier|static
name|XContentBuilder
name|type1PostingsffsetsMapping
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|testPostingsHighlighterPrefixQuery
specifier|public
name|void
name|testPostingsHighlighterPrefixQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog! Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field2"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|prefixQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"qui"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterFuzzyQuery
specifier|public
name|void
name|testPostingsHighlighterFuzzyQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog! Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field2"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quck"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterRegexpQuery
specifier|public
name|void
name|testPostingsHighlighterRegexpQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog! Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field2"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|regexpQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"qu[a-l]+k"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterWildcardQuery
specifier|public
name|void
name|testPostingsHighlighterWildcardQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog! Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field2"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|wildcardQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"qui*"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|wildcardQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"qu*k"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterTermRangeQuery
specifier|public
name|void
name|testPostingsHighlighterTermRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"aaab"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field2"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|rangeQuery
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|gte
argument_list|(
literal|"aaaa"
argument_list|)
operator|.
name|lt
argument_list|(
literal|"zzzz"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>aaab</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterQueryString
specifier|public
name|void
name|testPostingsHighlighterQueryString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog! Second sentence."
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field2"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|queryStringQuery
argument_list|(
literal|"qui*"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>quick</em> brown fox jumps over the lazy dog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterRegexpQueryWithinConstantScoreQuery
specifier|public
name|void
name|testPostingsHighlighterRegexpQueryWithinConstantScoreQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The photography word will get highlighted"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|constantScoreQuery
argument_list|(
name|regexpQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"pho[a-z]+"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>photography</em> word will get highlighted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterMultiTermQueryMultipleLevels
specifier|public
name|void
name|testPostingsHighlighterMultiTermQueryMultipleLevels
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The photography word will get highlighted"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|mustNot
argument_list|(
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|constantScoreQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"field1:photo*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>photography</em> word will get highlighted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterPrefixQueryWithinBooleanQuery
specifier|public
name|void
name|testPostingsHighlighterPrefixQueryWithinBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The photography word will get highlighted"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|prefixQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"photo"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>photography</em> word will get highlighted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterQueryStringWithinFilteredQuery
specifier|public
name|void
name|testPostingsHighlighterQueryStringWithinFilteredQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The photography word will get highlighted"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|queryStringQuery
argument_list|(
literal|"field1:photo*"
argument_list|)
argument_list|)
operator|.
name|mustNot
argument_list|(
name|existsQuery
argument_list|(
literal|"field_null"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>photography</em> word will get highlighted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPostingsHighlighterManyDocs
specifier|public
name|void
name|testPostingsHighlighterManyDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|COUNT
init|=
name|between
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|COUNT
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
comment|//generating text with word to highlight in a different position
comment|//(https://github.com/elastic/elasticsearch/issues/4103)
name|String
name|prefix
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"Sentence "
operator|+
name|prefix
operator|+
literal|" test. Sentence two."
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing docs"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching explicitly on field1 and highlighting on it"
argument_list|)
expr_stmt|;
name|SearchRequestBuilder
name|searchRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|searchRequestBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|prefixes
operator|.
name|get
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertHighlight
argument_list|(
name|hit
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"Sentence "
operator|+
name|prefix
operator|+
literal|"<em>test</em>."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDoesNotHighlightTypeName
specifier|public
name|void
name|testDoesNotHighlightTypeName
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"typename"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"typename"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"typename"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"test typename"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|highlighter
range|:
name|ALL_TYPES
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"typename"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|highlighter
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>test</em> typename"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDoesNotHighlightAliasFilters
specifier|public
name|void
name|testDoesNotHighlightAliasFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"typename"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"typename"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAliases
argument_list|()
operator|.
name|addAlias
argument_list|(
literal|"test"
argument_list|,
literal|"filtered_alias"
argument_list|,
name|matchQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"japanese"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"typename"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"test japanese"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|highlighter
range|:
name|ALL_TYPES
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"filtered_alias"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"typename"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"foo"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|highlighter
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<em>test</em> japanese"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFastVectorHighlighterPhraseBoost
specifier|public
name|void
name|testFastVectorHighlighterPhraseBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|phraseBoostTestCase
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPostingsHighlighterPhraseBoost
specifier|public
name|void
name|testPostingsHighlighterPhraseBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1PostingsffsetsMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|phraseBoostTestCase
argument_list|(
literal|"postings"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter      * because it doesn't support the concept of terms having a different weight based on position.      * @param highlighterType highlighter to test      */
DECL|method|phraseBoostTestCase
specifier|private
name|void
name|phraseBoostTestCase
parameter_list|(
name|String
name|highlighterType
parameter_list|)
block|{
name|ensureGreen
argument_list|()
expr_stmt|;
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n"
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|append
argument_list|(
literal|"highlight words together\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|"junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n"
argument_list|)
expr_stmt|;
block|}
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"field1"
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// Match queries
name|phraseBoostTestCaseForClauses
argument_list|(
name|highlighterType
argument_list|,
literal|100f
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"highlight words together"
argument_list|)
argument_list|,
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"highlight words together"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Query string with a single field
name|phraseBoostTestCaseForClauses
argument_list|(
name|highlighterType
argument_list|,
literal|100f
argument_list|,
name|queryStringQuery
argument_list|(
literal|"highlight words together"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|queryStringQuery
argument_list|(
literal|"\"highlight words together\""
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|autoGeneratePhraseQueries
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Query string with a single field without dismax
name|phraseBoostTestCaseForClauses
argument_list|(
name|highlighterType
argument_list|,
literal|100f
argument_list|,
name|queryStringQuery
argument_list|(
literal|"highlight words together"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
argument_list|,
name|queryStringQuery
argument_list|(
literal|"\"highlight words together\""
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|autoGeneratePhraseQueries
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Query string with more than one field
name|phraseBoostTestCaseForClauses
argument_list|(
name|highlighterType
argument_list|,
literal|100f
argument_list|,
name|queryStringQuery
argument_list|(
literal|"highlight words together"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|,
name|queryStringQuery
argument_list|(
literal|"\"highlight words together\""
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|autoGeneratePhraseQueries
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Query string boosting the field
name|phraseBoostTestCaseForClauses
argument_list|(
name|highlighterType
argument_list|,
literal|1f
argument_list|,
name|queryStringQuery
argument_list|(
literal|"highlight words together"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|queryStringQuery
argument_list|(
literal|"\"highlight words together\""
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|)
operator|.
name|autoGeneratePhraseQueries
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|P
extends|extends
name|AbstractQueryBuilder
argument_list|<
name|P
argument_list|>
parameter_list|>
name|void
DECL|method|phraseBoostTestCaseForClauses
name|phraseBoostTestCaseForClauses
parameter_list|(
name|String
name|highlighterType
parameter_list|,
name|float
name|boost
parameter_list|,
name|QueryBuilder
name|terms
parameter_list|,
name|P
name|phrase
parameter_list|)
block|{
name|Matcher
argument_list|<
name|String
argument_list|>
name|highlightedMatcher
init|=
name|Matchers
operator|.
name|either
argument_list|(
name|containsString
argument_list|(
literal|"<em>highlight words together</em>"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|containsString
argument_list|(
literal|"<em>highlight</em><em>words</em><em>together</em>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|highlighterType
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// Try with a bool query
name|phrase
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|search
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|terms
argument_list|)
operator|.
name|should
argument_list|(
name|phrase
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|highlightedMatcher
argument_list|)
expr_stmt|;
name|phrase
operator|.
name|boost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Try with a boosting query
name|response
operator|=
name|search
operator|.
name|setQuery
argument_list|(
name|boostingQuery
argument_list|(
name|phrase
argument_list|,
name|terms
argument_list|)
operator|.
name|boost
argument_list|(
name|boost
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|highlightedMatcher
argument_list|)
expr_stmt|;
comment|// Try with a boosting query using a negative boost
name|response
operator|=
name|search
operator|.
name|setQuery
argument_list|(
name|boostingQuery
argument_list|(
name|phrase
argument_list|,
name|terms
argument_list|)
operator|.
name|boost
argument_list|(
literal|1
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|1
operator|/
name|boost
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|highlightedMatcher
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoFieldHighlightingWithDifferentHighlighters
specifier|public
name|void
name|testGeoFieldHighlightingWithDifferentHighlighters
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check that we do not get an exception for geo_point fields in case someone tries to highlight
comment|// it accidentially with a wildcard
comment|// see https://github.com/elastic/elasticsearch/issues/17537
name|XContentBuilder
name|mappings
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"geo_point"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_point"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets_payloads"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"Arbitrary text field which will should not cause a failure"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|String
name|highlighterType
init|=
name|randomFrom
argument_list|(
literal|"plain"
argument_list|,
literal|"fvh"
argument_list|,
literal|"postings"
argument_list|,
literal|"unified"
argument_list|)
decl_stmt|;
name|QueryBuilder
name|query
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|geoBoundingBoxQuery
argument_list|(
literal|"geo_point"
argument_list|)
operator|.
name|setCorners
argument_list|(
literal|61.10078883158897
argument_list|,
operator|-
literal|170.15625
argument_list|,
operator|-
literal|64.92354174306496
argument_list|,
literal|118.47656249999999
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"failure"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSource
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"*"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|highlighterType
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoFieldHighlightingWhenQueryGetsRewritten
specifier|public
name|void
name|testGeoFieldHighlightingWhenQueryGetsRewritten
parameter_list|()
throws|throws
name|IOException
block|{
comment|// same as above but in this example the query gets rewritten during highlighting
comment|// see https://github.com/elastic/elasticsearch/issues/17537#issuecomment-244939633
name|XContentBuilder
name|mappings
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|startObject
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"loc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_point"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"jd"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"jobs"
argument_list|,
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"jobs"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"jd"
argument_list|,
literal|"some à¤à¤µà¤¶à¥à¤¯à¤à¤¤à¤¾ à¤¹à¥- à¤à¤°à¥à¤¯ à¤¸à¤®à¤¾à¤ à¤à¤¨à¤¾à¤¥à¤¾à¤²à¤¯, 68 à¤¸à¤¿à¤µà¤¿à¤² à¤²à¤¾à¤à¤¨à¥à¤¸, à¤¬à¤°à¥à¤²à¥ à¤à¥ à¤à¤ à¤ªà¥à¤°à¥à¤·"
operator|+
literal|" à¤°à¤¸ text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"loc"
argument_list|,
literal|"12.934059,77.610741"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|QueryBuilder
name|query
init|=
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|filter
argument_list|(
name|QueryBuilders
operator|.
name|geoBoundingBoxQuery
argument_list|(
literal|"loc"
argument_list|)
operator|.
name|setCorners
argument_list|(
operator|new
name|GeoPoint
argument_list|(
literal|48.934059
argument_list|,
literal|41.610741
argument_list|)
argument_list|,
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|23.065941
argument_list|,
literal|113.610741
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSource
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|field
argument_list|(
literal|"jd"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeywordFieldHighlighting
specifier|public
name|void
name|testKeywordFieldHighlighting
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check that keyword highlighting works
name|XContentBuilder
name|mappings
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"keyword_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mappings
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"keyword_field"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSource
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"keyword_field"
argument_list|,
literal|"some text"
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"keyword_field"
argument_list|)
operator|.
name|getFragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>some text</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testACopyFieldWithNestedQuery
specifier|public
name|void
name|testACopyFieldWithNestedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"nested"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"foo_text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"foo_text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mapping
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"brown"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"cow"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|nestedQuery
argument_list|(
literal|"foo"
argument_list|,
name|matchQuery
argument_list|(
literal|"foo.text"
argument_list|,
literal|"brown cow"
argument_list|)
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"foo_text"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
argument_list|)
operator|.
name|requireFieldMatch
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HighlightField
name|field
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo_text"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|getFragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|getFragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>brown</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|getFragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>cow</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFunctionScoreQueryHighlight
specifier|public
name|void
name|testFunctionScoreQueryHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"brown"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|QueryBuilders
operator|.
name|prefixQuery
argument_list|(
literal|"text"
argument_list|,
literal|"bro"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|)
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HighlightField
name|field
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|getFragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|getFragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>brown</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFiltersFunctionScoreQueryHighlight
specifier|public
name|void
name|testFiltersFunctionScoreQueryHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"brown"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enable"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
name|filterBuilder
init|=
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"enable"
argument_list|,
literal|"yes"
argument_list|)
argument_list|,
operator|new
name|RandomScoreFunctionBuilder
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|UNIFIED_AND_NULL
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
operator|new
name|FunctionScoreQueryBuilder
argument_list|(
name|QueryBuilders
operator|.
name|prefixQuery
argument_list|(
literal|"text"
argument_list|,
literal|"bro"
argument_list|)
argument_list|,
operator|new
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
index|[]
block|{
name|filterBuilder
block|}
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|)
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HighlightField
name|field
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|getFragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|getFragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>brown</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSynonyms
specifier|public
name|void
name|testSynonyms
parameter_list|()
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.synonym.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.synonym.filter"
argument_list|,
literal|"synonym"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"fast,quick"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=text,term_vector=with_positions_offsets,search_analyzer=synonym,"
operator|+
literal|"analyzer=english,index_options=offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|highlighterType
range|:
name|ALL_TYPES
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting (type="
operator|+
name|highlighterType
operator|+
literal|") and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown fox"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
operator|.
name|highlighterType
argument_list|(
name|highlighterType
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x><x>fox</x> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fast brown fox"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|searchResponse
argument_list|,
literal|0
argument_list|,
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x><x>fox</x> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHighlightQueryRewriteDatesWithNow
specifier|public
name|void
name|testHighlightQueryRewriteDatesWithNow
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"index-1"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"d"
argument_list|,
literal|"type=date"
argument_list|,
literal|"field"
argument_list|,
literal|"type=text,store=true,term_vector=with_positions_offsets"
argument_list|)
operator|.
name|setSettings
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|,
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|DateTime
name|now
init|=
operator|new
name|DateTime
argument_list|(
name|ISOChronology
operator|.
name|getInstanceUTC
argument_list|()
argument_list|)
decl_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index-1"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"d"
argument_list|,
name|now
argument_list|,
literal|"field"
argument_list|,
literal|"hello world"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index-1"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"d"
argument_list|,
name|now
operator|.
name|minusDays
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"field"
argument_list|,
literal|"hello"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index-1"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"d"
argument_list|,
name|now
operator|.
name|minusDays
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|(
literal|"index-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SearchResponse
name|r1
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index-1"
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"d"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
operator|.
name|setTrackScores
argument_list|(
literal|true
argument_list|)
operator|.
name|highlighter
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"d"
argument_list|)
operator|.
name|gte
argument_list|(
literal|"now-12h"
argument_list|)
operator|.
name|lte
argument_list|(
literal|"now"
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|true
argument_list|)
operator|.
name|boost
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"hello"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|r1
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|r1
argument_list|,
literal|0
argument_list|,
literal|"field"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|equalTo
argument_list|(
literal|"<x>hello</x> world"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

