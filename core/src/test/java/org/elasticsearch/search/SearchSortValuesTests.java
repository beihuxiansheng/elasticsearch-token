begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
operator|.
name|checkEqualsAndHashCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_class
DECL|class|SearchSortValuesTests
specifier|public
class|class
name|SearchSortValuesTests
extends|extends
name|ESTestCase
block|{
DECL|method|createTestItem
specifier|public
specifier|static
name|SearchSortValues
name|createTestItem
parameter_list|()
block|{
name|List
argument_list|<
name|Supplier
argument_list|<
name|Object
argument_list|>
argument_list|>
name|valueSuppliers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// this should reflect all values that are allowed to go through the transport layer
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
literal|null
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|randomByte
argument_list|()
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|randomShort
argument_list|()
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|valueSuppliers
operator|.
name|add
argument_list|(
operator|(
operator|)
operator|->
name|frequently
argument_list|()
condition|?
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
else|:
name|randomRealisticUnicodeOfCodepointLength
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Supplier
argument_list|<
name|Object
argument_list|>
name|supplier
init|=
name|randomFrom
argument_list|(
name|valueSuppliers
argument_list|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|SearchSortValues
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchSortValues
name|sortValues
init|=
name|createTestItem
argument_list|()
decl_stmt|;
name|XContentType
name|xcontentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|humanReadable
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|BytesReference
name|originalBytes
init|=
name|toShuffledXContent
argument_list|(
name|sortValues
argument_list|,
name|xcontentType
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|,
name|humanReadable
argument_list|)
decl_stmt|;
name|SearchSortValues
name|parsed
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xcontentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// skip to the elements start array token, fromXContent advances from there if called
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|parsed
operator|=
name|SearchSortValues
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertToXContentEquivalent
argument_list|(
name|originalBytes
argument_list|,
name|toXContent
argument_list|(
name|parsed
argument_list|,
name|xcontentType
argument_list|,
name|humanReadable
argument_list|)
argument_list|,
name|xcontentType
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchSortValues
name|sortValues
init|=
operator|new
name|SearchSortValues
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"foo"
block|,
literal|3.0
block|}
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|sortValues
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"sort\":[1,\"foo\",3.0]}"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test equality and hashCode properties      */
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
block|{
name|checkEqualsAndHashCode
argument_list|(
name|createTestItem
argument_list|()
argument_list|,
name|SearchSortValuesTests
operator|::
name|copy
argument_list|,
name|SearchSortValuesTests
operator|::
name|mutate
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchSortValues
name|sortValues
init|=
name|createTestItem
argument_list|()
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|sortValues
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|SearchSortValues
name|deserializedCopy
init|=
operator|new
name|SearchSortValues
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sortValues
argument_list|,
name|deserializedCopy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortValues
operator|.
name|hashCode
argument_list|()
argument_list|,
name|deserializedCopy
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|sortValues
argument_list|,
name|deserializedCopy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mutate
specifier|private
specifier|static
name|SearchSortValues
name|mutate
parameter_list|(
name|SearchSortValues
name|original
parameter_list|)
block|{
name|Object
index|[]
name|sortValues
init|=
name|original
operator|.
name|sortValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortValues
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|SearchSortValues
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|}
argument_list|)
return|;
block|}
return|return
operator|new
name|SearchSortValues
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sortValues
argument_list|,
name|sortValues
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|copy
specifier|private
specifier|static
name|SearchSortValues
name|copy
parameter_list|(
name|SearchSortValues
name|original
parameter_list|)
block|{
return|return
operator|new
name|SearchSortValues
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|original
operator|.
name|sortValues
argument_list|()
argument_list|,
name|original
operator|.
name|sortValues
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

