begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|BoolQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|SimpleQueryStringFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|boolQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|simpleQueryStringQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|StreamsUtils
operator|.
name|copyToStringFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFirstHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchHits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|hasId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Tests for the {@code simple_query_string} query  */
end_comment

begin_class
DECL|class|SimpleQueryStringIT
specifier|public
class|class
name|SimpleQueryStringIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
comment|// uses index.version.created
block|}
DECL|method|testSimpleQueryString
specifier|public
name|void
name|testSimpleQueryString
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"quux baz eggplant"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"quux baz spaghetti"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"otherbody"
argument_list|,
literal|"spaghetti"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// Tests boost value setting. In this case doc 1 should always be ranked above the other
comment|// two matches.
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"\"foo bar\""
argument_list|)
operator|.
name|boost
argument_list|(
literal|10.0f
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"body"
argument_list|,
literal|"eggplant"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"\"quux baz\" +(eggplant | spaghetti)"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"eggplants"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"snowball"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"spaghetti"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|1000.0f
argument_list|)
operator|.
name|field
argument_list|(
literal|"otherbody"
argument_list|,
literal|2.0f
argument_list|)
operator|.
name|queryName
argument_list|(
literal|"myquery"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getMatchedQueries
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"myquery"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"spaghetti"
argument_list|)
operator|.
name|field
argument_list|(
literal|"*body"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryStringMinimumShouldMatch
specifier|public
name|void
name|testSimpleQueryStringMinimumShouldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo baz bar"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> query 1"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> query 2"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body2"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
comment|// test case from #13884
name|logger
operator|.
name|info
argument_list|(
literal|"--> query 3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body3"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"-50%"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> query 4"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body2"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"70%"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body2"
argument_list|,
literal|"foo"
argument_list|,
literal|"other"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body2"
argument_list|,
literal|"bar"
argument_list|,
literal|"other"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body2"
argument_list|,
literal|"foo bar"
argument_list|,
literal|"other"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body2"
argument_list|,
literal|"foo baz bar"
argument_list|,
literal|"other"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> query 5"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body2"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"7"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> query 6"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"6"
argument_list|,
literal|"7"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> query 7"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"other"
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"70%"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"6"
argument_list|,
literal|"7"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedFieldSimpleQueryString
specifier|public
name|void
name|testNestedFieldSimpleQueryString
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"sub"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
comment|// sub
operator|.
name|endObject
argument_list|()
comment|// fields
operator|.
name|endObject
argument_list|()
comment|// body
operator|.
name|endObject
argument_list|()
comment|// properties
operator|.
name|endObject
argument_list|()
comment|// type1
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo bar baz"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body.sub"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar baz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body.sub"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryStringFlags
specifier|public
name|void
name|testSimpleQueryStringFlags
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"quux baz eggplant"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"quux baz spaghetti"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"otherbody"
argument_list|,
literal|"spaghetti"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|flags
argument_list|(
name|SimpleQueryStringFlag
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo | bar"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|flags
argument_list|(
name|SimpleQueryStringFlag
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo | bar"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|flags
argument_list|(
name|SimpleQueryStringFlag
operator|.
name|NONE
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"baz | egg*"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|flags
argument_list|(
name|SimpleQueryStringFlag
operator|.
name|NONE
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSource
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|simpleQueryStringQuery
argument_list|(
literal|"foo|bar"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|flags
argument_list|(
name|SimpleQueryStringFlag
operator|.
name|NONE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"quuz~1 + egg*"
argument_list|)
operator|.
name|flags
argument_list|(
name|SimpleQueryStringFlag
operator|.
name|WHITESPACE
argument_list|,
name|SimpleQueryStringFlag
operator|.
name|AND
argument_list|,
name|SimpleQueryStringFlag
operator|.
name|FUZZY
argument_list|,
name|SimpleQueryStringFlag
operator|.
name|PREFIX
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryStringLenient
specifier|public
name|void
name|testSimpleQueryStringLenient
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type1"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|// Issue #7967
DECL|method|testLenientFlagBeingTooLenient
specifier|public
name|void
name|testLenientFlagBeingTooLenient
parameter_list|()
throws|throws
name|Exception
block|{
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
literal|1
argument_list|,
literal|"body"
argument_list|,
literal|"foo bar baz"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
literal|2
argument_list|,
literal|"body"
argument_list|,
literal|"eggplant spaghetti lasagna"
argument_list|)
argument_list|)
expr_stmt|;
name|BoolQueryBuilder
name|q
init|=
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|field
argument_list|(
literal|"num"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|resp
argument_list|)
expr_stmt|;
comment|// the bug is that this would be parsed into basically a match_all
comment|// query and this would match both documents
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|resp
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryStringAnalyzeWildcard
specifier|public
name|void
name|testSimpleQueryStringAnalyzeWildcard
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"german"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|CreateIndexRequestBuilder
name|mappingRequest
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|mappingRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"location"
argument_list|,
literal|"KÃ¶ln"
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"KÃ¶ln*"
argument_list|)
operator|.
name|field
argument_list|(
literal|"location"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryStringUsesFieldAnalyzer
specifier|public
name|void
name|testSimpleQueryStringUsesFieldAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|,
literal|"bar"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|234
argument_list|,
literal|"bar"
argument_list|,
literal|"bcd"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"123"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleQueryStringOnIndexMetaField
specifier|public
name|void
name|testSimpleQueryStringOnIndexMetaField
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|,
literal|"bar"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|234
argument_list|,
literal|"bar"
argument_list|,
literal|"bcd"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"_index"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptySimpleQueryStringWithAnalysis
specifier|public
name|void
name|testEmptySimpleQueryStringWithAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
comment|// https://github.com/elastic/elasticsearch/issues/18202
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"stop"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|CreateIndexRequestBuilder
name|mappingRequest
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|mappingRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"Some Text"
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"the*"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicAllQuery
specifier|public
name|void
name|testBasicAllQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"foo bar baz"
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f2"
argument_list|,
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f3"
argument_list|,
literal|"foo bar baz"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foa"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithDate
specifier|public
name|void
name|testWithDate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"foo"
argument_list|,
literal|"f_date"
argument_list|,
literal|"2015/09/02"
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"bar"
argument_list|,
literal|"f_date"
argument_list|,
literal|"2015/09/01"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"\"2015/09/02\""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"bar \"2015/09/02\""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"\"2015/09/02\" \"2015/09/01\""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithLotsOfTypes
specifier|public
name|void
name|testWithLotsOfTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"foo"
argument_list|,
literal|"f_date"
argument_list|,
literal|"2015/09/02"
argument_list|,
literal|"f_float"
argument_list|,
literal|"1.7"
argument_list|,
literal|"f_ip"
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"bar"
argument_list|,
literal|"f_date"
argument_list|,
literal|"2015/09/01"
argument_list|,
literal|"f_float"
argument_list|,
literal|"1.8"
argument_list|,
literal|"f_ip"
argument_list|,
literal|"127.0.0.2"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"\"2015/09/02\""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"127.0.0.2 \"2015/09/02\""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"127.0.0.1 1.8"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocWithAllTypes
specifier|public
name|void
name|testDocWithAllTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|docBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-example-document.json"
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|docBody
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"Baz"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"sbaz"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"19"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// nested doesn't match because it's hidden
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"1476383971"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// bool doesn't match
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"7"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"23"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"1293"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"42"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"1.7"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"1.5"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"12.23"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// binary doesn't match
comment|// suggest doesn't match
comment|// geo_point doesn't match
comment|// geo_shape doesn't match
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo Bar 19 127.0.0.1"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeywordWithWhitespace
specifier|public
name|void
name|testKeywordWithWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f2"
argument_list|,
literal|"Foo Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"foo bar"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicitAllFieldsRequested
specifier|public
name|void
name|testExplicitAllFieldsRequested
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index-with-all.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
comment|// .setSettings(Settings.builder().put("index.version.created", Version.V_5_0_0.id)).get();
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"foo"
argument_list|,
literal|"f2"
argument_list|,
literal|"eggplant"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo eggplent"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|resp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo eggplent"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|useAllFields
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"blah"
argument_list|)
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|)
operator|.
name|useAllFields
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"cannot use [all_fields] parameter in conjunction with [fields]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|LuceneTestCase
operator|.
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"currently can't perform phrase queries on fields that don't support positions"
argument_list|)
DECL|method|testPhraseQueryOnFieldWithNoPositions
specifier|public
name|void
name|testPhraseQueryOnFieldWithNoPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"foo bar"
argument_list|,
literal|"f4"
argument_list|,
literal|"eggplant parmesan"
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f1"
argument_list|,
literal|"foo bar"
argument_list|,
literal|"f4"
argument_list|,
literal|"chicken parmesan"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"\"eggplant parmesan\""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHits
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|resp
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllFieldsWithSpecifiedLeniency
specifier|public
name|void
name|testAllFieldsWithSpecifiedLeniency
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|indexBody
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/query/all-query-index.json"
argument_list|)
decl_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|indexBody
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|simpleQueryStringQuery
argument_list|(
literal|"foo123"
argument_list|)
operator|.
name|lenient
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"NumberFormatException[For input string: \"foo123\"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHits
specifier|private
name|void
name|assertHits
parameter_list|(
name|SearchHits
name|hits
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|ids
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hitIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|hits
operator|.
name|getHits
argument_list|()
control|)
block|{
name|hitIds
operator|.
name|add
argument_list|(
name|hit
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|hitIds
argument_list|,
name|containsInAnyOrder
argument_list|(
name|ids
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

