begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MultiMatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|MatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|boolQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|disMaxQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchPhrasePrefixQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchPhraseQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|multiMatchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFirstHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchHits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSecondHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|hasId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_class
DECL|class|MultiMatchQueryIT
specifier|public
class|class
name|MultiMatchQueryIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.perfect_match.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.perfect_match.tokenizer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.perfect_match.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.category.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.category.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.category.filter"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|createMapping
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"theone"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"full_name"
argument_list|,
literal|"Captain America"
argument_list|,
literal|"first_name"
argument_list|,
literal|"Captain"
argument_list|,
literal|"last_name"
argument_list|,
literal|"America"
argument_list|,
literal|"category"
argument_list|,
literal|"marvel hero"
argument_list|,
literal|"skill"
argument_list|,
literal|15
argument_list|,
literal|"int-field"
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"theother"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"full_name"
argument_list|,
literal|"marvel hero"
argument_list|,
literal|"first_name"
argument_list|,
literal|"marvel"
argument_list|,
literal|"last_name"
argument_list|,
literal|"hero"
argument_list|,
literal|"category"
argument_list|,
literal|"bogus"
argument_list|,
literal|"skill"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"ultimate1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"full_name"
argument_list|,
literal|"Alpha the Ultimate Mutant"
argument_list|,
literal|"first_name"
argument_list|,
literal|"Alpha the"
argument_list|,
literal|"last_name"
argument_list|,
literal|"Ultimate Mutant"
argument_list|,
literal|"category"
argument_list|,
literal|"marvel hero"
argument_list|,
literal|"skill"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"ultimate2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"full_name"
argument_list|,
literal|"Man the Ultimate Ninja"
argument_list|,
literal|"first_name"
argument_list|,
literal|"Man the Ultimate"
argument_list|,
literal|"last_name"
argument_list|,
literal|"Ninja"
argument_list|,
literal|"category"
argument_list|,
literal|"marvel hero"
argument_list|,
literal|"skill"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"anotherhero"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"full_name"
argument_list|,
literal|"ultimate"
argument_list|,
literal|"first_name"
argument_list|,
literal|"wolferine"
argument_list|,
literal|"last_name"
argument_list|,
literal|""
argument_list|,
literal|"category"
argument_list|,
literal|"marvel hero"
argument_list|,
literal|"skill"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|firstNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|fill
argument_list|(
name|firstNames
argument_list|,
literal|"Captain"
argument_list|,
name|between
argument_list|(
literal|15
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|firstNames
argument_list|,
literal|"Ultimate"
argument_list|,
name|between
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|fillRandom
argument_list|(
name|firstNames
argument_list|,
name|between
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lastNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|fill
argument_list|(
name|lastNames
argument_list|,
literal|"Captain"
argument_list|,
name|between
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|fillRandom
argument_list|(
name|lastNames
argument_list|,
name|between
argument_list|(
literal|30
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|first
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|firstNames
argument_list|)
decl_stmt|;
name|String
name|last
init|=
name|randomPickExcept
argument_list|(
name|lastNames
argument_list|,
name|first
argument_list|)
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"full_name"
argument_list|,
name|first
operator|+
literal|" "
operator|+
name|last
argument_list|,
literal|"first_name"
argument_list|,
name|first
argument_list|,
literal|"last_name"
argument_list|,
name|last
argument_list|,
literal|"category"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"marvel hero"
else|:
literal|"bogus"
argument_list|,
literal|"skill"
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|builders
argument_list|)
expr_stmt|;
block|}
DECL|method|createMapping
specifier|private
name|XContentBuilder
name|createMapping
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"full_name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"full_name_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"perfect_match"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"category"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"first_name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"norms"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"first_name_phrase"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"last_name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"norms"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"copy_to"
argument_list|,
literal|"last_name_phrase"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|testDefaults
specifier|public
name|void
name|testDefaults
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|MatchQuery
operator|.
name|Type
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
name|MatchQueryBuilder
operator|.
name|DEFAULT_TYPE
else|:
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|topNIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"theone"
argument_list|,
literal|"theother"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|topNIds
operator|.
name|remove
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// very likely that we hit a random doc that has the same score so orders are random since
comment|// the doc id is the tie-breaker
block|}
name|assertThat
argument_list|(
name|topNIds
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|anyOf
argument_list|(
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhraseType
specifier|public
name|void
name|testPhraseType
parameter_list|()
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"Man the Ultimate"
argument_list|,
literal|"full_name_phrase"
argument_list|,
literal|"first_name_phrase"
argument_list|,
literal|"last_name_phrase"
argument_list|,
literal|"category_phrase"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"ultimate2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"Captain"
argument_list|,
literal|"full_name_phrase"
argument_list|,
literal|"first_name_phrase"
argument_list|,
literal|"last_name_phrase"
argument_list|,
literal|"category_phrase"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"the Ul"
argument_list|,
literal|"full_name_phrase"
argument_list|,
literal|"first_name_phrase"
argument_list|,
literal|"last_name_phrase"
argument_list|,
literal|"category_phrase"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE_PREFIX
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"ultimate2"
argument_list|,
literal|"ultimate1"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleField
specifier|public
name|void
name|testSingleField
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"15"
argument_list|,
literal|"skill"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"15"
argument_list|,
literal|"skill"
argument_list|,
literal|"int-field"
argument_list|)
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|fields
init|=
block|{
literal|"full_name"
block|,
literal|"first_name"
block|,
literal|"last_name"
block|,
literal|"last_name_phrase"
block|,
literal|"first_name_phrase"
block|,
literal|"category_phrase"
block|,
literal|"category"
block|}
decl_stmt|;
name|String
index|[]
name|query
init|=
block|{
literal|"marvel"
block|,
literal|"hero"
block|,
literal|"captain"
block|,
literal|"america"
block|,
literal|"15"
block|,
literal|"17"
block|,
literal|"1"
block|,
literal|"5"
block|,
literal|"ultimate"
block|,
literal|"Man"
block|,
literal|"marvel"
block|,
literal|"wolferine"
block|,
literal|"ninja"
block|}
decl_stmt|;
comment|// check if it's equivalent to a match query.
name|int
name|numIters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|int
name|numTerms
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|query
operator|.
name|length
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTerms
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|query
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|MultiMatchQueryBuilder
name|multiMatchQueryBuilder
init|=
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|multiMatchResp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
comment|// _uid sort field is a tie, in case hits have the same score,
comment|// the hits will be sorted the same consistently
operator|.
name|addSort
argument_list|(
literal|"_score"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|setQuery
argument_list|(
name|multiMatchQueryBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MatchQueryBuilder
name|matchQueryBuilder
init|=
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
name|field
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getType
argument_list|(
name|multiMatchQueryBuilder
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|matchQueryBuilder
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|getType
argument_list|(
name|multiMatchQueryBuilder
argument_list|)
operator|.
name|matchQueryType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|matchResp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
comment|// _uid tie sort
operator|.
name|addSort
argument_list|(
literal|"_score"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQueryBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"field: "
operator|+
name|field
operator|+
literal|" query: "
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|multiMatchResp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|matchResp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHits
name|hits
init|=
name|multiMatchResp
operator|.
name|getHits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|hits
operator|.
name|getHits
argument_list|()
index|[
name|j
index|]
operator|.
name|score
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|matchResp
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
name|j
index|]
operator|.
name|score
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|getHits
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|matchResp
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCutoffFreq
specifier|public
name|void
name|testCutoffFreq
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|long
name|numDocs
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
name|MatchQuery
operator|.
name|Type
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
name|MatchQueryBuilder
operator|.
name|DEFAULT_TYPE
else|:
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
decl_stmt|;
name|Float
name|cutoffFrequency
init|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|numDocs
operator|*
literal|1.f
operator|/
name|between
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|)
else|:
literal|1.f
operator|/
name|between
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
name|cutoffFrequency
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|topNIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"theone"
argument_list|,
literal|"theother"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|topNIds
operator|.
name|remove
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// very likely that we hit a random doc that has the same score so orders are random since
comment|// the doc id is the tie-breaker
block|}
name|assertThat
argument_list|(
name|topNIds
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cutoffFrequency
operator|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|numDocs
operator|*
literal|1.f
operator|/
name|between
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|)
else|:
literal|1.f
operator|/
name|between
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
name|cutoffFrequency
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|anyOf
argument_list|(
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|anyOf
argument_list|(
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"common terms expected to be a way smaller result set"
argument_list|,
name|size
argument_list|,
name|lessThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cutoffFrequency
operator|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|numDocs
operator|*
literal|1.f
operator|/
name|between
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|)
else|:
literal|1.f
operator|/
name|between
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
name|cutoffFrequency
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
name|cutoffFrequency
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
name|cutoffFrequency
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
name|cutoffFrequency
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquivalence
specifier|public
name|void
name|testEquivalence
parameter_list|()
block|{
specifier|final
name|int
name|numDocs
init|=
operator|(
name|int
operator|)
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
name|int
name|numIters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
block|{
name|MatchQuery
operator|.
name|Type
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
name|MatchQueryBuilder
operator|.
name|DEFAULT_TYPE
else|:
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
decl_stmt|;
name|MultiMatchQueryBuilder
name|multiMatchQueryBuilder
init|=
name|randomBoolean
argument_list|()
condition|?
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
else|:
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"*_name"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"category"
else|:
literal|"categ*"
argument_list|)
decl_stmt|;
name|SearchResponse
name|left
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQueryBuilder
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|SearchResponse
name|right
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|disMaxQuery
argument_list|()
operator|.
name|add
argument_list|(
name|matchQuery
argument_list|(
literal|"full_name"
argument_list|,
literal|"marvel hero captain america"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|matchQuery
argument_list|(
literal|"first_name"
argument_list|,
literal|"marvel hero captain america"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|matchQuery
argument_list|(
literal|"last_name"
argument_list|,
literal|"marvel hero captain america"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|matchQuery
argument_list|(
literal|"category"
argument_list|,
literal|"marvel hero captain america"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquivalent
argument_list|(
literal|"marvel hero captain america"
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|{
name|MatchQuery
operator|.
name|Type
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
name|MatchQueryBuilder
operator|.
name|DEFAULT_TYPE
else|:
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
decl_stmt|;
name|String
name|minShouldMatch
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
literal|""
operator|+
name|between
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Operator
name|op
init|=
name|randomBoolean
argument_list|()
condition|?
name|Operator
operator|.
name|AND
else|:
name|Operator
operator|.
name|OR
decl_stmt|;
name|MultiMatchQueryBuilder
name|multiMatchQueryBuilder
init|=
name|randomBoolean
argument_list|()
condition|?
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
else|:
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"*_name"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"category"
else|:
literal|"categ*"
argument_list|)
decl_stmt|;
name|SearchResponse
name|left
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQueryBuilder
operator|.
name|operator
argument_list|(
name|op
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|SearchResponse
name|right
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|minimumShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
operator|.
name|should
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|termQuery
argument_list|(
literal|"full_name"
argument_list|,
literal|"captain america"
argument_list|)
else|:
name|matchQuery
argument_list|(
literal|"full_name"
argument_list|,
literal|"captain america"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchQuery
argument_list|(
literal|"first_name"
argument_list|,
literal|"captain america"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchQuery
argument_list|(
literal|"last_name"
argument_list|,
literal|"captain america"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchQuery
argument_list|(
literal|"category"
argument_list|,
literal|"captain america"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquivalent
argument_list|(
literal|"captain america"
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|minShouldMatch
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
literal|""
operator|+
name|between
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Operator
name|op
init|=
name|randomBoolean
argument_list|()
condition|?
name|Operator
operator|.
name|AND
else|:
name|Operator
operator|.
name|OR
decl_stmt|;
name|SearchResponse
name|left
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"capta"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE_PREFIX
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|SearchResponse
name|right
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|minimumShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"full_name"
argument_list|,
literal|"capta"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"first_name"
argument_list|,
literal|"capta"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"last_name"
argument_list|,
literal|"capta"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"category"
argument_list|,
literal|"capta"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquivalent
argument_list|(
literal|"capta"
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|minShouldMatch
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
literal|""
operator|+
name|between
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Operator
name|op
init|=
name|randomBoolean
argument_list|()
condition|?
name|Operator
operator|.
name|AND
else|:
name|Operator
operator|.
name|OR
decl_stmt|;
name|SearchResponse
name|left
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|left
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|left
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|tieBreaker
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|SearchResponse
name|right
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|scoreSort
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_uid"
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|minimumShouldMatch
argument_list|(
name|minShouldMatch
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"full_name"
argument_list|,
literal|"captain america"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"first_name"
argument_list|,
literal|"captain america"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"last_name"
argument_list|,
literal|"captain america"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"category"
argument_list|,
literal|"captain america"
argument_list|)
operator|.
name|operator
argument_list|(
name|op
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquivalent
argument_list|(
literal|"captain america"
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCrossFieldMode
specifier|public
name|void
name|testCrossFieldMode
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"marvel hero"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america 15"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america 15"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|,
literal|"skill"
argument_list|,
literal|"int-field"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america 15"
argument_list|,
literal|"skill"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|,
literal|"int-field"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america 15"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"15"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"25 15"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"25 15"
argument_list|,
literal|"int-field"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"25 15"
argument_list|,
literal|"first_name"
argument_list|,
literal|"int-field"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"25 15"
argument_list|,
literal|"int-field"
argument_list|,
literal|"skill"
argument_list|,
literal|"first_name"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"25 15"
argument_list|,
literal|"int-field"
argument_list|,
literal|"first_name"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america marvel hero"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|0.1f
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|anyOf
argument_list|(
name|hasId
argument_list|(
literal|"theother"
argument_list|)
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|numResults
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america marvel hero"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|numResults
argument_list|,
name|lessThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test group based on analyzer -- all fields are grouped into a cross field search
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america marvel hero"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"category"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
comment|// counter example
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america marvel hero"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
else|:
name|MultiMatchQueryBuilder
operator|.
name|DEFAULT_TYPE
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// counter example
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"captain america marvel hero"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
else|:
name|MultiMatchQueryBuilder
operator|.
name|DEFAULT_TYPE
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// test if boosts work
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"the ultimate"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|field
argument_list|(
literal|"last_name"
argument_list|,
literal|10
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"ultimate1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// has ultimate in the last_name and that is boosted
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"ultimate2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// since we try to treat the matching fields as one field scores are very similar but we have a small bias towards the
comment|// more frequent field that acts as a tie-breaker internally
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"the ultimate"
argument_list|,
literal|"full_name"
argument_list|,
literal|"first_name"
argument_list|,
literal|"last_name"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"ultimate2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"ultimate1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test group based on numeric fields
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"15"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"15"
argument_list|,
literal|"skill"
argument_list|,
literal|"first_name"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two numeric fields together caused trouble at one point!
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"15"
argument_list|,
literal|"int-field"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"15"
argument_list|,
literal|"int-field"
argument_list|,
literal|"first_name"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"theone"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"alpha 15"
argument_list|,
literal|"first_name"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"ultimate1"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * Doesn't find theone because "alpha 15" isn't a number and we don't          * break on spaces.          */
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Lenient wasn't always properly lenient with two numeric fields
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|randomizeType
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"alpha 15"
argument_list|,
literal|"int-field"
argument_list|,
literal|"first_name"
argument_list|,
literal|"skill"
argument_list|)
operator|.
name|type
argument_list|(
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|CROSS_FIELDS
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"ultimate1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEquivalent
specifier|private
specifier|static
specifier|final
name|void
name|assertEquivalent
parameter_list|(
name|String
name|query
parameter_list|,
name|SearchResponse
name|left
parameter_list|,
name|SearchResponse
name|right
parameter_list|)
block|{
name|assertNoFailures
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|SearchHits
name|leftHits
init|=
name|left
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHits
name|rightHits
init|=
name|right
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHit
index|[]
name|hits
init|=
name|leftHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHit
index|[]
name|rHits
init|=
name|rightHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
literal|"query: "
operator|+
name|query
operator|+
literal|" hit: "
operator|+
name|i
argument_list|,
operator|(
name|double
operator|)
name|hits
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|rHits
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
literal|0.00001d
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hits
index|[
name|i
index|]
operator|.
name|getScore
argument_list|()
operator|==
name|hits
index|[
name|hits
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getScore
argument_list|()
condition|)
block|{
return|return;
comment|// we need to cut off here since this is the tail of the queue and we might not have fetched enough docs
block|}
name|assertThat
argument_list|(
literal|"query: "
operator|+
name|query
argument_list|,
name|hits
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rHits
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fill
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|fill
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|String
name|value
parameter_list|,
name|int
name|times
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|fillRandom
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fillRandom
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|int
name|times
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|randomPickExcept
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|randomPickExcept
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|fromList
parameter_list|,
name|T
name|butNot
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|T
name|t
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|fromList
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|butNot
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
name|t
return|;
block|}
block|}
DECL|method|randomizeType
specifier|public
name|MultiMatchQueryBuilder
name|randomizeType
parameter_list|(
name|MultiMatchQueryBuilder
name|builder
parameter_list|)
block|{
try|try
block|{
name|MultiMatchQueryBuilder
operator|.
name|Type
name|type
init|=
name|getType
argument_list|(
name|builder
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|builder
return|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|MultiMatchQueryBuilder
operator|.
name|Type
operator|.
name|BEST_FIELDS
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|oType
init|=
name|type
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BEST_FIELDS
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|oType
operator|=
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
expr_stmt|;
block|}
break|break;
case|case
name|MOST_FIELDS
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|oType
operator|=
name|MatchQuery
operator|.
name|Type
operator|.
name|BOOLEAN
expr_stmt|;
block|}
break|break;
case|case
name|CROSS_FIELDS
case|:
break|break;
case|case
name|PHRASE
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|oType
operator|=
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE
expr_stmt|;
block|}
break|break;
case|case
name|PHRASE_PREFIX
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|oType
operator|=
name|MatchQuery
operator|.
name|Type
operator|.
name|PHRASE_PREFIX
expr_stmt|;
block|}
break|break;
block|}
name|builder
operator|.
name|type
argument_list|(
name|oType
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|getType
specifier|private
name|MultiMatchQueryBuilder
operator|.
name|Type
name|getType
parameter_list|(
name|MultiMatchQueryBuilder
name|builder
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
return|return
name|builder
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
end_class

end_unit

