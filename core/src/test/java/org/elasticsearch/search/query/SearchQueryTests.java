begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchQueryBuilder
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Slow
DECL|class|SearchQueryTests
specifier|public
class|class
name|SearchQueryTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Override
DECL|method|maximumNumberOfShards
specifier|protected
name|int
name|maximumNumberOfShards
parameter_list|()
block|{
return|return
literal|7
return|;
block|}
annotation|@
name|Override
DECL|method|maximumNumberOfReplicas
specifier|protected
name|int
name|maximumNumberOfReplicas
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|2
argument_list|,
name|cluster
argument_list|()
operator|.
name|numDataNodes
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testOmitNormsOnAll
specifier|public
name|void
name|testOmitNormsOnAll
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"omit_norms"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// only one shard otherwise IDF might be different for comparing scores
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox jumps"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|SearchHit
index|[]
name|hits
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|score
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|equalTo
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
argument_list|()
operator|.
name|wipeIndices
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox jumps"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|hits
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|score
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|greaterThan
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #3952
DECL|method|testEmptyQueryString
specifier|public
name|void
name|testEmptyQueryString
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox jumps"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
comment|// return no docs
block|}
annotation|@
name|Test
comment|// see https://github.com/elasticsearch/elasticsearch/issues/3177
DECL|method|testIssue3177
specifier|public
name|void
name|testIssue3177
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|waitForRelocation
argument_list|()
expr_stmt|;
name|optimize
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|andQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|notQuery
argument_list|(
name|andQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value3"
argument_list|)
argument_list|)
argument_list|,
name|notQuery
argument_list|(
name|andQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|notQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|passQueryAsStringTest
specifier|public
name|void
name|passQueryAsStringTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1_1"
argument_list|,
literal|"field2"
argument_list|,
literal|"value2_1"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
literal|"{ \"term\" : { \"field1\" : \"value1_1\" }}"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexOptions
specifier|public
name|void
name|testIndexOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,index_options=docs"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"quick brown fox"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick lazy huge brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"quick lazy huge brown fox"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|slop
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|slop
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|containsString
argument_list|(
literal|"field \"field1\" was indexed without position data; cannot run PhraseQuery"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #3521
DECL|method|testConstantScoreQuery
specifier|public
name|void
name|testConstantScoreQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"quick brown fox"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick lazy huge brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"quick lazy huge brown fox"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|searchHit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
control|)
block|{
name|assertSearchHit
argument_list|(
name|searchHit
argument_list|,
name|hasScore
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|must
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|boost
argument_list|(
literal|1.0f
operator|+
name|getRandom
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasScore
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|score
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|boost
argument_list|(
literal|1.0f
operator|+
name|getRandom
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasScore
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|score
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|must
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|boost
argument_list|(
literal|1.0f
operator|+
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|0.0f
else|:
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasScore
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|score
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|searchHit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
control|)
block|{
name|assertSearchHit
argument_list|(
name|searchHit
argument_list|,
name|hasScore
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|num
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|builders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|num
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|createIndex
argument_list|(
literal|"test_1"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|int
name|queryRounds
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryRounds
condition|;
name|i
operator|++
control|)
block|{
name|MatchQueryBuilder
name|matchQuery
init|=
name|matchQuery
argument_list|(
literal|"f"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test_1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|)
operator|.
name|setSize
argument_list|(
name|num
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|totalHits
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
name|SearchHits
name|hits
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|searchHit
range|:
name|hits
control|)
block|{
name|assertSearchHit
argument_list|(
name|searchHit
argument_list|,
name|hasScore
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test_1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|must
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|)
operator|.
name|boost
argument_list|(
literal|1.0f
operator|+
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|0.0f
else|:
name|random
operator|.
name|nextFloat
argument_list|()
operator|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|num
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|hits
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalHits
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalHits
operator|>
literal|1
condition|)
block|{
name|float
name|expected
init|=
name|hits
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|searchHit
range|:
name|hits
control|)
block|{
name|assertSearchHit
argument_list|(
name|searchHit
argument_list|,
name|hasScore
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
comment|// see #3521
DECL|method|testAllDocsQueryString
specifier|public
name|void
name|testAllDocsQueryString
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"*:*^10.0"
argument_list|)
operator|.
name|boost
argument_list|(
literal|10.0f
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|must
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQueryOnAllField
specifier|public
name|void
name|testCommonTermsQueryOnAllField
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"message"
argument_list|,
literal|"type=string"
argument_list|,
literal|"comment"
argument_list|,
literal|"type=string,boost=5.0"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"message"
argument_list|,
literal|"test message"
argument_list|,
literal|"comment"
argument_list|,
literal|"whatever"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"message"
argument_list|,
literal|"hello world"
argument_list|,
literal|"comment"
argument_list|,
literal|"test comment"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery
specifier|public
name|void
name|testCommonTermsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,analyzer=whitespace"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick lazy huge brown pidgin"
argument_list|,
literal|"field2"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|lowFreqOperator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|lowFreqOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the huge fox"
argument_list|)
operator|.
name|lowFreqMinimumShouldMatch
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the lazy fox brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|1
argument_list|)
operator|.
name|highFreqMinimumShouldMatch
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the lazy fox brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|1
argument_list|)
operator|.
name|highFreqMinimumShouldMatch
argument_list|(
literal|"4"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
literal|"{ \"common\" : { \"field1\" : { \"query\" : \"the lazy fox brown\", \"cutoff_frequency\" : 1, \"minimum_should_match\" : { \"high_freq\" : 4 } } } }"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the lazy fox brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"stop"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
comment|// stop drops "the" since its a stopword
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try the same with match query
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"stop"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
comment|// stop drops "the" since its a stopword
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try the same with multi match query
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"the quick brown"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// better score due to different query stats
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQueryStackedTokens
specifier|public
name|void
name|testCommonTermsQueryStackedTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.syns.type"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.syns.synonyms"
argument_list|,
literal|"quick,fast"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.syns.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.syns.filter"
argument_list|,
literal|"syns"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,analyzer=syns"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=string,analyzer=syns"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick lazy huge brown pidgin"
argument_list|,
literal|"field2"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|lowFreqOperator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|lowFreqOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast huge fox"
argument_list|)
operator|.
name|lowFreqMinimumShouldMatch
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast lazy fox brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|1
argument_list|)
operator|.
name|highFreqMinimumShouldMatch
argument_list|(
literal|"5"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast lazy fox brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|1
argument_list|)
operator|.
name|highFreqMinimumShouldMatch
argument_list|(
literal|"6"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
literal|"{ \"common\" : { \"field1\" : { \"query\" : \"the fast lazy fox brown\", \"cutoff_frequency\" : 1, \"minimum_should_match\" : { \"high_freq\" : 6 } } } }"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast lazy fox brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|commonTermsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"stop"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
comment|// stop drops "the" since its a stopword
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try the same with match query
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"stop"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
comment|// stop drops "the" since its a stopword
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the fast brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|minimumShouldMatch
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try the same with multi match query
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"the fast brown"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|3
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// better score due to different query stats
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOmitTermFreqsAndPositions
specifier|public
name|void
name|testOmitTermFreqsAndPositions
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
argument_list|()
operator|.
name|wipeTemplates
argument_list|()
expr_stmt|;
comment|// no randomized template for this test -- we are testing bwc compat and set version explicitly this might cause failures if an unsupported feature
comment|// is added randomly via an index template.
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// backwards compat test!
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,omit_term_freq_and_positions=true"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|(
name|version
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_0_0_RC2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"quick brown fox"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick lazy huge brown fox"
argument_list|,
literal|"field2"
argument_list|,
literal|"quick lazy huge brown fox"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|slop
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|slop
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"SearchPhaseExecutionException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"IllegalStateException[field \"field1\" was indexed without position data; cannot run PhraseQuery"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
argument_list|()
operator|.
name|wipeIndices
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|version
operator|.
name|toString
argument_list|()
argument_list|,
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_0_0_RC2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"'omit_term_freq_and_positions' is not supported anymore - use ['index_options' : 'docs']  instead"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|version
operator|=
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|queryStringAnalyzedWildcard
specifier|public
name|void
name|queryStringAnalyzedWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value_1"
argument_list|,
literal|"field2"
argument_list|,
literal|"value_2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"value*"
argument_list|)
operator|.
name|analyzeWildcard
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"*ue*"
argument_list|)
operator|.
name|analyzeWildcard
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"*ue_1"
argument_list|)
operator|.
name|analyzeWildcard
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"val*e_1"
argument_list|)
operator|.
name|analyzeWildcard
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"v?l*e?1"
argument_list|)
operator|.
name|analyzeWildcard
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowercaseExpandedTerms
specifier|public
name|void
name|testLowercaseExpandedTerms
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value_1"
argument_list|,
literal|"field2"
argument_list|,
literal|"value_2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"VALUE_3~1"
argument_list|)
operator|.
name|lowercaseExpandedTerms
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"VALUE_3~1"
argument_list|)
operator|.
name|lowercaseExpandedTerms
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"ValUE_*"
argument_list|)
operator|.
name|lowercaseExpandedTerms
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"vAl*E_1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"[VALUE_1 TO VALUE_3]"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"[VALUE_1 TO VALUE_3]"
argument_list|)
operator|.
name|lowercaseExpandedTerms
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|//https://github.com/elasticsearch/elasticsearch/issues/3540
DECL|method|testDateRangeInQueryString
specifier|public
name|void
name|testDateRangeInQueryString
parameter_list|()
block|{
comment|//the mapping needs to be provided upfront otherwise we are not sure how many failures we get back
comment|//as with dynamic mappings some shards might be lacking behind and parse a different query
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"past"
argument_list|,
literal|"type=date"
argument_list|,
literal|"future"
argument_list|,
literal|"type=date"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|aMonthAgo
init|=
name|ISODateTimeFormat
operator|.
name|yearMonthDay
argument_list|()
operator|.
name|print
argument_list|(
operator|new
name|DateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|minusMonths
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|aMonthFromNow
init|=
name|ISODateTimeFormat
operator|.
name|yearMonthDay
argument_list|()
operator|.
name|print
argument_list|(
operator|new
name|DateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|plusMonths
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"past"
argument_list|,
name|aMonthAgo
argument_list|,
literal|"future"
argument_list|,
name|aMonthFromNow
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"past:[now-2M/d TO now/d]"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"future:[now/d TO now+2M/d]"
argument_list|)
operator|.
name|lowercaseExpandedTerms
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"future:[now/D TO now+2M/d]"
argument_list|)
operator|.
name|lowercaseExpandedTerms
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected SearchPhaseExecutionException (total failure)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"unit [D] not supported for date math"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// https://github.com/elasticsearch/elasticsearch/issues/7880
DECL|method|testDateRangeInQueryStringWithTimeZone_7880
specifier|public
name|void
name|testDateRangeInQueryStringWithTimeZone_7880
parameter_list|()
block|{
comment|//the mapping needs to be provided upfront otherwise we are not sure how many failures we get back
comment|//as with dynamic mappings some shards might be lacking behind and parse a different query
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"past"
argument_list|,
literal|"type=date"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|DateTimeZone
name|timeZone
init|=
name|randomDateTimeZone
argument_list|()
decl_stmt|;
name|String
name|now
init|=
name|ISODateTimeFormat
operator|.
name|dateTime
argument_list|()
operator|.
name|print
argument_list|(
operator|new
name|DateTime
argument_list|(
name|timeZone
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|" --> Using time_zone [{}], now is [{}]"
argument_list|,
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"past"
argument_list|,
name|now
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"past:[now-1m/m TO now+1m/m]"
argument_list|)
operator|.
name|timeZone
argument_list|(
name|timeZone
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// https://github.com/elasticsearch/elasticsearch/issues/10477
DECL|method|testDateRangeInQueryStringWithTimeZone_10477
specifier|public
name|void
name|testDateRangeInQueryStringWithTimeZone_10477
parameter_list|()
block|{
comment|//the mapping needs to be provided upfront otherwise we are not sure how many failures we get back
comment|//as with dynamic mappings some shards might be lacking behind and parse a different query
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"past"
argument_list|,
literal|"type=date"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"past"
argument_list|,
literal|"2015-04-05T23:00:00+0000"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"past"
argument_list|,
literal|"2015-04-06T00:00:00+0000"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// Timezone set with dates
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"past:[2015-04-06T00:00:00+0200 TO 2015-04-06T23:00:00+0200]"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
comment|// Same timezone set with time_zone
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"past:[2015-04-06T00:00:00 TO 2015-04-06T23:00:00]"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+0200"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
comment|// We set a timezone which will give no result
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"past:[2015-04-06T00:00:00-0200 TO 2015-04-06T23:00:00-0200]"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
comment|// Same timezone set with time_zone but another timezone is set directly within dates which has the precedence
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"past:[2015-04-06T00:00:00-0200 TO 2015-04-06T23:00:00-0200]"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+0200"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|typeFilterTypeIndexedTests
specifier|public
name|void
name|typeFilterTypeIndexedTests
parameter_list|()
throws|throws
name|Exception
block|{
name|typeFilterTests
argument_list|(
literal|"not_analyzed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|typeFilterTypeNotIndexedTests
specifier|public
name|void
name|typeFilterTypeNotIndexedTests
parameter_list|()
throws|throws
name|Exception
block|{
name|typeFilterTests
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
block|}
DECL|method|typeFilterTests
specifier|private
name|void
name|typeFilterTests
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_1_4_2
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setUpdateAllTypes
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|typeQuery
argument_list|(
literal|"type1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|typeQuery
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setTypes
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idsQueryTestsIdIndexed
specifier|public
name|void
name|idsQueryTestsIdIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|idsQueryTests
argument_list|(
literal|"not_analyzed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idsQueryTestsIdNotIndexed
specifier|public
name|void
name|idsQueryTestsIdNotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|idsQueryTests
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
block|}
DECL|method|idsQueryTests
specifier|private
name|void
name|idsQueryTests
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_1_4_2
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_id"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value3"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// no type
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// no type
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"7"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
comment|// repeat..., with terms
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"_id"
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLimitFilter
specifier|public
name|void
name|testLimitFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1_1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1_2"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field2"
argument_list|,
literal|"value2_3"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field3"
argument_list|,
literal|"value3_4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|limitQuery
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
comment|// no-op
block|}
annotation|@
name|Test
DECL|method|filterExistsMissingTests
specifier|public
name|void
name|filterExistsMissingTests
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"obj1_val"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"x1"
argument_list|,
literal|"x_1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1_1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2_1"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"obj1_val"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"x2"
argument_list|,
literal|"x_2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1_2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"obj2_val"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"y1"
argument_list|,
literal|"y_1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2_3"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"obj2_val"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"y2"
argument_list|,
literal|"y_2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|,
literal|"value3_4"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|existsQuery
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|existsQuery
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"_exists_:field1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|existsQuery
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|existsQuery
argument_list|(
literal|"field3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wildcard check
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|existsQuery
argument_list|(
literal|"x*"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|// object check
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|existsQuery
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|missingQuery
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|missingQuery
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|missingQuery
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"_missing_:field1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
comment|// wildcard check
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|missingQuery
argument_list|(
literal|"x*"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
comment|// object check
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|missingQuery
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|passQueryOrFilterAsJSONStringTest
specifier|public
name|void
name|passQueryOrFilterAsJSONStringTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1_1"
argument_list|,
literal|"field2"
argument_list|,
literal|"value2_1"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|WrapperQueryBuilder
name|wrapper
init|=
operator|new
name|WrapperQueryBuilder
argument_list|(
literal|"{ \"term\" : { \"field1\" : \"value1_1\" } }"
argument_list|)
decl_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|wrapper
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|BoolQueryBuilder
name|bool
init|=
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|wrapper
argument_list|)
operator|.
name|must
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"field2"
argument_list|,
literal|"value2_1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|bool
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|WrapperQueryBuilder
name|wrapperFilter
init|=
name|wrapperQuery
argument_list|(
literal|"{ \"term\" : { \"field1\" : \"value1_1\" } }"
argument_list|)
decl_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setPostFilter
argument_list|(
name|wrapperFilter
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFiltersWithCustomCacheKey
specifier|public
name|void
name|testFiltersWithCustomCacheKey
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchQueryNumeric
specifier|public
name|void
name|testMatchQueryNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"long"
argument_list|,
literal|"type=long"
argument_list|,
literal|"double"
argument_list|,
literal|"type=double"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"long"
argument_list|,
literal|1l
argument_list|,
literal|"double"
argument_list|,
literal|1.0d
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"long"
argument_list|,
literal|2l
argument_list|,
literal|"double"
argument_list|,
literal|2.0d
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"long"
argument_list|,
literal|3l
argument_list|,
literal|"double"
argument_list|,
literal|3.0d
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"long"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"double"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"double"
argument_list|,
literal|"2 3 4"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"SearchPhaseExecutionException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|ex
parameter_list|)
block|{
comment|// number format exception
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiMatchQuery
specifier|public
name|void
name|testMultiMatchQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|,
literal|"field2"
argument_list|,
literal|"value4"
argument_list|,
literal|"field3"
argument_list|,
literal|"value3"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|,
literal|"field2"
argument_list|,
literal|"value5"
argument_list|,
literal|"field3"
argument_list|,
literal|"value2"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value3"
argument_list|,
literal|"field2"
argument_list|,
literal|"value6"
argument_list|,
literal|"field3"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|MultiMatchQueryBuilder
name|builder
init|=
name|multiMatchQuery
argument_list|(
literal|"value1 value2 value4"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|terms
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
comment|// this uses dismax so scores are equal and the order can be arbitrary
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|builder
operator|=
name|multiMatchQuery
argument_list|(
literal|"value1"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
comment|// Operator only applies on terms inside a field! Fields are always OR-ed together.
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|builder
operator|=
name|multiMatchQuery
argument_list|(
literal|"value1"
argument_list|,
literal|"field1"
argument_list|,
literal|"field3^1.5"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
comment|// Operator only applies on terms inside a field! Fields are always OR-ed together.
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|builder
operator|=
name|multiMatchQuery
argument_list|(
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|,
literal|1.5f
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
comment|// Operator only applies on terms inside a field! Fields are always OR-ed together.
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"3"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// Test lenient
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value7"
argument_list|,
literal|"field2"
argument_list|,
literal|"value8"
argument_list|,
literal|"field4"
argument_list|,
literal|5
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|builder
operator|=
name|multiMatchQuery
argument_list|(
literal|"value1"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|,
literal|"field4"
argument_list|)
expr_stmt|;
name|assertFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|,
name|containsString
argument_list|(
literal|"NumberFormatException[For input string: \"value1\"]"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchQueryZeroTermsQuery
specifier|public
name|void
name|testMatchQueryZeroTermsQuery
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,analyzer=classic"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=string,analyzer=classic"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|BoolQueryBuilder
name|boolQuery
init|=
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|NONE
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|boolQuery
operator|=
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|boolQuery
operator|=
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiMatchQueryZeroTermsQuery
specifier|public
name|void
name|testMultiMatchQueryZeroTermsQuery
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,analyzer=classic"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=string,analyzer=classic"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|,
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value3"
argument_list|,
literal|"field2"
argument_list|,
literal|"value4"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|BoolQueryBuilder
name|boolQuery
init|=
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"a"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|NONE
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"value1"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
comment|// Fields are ORed together
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|boolQuery
operator|=
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"a"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"value4"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|boolQuery
operator|=
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"a"
argument_list|,
literal|"field1"
argument_list|)
operator|.
name|zeroTermsQuery
argument_list|(
name|MatchQueryBuilder
operator|.
name|ZeroTermsQuery
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMatchQueryMinShouldMatch
specifier|public
name|void
name|testMultiMatchQueryMinShouldMatch
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field2"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|MultiMatchQueryBuilder
name|multiMatchQuery
init|=
name|multiMatchQuery
argument_list|(
literal|"value1 value2 foo"
argument_list|,
literal|"field1"
argument_list|,
literal|"field2"
argument_list|)
decl_stmt|;
name|multiMatchQuery
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|minimumShouldMatch
argument_list|(
literal|"70%"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|minimumShouldMatch
argument_list|(
literal|"30%"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|minimumShouldMatch
argument_list|(
literal|"70%"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|minimumShouldMatch
argument_list|(
literal|"30%"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|=
name|multiMatchQuery
argument_list|(
literal|"value1 value2 bar"
argument_list|,
literal|"field1"
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|minimumShouldMatch
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|multiMatchQuery
operator|.
name|minimumShouldMatch
argument_list|(
literal|"70%"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryString
specifier|public
name|void
name|testFuzzyQueryString
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"kimchy"
argument_list|,
literal|"date"
argument_list|,
literal|"2012-02-01"
argument_list|,
literal|"num"
argument_list|,
literal|12
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"shay"
argument_list|,
literal|"date"
argument_list|,
literal|"2012-02-05"
argument_list|,
literal|"num"
argument_list|,
literal|20
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"str:kimcy~1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"num:11~1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"date:2012-02-02~1d"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuotedQueryStringWithBoost
specifier|public
name|void
name|testQuotedQueryStringWithBoost
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|float
name|boost
init|=
literal|10.0f
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"important"
argument_list|,
literal|"phrase match"
argument_list|,
literal|"less_important"
argument_list|,
literal|"nothing important"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"important"
argument_list|,
literal|"nothing important"
argument_list|,
literal|"less_important"
argument_list|,
literal|"phrase match"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"\"phrase match\""
argument_list|)
operator|.
name|field
argument_list|(
literal|"important"
argument_list|,
name|boost
argument_list|)
operator|.
name|field
argument_list|(
literal|"less_important"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|boost
operator|*
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
literal|.1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"\"phrase match\""
argument_list|)
operator|.
name|field
argument_list|(
literal|"important"
argument_list|,
name|boost
argument_list|)
operator|.
name|field
argument_list|(
literal|"less_important"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|boost
operator|*
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
literal|.1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecialRangeSyntaxInQueryString
specifier|public
name|void
name|testSpecialRangeSyntaxInQueryString
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"kimchy"
argument_list|,
literal|"date"
argument_list|,
literal|"2012-02-01"
argument_list|,
literal|"num"
argument_list|,
literal|12
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"shay"
argument_list|,
literal|"date"
argument_list|,
literal|"2012-02-05"
argument_list|,
literal|"num"
argument_list|,
literal|20
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"num:>19"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"num:>20"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"num:>=20"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"num:>11"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"num:<20"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"num:<=20"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"+num:>11 +num:<20"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptytermsQuery
specifier|public
name|void
name|testEmptytermsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"term"
argument_list|,
literal|"type=string"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"term"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|idsQuery
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFieldDatatermsQuery
specifier|public
name|void
name|testFieldDatatermsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"str"
argument_list|,
literal|"type=string"
argument_list|,
literal|"lng"
argument_list|,
literal|"type=long"
argument_list|,
literal|"dbl"
argument_list|,
literal|"type=double"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"1"
argument_list|,
literal|"lng"
argument_list|,
literal|1l
argument_list|,
literal|"dbl"
argument_list|,
literal|1.0d
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"2"
argument_list|,
literal|"lng"
argument_list|,
literal|2l
argument_list|,
literal|"dbl"
argument_list|,
literal|2.0d
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"3"
argument_list|,
literal|"lng"
argument_list|,
literal|3l
argument_list|,
literal|"dbl"
argument_list|,
literal|3.0d
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"str"
argument_list|,
literal|"4"
argument_list|,
literal|"lng"
argument_list|,
literal|4l
argument_list|,
literal|"dbl"
argument_list|,
literal|4.0d
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"str"
argument_list|,
literal|"1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"lng"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"dbl"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"lng"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"dbl"
argument_list|,
operator|new
name|float
index|[]
block|{
literal|2
block|,
literal|4
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"2"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
comment|// test partial matching
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"str"
argument_list|,
literal|"2"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"dbl"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|2
block|,
literal|5
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"lng"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|5
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test valid type, but no matching terms
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"str"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"dbl"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|5
block|,
literal|6
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"lng"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|5
block|,
literal|6
block|}
argument_list|)
operator|.
name|execution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsLookupFilter
specifier|public
name|void
name|testTermsLookupFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"terms"
argument_list|,
literal|"type=string"
argument_list|,
literal|"other"
argument_list|,
literal|"type=string"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"lookup2"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"arr"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"term"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"term"
argument_list|,
literal|"type=string"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"lookup"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"terms"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"3"
block|}
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"lookup"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"terms"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2"
block|}
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"lookup"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"terms"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2"
block|,
literal|"4"
block|}
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"lookup"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"other"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"lookup2"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"arr"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"term"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"term"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"lookup2"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"arr"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"term"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"lookup2"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"arr"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"term"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"term"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"term"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// same as above, just on the _id...
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"_id"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// another search with same parameters...
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"2"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"2"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"4"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup2"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"arr.term"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup2"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"2"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"arr.term"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"term"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup2"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"arr.term"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"2"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsLookupQuery
argument_list|(
literal|"not_exists"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
literal|"lookup2"
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"arr.term"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicFilterById
specifier|public
name|void
name|testBasicFilterById
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|(
literal|null
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|,
literal|"type2"
argument_list|,
literal|"type3"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicQueryById
specifier|public
name|void
name|testBasicQueryById
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|()
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|(
literal|null
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|idsQuery
argument_list|(
literal|"type1"
argument_list|,
literal|"type2"
argument_list|,
literal|"type3"
argument_list|)
operator|.
name|ids
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericTermsAndRanges
specifier|public
name|void
name|testNumericTermsAndRanges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"num_byte"
argument_list|,
literal|"type=byte"
argument_list|,
literal|"num_short"
argument_list|,
literal|"type=short"
argument_list|,
literal|"num_integer"
argument_list|,
literal|"type=integer"
argument_list|,
literal|"num_long"
argument_list|,
literal|"type=long"
argument_list|,
literal|"num_float"
argument_list|,
literal|"type=float"
argument_list|,
literal|"num_double"
argument_list|,
literal|"type=double"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num_byte"
argument_list|,
literal|1
argument_list|,
literal|"num_short"
argument_list|,
literal|1
argument_list|,
literal|"num_integer"
argument_list|,
literal|1
argument_list|,
literal|"num_long"
argument_list|,
literal|1
argument_list|,
literal|"num_float"
argument_list|,
literal|1
argument_list|,
literal|"num_double"
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num_byte"
argument_list|,
literal|2
argument_list|,
literal|"num_short"
argument_list|,
literal|2
argument_list|,
literal|"num_integer"
argument_list|,
literal|2
argument_list|,
literal|"num_long"
argument_list|,
literal|2
argument_list|,
literal|"num_float"
argument_list|,
literal|2
argument_list|,
literal|"num_double"
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"17"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num_byte"
argument_list|,
literal|17
argument_list|,
literal|"num_short"
argument_list|,
literal|17
argument_list|,
literal|"num_integer"
argument_list|,
literal|17
argument_list|,
literal|"num_long"
argument_list|,
literal|17
argument_list|,
literal|"num_float"
argument_list|,
literal|17
argument_list|,
literal|"num_double"
argument_list|,
literal|17
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> term query on 1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num_byte"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num_short"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num_integer"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num_long"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num_float"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"num_double"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> terms query on 1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"num_byte"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"num_short"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"num_integer"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"num_long"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"num_float"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termsQuery
argument_list|(
literal|"num_double"
argument_list|,
operator|new
name|double
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> term filter on 1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termQuery
argument_list|(
literal|"num_byte"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termQuery
argument_list|(
literal|"num_short"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termQuery
argument_list|(
literal|"num_integer"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termQuery
argument_list|(
literal|"num_long"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termQuery
argument_list|(
literal|"num_float"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termQuery
argument_list|(
literal|"num_double"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> terms filter on 1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"num_byte"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"num_short"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"num_integer"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"num_long"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"num_float"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|termsQuery
argument_list|(
literal|"num_double"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericRangeFilter_2826
specifier|public
name|void
name|testNumericRangeFilter_2826
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"num_byte"
argument_list|,
literal|"type=byte"
argument_list|,
literal|"num_short"
argument_list|,
literal|"type=short"
argument_list|,
literal|"num_integer"
argument_list|,
literal|"type=integer"
argument_list|,
literal|"num_long"
argument_list|,
literal|"type=long"
argument_list|,
literal|"num_float"
argument_list|,
literal|"type=float"
argument_list|,
literal|"num_double"
argument_list|,
literal|"type=double"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"test1"
argument_list|,
literal|"num_long"
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"test1"
argument_list|,
literal|"num_long"
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"test2"
argument_list|,
literal|"num_long"
argument_list|,
literal|3
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"test2"
argument_list|,
literal|"num_long"
argument_list|,
literal|4
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|rangeQuery
argument_list|(
literal|"num_long"
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
operator|.
name|to
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|rangeQuery
argument_list|(
literal|"num_long"
argument_list|)
operator|.
name|from
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
comment|// This made 2826 fail! (only with bit based filters)
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|rangeQuery
argument_list|(
literal|"num_long"
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
operator|.
name|to
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|rangeQuery
argument_list|(
literal|"num_long"
argument_list|)
operator|.
name|from
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
comment|// This made #2979 fail!
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|rangeQuery
argument_list|(
literal|"num_long"
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
operator|.
name|to
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|rangeQuery
argument_list|(
literal|"num_long"
argument_list|)
operator|.
name|from
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyTopLevelFilter
specifier|public
name|void
name|testEmptyTopLevelFilter
parameter_list|()
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setPostFilter
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #2926
DECL|method|testMustNot
specifier|public
name|void
name|testMustNot
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
comment|//issue manifested only with shards>=2
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|between
argument_list|(
literal|2
argument_list|,
name|DEFAULT_MAX_NUM_SHARDS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other anything bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other anything"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|mustNot
argument_list|(
name|matchQuery
argument_list|(
literal|"description"
argument_list|,
literal|"anything"
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #2994
DECL|method|testSimpleSpan
specifier|public
name|void
name|testSimpleSpan
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other anything bar"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other anything"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanNearQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"other"
argument_list|)
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermQuery
specifier|public
name|void
name|testSpanMultiTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other anything bar"
argument_list|,
literal|"count"
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other anything"
argument_list|,
literal|"count"
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"foo other"
argument_list|,
literal|"count"
argument_list|,
literal|3
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"fop"
argument_list|,
literal|"count"
argument_list|,
literal|4
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanMultiTermQueryBuilder
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fop"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanMultiTermQueryBuilder
argument_list|(
name|prefixQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanMultiTermQueryBuilder
argument_list|(
name|wildcardQuery
argument_list|(
literal|"description"
argument_list|,
literal|"oth*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanMultiTermQueryBuilder
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"description"
argument_list|)
operator|.
name|from
argument_list|(
literal|"ffa"
argument_list|)
operator|.
name|to
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanMultiTermQueryBuilder
argument_list|(
name|regexpQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fo{2}"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNot
specifier|public
name|void
name|testSpanNot
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"the quick brown fox jumped over the lazy dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"description"
argument_list|,
literal|"the quick black fox leaped over the sleeping dog"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanNotQuery
argument_list|()
operator|.
name|include
argument_list|(
name|spanNearQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|slop
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanNotQuery
argument_list|()
operator|.
name|include
argument_list|(
name|spanNearQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|slop
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"sleeping"
argument_list|)
argument_list|)
operator|.
name|dist
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanNotQuery
argument_list|()
operator|.
name|include
argument_list|(
name|spanNearQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|slop
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"jumped"
argument_list|)
argument_list|)
operator|.
name|pre
argument_list|(
literal|1
argument_list|)
operator|.
name|post
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|spanNotQuery
argument_list|()
operator|.
name|include
argument_list|(
name|spanNearQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|QueryBuilders
operator|.
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|slop
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
name|spanTermQuery
argument_list|(
literal|"description"
argument_list|,
literal|"jumped"
argument_list|)
argument_list|)
operator|.
name|dist
argument_list|(
literal|2
argument_list|)
operator|.
name|pre
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"ElasticsearchIllegalArgumentException should have been caught"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"ElasticsearchIllegalArgumentException should have been caught"
argument_list|,
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"spanNot can either use [dist] or [pre]& [post] (or none)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleDFSQuery
specifier|public
name|void
name|testSimpleDFSQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"s"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"s"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_routing"
argument_list|)
operator|.
name|field
argument_list|(
literal|"required"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"online"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"boolean"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"date"
argument_list|)
operator|.
name|field
argument_list|(
literal|"ignore_malformed"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
literal|"epoch_millis"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bs"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"bs"
argument_list|,
literal|"online"
argument_list|,
literal|"type=boolean"
argument_list|,
literal|"ts"
argument_list|,
literal|"type=date,ignore_malformed=false,format=epoch_millis"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"s"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"Y"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"online"
argument_list|,
literal|false
argument_list|,
literal|"bs"
argument_list|,
literal|"Y"
argument_list|,
literal|"ts"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|100
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"s"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"X"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"online"
argument_list|,
literal|true
argument_list|,
literal|"bs"
argument_list|,
literal|"X"
argument_list|,
literal|"ts"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|10000000
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bs"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"online"
argument_list|,
literal|false
argument_list|,
literal|"ts"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|100
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"bs"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"online"
argument_list|,
literal|true
argument_list|,
literal|"ts"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|123123
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"online"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|lt
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
operator|(
literal|15
operator|*
literal|1000
operator|)
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"_type"
argument_list|,
literal|"bs"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|lt
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
operator|(
literal|15
operator|*
literal|1000
operator|)
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"_type"
argument_list|,
literal|"s"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|true
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiFieldQueryString
specifier|public
name|void
name|testMultiFieldQueryString
parameter_list|()
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"s"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|,
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"regular"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"field\\*:value1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"value*"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"field\\*:value*"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wildcard"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"v?lue*"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"field\\*:v?lue*"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"fuzzy"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"value~"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"field\\*:value~"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"/value[01]/"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"field\\*:/value[01]/"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// see #3881 - for extensive description of the issue
annotation|@
name|Test
DECL|method|testMatchQueryWithSynonyms
specifier|public
name|void
name|testMatchQueryWithSynonyms
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.search.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.search.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.search.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"fast, quick"
argument_list|)
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"text"
argument_list|,
literal|"type=string,analyzer=index,search_analyzer=search"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"quick brown fox"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"quick"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"fast"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"fast brown fox"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"quick"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchQueryWithStackedStems
specifier|public
name|void
name|testMatchQueryWithStackedStems
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.search.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.search.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.search.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"keyword_repeat"
argument_list|,
literal|"porterStem"
argument_list|,
literal|"unique_stem"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.unique_stem.type"
argument_list|,
literal|"unique"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.unique_stem.only_on_same_position"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"text"
argument_list|,
literal|"type=string,analyzer=index,search_analyzer=search"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"the fox runs across the street"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"fox runs"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"run fox run"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"fox runs"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringWithSynonyms
specifier|public
name|void
name|testQueryStringWithSynonyms
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.index.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.search.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.search.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.search.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"fast, quick"
argument_list|)
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"text"
argument_list|,
literal|"type=string,analyzer=index,search_analyzer=search"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"quick brown fox"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"quick"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"text"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"quick brown"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"text"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"fast"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"text"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"fast brown fox"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"quick"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"text"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"quick brown"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"text"
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see https://github.com/elasticsearch/elasticsearch/issues/3898
DECL|method|testCustomWordDelimiterQueryString
specifier|public
name|void
name|testCustomWordDelimiterQueryString
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
literal|"analysis.analyzer.my_analyzer.type"
argument_list|,
literal|"custom"
argument_list|,
literal|"analysis.analyzer.my_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|,
literal|"analysis.analyzer.my_analyzer.filter"
argument_list|,
literal|"custom_word_delimiter"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.type"
argument_list|,
literal|"word_delimiter"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.generate_word_parts"
argument_list|,
literal|"true"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.generate_number_parts"
argument_list|,
literal|"false"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.catenate_numbers"
argument_list|,
literal|"true"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.catenate_words"
argument_list|,
literal|"false"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.split_on_case_change"
argument_list|,
literal|"false"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.split_on_numerics"
argument_list|,
literal|"false"
argument_list|,
literal|"analysis.filter.custom_word_delimiter.stem_english_possessive"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,analyzer=my_analyzer"
argument_list|,
literal|"field2"
argument_list|,
literal|"type=string,analyzer=my_analyzer"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"foo bar baz"
argument_list|,
literal|"field2"
argument_list|,
literal|"not needed"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryStringQuery
argument_list|(
literal|"foo.baz"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
operator|.
name|defaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see https://github.com/elasticsearch/elasticsearch/issues/3797
DECL|method|testMultiMatchLenientIssue3797
specifier|public
name|void
name|testMultiMatchLenientIssue3797
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|123
argument_list|,
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"value2"
argument_list|,
literal|"field1^2"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"value2"
argument_list|,
literal|"field1^2"
argument_list|,
literal|"field2"
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|multiMatchQuery
argument_list|(
literal|"value2"
argument_list|,
literal|"field2^2"
argument_list|)
operator|.
name|lenient
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndicesQuery
specifier|public
name|void
name|testIndicesQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index2"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index3"
argument_list|,
literal|"type3"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|//default no match query is match_all
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
literal|"all"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
literal|"none"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndicesFilter
specifier|public
name|void
name|testIndicesFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index2"
argument_list|,
literal|"type2"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index3"
argument_list|,
literal|"type3"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|//default no match filter is "all"
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
literal|"all"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|"index1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
literal|"none"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// https://github.com/elasticsearch/elasticsearch/issues/2416
DECL|method|testIndicesQuerySkipParsing
specifier|public
name|void
name|testIndicesQuerySkipParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"related"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"child"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"child"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_parent"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"parent"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"simple"
argument_list|,
literal|"lone"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"related"
argument_list|,
literal|"parent"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"parent"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"related"
argument_list|,
literal|"child"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setParent
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|//has_child fails if executed on "simple" index
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|hasChildQuery
argument_list|(
literal|"child"
argument_list|,
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed as has_child query can only be executed against parent-child types"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|shardFailures
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardSearchFailure
name|shardSearchFailure
range|:
name|e
operator|.
name|shardFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|shardSearchFailure
operator|.
name|reason
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"No mapping for for type [child]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//has_child doesn't get parsed for "simple" index
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"related"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|hasChildQuery
argument_list|(
literal|"child"
argument_list|,
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|,
literal|"related"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// https://github.com/elasticsearch/elasticsearch/issues/2416
DECL|method|testIndicesFilterSkipParsing
specifier|public
name|void
name|testIndicesFilterSkipParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"related"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"child"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"child"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_parent"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"parent"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"simple"
argument_list|,
literal|"lone"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"related"
argument_list|,
literal|"parent"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"parent"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"related"
argument_list|,
literal|"child"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setParent
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//has_child fails if executed on "simple" index
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|hasChildQuery
argument_list|(
literal|"child"
argument_list|,
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed as has_child query can only be executed against parent-child types"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|shardFailures
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardSearchFailure
name|shardSearchFailure
range|:
name|e
operator|.
name|shardFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|shardSearchFailure
operator|.
name|reason
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"No mapping for for type [child]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"related"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|indicesQuery
argument_list|(
name|hasChildQuery
argument_list|(
literal|"child"
argument_list|,
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|,
literal|"related"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndicesQueryMissingIndices
specifier|public
name|void
name|testIndicesQueryMissingIndices
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"index1"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"index2"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"no_match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index2"
argument_list|,
literal|"type1"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index2"
argument_list|,
literal|"type1"
argument_list|,
literal|"20"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"no_match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index3"
argument_list|,
literal|"type1"
argument_list|,
literal|"100"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index3"
argument_list|,
literal|"type1"
argument_list|,
literal|"200"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"no_match"
argument_list|)
argument_list|)
expr_stmt|;
comment|//all indices are missing
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"missing"
argument_list|)
argument_list|,
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test3"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
literal|"index1"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index2"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index3"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Returned documents should belong to either index1, index2 or index3"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//only one index specified, which is missing
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"missing"
argument_list|)
argument_list|,
literal|"test1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
literal|"index1"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index2"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index3"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Returned documents should belong to either index1, index2 or index3"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//more than one index specified, one of them is missing
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"missing"
argument_list|)
argument_list|,
literal|"index1"
argument_list|,
literal|"test1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
literal|"index2"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index3"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Returned documents should belong to either index2 or index3"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testIndicesFilterMissingIndices
specifier|public
name|void
name|testIndicesFilterMissingIndices
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"index1"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"index2"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"index3"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index1"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"no_match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index2"
argument_list|,
literal|"type1"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index2"
argument_list|,
literal|"type1"
argument_list|,
literal|"20"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"no_match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index3"
argument_list|,
literal|"type1"
argument_list|,
literal|"100"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"index3"
argument_list|,
literal|"type1"
argument_list|,
literal|"200"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"no_match"
argument_list|)
argument_list|)
expr_stmt|;
comment|//all indices are missing
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"missing"
argument_list|)
argument_list|,
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test3"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
literal|"index1"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index2"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index3"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Returned documents should belong to either index1, index2 or index3"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//only one index specified, which is missing
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"missing"
argument_list|)
argument_list|,
literal|"test1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
literal|"index1"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index2"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index3"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Returned documents should belong to either index1, index2 or index3"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//more than one index specified, one of them is missing
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|indicesQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"missing"
argument_list|)
argument_list|,
literal|"index1"
argument_list|,
literal|"test1"
argument_list|)
operator|.
name|noMatchQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"match"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
literal|"index2"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"index3"
operator|.
name|equals
argument_list|(
name|hit
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|hit
argument_list|,
name|hasId
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Returned documents should belong to either index2 or index3"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMinScore
specifier|public
name|void
name|testMinScore
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"score"
argument_list|,
literal|1.5
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"score"
argument_list|,
literal|1.0
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"score"
argument_list|,
literal|2.0
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"score"
argument_list|,
literal|0.5
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_doc['score'].value"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMinScore
argument_list|(
literal|1.5f
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringWithSlopAndFields
specifier|public
name|void
name|testQueryStringWithSlopAndFields
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"customer"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"desc"
argument_list|,
literal|"one two three"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"product"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"desc"
argument_list|,
literal|"one two three"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"\"one two\""
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"desc"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"product"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"\"one two\""
argument_list|)
operator|.
name|field
argument_list|(
literal|"desc"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"product"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"\"one three\"~5"
argument_list|)
operator|.
name|field
argument_list|(
literal|"desc"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"customer"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"\"one two\""
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"desc"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"customer"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"\"one two\""
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"desc"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDateProvidedAsNumber
specifier|public
name|void
name|testDateProvidedAsNumber
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"type=date,format=epoch_millis"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|1000000000001L
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|1000000000000L
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
operator|-
literal|999999999999L
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|rangeQuery
argument_list|(
literal|"field"
argument_list|)
operator|.
name|lte
argument_list|(
operator|-
literal|1000000000000L
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|rangeQuery
argument_list|(
literal|"field"
argument_list|)
operator|.
name|lte
argument_list|(
operator|-
literal|999999999999L
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeFilterWithTimeZone
specifier|public
name|void
name|testRangeFilterWithTimeZone
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"date"
argument_list|,
literal|"type=date"
argument_list|,
literal|"num"
argument_list|,
literal|"type=integer"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
literal|"2014-01-01"
argument_list|,
literal|"num"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
literal|"2013-12-31T23:00:00"
argument_list|,
literal|"num"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
literal|"2014-01-01T01:00:00"
argument_list|,
literal|"num"
argument_list|,
literal|3
argument_list|)
argument_list|,
comment|// Now in UTC+1
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
name|DateTime
operator|.
name|now
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getMillis
argument_list|()
argument_list|,
literal|"num"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T00:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T00:59:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2013-12-31T23:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2013-12-31T23:59:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T01:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T01:59:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We explicitly define a time zone in the from/to dates so whatever the time zone is, it won't be used
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T00:00:00Z"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T00:59:00Z"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+10:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2013-12-31T23:00:00Z"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2013-12-31T23:59:00Z"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+10:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T01:00:00Z"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T01:59:00Z"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+10:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We define a time zone to be applied to the filter and from/to have no time zone
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T03:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T03:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+03:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T02:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T02:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+03:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T04:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T04:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+03:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// When we use long values, it means we have ms since epoch UTC based so we don't apply any transformation
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|1388534400000L
argument_list|)
operator|.
name|to
argument_list|(
literal|1388537940999L
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+01:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"A Range Filter using ms since epoch with a TimeZone should raise a QueryParsingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// We expect it
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T00:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"-01:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"now/d-1d"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+01:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// A Range Filter on a numeric field with a TimeZone should raise an exception
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"num"
argument_list|)
operator|.
name|from
argument_list|(
literal|"0"
argument_list|)
operator|.
name|to
argument_list|(
literal|"4"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"-01:00"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"A Range Filter on a numeric field with a TimeZone should raise a QueryParsingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// We expect it
block|}
block|}
annotation|@
name|Test
DECL|method|testRangeQueryWithTimeZone
specifier|public
name|void
name|testRangeQueryWithTimeZone
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"date"
argument_list|,
literal|"type=date"
argument_list|,
literal|"num"
argument_list|,
literal|"type=integer"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
literal|"2014-01-01"
argument_list|,
literal|"num"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
literal|"2013-12-31T23:00:00"
argument_list|,
literal|"num"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
literal|"2014-01-01T01:00:00"
argument_list|,
literal|"num"
argument_list|,
literal|3
argument_list|)
argument_list|,
comment|// Now in UTC+1
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"date"
argument_list|,
name|DateTime
operator|.
name|now
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getMillis
argument_list|()
argument_list|,
literal|"num"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T00:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T00:59:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2013-12-31T23:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2013-12-31T23:59:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T01:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T01:59:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We explicitly define a time zone in the from/to dates so whatever the time zone is, it won't be used
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T00:00:00Z"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T00:59:00Z"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+10:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2013-12-31T23:00:00Z"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2013-12-31T23:59:00Z"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+10:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T01:00:00Z"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T01:59:00Z"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+10:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We define a time zone to be applied to the filter and from/to have no time zone
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T03:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T03:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+03:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T02:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T02:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+03:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01T04:00:00"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T04:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+03:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// When we use long values, it means we have ms since epoch UTC based so we don't apply any transformation
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|1388534400000L
argument_list|)
operator|.
name|to
argument_list|(
literal|1388537940999L
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+01:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"A Range Filter using ms since epoch with a TimeZone should raise a QueryParsingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// We expect it
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"2014-01-01"
argument_list|)
operator|.
name|to
argument_list|(
literal|"2014-01-01T00:59:00"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"-01:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"date"
argument_list|)
operator|.
name|from
argument_list|(
literal|"now/d-1d"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"+01:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// A Range Filter on a numeric field with a TimeZone should raise an exception
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
literal|"num"
argument_list|)
operator|.
name|from
argument_list|(
literal|"0"
argument_list|)
operator|.
name|to
argument_list|(
literal|"4"
argument_list|)
operator|.
name|timeZone
argument_list|(
literal|"-01:00"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"A Range Filter on a numeric field with a TimeZone should raise a QueryParsingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// We expect it
block|}
block|}
annotation|@
name|Test
DECL|method|testSearchEmptyDoc
specifier|public
name|void
name|testSearchEmptyDoc
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
literal|"{\"index.analysis.analyzer.default.type\":\"keyword\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #5120
DECL|method|testNGramCopyField
specifier|public
name|void
name|testNGramCopyField
parameter_list|()
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.my_ngram_analyzer.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.my_ngram_analyzer.tokenizer"
argument_list|,
literal|"my_ngram_tokenizer"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.tokenizer.my_ngram_tokenizer.type"
argument_list|,
literal|"nGram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.tokenizer.my_ngram_tokenizer.min_gram"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.tokenizer.my_ngram_tokenizer.max_gram"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.tokenizer.my_ngram_tokenizer.token_chars"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"origin"
argument_list|,
literal|"type=string,copy_to=meta"
argument_list|,
literal|"meta"
argument_list|,
literal|"type=string,analyzer=my_ngram_analyzer"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we only have ngrams as the index analyzer so searches will get standard analyzer
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"origin"
argument_list|,
literal|"C.A1234.5678"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"meta"
argument_list|,
literal|"1234"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"meta"
argument_list|,
literal|"1234.56"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"meta"
argument_list|,
literal|"A1234"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"meta"
argument_list|,
literal|"a1234"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
comment|// it's upper case
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"meta"
argument_list|,
literal|"A1234"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"my_ngram_analyzer"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// force ngram analyzer
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"meta"
argument_list|,
literal|"a1234"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"my_ngram_analyzer"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// this one returns a hit since it's default operator is OR
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchPhrasePrefixQuery
specifier|public
name|void
name|testMatchPhrasePrefixQuery
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"Johnnie Walker Black Label"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"trying out Elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"Johnnie la"
argument_list|)
operator|.
name|slop
argument_list|(
name|between
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE_PREFIX
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"trying"
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE_PREFIX
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"try"
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE_PREFIX
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertSearchHits
argument_list|(
name|searchResponse
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery
specifier|public
name|void
name|testFilteredQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|iters
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|String
name|intToEnglish
init|=
name|English
operator|.
name|intToEnglish
argument_list|(
name|between
argument_list|(
literal|0
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|intToEnglish
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|filter
init|=
name|intToEnglish
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|SearchResponse
name|one
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|filter
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|SearchResponse
name|other
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|filter
argument_list|)
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|oneIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|one
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
control|)
block|{
name|oneIds
operator|.
name|add
argument_list|(
name|hit
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|otherIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|other
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
control|)
block|{
name|otherIds
operator|.
name|add
argument_list|(
name|hit
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|oneIds
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|otherIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|oneIds
control|)
block|{
name|assertThat
argument_list|(
name|otherIds
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
comment|// see #7365
DECL|method|testFilteredQueryWithoutQuery
specifier|public
name|void
name|testFilteredQueryWithoutQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
literal|null
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringParserCache
specifier|public
name|void
name|testQueryStringParserCache
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"nameTokens"
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"xyz"
argument_list|)
operator|.
name|boost
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|first
init|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"xyz"
argument_list|)
operator|.
name|boost
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|actual
init|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|i
operator|+
literal|" expected: "
operator|+
name|first
operator|+
literal|" actual: "
operator|+
name|actual
argument_list|,
name|Float
operator|.
name|compare
argument_list|(
name|first
argument_list|,
name|actual
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// see #7686.
DECL|method|testIdsQueryWithInvalidValues
specifier|public
name|void
name|testIdsQueryWithInvalidValues
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"body"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
literal|"{\n"
operator|+
literal|"  \"ids\": {\n"
operator|+
literal|"    \"values\": [[\"1\"]]\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"query is invalid and should have produced a parse exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"query could not be parsed due to bad format: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Illegal value for id, expecting a string or number, got: START_ARRAY"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

