begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|RecursivePrefixTreeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|GeohashPrefixTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|UnsupportedSpatialOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|CoordinatesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|LineStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|MultiPolygonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|PolygonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|ShapeBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|distance
operator|.
name|DistanceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|exception
operator|.
name|InvalidShapeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|geoBoundingBoxQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|geoDistanceQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFirstHit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|hasId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|GeoFilterIT
specifier|public
class|class
name|GeoFilterIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
comment|// uses index.version.created
block|}
DECL|field|intersectSupport
specifier|private
specifier|static
name|boolean
name|intersectSupport
decl_stmt|;
DECL|field|disjointSupport
specifier|private
specifier|static
name|boolean
name|disjointSupport
decl_stmt|;
DECL|field|withinSupport
specifier|private
specifier|static
name|boolean
name|withinSupport
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createNodes
specifier|public
specifier|static
name|void
name|createNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|intersectSupport
operator|=
name|testRelationSupport
argument_list|(
name|SpatialOperation
operator|.
name|Intersects
argument_list|)
expr_stmt|;
name|disjointSupport
operator|=
name|testRelationSupport
argument_list|(
name|SpatialOperation
operator|.
name|IsDisjointTo
argument_list|)
expr_stmt|;
name|withinSupport
operator|=
name|testRelationSupport
argument_list|(
name|SpatialOperation
operator|.
name|IsWithin
argument_list|)
expr_stmt|;
block|}
DECL|method|unZipData
specifier|private
specifier|static
name|byte
index|[]
name|unZipData
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|Streams
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Resource ["
operator|+
name|path
operator|+
literal|"] not found in classpath"
argument_list|)
throw|;
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPInputStream
name|in
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|testShapeBuilders
specifier|public
name|void
name|testShapeBuilders
parameter_list|()
block|{
try|try
block|{
comment|// self intersection polygon
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Self intersection not detected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{         }
comment|// polygon with hole
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
comment|// polygon with overlapping hole
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|11
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
literal|11
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Self intersection not detected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{         }
try|try
block|{
comment|// polygon with intersection holes
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|6
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|6
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Intersection of holes not detected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{         }
try|try
block|{
comment|// Common line in polygon
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|20
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Self intersection not detected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{         }
comment|// Multipolygon: polygon with hole and polygon within the whole
name|ShapeBuilders
operator|.
name|newMultiPolygon
argument_list|()
operator|.
name|polygon
argument_list|(
operator|new
name|PolygonBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|polygon
argument_list|(
operator|new
name|PolygonBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|testShapeRelations
specifier|public
name|void
name|testShapeRelations
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Intersect relation is not supported"
argument_list|,
name|intersectSupport
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Disjoint relation is not supported"
argument_list|,
name|disjointSupport
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"within relation is not supported"
argument_list|,
name|withinSupport
argument_list|)
expr_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"polygon"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"area"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_shape"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tree"
argument_list|,
literal|"geohash"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|CreateIndexRequestBuilder
name|mappingRequest
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"shapes"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"polygon"
argument_list|,
name|mapping
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|mappingRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Create a multipolygon with two polygons. The first is an rectangle of size 10x10
comment|// with a hole of size 5x5 equidistant from all sides. This hole in turn contains
comment|// the second polygon of size 4x4 equidistant from all sites
name|MultiPolygonBuilder
name|polygon
init|=
name|ShapeBuilders
operator|.
name|newMultiPolygon
argument_list|()
operator|.
name|polygon
argument_list|(
operator|new
name|PolygonBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|polygon
argument_list|(
operator|new
name|PolygonBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|data
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"area"
argument_list|,
name|polygon
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"shapes"
argument_list|,
literal|"polygon"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|data
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Point in polygon
name|SearchResponse
name|result
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|result
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Point in polygon hole
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|4.5
argument_list|,
literal|4.5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// by definition the border of a polygon belongs to the inner
comment|// so the border of a polygons hole also belongs to the inner
comment|// of the polygon NOT the hole
comment|// Point on polygon border
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|10.0
argument_list|,
literal|5.0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|result
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Point on hole border
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|5.0
argument_list|,
literal|2.0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|result
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|disjointSupport
condition|)
block|{
comment|// Point not in polygon
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoDisjointQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Point in polygon hole
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoDisjointQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|4.5
argument_list|,
literal|4.5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|result
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create a polygon that fills the empty area of the polygon defined above
name|PolygonBuilder
name|inverse
init|=
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|data
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"area"
argument_list|,
name|inverse
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"shapes"
argument_list|,
literal|"polygon"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|data
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// re-check point on polygon hole
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|4.5
argument_list|,
literal|4.5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|result
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create Polygon with hole and common edge
name|PolygonBuilder
name|builder
init|=
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|10
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|withinSupport
condition|)
block|{
comment|// Polygon WithIn Polygon
name|builder
operator|=
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
operator|-
literal|30
argument_list|,
operator|-
literal|30
argument_list|)
operator|.
name|coordinate
argument_list|(
operator|-
literal|30
argument_list|,
literal|30
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|30
argument_list|,
operator|-
literal|30
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoWithinQuery
argument_list|(
literal|"area"
argument_list|,
name|builder
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// Create a polygon crossing longitude 180.
name|builder
operator|=
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
literal|170
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|190
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|190
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|170
argument_list|,
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"area"
argument_list|,
name|builder
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"shapes"
argument_list|,
literal|"polygon"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|data
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Create a polygon crossing longitude 180 with hole.
name|builder
operator|=
name|ShapeBuilders
operator|.
name|newPolygon
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
literal|170
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|190
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|190
argument_list|,
literal|10
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|170
argument_list|,
literal|10
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|hole
argument_list|(
operator|new
name|LineStringBuilder
argument_list|(
operator|new
name|CoordinatesBuilder
argument_list|()
operator|.
name|coordinate
argument_list|(
literal|175
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|185
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|185
argument_list|,
literal|5
argument_list|)
operator|.
name|coordinate
argument_list|(
literal|175
argument_list|,
literal|5
argument_list|)
operator|.
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"area"
argument_list|,
name|builder
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"shapes"
argument_list|,
literal|"polygon"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|data
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|174
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
operator|-
literal|174
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|180
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setPostFilter
argument_list|(
name|QueryBuilders
operator|.
name|geoIntersectionQuery
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilders
operator|.
name|newPoint
argument_list|(
literal|180
argument_list|,
operator|-
literal|6
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulk
specifier|public
name|void
name|testBulk
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bulkAction
init|=
name|unZipData
argument_list|(
literal|"/org/elasticsearch/search/geo/gzippedmap.gz"
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|Version
operator|.
name|V_5_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"country"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_point"
argument_list|)
decl_stmt|;
name|xContentBuilder
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_shape"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"countries"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"country"
argument_list|,
name|xContentBuilder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|BulkResponse
name|bulk
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|bulkAction
argument_list|,
literal|0
argument_list|,
name|bulkAction
operator|.
name|length
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|xContentBuilder
operator|.
name|contentType
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|bulk
operator|.
name|getItems
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
literal|"unable to index data"
argument_list|,
name|item
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|String
name|key
init|=
literal|"DE"
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"_id"
argument_list|,
name|key
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|world
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addStoredField
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|geoBoundingBoxQuery
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setCorners
argument_list|(
literal|90
argument_list|,
operator|-
literal|179.99999
argument_list|,
operator|-
literal|90
argument_list|,
literal|179.99999
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|world
argument_list|,
literal|53
argument_list|)
expr_stmt|;
name|SearchResponse
name|distance
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addStoredField
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|geoDistanceQuery
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|distance
argument_list|(
literal|"425km"
argument_list|)
operator|.
name|point
argument_list|(
literal|51.11
argument_list|,
literal|9.851
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|distance
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|distance
operator|.
name|getHits
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|hit
operator|.
name|getId
argument_list|()
decl_stmt|;
name|point
operator|.
name|resetFromString
argument_list|(
name|hit
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|dist
init|=
name|distance
argument_list|(
name|point
operator|.
name|getLat
argument_list|()
argument_list|,
name|point
operator|.
name|getLon
argument_list|()
argument_list|,
literal|51.11
argument_list|,
literal|9.851
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"distance to '"
operator|+
name|name
operator|+
literal|"'"
argument_list|,
name|dist
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|425000d
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|name
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"CZ"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DE"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"BE"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"NL"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"LU"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|dist
argument_list|,
name|closeTo
argument_list|(
literal|0d
argument_list|,
literal|0.1d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNeighbors
specifier|public
name|void
name|testNeighbors
parameter_list|()
block|{
comment|// Simple root case
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"7"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"h"
argument_list|,
literal|"k"
argument_list|,
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Root cases (Outer cells)
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"0"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"p"
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"b"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"8"
argument_list|,
literal|"9"
argument_list|,
literal|"c"
argument_list|,
literal|"x"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"p"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"n"
argument_list|,
literal|"q"
argument_list|,
literal|"r"
argument_list|,
literal|"0"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"z"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"8"
argument_list|,
literal|"b"
argument_list|,
literal|"w"
argument_list|,
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Root crossing dateline
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"2"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|"8"
argument_list|,
literal|"9"
argument_list|,
literal|"p"
argument_list|,
literal|"r"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"r"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"0"
argument_list|,
literal|"2"
argument_list|,
literal|"8"
argument_list|,
literal|"n"
argument_list|,
literal|"p"
argument_list|,
literal|"q"
argument_list|,
literal|"w"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
comment|// level1: simple case
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"dk"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"d5"
argument_list|,
literal|"d7"
argument_list|,
literal|"de"
argument_list|,
literal|"dh"
argument_list|,
literal|"dj"
argument_list|,
literal|"dm"
argument_list|,
literal|"ds"
argument_list|,
literal|"dt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Level1: crossing cells
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"d5"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"d4"
argument_list|,
literal|"d6"
argument_list|,
literal|"d7"
argument_list|,
literal|"dh"
argument_list|,
literal|"dk"
argument_list|,
literal|"9f"
argument_list|,
literal|"9g"
argument_list|,
literal|"9u"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
literal|"d0"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"d1"
argument_list|,
literal|"d2"
argument_list|,
literal|"d3"
argument_list|,
literal|"9b"
argument_list|,
literal|"9c"
argument_list|,
literal|"6p"
argument_list|,
literal|"6r"
argument_list|,
literal|"3z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|distance
specifier|public
specifier|static
name|double
name|distance
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
return|return
name|GeoUtils
operator|.
name|EARTH_SEMI_MAJOR_AXIS
operator|*
name|DistanceUtils
operator|.
name|distHaversineRAD
argument_list|(
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lat1
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lon1
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lat2
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lon2
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testRelationSupport
specifier|protected
specifier|static
name|boolean
name|testRelationSupport
parameter_list|(
name|SpatialOperation
name|relation
parameter_list|)
block|{
if|if
condition|(
name|relation
operator|==
name|SpatialOperation
operator|.
name|IsDisjointTo
condition|)
block|{
comment|// disjoint works in terms of intersection
name|relation
operator|=
name|SpatialOperation
operator|.
name|Intersects
expr_stmt|;
block|}
try|try
block|{
name|GeohashPrefixTree
name|tree
init|=
operator|new
name|GeohashPrefixTree
argument_list|(
name|SpatialContext
operator|.
name|GEO
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RecursivePrefixTreeStrategy
name|strategy
init|=
operator|new
name|RecursivePrefixTreeStrategy
argument_list|(
name|tree
argument_list|,
literal|"area"
argument_list|)
decl_stmt|;
name|Shape
name|shape
init|=
name|SpatialContext
operator|.
name|GEO
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SpatialArgs
name|args
init|=
operator|new
name|SpatialArgs
argument_list|(
name|relation
argument_list|,
name|shape
argument_list|)
decl_stmt|;
name|strategy
operator|.
name|makeQuery
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedSpatialOperation
name|e
parameter_list|)
block|{
specifier|final
name|SpatialOperation
name|finalRelation
init|=
name|relation
decl_stmt|;
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|GeoFilterIT
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|info
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Unsupported spatial operation {}"
argument_list|,
name|finalRelation
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|randomhash
specifier|protected
specifier|static
name|String
name|randomhash
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|randomhash
argument_list|(
name|random
argument_list|()
argument_list|,
name|length
argument_list|)
return|;
block|}
DECL|method|randomhash
specifier|protected
specifier|static
name|String
name|randomhash
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|randomhash
argument_list|(
name|random
argument_list|,
literal|2
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomhash
specifier|protected
specifier|static
name|String
name|randomhash
parameter_list|()
block|{
return|return
name|randomhash
argument_list|(
name|random
argument_list|()
argument_list|)
return|;
block|}
DECL|method|randomhash
specifier|protected
specifier|static
name|String
name|randomhash
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|final
name|char
index|[]
name|BASE_32
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|}
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|BASE_32
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|BASE_32
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

