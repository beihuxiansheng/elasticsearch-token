begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|geodistance
operator|.
name|InternalGeoDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_class
DECL|class|GeoDistanceIT
specifier|public
class|class
name|GeoDistanceIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|src_lat
specifier|private
specifier|static
specifier|final
name|double
name|src_lat
init|=
literal|32.798
decl_stmt|;
DECL|field|src_lon
specifier|private
specifier|static
specifier|final
name|double
name|src_lon
init|=
operator|-
literal|117.151
decl_stmt|;
DECL|field|tgt_lat
specifier|private
specifier|static
specifier|final
name|double
name|tgt_lat
init|=
literal|32.81
decl_stmt|;
DECL|field|tgt_lon
specifier|private
specifier|static
specifier|final
name|double
name|tgt_lon
init|=
operator|-
literal|117.21
decl_stmt|;
DECL|field|tgt_geohash
specifier|private
specifier|static
specifier|final
name|String
name|tgt_geohash
init|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|tgt_lon
argument_list|,
name|tgt_lat
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|CustomScriptPlugin
operator|.
name|class
argument_list|,
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|class|CustomScriptPlugin
specifier|public
specifier|static
class|class
name|CustomScriptPlugin
extends|extends
name|MockScriptPlugin
block|{
annotation|@
name|Override
DECL|method|pluginScripts
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pluginScripts
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"arcDistance"
argument_list|,
name|vars
lambda|->
name|distanceScript
argument_list|(
name|vars
argument_list|,
name|location
lambda|->
name|location
operator|.
name|arcDistance
argument_list|(
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"arcDistanceGeoUtils"
argument_list|,
name|vars
lambda|->
name|distanceScript
argument_list|(
name|vars
argument_list|,
name|location
lambda|->
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|location
operator|.
name|getLat
argument_list|()
argument_list|,
name|location
operator|.
name|getLon
argument_list|()
argument_list|,
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"planeDistance"
argument_list|,
name|vars
lambda|->
name|distanceScript
argument_list|(
name|vars
argument_list|,
name|location
lambda|->
name|location
operator|.
name|planeDistance
argument_list|(
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"geohashDistance"
argument_list|,
name|vars
lambda|->
name|distanceScript
argument_list|(
name|vars
argument_list|,
name|location
lambda|->
name|location
operator|.
name|geohashDistance
argument_list|(
name|tgt_geohash
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"arcDistance(lat, lon + 360)/1000d"
argument_list|,
name|vars
lambda|->
name|distanceScript
argument_list|(
name|vars
argument_list|,
name|location
lambda|->
name|location
operator|.
name|arcDistance
argument_list|(
name|tgt_lat
argument_list|,
name|tgt_lon
operator|+
literal|360
argument_list|)
operator|/
literal|1000d
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"arcDistance(lat + 360, lon)/1000d"
argument_list|,
name|vars
lambda|->
name|distanceScript
argument_list|(
name|vars
argument_list|,
name|location
lambda|->
name|location
operator|.
name|arcDistance
argument_list|(
name|tgt_lat
operator|+
literal|360
argument_list|,
name|tgt_lon
argument_list|)
operator|/
literal|1000d
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|scripts
return|;
block|}
DECL|method|distanceScript
specifier|static
name|Double
name|distanceScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|,
name|Function
argument_list|<
name|ScriptDocValues
operator|.
name|GeoPoints
argument_list|,
name|Double
argument_list|>
name|distance
parameter_list|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|doc
init|=
operator|(
name|Map
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
return|return
name|distance
operator|.
name|apply
argument_list|(
operator|(
name|ScriptDocValues
operator|.
name|GeoPoints
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"location"
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Before
DECL|method|setupTestIndex
specifier|public
name|void
name|setupTestIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|Version
name|version
init|=
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_point"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_2_0
argument_list|)
condition|)
block|{
name|xContentBuilder
operator|.
name|field
argument_list|(
literal|"lat_lon"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|xContentBuilder
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
block|}
DECL|method|testDistanceScript
specifier|public
name|void
name|testDistanceScript
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"TestPosition"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|src_lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|src_lon
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// Test doc['location'].arcDistance(lat, lon)
name|SearchResponse
name|searchResponse1
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addStoredField
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"distance"
argument_list|,
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"arcDistance"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Double
name|resultDistance1
init|=
name|searchResponse1
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"distance"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultDistance1
argument_list|,
name|closeTo
argument_list|(
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|src_lat
argument_list|,
name|src_lon
argument_list|,
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
argument_list|,
literal|0.01d
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test doc['location'].planeDistance(lat, lon)
name|SearchResponse
name|searchResponse2
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addStoredField
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"distance"
argument_list|,
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"planeDistance"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Double
name|resultDistance2
init|=
name|searchResponse2
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"distance"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultDistance2
argument_list|,
name|closeTo
argument_list|(
name|GeoUtils
operator|.
name|planeDistance
argument_list|(
name|src_lat
argument_list|,
name|src_lon
argument_list|,
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
argument_list|,
literal|0.01d
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test doc['location'].geohashDistance(lat, lon)
name|SearchResponse
name|searchResponse4
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addStoredField
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"distance"
argument_list|,
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"geohashDistance"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Double
name|resultDistance4
init|=
name|searchResponse4
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"distance"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultDistance4
argument_list|,
name|closeTo
argument_list|(
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|src_lat
argument_list|,
name|src_lon
argument_list|,
name|GeoHashUtils
operator|.
name|decodeLatitude
argument_list|(
name|tgt_geohash
argument_list|)
argument_list|,
name|GeoHashUtils
operator|.
name|decodeLongitude
argument_list|(
name|tgt_geohash
argument_list|)
argument_list|)
argument_list|,
literal|0.01d
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test doc['location'].arcDistance(lat, lon + 360)/1000d
name|SearchResponse
name|searchResponse5
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addStoredField
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"distance"
argument_list|,
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"arcDistance(lat, lon + 360)/1000d"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Double
name|resultArcDistance5
init|=
name|searchResponse5
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"distance"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultArcDistance5
argument_list|,
name|closeTo
argument_list|(
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|src_lat
argument_list|,
name|src_lon
argument_list|,
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
operator|/
literal|1000d
argument_list|,
literal|0.01d
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test doc['location'].arcDistance(lat + 360, lon)/1000d
name|SearchResponse
name|searchResponse6
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addStoredField
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"distance"
argument_list|,
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"arcDistance(lat + 360, lon)/1000d"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Double
name|resultArcDistance6
init|=
name|searchResponse6
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"distance"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resultArcDistance6
argument_list|,
name|closeTo
argument_list|(
name|GeoUtils
operator|.
name|arcDistance
argument_list|(
name|src_lat
argument_list|,
name|src_lon
argument_list|,
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
operator|/
literal|1000d
argument_list|,
literal|0.01d
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoDistanceAggregation
specifier|public
name|void
name|testGeoDistanceAggregation
parameter_list|()
throws|throws
name|IOException
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"TestPosition"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|src_lat
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|src_lon
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchRequestBuilder
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"TestPosition"
decl_stmt|;
name|search
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|geoDistance
argument_list|(
name|name
argument_list|,
operator|new
name|GeoPoint
argument_list|(
name|tgt_lat
argument_list|,
name|tgt_lon
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"location"
argument_list|)
operator|.
name|unit
argument_list|(
name|DistanceUnit
operator|.
name|MILES
argument_list|)
operator|.
name|addRange
argument_list|(
literal|0
argument_list|,
literal|25000
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// no hits please
name|SearchResponse
name|response
init|=
name|search
operator|.
name|get
argument_list|()
decl_stmt|;
name|Aggregations
name|aggregations
init|=
name|response
operator|.
name|getAggregations
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|aggregations
argument_list|)
expr_stmt|;
name|InternalGeoDistance
name|geoDistance
init|=
name|aggregations
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|geoDistance
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Range
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
operator|(
operator|(
name|Range
operator|)
name|geoDistance
operator|)
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Buckets should not be null"
argument_list|,
name|buckets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of buckets"
argument_list|,
literal|1
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected doc count for geo distance"
argument_list|,
literal|1
argument_list|,
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

