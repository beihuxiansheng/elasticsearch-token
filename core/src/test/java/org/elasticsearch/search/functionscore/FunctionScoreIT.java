begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|CombineFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FiltersFunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|FunctionScoreQueryBuilder
operator|.
name|FilterFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScoreAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|searchRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|functionScoreQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|searchSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|FunctionScoreIT
specifier|public
class|class
name|FunctionScoreIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|TYPE
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|INDEX
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"index"
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|CustomScriptPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|class|CustomScriptPlugin
specifier|public
specifier|static
class|class
name|CustomScriptPlugin
extends|extends
name|MockScriptPlugin
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pluginScripts
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pluginScripts
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|vars
lambda|->
literal|1.0d
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"get score value"
argument_list|,
name|vars
lambda|->
operator|(
operator|(
name|ScoreAccessor
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_score"
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"return (doc['num'].value)"
argument_list|,
name|vars
lambda|->
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|doc
init|=
operator|(
name|Map
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|ScriptDocValues
operator|.
name|Longs
name|num
init|=
operator|(
name|ScriptDocValues
operator|.
name|Longs
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"num"
argument_list|)
decl_stmt|;
return|return
name|num
operator|.
name|getValue
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"doc['random_score']"
argument_list|,
name|vars
lambda|->
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|doc
init|=
operator|(
name|Map
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|ScriptDocValues
operator|.
name|Doubles
name|randomScore
init|=
operator|(
name|ScriptDocValues
operator|.
name|Doubles
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"random_score"
argument_list|)
decl_stmt|;
return|return
name|randomScore
operator|.
name|getValue
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|scripts
return|;
block|}
block|}
DECL|method|testScriptScoresNested
specifier|public
name|void
name|testScriptScoresNested
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dummy_field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Script
name|scriptOne
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"1"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|scriptTwo
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"get score value"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|scriptFunction
argument_list|(
name|scriptOne
argument_list|)
argument_list|)
argument_list|,
name|scriptFunction
argument_list|(
name|scriptTwo
argument_list|)
argument_list|)
argument_list|,
name|scriptFunction
argument_list|(
name|scriptTwo
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScriptScoresWithAgg
specifier|public
name|void
name|testScriptScoresWithAgg
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dummy_field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"get score value"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
argument_list|)
operator|.
name|aggregation
argument_list|(
name|terms
argument_list|(
literal|"score_agg"
argument_list|)
operator|.
name|script
argument_list|(
name|script
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Terms
operator|)
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"score_agg"
argument_list|)
operator|)
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyAsString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Terms
operator|)
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"score_agg"
argument_list|)
operator|)
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinScoreFunctionScoreBasic
specifier|public
name|void
name|testMinScoreFunctionScoreBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"num"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|float
name|score
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|float
name|minScore
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"num"
argument_list|,
literal|2
argument_list|)
operator|.
name|field
argument_list|(
literal|"random_score"
argument_list|,
name|score
argument_list|)
comment|// Pass the random score as a document field so that it can be extracted in the script
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"doc['random_score']"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|<
name|minScore
condition|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
operator|new
name|FilterFunctionBuilder
index|[]
block|{
operator|new
name|FilterFunctionBuilder
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
block|,
operator|new
name|FilterFunctionBuilder
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
block|}
argument_list|)
operator|.
name|scoreMode
argument_list|(
name|FiltersFunctionScoreQuery
operator|.
name|ScoreMode
operator|.
name|AVG
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|score
operator|<
name|minScore
condition|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMinScoreFunctionScoreManyDocsAndRandomMinScore
specifier|public
name|void
name|testMinScoreFunctionScoreManyDocsAndRandomMinScore
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|scoreOffset
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|2
operator|*
name|numDocs
argument_list|,
literal|2
operator|*
name|numDocs
argument_list|)
decl_stmt|;
name|int
name|minScore
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|2
operator|*
name|numDocs
argument_list|,
literal|2
operator|*
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
name|i
operator|+
name|scoreOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"return (doc['num'].value)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numMatchingDocs
init|=
name|numDocs
operator|+
name|scoreOffset
operator|-
name|minScore
decl_stmt|;
if|if
condition|(
name|numMatchingDocs
operator|<
literal|0
condition|)
block|{
name|numMatchingDocs
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|numMatchingDocs
operator|>
name|numDocs
condition|)
block|{
name|numMatchingDocs
operator|=
name|numDocs
expr_stmt|;
block|}
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMinScoreSearchResponses
argument_list|(
name|numDocs
argument_list|,
name|searchResponse
argument_list|,
name|numMatchingDocs
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|,
operator|new
name|FilterFunctionBuilder
index|[]
block|{
operator|new
name|FilterFunctionBuilder
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
block|,
operator|new
name|FilterFunctionBuilder
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
block|}
argument_list|)
operator|.
name|scoreMode
argument_list|(
name|FiltersFunctionScoreQuery
operator|.
name|ScoreMode
operator|.
name|AVG
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMinScoreSearchResponses
argument_list|(
name|numDocs
argument_list|,
name|searchResponse
argument_list|,
name|numMatchingDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMinScoreSearchResponses
specifier|protected
name|void
name|assertMinScoreSearchResponses
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|SearchResponse
name|searchResponse
parameter_list|,
name|int
name|numMatchingDocs
parameter_list|)
block|{
name|assertSearchResponse
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
name|numMatchingDocs
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|hitId
init|=
name|numDocs
operator|-
literal|1
init|;
operator|(
name|numDocs
operator|-
name|hitId
operator|)
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
condition|;
name|hitId
operator|--
control|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|pos
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|hitId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
block|}
comment|/** make sure min_score works if functions is empty, see https://github.com/elastic/elasticsearch/issues/10253 */
DECL|method|testWithEmptyFunctions
specifier|public
name|void
name|testWithEmptyFunctions
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"testtype"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"test text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|termQuery
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|termQuery
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|termQueryScore
init|=
name|termQuery
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
decl_stmt|;
for|for
control|(
name|CombineFunction
name|combineFunction
range|:
name|CombineFunction
operator|.
name|values
argument_list|()
control|)
block|{
name|testMinScoreApplied
argument_list|(
name|combineFunction
argument_list|,
name|termQueryScore
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMinScoreApplied
specifier|protected
name|void
name|testMinScoreApplied
parameter_list|(
name|CombineFunction
name|boostMode
parameter_list|,
name|float
name|expectedScore
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|boostMode
argument_list|)
operator|.
name|setMinScore
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScore
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|boostMode
argument_list|)
operator|.
name|setMinScore
argument_list|(
literal|2f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

