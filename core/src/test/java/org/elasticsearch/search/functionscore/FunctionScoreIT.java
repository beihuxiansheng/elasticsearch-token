begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FieldValueFactorFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|FunctionScoreQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|weight
operator|.
name|WeightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|searchRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|constantScoreQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|functionScoreQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|exponentialDecayFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|fieldValueFactorFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|gaussDecayFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|linearDecayFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|randomFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|weightFactorFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|searchSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
annotation|@
name|Slow
DECL|class|FunctionScoreIT
specifier|public
class|class
name|FunctionScoreIT
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|TYPE
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|INDEX
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"index"
decl_stmt|;
DECL|field|TEXT_FIELD
specifier|static
specifier|final
name|String
name|TEXT_FIELD
init|=
literal|"text_field"
decl_stmt|;
DECL|field|DOUBLE_FIELD
specifier|static
specifier|final
name|String
name|DOUBLE_FIELD
init|=
literal|"double_field"
decl_stmt|;
DECL|field|GEO_POINT_FIELD
specifier|static
specifier|final
name|String
name|GEO_POINT_FIELD
init|=
literal|"geo_point_field"
decl_stmt|;
DECL|field|SIMPLE_DOC
specifier|static
specifier|final
name|XContentBuilder
name|SIMPLE_DOC
decl_stmt|;
DECL|field|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
specifier|static
specifier|final
name|XContentBuilder
name|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
decl_stmt|;
annotation|@
name|Test
DECL|method|testExplainQueryOnlyOnce
specifier|public
name|void
name|testExplainQueryOnlyOnce
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"num"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"num"
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|gaussDecayFunction
argument_list|(
literal|"num"
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|exponentialDecayFunction
argument_list|(
literal|"num"
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|linearDecayFunction
argument_list|(
literal|"num"
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|explanation
init|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|checkQueryExplanationAppearsOnlyOnce
argument_list|(
name|explanation
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|fieldValueFactorFunction
argument_list|(
literal|"num"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|explanation
operator|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|checkQueryExplanationAppearsOnlyOnce
argument_list|(
name|explanation
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|searchType
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|randomFunction
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|explanation
operator|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|checkQueryExplanationAppearsOnlyOnce
argument_list|(
name|explanation
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueryExplanationAppearsOnlyOnce
specifier|private
name|void
name|checkQueryExplanationAppearsOnlyOnce
parameter_list|(
name|String
name|explanation
parameter_list|)
block|{
comment|// use some substring of the query explanation and see if it appears twice
name|String
name|queryExplanation
init|=
literal|"idf(docFreq=1, maxDocs=1)"
decl_stmt|;
name|int
name|queryExplanationIndex
init|=
name|explanation
operator|.
name|indexOf
argument_list|(
name|queryExplanation
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|queryExplanationIndex
argument_list|,
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|queryExplanationIndex
operator|=
name|explanation
operator|.
name|indexOf
argument_list|(
name|queryExplanation
argument_list|,
name|queryExplanationIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queryExplanationIndex
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
static|static
block|{
name|XContentBuilder
name|simpleDoc
decl_stmt|;
name|XContentBuilder
name|mappingWithDoubleAndGeoPointAndTestField
decl_stmt|;
try|try
block|{
name|simpleDoc
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
operator|.
name|startObject
argument_list|(
name|GEO_POINT_FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|10
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|20
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
name|DOUBLE_FIELD
argument_list|,
name|Math
operator|.
name|E
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Exception while initializing FunctionScoreIT"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|SIMPLE_DOC
operator|=
name|simpleDoc
expr_stmt|;
try|try
block|{
name|mappingWithDoubleAndGeoPointAndTestField
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|GEO_POINT_FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_point"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|DOUBLE_FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Exception while initializing FunctionScoreIT"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
operator|=
name|mappingWithDoubleAndGeoPointAndTestField
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExplain
specifier|public
name|void
name|testExplain
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|SIMPLE_DOC
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|responseWithWeights
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|gaussDecayFunction
argument_list|(
name|GEO_POINT_FIELD
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|"1000km"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|fieldValueFactorFunction
argument_list|(
name|DOUBLE_FIELD
argument_list|)
operator|.
name|modifier
argument_list|(
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|LN
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_index['"
operator|+
name|TEXT_FIELD
operator|+
literal|"']['value'].tf()"
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|responseWithWeights
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getExplanation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"6.0 = function score, product of:\n  1.0 = ConstantScore(text_field:value), product of:\n    1.0 = boost\n    1.0 = queryNorm\n  6.0 = min of:\n    6.0 = function score, score mode [multiply]\n      1.0 = function score, product of:\n        1.0 = match filter: *:*\n        1.0 = Function for field geo_point_field:\n          1.0 = exp(-0.5*pow(MIN of: [Math.max(arcDistance([10.0, 20.0](=doc value),[10.0, 20.0](=origin)) - 0.0(=offset), 0)],2.0)/7.213475204444817E11)\n      2.0 = function score, product of:\n        1.0 = match filter: *:*\n        2.0 = product of:\n          1.0 = field value function: ln(doc['double_field'].value * factor=1.0)\n          2.0 = weight\n      3.0 = function score, product of:\n        1.0 = match filter: *:*\n        3.0 = product of:\n          1.0 = script score function, computed with script:\"[script: _index['text_field']['value'].tf(), type: inline, lang: null, params: null]\n            1.0 = _score: \n              1.0 = ConstantScore(text_field:value), product of:\n                1.0 = boost\n                1.0 = queryNorm\n          3.0 = weight\n    3.4028235E38 = maxBoost\n  1.0 = queryBoost\n"
argument_list|)
argument_list|)
expr_stmt|;
name|responseWithWeights
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|weightFactorFunction
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|responseWithWeights
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getExplanation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"4.0 = function score, product of:\n  1.0 = ConstantScore(text_field:value), product of:\n    1.0 = boost\n    1.0 = queryNorm\n  4.0 = min of:\n    4.0 = product of:\n      1.0 = constant score 1.0 - no function provided\n      4.0 = weight\n    3.4028235E38 = maxBoost\n  1.0 = queryBoost\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|simpleWeightedFunctionsTest
specifier|public
name|void
name|simpleWeightedFunctionsTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|SIMPLE_DOC
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|gaussDecayFunction
argument_list|(
name|GEO_POINT_FIELD
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|"1000km"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|fieldValueFactorFunction
argument_list|(
name|DOUBLE_FIELD
argument_list|)
operator|.
name|modifier
argument_list|(
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|LN
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_index['"
operator|+
name|TEXT_FIELD
operator|+
literal|"']['value'].tf()"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|SearchResponse
name|responseWithWeights
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|gaussDecayFunction
argument_list|(
name|GEO_POINT_FIELD
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|"1000km"
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|fieldValueFactorFunction
argument_list|(
name|DOUBLE_FIELD
argument_list|)
operator|.
name|modifier
argument_list|(
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|LN
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_index['"
operator|+
name|TEXT_FIELD
operator|+
literal|"']['value'].tf()"
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|responseWithWeights
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|is
argument_list|(
literal|8.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|simpleWeightedFunctionsTestWithRandomWeightsAndRandomCombineMode
specifier|public
name|void
name|simpleWeightedFunctionsTestWithRandomWeightsAndRandomCombineMode
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|XContentBuilder
name|doc
init|=
name|SIMPLE_DOC
decl_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ScoreFunctionBuilder
index|[]
name|scoreFunctionBuilders
init|=
name|getScoreFunctionBuilders
argument_list|()
decl_stmt|;
name|float
index|[]
name|weights
init|=
name|createRandomWeights
argument_list|(
name|scoreFunctionBuilders
operator|.
name|length
argument_list|)
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|getScores
argument_list|(
name|scoreFunctionBuilders
argument_list|)
decl_stmt|;
name|String
name|scoreMode
init|=
name|getRandomScoreMode
argument_list|()
decl_stmt|;
name|FunctionScoreQueryBuilder
name|withWeights
init|=
name|functionScoreQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|scoreMode
argument_list|(
name|scoreMode
argument_list|)
decl_stmt|;
name|int
name|weightscounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ScoreFunctionBuilder
name|builder
range|:
name|scoreFunctionBuilders
control|)
block|{
name|withWeights
operator|.
name|add
argument_list|(
name|builder
operator|.
name|setWeight
argument_list|(
name|weights
index|[
name|weightscounter
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|weightscounter
operator|++
expr_stmt|;
block|}
name|SearchResponse
name|responseWithWeights
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|withWeights
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|double
name|expectedScore
init|=
name|computeExpectedScore
argument_list|(
name|weights
argument_list|,
name|scores
argument_list|,
name|scoreMode
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|float
operator|)
name|expectedScore
operator|/
name|responseWithWeights
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|computeExpectedScore
specifier|protected
name|double
name|computeExpectedScore
parameter_list|(
name|float
index|[]
name|weights
parameter_list|,
name|float
index|[]
name|scores
parameter_list|,
name|String
name|scoreMode
parameter_list|)
block|{
name|double
name|expectedScore
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
literal|"multiply"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|=
literal|1.0
expr_stmt|;
block|}
if|if
condition|(
literal|"max"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|=
name|Float
operator|.
name|MAX_VALUE
operator|*
operator|-
literal|1.0
expr_stmt|;
block|}
if|if
condition|(
literal|"min"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|=
name|Float
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|float
name|weightSum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|weights
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|functionScore
init|=
operator|(
name|double
operator|)
name|weights
index|[
name|i
index|]
operator|*
name|scores
index|[
name|i
index|]
decl_stmt|;
name|weightSum
operator|+=
name|weights
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
literal|"avg"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|+=
name|functionScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|=
name|Math
operator|.
name|max
argument_list|(
name|functionScore
argument_list|,
name|expectedScore
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|=
name|Math
operator|.
name|min
argument_list|(
name|functionScore
argument_list|,
name|expectedScore
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sum"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|+=
name|functionScore
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"multiply"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|*=
name|functionScore
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"avg"
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|)
condition|)
block|{
name|expectedScore
operator|/=
name|weightSum
expr_stmt|;
block|}
return|return
name|expectedScore
return|;
block|}
annotation|@
name|Test
DECL|method|simpleWeightedFunctionsTestSingleFunction
specifier|public
name|void
name|simpleWeightedFunctionsTestSingleFunction
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|XContentBuilder
name|doc
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
operator|.
name|startObject
argument_list|(
name|GEO_POINT_FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|12
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|21
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
name|DOUBLE_FIELD
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ScoreFunctionBuilder
index|[]
name|scoreFunctionBuilders
init|=
name|getScoreFunctionBuilders
argument_list|()
decl_stmt|;
name|ScoreFunctionBuilder
name|scoreFunctionBuilder
init|=
name|scoreFunctionBuilders
index|[
name|randomInt
argument_list|(
literal|3
argument_list|)
index|]
decl_stmt|;
name|float
index|[]
name|weights
init|=
name|createRandomWeights
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|getScores
argument_list|(
name|scoreFunctionBuilder
argument_list|)
decl_stmt|;
name|FunctionScoreQueryBuilder
name|withWeights
init|=
name|functionScoreQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|withWeights
operator|.
name|add
argument_list|(
name|scoreFunctionBuilder
operator|.
name|setWeight
argument_list|(
name|weights
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|responseWithWeights
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|withWeights
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|scores
index|[
literal|0
index|]
operator|*
name|weights
index|[
literal|0
index|]
operator|/
name|responseWithWeights
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.0
argument_list|,
literal|1.e-6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRandomScoreMode
specifier|private
name|String
name|getRandomScoreMode
parameter_list|()
block|{
name|String
index|[]
name|scoreModes
init|=
block|{
literal|"avg"
block|,
literal|"sum"
block|,
literal|"min"
block|,
literal|"max"
block|,
literal|"multiply"
block|}
decl_stmt|;
return|return
name|scoreModes
index|[
name|randomInt
argument_list|(
name|scoreModes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
return|;
block|}
DECL|method|getScores
specifier|private
name|float
index|[]
name|getScores
parameter_list|(
name|ScoreFunctionBuilder
modifier|...
name|scoreFunctionBuilders
parameter_list|)
block|{
name|float
index|[]
name|scores
init|=
operator|new
name|float
index|[
name|scoreFunctionBuilders
operator|.
name|length
index|]
decl_stmt|;
name|int
name|scorecounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ScoreFunctionBuilder
name|builder
range|:
name|scoreFunctionBuilders
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|termQuery
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|builder
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|scores
index|[
name|scorecounter
index|]
operator|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
expr_stmt|;
name|scorecounter
operator|++
expr_stmt|;
block|}
return|return
name|scores
return|;
block|}
DECL|method|createRandomWeights
specifier|private
name|float
index|[]
name|createRandomWeights
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|float
index|[]
name|weights
init|=
operator|new
name|float
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|weights
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|weights
index|[
name|i
index|]
operator|=
name|randomFloat
argument_list|()
operator|*
operator|(
name|randomBoolean
argument_list|()
condition|?
literal|1.0f
else|:
operator|-
literal|1.0f
operator|)
operator|*
name|randomInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|1.e-6f
expr_stmt|;
block|}
return|return
name|weights
return|;
block|}
DECL|method|getScoreFunctionBuilders
specifier|public
name|ScoreFunctionBuilder
index|[]
name|getScoreFunctionBuilders
parameter_list|()
block|{
name|ScoreFunctionBuilder
index|[]
name|builders
init|=
operator|new
name|ScoreFunctionBuilder
index|[
literal|4
index|]
decl_stmt|;
name|builders
index|[
literal|0
index|]
operator|=
name|gaussDecayFunction
argument_list|(
name|GEO_POINT_FIELD
argument_list|,
operator|new
name|GeoPoint
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|"1000km"
argument_list|)
expr_stmt|;
name|builders
index|[
literal|1
index|]
operator|=
name|randomFunction
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|builders
index|[
literal|2
index|]
operator|=
name|fieldValueFactorFunction
argument_list|(
name|DOUBLE_FIELD
argument_list|)
operator|.
name|modifier
argument_list|(
name|FieldValueFactorFunction
operator|.
name|Modifier
operator|.
name|LN
argument_list|)
expr_stmt|;
name|builders
index|[
literal|3
index|]
operator|=
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_index['"
operator|+
name|TEXT_FIELD
operator|+
literal|"']['value'].tf()"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builders
return|;
block|}
annotation|@
name|Test
DECL|method|checkWeightOnlyCreatesBoostFunction
specifier|public
name|void
name|checkWeightOnlyCreatesBoostFunction
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|SIMPLE_DOC
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|String
name|query
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WeightBuilder
argument_list|()
operator|.
name|setWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|weightFactorFunction
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScriptScoresNested
specifier|public
name|void
name|testScriptScoresNested
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dummy_field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_score.doubleValue()"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_score.doubleValue()"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScriptScoresWithAgg
specifier|public
name|void
name|testScriptScoresWithAgg
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dummy_field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_score.doubleValue()"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|aggregation
argument_list|(
name|terms
argument_list|(
literal|"score_agg"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_score.doubleValue()"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|score
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Terms
operator|)
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"score_agg"
argument_list|)
operator|)
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyAsString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Terms
operator|)
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"score_agg"
argument_list|)
operator|)
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinScoreFunctionScoreBasic
specifier|public
name|void
name|testMinScoreFunctionScoreBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|index
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"num"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|float
name|score
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|float
name|minScore
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|score
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|score
operator|<
name|minScore
condition|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|score
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
operator|new
name|Script
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|score
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|scoreMode
argument_list|(
literal|"avg"
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|score
operator|<
name|minScore
condition|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMinScoreFunctionScoreManyDocsAndRandomMinScore
specifier|public
name|void
name|testMinScoreFunctionScoreManyDocsAndRandomMinScore
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|scoreOffset
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|2
operator|*
name|numDocs
argument_list|,
literal|2
operator|*
name|numDocs
argument_list|)
decl_stmt|;
name|int
name|minScore
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|2
operator|*
name|numDocs
argument_list|,
literal|2
operator|*
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
name|i
operator|+
name|scoreOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
literal|"return (doc['num'].value)"
argument_list|)
decl_stmt|;
name|int
name|numMatchingDocs
init|=
name|numDocs
operator|+
name|scoreOffset
operator|-
name|minScore
decl_stmt|;
if|if
condition|(
name|numMatchingDocs
operator|<
literal|0
condition|)
block|{
name|numMatchingDocs
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|numMatchingDocs
operator|>
name|numDocs
condition|)
block|{
name|numMatchingDocs
operator|=
name|numDocs
expr_stmt|;
block|}
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMinScoreSearchResponses
argument_list|(
name|numDocs
argument_list|,
name|searchResponse
argument_list|,
name|numMatchingDocs
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|scriptFunction
argument_list|(
name|script
argument_list|)
argument_list|)
operator|.
name|scoreMode
argument_list|(
literal|"avg"
argument_list|)
operator|.
name|setMinScore
argument_list|(
name|minScore
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMinScoreSearchResponses
argument_list|(
name|numDocs
argument_list|,
name|searchResponse
argument_list|,
name|numMatchingDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMinScoreSearchResponses
specifier|protected
name|void
name|assertMinScoreSearchResponses
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|SearchResponse
name|searchResponse
parameter_list|,
name|int
name|numMatchingDocs
parameter_list|)
block|{
name|assertSearchResponse
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|is
argument_list|(
name|numMatchingDocs
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|hitId
init|=
name|numDocs
operator|-
literal|1
init|;
operator|(
name|numDocs
operator|-
name|hitId
operator|)
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
condition|;
name|hitId
operator|--
control|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|pos
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|hitId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWithEmptyFunctions
specifier|public
name|void
name|testWithEmptyFunctions
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"testtype"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"test text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// make sure that min_score works if functions is empty, see https://github.com/elastic/elasticsearch/issues/10253
name|float
name|termQueryScore
init|=
literal|0.19178301f
decl_stmt|;
name|testMinScoreApplied
argument_list|(
literal|"sum"
argument_list|,
name|termQueryScore
argument_list|)
expr_stmt|;
name|testMinScoreApplied
argument_list|(
literal|"avg"
argument_list|,
name|termQueryScore
argument_list|)
expr_stmt|;
name|testMinScoreApplied
argument_list|(
literal|"max"
argument_list|,
name|termQueryScore
argument_list|)
expr_stmt|;
name|testMinScoreApplied
argument_list|(
literal|"min"
argument_list|,
name|termQueryScore
argument_list|)
expr_stmt|;
name|testMinScoreApplied
argument_list|(
literal|"multiply"
argument_list|,
name|termQueryScore
argument_list|)
expr_stmt|;
name|testMinScoreApplied
argument_list|(
literal|"replace"
argument_list|,
name|termQueryScore
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinScoreApplied
specifier|protected
name|void
name|testMinScoreApplied
parameter_list|(
name|String
name|boostMode
parameter_list|,
name|float
name|expectedScore
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|boostMode
argument_list|)
operator|.
name|setMinScore
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedScore
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|()
operator|.
name|source
argument_list|(
name|searchSource
argument_list|()
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|query
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"text"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|boostMode
argument_list|(
name|boostMode
argument_list|)
operator|.
name|setMinScore
argument_list|(
literal|2f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

