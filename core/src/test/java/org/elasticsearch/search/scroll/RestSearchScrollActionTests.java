begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.scroll
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|scroll
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchScrollAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|FakeRestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|RestSearchScrollActionTests
specifier|public
class|class
name|RestSearchScrollActionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testParseSearchScrollRequestWithInvalidJsonThrowsException
specifier|public
name|void
name|testParseSearchScrollRequestWithInvalidJsonThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|RestSearchScrollAction
name|action
init|=
operator|new
name|RestSearchScrollAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|mock
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{invalid_json}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|action
operator|.
name|prepareRequest
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Failed to parse request body"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBodyParamsOverrideQueryStringParams
specifier|public
name|void
name|testBodyParamsOverrideQueryStringParams
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeClient
name|nodeClient
init|=
name|mock
argument_list|(
name|NodeClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|nodeClient
argument_list|)
operator|.
name|searchScroll
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|RestSearchScrollAction
name|action
init|=
operator|new
name|RestSearchScrollAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|mock
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"scroll_id"
argument_list|,
literal|"QUERY_STRING"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"scroll"
argument_list|,
literal|"1000m"
argument_list|)
expr_stmt|;
name|RestRequest
name|request
init|=
operator|new
name|FakeRestRequest
operator|.
name|Builder
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|)
operator|.
name|withParams
argument_list|(
name|params
argument_list|)
operator|.
name|withContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"scroll_id\":\"BODY\", \"scroll\":\"1m\"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FakeRestChannel
name|channel
init|=
operator|new
name|FakeRestChannel
argument_list|(
name|request
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|action
operator|.
name|handleRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodeClient
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|SearchScrollRequest
argument_list|>
name|argument
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|SearchScrollRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|nodeClient
argument_list|)
operator|.
name|searchScroll
argument_list|(
name|argument
operator|.
name|capture
argument_list|()
argument_list|,
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|SearchScrollRequest
name|searchScrollRequest
init|=
name|argument
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BODY"
argument_list|,
name|searchScrollRequest
operator|.
name|scrollId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1m"
argument_list|,
name|searchScrollRequest
operator|.
name|scroll
argument_list|()
operator|.
name|keepAlive
argument_list|()
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

