begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.phrase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|LaplaceModelTests
specifier|public
class|class
name|LaplaceModelTests
extends|extends
name|SmoothingModelTestCase
block|{
annotation|@
name|Override
DECL|method|createTestModel
specifier|protected
name|SmoothingModel
name|createTestModel
parameter_list|()
block|{
return|return
name|createRandomModel
argument_list|()
return|;
block|}
DECL|method|createRandomModel
specifier|static
name|SmoothingModel
name|createRandomModel
parameter_list|()
block|{
return|return
operator|new
name|Laplace
argument_list|(
name|randomDoubleBetween
argument_list|(
literal|0.0
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * mutate the given model so the returned smoothing model is different      */
annotation|@
name|Override
DECL|method|createMutation
specifier|protected
name|Laplace
name|createMutation
parameter_list|(
name|SmoothingModel
name|input
parameter_list|)
block|{
name|Laplace
name|original
init|=
operator|(
name|Laplace
operator|)
name|input
decl_stmt|;
return|return
operator|new
name|Laplace
argument_list|(
name|original
operator|.
name|getAlpha
argument_list|()
operator|+
literal|0.1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertWordScorer
name|void
name|assertWordScorer
parameter_list|(
name|WordScorer
name|wordScorer
parameter_list|,
name|SmoothingModel
name|input
parameter_list|)
block|{
name|Laplace
name|model
init|=
operator|(
name|Laplace
operator|)
name|input
decl_stmt|;
name|assertThat
argument_list|(
name|wordScorer
argument_list|,
name|instanceOf
argument_list|(
name|LaplaceScorer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|getAlpha
argument_list|()
argument_list|,
operator|(
operator|(
name|LaplaceScorer
operator|)
name|wordScorer
operator|)
operator|.
name|alpha
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|protected
name|SmoothingModel
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Laplace
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
block|}
end_class

end_unit

