begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|CategoryQueryContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|CategoryQueryContextTests
specifier|public
class|class
name|CategoryQueryContextTests
extends|extends
name|QueryContextTestCase
argument_list|<
name|CategoryQueryContext
argument_list|>
block|{
DECL|method|randomCategoryQueryContext
specifier|public
specifier|static
name|CategoryQueryContext
name|randomCategoryQueryContext
parameter_list|()
block|{
specifier|final
name|CategoryQueryContext
operator|.
name|Builder
name|builder
init|=
name|CategoryQueryContext
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setCategory
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|builder
operator|::
name|setBoost
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|builder
operator|::
name|setPrefix
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createTestModel
specifier|protected
name|CategoryQueryContext
name|createTestModel
parameter_list|()
block|{
return|return
name|randomCategoryQueryContext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fromXContent
specifier|protected
name|CategoryQueryContext
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|CategoryQueryContext
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
DECL|method|testNullCategoryIsIllegal
specifier|public
name|void
name|testNullCategoryIsIllegal
parameter_list|()
block|{
specifier|final
name|CategoryQueryContext
name|categoryQueryContext
init|=
name|randomCategoryQueryContext
argument_list|()
decl_stmt|;
specifier|final
name|CategoryQueryContext
operator|.
name|Builder
name|builder
init|=
name|CategoryQueryContext
operator|.
name|builder
argument_list|()
operator|.
name|setBoost
argument_list|(
name|categoryQueryContext
operator|.
name|getBoost
argument_list|()
argument_list|)
operator|.
name|setPrefix
argument_list|(
name|categoryQueryContext
operator|.
name|isPrefix
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"null category is illegal"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"category must not be null"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
block|{
specifier|final
name|CategoryQueryContext
operator|.
name|Builder
name|builder
init|=
name|CategoryQueryContext
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCategory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"category must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"category must not be null"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|setBoost
argument_list|(
operator|-
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"boost must be positive"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"boost must be greater than 0"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

