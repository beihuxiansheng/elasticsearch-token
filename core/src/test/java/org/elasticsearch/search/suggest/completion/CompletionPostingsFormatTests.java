begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene53
operator|.
name|Lucene53Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|InputIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|Lookup
operator|.
name|LookupResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
operator|.
name|AnalyzingSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
operator|.
name|XAnalyzingSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|CompletionFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|Completion090PostingsFormat
operator|.
name|LookupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
operator|.
name|ContextMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|CompletionPostingsFormatTests
specifier|public
class|class
name|CompletionPostingsFormatTests
extends|extends
name|ESTestCase
block|{
DECL|field|indexSettings
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|FIELD_TYPE
specifier|static
specifier|final
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
name|FIELD_TYPE
init|=
name|CompletionFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
operator|.
name|clone
argument_list|()
decl_stmt|;
DECL|field|analyzer
specifier|static
specifier|final
name|NamedAnalyzer
name|analyzer
init|=
operator|new
name|NamedAnalyzer
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setNames
argument_list|(
operator|new
name|Names
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setIndexAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setSearchAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompletionPostingsFormat
specifier|public
name|void
name|testCompletionPostingsFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|AnalyzingCompletionLookupProviderV1
name|providerV1
init|=
operator|new
name|AnalyzingCompletionLookupProviderV1
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AnalyzingCompletionLookupProvider
name|currentProvider
init|=
operator|new
name|AnalyzingCompletionLookupProvider
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Completion090PostingsFormat
operator|.
name|CompletionLookupProvider
argument_list|>
name|providers
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|providerV1
argument_list|,
name|currentProvider
argument_list|)
decl_stmt|;
name|Completion090PostingsFormat
operator|.
name|CompletionLookupProvider
name|randomProvider
init|=
name|providers
operator|.
name|get
argument_list|(
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|(
name|providers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|writeData
argument_list|(
name|dir
argument_list|,
name|randomProvider
argument_list|)
expr_stmt|;
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|LookupFactory
name|load
init|=
name|currentProvider
operator|.
name|load
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
name|fieldType
init|=
name|FIELD_TYPE
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setProvider
argument_list|(
name|currentProvider
argument_list|)
expr_stmt|;
name|Lookup
name|lookup
init|=
name|load
operator|.
name|getLookup
argument_list|(
name|fieldType
argument_list|,
operator|new
name|CompletionSuggestionContext
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|result
init|=
name|lookup
operator|.
name|lookup
argument_list|(
literal|"ge"
argument_list|,
literal|false
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Generator - Foo Fighters"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|payload
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"id:10"
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderBackwardCompatibilityForVersion1
specifier|public
name|void
name|testProviderBackwardCompatibilityForVersion1
parameter_list|()
throws|throws
name|IOException
block|{
name|AnalyzingCompletionLookupProviderV1
name|providerV1
init|=
operator|new
name|AnalyzingCompletionLookupProviderV1
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AnalyzingCompletionLookupProvider
name|currentProvider
init|=
operator|new
name|AnalyzingCompletionLookupProvider
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|writeData
argument_list|(
name|dir
argument_list|,
name|providerV1
argument_list|)
expr_stmt|;
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|LookupFactory
name|load
init|=
name|currentProvider
operator|.
name|load
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
name|fieldType
init|=
name|FIELD_TYPE
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setProvider
argument_list|(
name|currentProvider
argument_list|)
expr_stmt|;
name|AnalyzingCompletionLookupProvider
operator|.
name|AnalyzingSuggestHolder
name|analyzingSuggestHolder
init|=
name|load
operator|.
name|getAnalyzingSuggestHolder
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|analyzingSuggestHolder
operator|.
name|sepLabel
argument_list|,
name|is
argument_list|(
name|AnalyzingCompletionLookupProviderV1
operator|.
name|SEP_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analyzingSuggestHolder
operator|.
name|payloadSep
argument_list|,
name|is
argument_list|(
name|AnalyzingCompletionLookupProviderV1
operator|.
name|PAYLOAD_SEP
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analyzingSuggestHolder
operator|.
name|endByte
argument_list|,
name|is
argument_list|(
name|AnalyzingCompletionLookupProviderV1
operator|.
name|END_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProviderVersion2
specifier|public
name|void
name|testProviderVersion2
parameter_list|()
throws|throws
name|IOException
block|{
name|AnalyzingCompletionLookupProvider
name|currentProvider
init|=
operator|new
name|AnalyzingCompletionLookupProvider
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|writeData
argument_list|(
name|dir
argument_list|,
name|currentProvider
argument_list|)
expr_stmt|;
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|LookupFactory
name|load
init|=
name|currentProvider
operator|.
name|load
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
name|fieldType
init|=
name|FIELD_TYPE
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setProvider
argument_list|(
name|currentProvider
argument_list|)
expr_stmt|;
name|AnalyzingCompletionLookupProvider
operator|.
name|AnalyzingSuggestHolder
name|analyzingSuggestHolder
init|=
name|load
operator|.
name|getAnalyzingSuggestHolder
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|analyzingSuggestHolder
operator|.
name|sepLabel
argument_list|,
name|is
argument_list|(
name|XAnalyzingSuggester
operator|.
name|SEP_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analyzingSuggestHolder
operator|.
name|payloadSep
argument_list|,
name|is
argument_list|(
name|XAnalyzingSuggester
operator|.
name|PAYLOAD_SEP
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analyzingSuggestHolder
operator|.
name|endByte
argument_list|,
name|is
argument_list|(
name|XAnalyzingSuggester
operator|.
name|END_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuellCompletions
specifier|public
name|void
name|testDuellCompletions
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
specifier|final
name|boolean
name|preserveSeparators
init|=
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|preservePositionIncrements
init|=
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|usePayloads
init|=
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|int
name|options
init|=
name|preserveSeparators
condition|?
name|AnalyzingSuggester
operator|.
name|PRESERVE_SEP
else|:
literal|0
decl_stmt|;
name|XAnalyzingSuggester
name|reference
init|=
operator|new
name|XAnalyzingSuggester
argument_list|(
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
name|options
argument_list|,
literal|256
argument_list|,
operator|-
literal|1
argument_list|,
name|preservePositionIncrements
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|XAnalyzingSuggester
operator|.
name|SEP_LABEL
argument_list|,
name|XAnalyzingSuggester
operator|.
name|PAYLOAD_SEP
argument_list|,
name|XAnalyzingSuggester
operator|.
name|END_BYTE
argument_list|,
name|XAnalyzingSuggester
operator|.
name|HOLE_CHARACTER
argument_list|)
decl_stmt|;
name|LineFileDocs
name|docs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|scaledRandomIntBetween
argument_list|(
literal|150
argument_list|,
literal|300
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|titles
init|=
operator|new
name|String
index|[
name|num
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|weights
init|=
operator|new
name|long
index|[
name|num
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|titles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|nextDoc
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|IndexableField
name|field
init|=
name|nextDoc
operator|.
name|getField
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|titles
index|[
name|i
index|]
operator|=
name|field
operator|.
name|stringValue
argument_list|()
expr_stmt|;
name|weights
index|[
name|i
index|]
operator|=
name|between
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|docs
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|InputIterator
name|primaryIter
init|=
operator|new
name|InputIterator
argument_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|long
name|currentWeight
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|<
name|titles
operator|.
name|length
condition|)
block|{
name|currentWeight
operator|=
name|weights
index|[
name|index
index|]
expr_stmt|;
return|return
operator|new
name|BytesRef
argument_list|(
name|titles
index|[
name|index
operator|++
index|]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|weight
parameter_list|()
block|{
return|return
name|currentWeight
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|payload
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|contexts
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasContexts
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|InputIterator
name|iter
decl_stmt|;
if|if
condition|(
name|usePayloads
condition|)
block|{
name|iter
operator|=
operator|new
name|InputIterator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|weight
parameter_list|()
block|{
return|return
name|primaryIter
operator|.
name|weight
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|primaryIter
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|payload
parameter_list|()
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|weight
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|BytesRef
argument_list|>
name|contexts
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasContexts
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|iter
operator|=
name|primaryIter
expr_stmt|;
block|}
name|reference
operator|.
name|build
argument_list|(
name|iter
argument_list|)
expr_stmt|;
name|AnalyzingCompletionLookupProvider
name|currentProvider
init|=
operator|new
name|AnalyzingCompletionLookupProvider
argument_list|(
name|preserveSeparators
argument_list|,
literal|false
argument_list|,
name|preservePositionIncrements
argument_list|,
name|usePayloads
argument_list|)
decl_stmt|;
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
name|fieldType
init|=
name|FIELD_TYPE
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setProvider
argument_list|(
name|currentProvider
argument_list|)
expr_stmt|;
specifier|final
name|CompletionFieldMapper
name|mapper
init|=
operator|new
name|CompletionFieldMapper
argument_list|(
literal|"foo"
argument_list|,
name|fieldType
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|indexSettings
argument_list|,
name|FieldMapper
operator|.
name|MultiFields
operator|.
name|empty
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Lookup
name|buildAnalyzingLookup
init|=
name|buildAnalyzingLookup
argument_list|(
name|mapper
argument_list|,
name|titles
argument_list|,
name|titles
argument_list|,
name|weights
argument_list|)
decl_stmt|;
if|if
condition|(
name|buildAnalyzingLookup
operator|instanceof
name|XAnalyzingSuggester
condition|)
block|{
name|assertEquals
argument_list|(
name|reference
operator|.
name|getMaxAnalyzedPathsForOneInput
argument_list|()
argument_list|,
operator|(
operator|(
name|XAnalyzingSuggester
operator|)
name|buildAnalyzingLookup
operator|)
operator|.
name|getMaxAnalyzedPathsForOneInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|titles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|res
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|SuggestUtils
operator|.
name|analyze
argument_list|(
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"foo"
argument_list|,
name|titles
index|[
name|i
index|]
argument_list|)
argument_list|,
operator|new
name|SuggestUtils
operator|.
name|TokenConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|nextToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|this
operator|.
name|charTermAttr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|firstTerm
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|firstTerm
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|firstTerm
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
name|firstTerm
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|refLookup
init|=
name|reference
operator|.
name|lookup
argument_list|(
name|prefix
argument_list|,
literal|false
argument_list|,
name|res
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LookupResult
argument_list|>
name|lookup
init|=
name|buildAnalyzingLookup
operator|.
name|lookup
argument_list|(
name|prefix
argument_list|,
literal|false
argument_list|,
name|res
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refLookup
operator|.
name|toString
argument_list|()
argument_list|,
name|lookup
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|refLookup
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|refLookup
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|lookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|key
argument_list|,
name|equalTo
argument_list|(
name|refLookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"prefix: "
operator|+
name|prefix
operator|+
literal|" "
operator|+
name|j
operator|+
literal|" -- missmatch cost: "
operator|+
name|lookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|key
operator|+
literal|" - "
operator|+
name|lookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|value
operator|+
literal|" | "
operator|+
name|refLookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|key
operator|+
literal|" - "
operator|+
name|refLookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|value
argument_list|,
name|lookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|value
argument_list|,
name|equalTo
argument_list|(
name|refLookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|payload
argument_list|,
name|equalTo
argument_list|(
name|refLookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|payload
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|usePayloads
condition|)
block|{
name|assertThat
argument_list|(
name|lookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|payload
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lookup
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|buildAnalyzingLookup
specifier|public
name|Lookup
name|buildAnalyzingLookup
parameter_list|(
specifier|final
name|CompletionFieldMapper
name|mapper
parameter_list|,
name|String
index|[]
name|terms
parameter_list|,
name|String
index|[]
name|surfaces
parameter_list|,
name|long
index|[]
name|weights
parameter_list|)
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Codec
name|codec
init|=
operator|new
name|Lucene53Codec
argument_list|()
block|{
specifier|public
name|PostingsFormat
name|getPostingsFormatForField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|PostingsFormat
name|in
init|=
name|super
operator|.
name|getPostingsFormatForField
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|mapper
operator|.
name|fieldType
argument_list|()
operator|.
name|postingsFormat
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexWriterConfig
name|indexWriterConfig
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|mapper
operator|.
name|fieldType
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|indexWriterConfig
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|indexWriterConfig
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|weights
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|BytesRef
name|payload
init|=
name|mapper
operator|.
name|buildPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|surfaces
index|[
name|i
index|]
argument_list|)
argument_list|,
name|weights
index|[
name|i
index|]
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|weights
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|getCompletionField
argument_list|(
name|ContextMapping
operator|.
name|EMPTY_CONTEXT
argument_list|,
name|terms
index|[
name|i
index|]
argument_list|,
name|payload
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|weights
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|LeafReaderContext
name|atomicReaderContext
init|=
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Terms
name|luceneTerms
init|=
name|atomicReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
name|mapper
operator|.
name|fieldType
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
decl_stmt|;
name|Lookup
name|lookup
init|=
operator|(
operator|(
name|Completion090PostingsFormat
operator|.
name|CompletionTerms
operator|)
name|luceneTerms
operator|)
operator|.
name|getLookup
argument_list|(
name|mapper
operator|.
name|fieldType
argument_list|()
argument_list|,
operator|new
name|CompletionSuggestionContext
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|lookup
return|;
block|}
annotation|@
name|Test
DECL|method|testNoDocs
specifier|public
name|void
name|testNoDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|AnalyzingCompletionLookupProvider
name|provider
init|=
operator|new
name|AnalyzingCompletionLookupProvider
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|FieldsConsumer
name|consumer
init|=
name|provider
operator|.
name|consumer
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|write
argument_list|(
operator|new
name|Fields
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|LookupFactory
name|load
init|=
name|provider
operator|.
name|load
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CompletionFieldMapper
operator|.
name|CompletionFieldType
name|fieldType
init|=
name|FIELD_TYPE
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|load
operator|.
name|getLookup
argument_list|(
name|fieldType
argument_list|,
operator|new
name|CompletionSuggestionContext
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// TODO ADD more unittests
DECL|method|writeData
specifier|private
name|void
name|writeData
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Completion090PostingsFormat
operator|.
name|CompletionLookupProvider
name|provider
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|FieldsConsumer
name|consumer
init|=
name|provider
operator|.
name|consumer
argument_list|(
name|output
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TermPosAndPayload
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|TermPosAndPayload
argument_list|(
literal|"foofightersgenerator"
argument_list|,
literal|256
operator|-
literal|2
argument_list|,
name|provider
operator|.
name|buildPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"Generator - Foo Fighters"
argument_list|)
argument_list|,
literal|9
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"id:10"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|TermPosAndPayload
argument_list|(
literal|"generator"
argument_list|,
literal|256
operator|-
literal|1
argument_list|,
name|provider
operator|.
name|buildPayload
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"Generator - Foo Fighters"
argument_list|)
argument_list|,
literal|9
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"id:10"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
operator|new
name|Fields
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Terms
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Iterator
argument_list|<
name|TermPosAndPayload
argument_list|>
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|TermsEnum
argument_list|()
block|{
specifier|private
name|TermPosAndPayload
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|current
operator|==
literal|null
condition|?
literal|null
else|:
name|current
operator|.
name|term
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|current
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|PostingsEnum
name|postings
parameter_list|(
name|PostingsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TermPosAndPayload
name|data
init|=
name|current
decl_stmt|;
return|return
operator|new
name|PostingsEnum
argument_list|()
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|data
operator|.
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|data
operator|.
name|payload
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
name|done
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
name|done
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|current
operator|.
name|term
return|;
block|}
name|current
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocCount
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFreqs
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPositions
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPayloads
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|consumer
operator|.
name|write
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TermPosAndPayload
specifier|private
specifier|static
class|class
name|TermPosAndPayload
block|{
DECL|field|term
specifier|final
name|BytesRef
name|term
decl_stmt|;
DECL|field|pos
specifier|final
name|int
name|pos
decl_stmt|;
DECL|field|payload
specifier|final
name|BytesRef
name|payload
decl_stmt|;
DECL|method|TermPosAndPayload
specifier|private
name|TermPosAndPayload
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|pos
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|payload
operator|=
name|payload
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

