begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectLongHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|optimize
operator|.
name|OptimizeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndexShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|ShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndicesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|suggest
operator|.
name|SuggestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|CompletionFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolatorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
operator|.
name|SubAggCollectionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|FieldSortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestionFuzzyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAllSuccessful
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|SuppressCodecs
argument_list|(
literal|"*"
argument_list|)
comment|// requires custom completion format
DECL|class|CompletionSuggestSearchIT
specifier|public
class|class
name|CompletionSuggestSearchIT
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|INDEX
specifier|private
specifier|final
name|String
name|INDEX
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|10
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|final
name|String
name|TYPE
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|10
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|FIELD
specifier|private
specifier|final
name|String
name|FIELD
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|10
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|completionMappingBuilder
specifier|private
specifier|final
name|CompletionMappingBuilder
name|completionMappingBuilder
init|=
operator|new
name|CompletionMappingBuilder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|input
init|=
block|{
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Generator"
block|,
literal|"Foo Fighters Generator"
block|}
block|,
block|{
literal|"Learn to Fly"
block|,
literal|"Foo Fighters Learn to Fly"
block|}
block|,
block|{
literal|"The Prodigy"
block|}
block|,
block|{
literal|"The Prodigy"
block|}
block|,
block|{
literal|"The Prodigy"
block|}
block|,
block|{
literal|"Firestarter"
block|,
literal|"The Prodigy Firestarter"
block|}
block|,
block|{
literal|"Turbonegro"
block|}
block|,
block|{
literal|"Turbonegro"
block|}
block|,
block|{
literal|"Get it on"
block|,
literal|"Turbonegro Get it on"
block|}
block|}
decl_stmt|;
comment|// work with frequencies
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|input
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestionsNotInOrder
argument_list|(
literal|"f"
argument_list|,
literal|"Foo Fighters"
argument_list|,
literal|"Firestarter"
argument_list|,
literal|"Foo Fighters Generator"
argument_list|,
literal|"Foo Fighters Learn to Fly"
argument_list|)
expr_stmt|;
name|assertSuggestionsNotInOrder
argument_list|(
literal|"t"
argument_list|,
literal|"The Prodigy"
argument_list|,
literal|"Turbonegro"
argument_list|,
literal|"Turbonegro Get it on"
argument_list|,
literal|"The Prodigy Firestarter"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSuggestFieldWithPercolateApi
specifier|public
name|void
name|testSuggestFieldWithPercolateApi
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|input
init|=
block|{
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Generator"
block|,
literal|"Foo Fighters Generator"
block|}
block|,
block|{
literal|"Learn to Fly"
block|,
literal|"Foo Fighters Learn to Fly"
block|}
block|,
block|{
literal|"The Prodigy"
block|}
block|,
block|{
literal|"The Prodigy"
block|}
block|,
block|{
literal|"The Prodigy"
block|}
block|,
block|{
literal|"Firestarter"
block|,
literal|"The Prodigy Firestarter"
block|}
block|,
block|{
literal|"Turbonegro"
block|}
block|,
block|{
literal|"Turbonegro"
block|}
block|,
block|{
literal|"Get it on"
block|,
literal|"Turbonegro Get it on"
block|}
block|}
decl_stmt|;
comment|// work with frequencies
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|input
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setDocumentType
argument_list|(
name|TYPE
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|type
argument_list|(
name|TYPE
argument_list|)
operator|.
name|id
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicPrefixSuggestion
specifier|public
name|void
name|testBasicPrefixSuggestion
parameter_list|()
throws|throws
name|Exception
block|{
name|completionMappingBuilder
operator|.
name|payloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|createData
argument_list|(
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"f"
argument_list|,
literal|"Firestarter - The Prodigy"
argument_list|,
literal|"Foo Fighters"
argument_list|,
literal|"Generator - Foo Fighters"
argument_list|,
literal|"Learn to Fly - Foo Fighters"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"ge"
argument_list|,
literal|"Generator - Foo Fighters"
argument_list|,
literal|"Get it on - Turbonegro"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"ge"
argument_list|,
literal|"Generator - Foo Fighters"
argument_list|,
literal|"Get it on - Turbonegro"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"t"
argument_list|,
literal|"The Prodigy"
argument_list|,
literal|"Firestarter - The Prodigy"
argument_list|,
literal|"Get it on - Turbonegro"
argument_list|,
literal|"Turbonegro"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThatWeightsAreWorking
specifier|public
name|void
name|testThatWeightsAreWorking
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|similarNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"the"
argument_list|,
literal|"The Prodigy"
argument_list|,
literal|"The Verve"
argument_list|,
literal|"The the"
argument_list|)
decl_stmt|;
comment|// the weight is 1000 divided by string length, so the results are easy to to check
for|for
control|(
name|String
name|similarName
range|:
name|similarNames
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
name|similarName
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|similarName
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|1000
operator|/
name|similarName
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"the"
argument_list|,
literal|"the"
argument_list|,
literal|"The the"
argument_list|,
literal|"The Verve"
argument_list|,
literal|"The Prodigy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatWeightMustBeAnInteger
specifier|public
name|void
name|testThatWeightMustBeAnInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"sth"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2.5
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Indexing with a float weight was successful, but should not be"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"2.5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThatWeightCanBeAString
specifier|public
name|void
name|testThatWeightCanBeAString
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"testing"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
operator|new
name|CompletionSuggestionBuilder
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"test"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|"testSuggestions"
argument_list|,
literal|"testing"
argument_list|)
expr_stmt|;
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
name|option
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|option
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|prefixOption
init|=
operator|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|)
name|option
decl_stmt|;
name|assertThat
argument_list|(
name|prefixOption
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"testing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|prefixOption
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatWeightMustNotBeANonNumberString
specifier|public
name|void
name|testThatWeightMustNotBeANonNumberString
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"sth"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|"thisIsNotValid"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Indexing with a non-number representing string as weight was successful, but should not be"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"thisIsNotValid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThatWeightAsStringMustBeInt
specifier|public
name|void
name|testThatWeightAsStringMustBeInt
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|String
name|weight
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"testing"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
name|weight
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Indexing with weight string representing value> Int.MAX_VALUE was successful, but should not be"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThatInputCanBeAStringInsteadOfAnArray
specifier|public
name|void
name|testThatInputCanBeAStringInsteadOfAnArray
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Foo Fighters"
argument_list|)
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Boo Fighters"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"f"
argument_list|,
literal|"Boo Fighters"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatPayloadsAreArbitraryJsonObjects
specifier|public
name|void
name|testThatPayloadsAreArbitraryJsonObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|completionMappingBuilder
operator|.
name|payloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Boo Fighters"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"payload"
argument_list|)
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"test"
argument_list|)
operator|.
name|value
argument_list|(
literal|"spam"
argument_list|)
operator|.
name|value
argument_list|(
literal|"eggs"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
operator|new
name|CompletionSuggestionBuilder
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|"testSuggestions"
argument_list|,
literal|"Boo Fighters"
argument_list|)
expr_stmt|;
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
name|option
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|option
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|prefixOption
init|=
operator|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|)
name|option
decl_stmt|;
name|assertThat
argument_list|(
name|prefixOption
operator|.
name|getPayload
argument_list|()
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// parse JSON
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonMap
init|=
name|prefixOption
operator|.
name|getPayloadAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|jsonMap
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jsonMap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jsonMap
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listValues
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|jsonMap
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|listValues
argument_list|,
name|hasItems
argument_list|(
literal|"spam"
argument_list|,
literal|"eggs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPayloadAsNumeric
specifier|public
name|void
name|testPayloadAsNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|completionMappingBuilder
operator|.
name|payloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Boo Fighters"
argument_list|)
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
operator|new
name|CompletionSuggestionBuilder
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|"testSuggestions"
argument_list|,
literal|"Boo Fighters"
argument_list|)
expr_stmt|;
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
name|option
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|option
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|prefixOption
init|=
operator|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|)
name|option
decl_stmt|;
name|assertThat
argument_list|(
name|prefixOption
operator|.
name|getPayload
argument_list|()
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prefixOption
operator|.
name|getPayloadAsLong
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPayloadAsString
specifier|public
name|void
name|testPayloadAsString
parameter_list|()
throws|throws
name|Exception
block|{
name|completionMappingBuilder
operator|.
name|payloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Boo Fighters"
argument_list|)
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
operator|new
name|CompletionSuggestionBuilder
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|"testSuggestions"
argument_list|,
literal|"Boo Fighters"
argument_list|)
expr_stmt|;
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
name|option
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
literal|"testSuggestions"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|option
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|prefixOption
init|=
operator|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
operator|)
name|option
decl_stmt|;
name|assertThat
argument_list|(
name|prefixOption
operator|.
name|getPayload
argument_list|()
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prefixOption
operator|.
name|getPayloadAsString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MapperException
operator|.
name|class
argument_list|)
DECL|method|testThatExceptionIsThrownWhenPayloadsAreDisabledButInIndexRequest
specifier|public
name|void
name|testThatExceptionIsThrownWhenPayloadsAreDisabledButInIndexRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|completionMappingBuilder
operator|.
name|payloads
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Boo Fighters"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"payload"
argument_list|)
operator|.
name|value
argument_list|(
literal|"spam"
argument_list|)
operator|.
name|value
argument_list|(
literal|"eggs"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisabledPreserveSeparators
specifier|public
name|void
name|testDisabledPreserveSeparators
parameter_list|()
throws|throws
name|Exception
block|{
name|completionMappingBuilder
operator|.
name|preserveSeparators
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foof"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|20
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"foof"
argument_list|,
literal|"Foof"
argument_list|,
literal|"Foo Fighters"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnabledPreserveSeparators
specifier|public
name|void
name|testEnabledPreserveSeparators
parameter_list|()
throws|throws
name|Exception
block|{
name|completionMappingBuilder
operator|.
name|preserveSeparators
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foof"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"foof"
argument_list|,
literal|"Foof"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatMultipleInputsAreSupported
specifier|public
name|void
name|testThatMultipleInputsAreSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Fu Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"The incredible Foo Fighters"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"foo"
argument_list|,
literal|"The incredible Foo Fighters"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"fu"
argument_list|,
literal|"The incredible Foo Fighters"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatShortSyntaxIsWorking
specifier|public
name|void
name|testThatShortSyntaxIsWorking
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
name|FIELD
argument_list|)
operator|.
name|value
argument_list|(
literal|"The Prodigy Firestarter"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Firestarter"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"t"
argument_list|,
literal|"The Prodigy Firestarter"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"f"
argument_list|,
literal|"Firestarter"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatDisablingPositionIncrementsWorkForStopwords
specifier|public
name|void
name|testThatDisablingPositionIncrementsWorkForStopwords
parameter_list|()
throws|throws
name|Exception
block|{
comment|// analyzer which removes stopwords... so may not be the simple one
name|completionMappingBuilder
operator|.
name|searchAnalyzer
argument_list|(
literal|"classic"
argument_list|)
operator|.
name|indexAnalyzer
argument_list|(
literal|"classic"
argument_list|)
operator|.
name|preservePositionIncrements
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"The Beatles"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"b"
argument_list|,
literal|"The Beatles"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatSynonymsWork
specifier|public
name|void
name|testThatSynonymsWork
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
operator|.
name|Builder
name|settingsBuilder
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.suggest_analyzer_synonyms.type"
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.suggest_analyzer_synonyms.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.suggest_analyzer_synonyms.filter"
argument_list|,
literal|"standard"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"my_synonyms"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_synonyms.type"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.filter.my_synonyms.synonyms"
argument_list|,
literal|"foo,renamed"
argument_list|)
decl_stmt|;
name|completionMappingBuilder
operator|.
name|searchAnalyzer
argument_list|(
literal|"suggest_analyzer_synonyms"
argument_list|)
operator|.
name|indexAnalyzer
argument_list|(
literal|"suggest_analyzer_synonyms"
argument_list|)
expr_stmt|;
name|createIndexAndMappingAndSettings
argument_list|(
name|settingsBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Foo Fighters"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// get suggestions for renamed
name|assertSuggestions
argument_list|(
literal|"r"
argument_list|,
literal|"Foo Fighters"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatUpgradeToMultiFieldTypeWorks
specifier|public
name|void
name|testThatUpgradeToMultiFieldTypeWorks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|FIELD
argument_list|,
literal|"Foo Fighters"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|PutMappingResponse
name|putMappingResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setType
argument_list|(
name|TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|putMappingResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
operator|new
name|CompletionSuggestionBuilder
argument_list|(
literal|"suggs"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
operator|+
literal|".suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"f"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|"suggs"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|FIELD
argument_list|,
literal|"Foo Fighters"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|SuggestResponse
name|afterReindexingResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggs"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
operator|+
literal|".suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"f"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|afterReindexingResponse
argument_list|,
literal|"suggs"
argument_list|,
literal|"Foo Fighters"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatUpgradeToMultiFieldsWorks
specifier|public
name|void
name|testThatUpgradeToMultiFieldsWorks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|FIELD
argument_list|,
literal|"Foo Fighters"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|PutMappingResponse
name|putMappingResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setType
argument_list|(
name|TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|putMappingResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggs"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
operator|+
literal|".suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"f"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|"suggs"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|FIELD
argument_list|,
literal|"Foo Fighters"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|SuggestResponse
name|afterReindexingResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggs"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
operator|+
literal|".suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"f"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|afterReindexingResponse
argument_list|,
literal|"suggs"
argument_list|,
literal|"Foo Fighters"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatFuzzySuggesterWorks
specifier|public
name|void
name|testThatFuzzySuggesterWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Nirvana"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nirv"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Nirvana"
argument_list|)
expr_stmt|;
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nirw"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Nirvana"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatFuzzySuggesterSupportsEditDistances
specifier|public
name|void
name|testThatFuzzySuggesterSupportsEditDistances
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Nirvana"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// edit distance 1
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Norw"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// edit distance 2
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Norw"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setFuzziness
argument_list|(
name|Fuzziness
operator|.
name|TWO
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Nirvana"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatFuzzySuggesterSupportsTranspositions
specifier|public
name|void
name|testThatFuzzySuggesterSupportsTranspositions
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Nirvana"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nriv"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setFuzzyTranspositions
argument_list|(
literal|false
argument_list|)
operator|.
name|setFuzziness
argument_list|(
name|Fuzziness
operator|.
name|ONE
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nriv"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setFuzzyTranspositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setFuzziness
argument_list|(
name|Fuzziness
operator|.
name|ONE
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Nirvana"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatFuzzySuggesterSupportsMinPrefixLength
specifier|public
name|void
name|testThatFuzzySuggesterSupportsMinPrefixLength
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Nirvana"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nriva"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setFuzzyMinLength
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nrivan"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setFuzzyMinLength
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Nirvana"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatFuzzySuggesterSupportsNonPrefixLength
specifier|public
name|void
name|testThatFuzzySuggesterSupportsNonPrefixLength
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Nirvana"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nirw"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setFuzzyPrefixLength
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Nirvo"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setFuzzyPrefixLength
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Nirvana"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatFuzzySuggesterIsUnicodeAware
specifier|public
name|void
name|testThatFuzzySuggesterIsUnicodeAware
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Ã¶Ã¶Ã¶Ã¶Ã¶"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// suggestion with a character, which needs unicode awareness
name|CompletionSuggestionFuzzyBuilder
name|completionSuggestionBuilder
init|=
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"Ã¶Ã¶Ã¶Ð¸"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|setUnicodeAware
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|completionSuggestionBuilder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Ã¶Ã¶Ã¶Ã¶Ã¶"
argument_list|)
expr_stmt|;
comment|// removing unicode awareness leads to no result
name|completionSuggestionBuilder
operator|.
name|setUnicodeAware
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|completionSuggestionBuilder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// increasing edit distance instead of unicode awareness works again, as this is only a single character
name|completionSuggestionBuilder
operator|.
name|setFuzziness
argument_list|(
name|Fuzziness
operator|.
name|TWO
argument_list|)
expr_stmt|;
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|completionSuggestionBuilder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"Ã¶Ã¶Ã¶Ã¶Ã¶"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatStatsAreWorking
specifier|public
name|void
name|testThatStatsAreWorking
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|otherField
init|=
literal|"testOtherField"
decl_stmt|;
name|createIndex
argument_list|(
name|INDEX
argument_list|)
expr_stmt|;
name|PutMappingResponse
name|putMappingResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setType
argument_list|(
name|TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|otherField
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"simple"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|putMappingResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Index two entities
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|FIELD
argument_list|,
literal|"Foo Fighters"
argument_list|)
operator|.
name|field
argument_list|(
name|otherField
argument_list|,
literal|"WHATEVER"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|FIELD
argument_list|,
literal|"Bar Fighters"
argument_list|)
operator|.
name|field
argument_list|(
name|otherField
argument_list|,
literal|"WHATEVER2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Get all stats
name|IndicesStatsResponse
name|indicesStatsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setIndices
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|CompletionStats
name|completionStats
init|=
name|indicesStatsResponse
operator|.
name|getIndex
argument_list|(
name|INDEX
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|completion
decl_stmt|;
name|assertThat
argument_list|(
name|completionStats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalSizeInBytes
init|=
name|completionStats
operator|.
name|getSizeInBytes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|totalSizeInBytes
argument_list|,
name|is
argument_list|(
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndicesStatsResponse
name|singleFieldStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setIndices
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setCompletionFields
argument_list|(
name|FIELD
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|singleFieldSizeInBytes
init|=
name|singleFieldStats
operator|.
name|getIndex
argument_list|(
name|INDEX
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|completion
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|FIELD
argument_list|)
decl_stmt|;
name|IndicesStatsResponse
name|otherFieldStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setIndices
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setCompletionFields
argument_list|(
name|otherField
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|otherFieldSizeInBytes
init|=
name|otherFieldStats
operator|.
name|getIndex
argument_list|(
name|INDEX
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|completion
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
name|otherField
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|singleFieldSizeInBytes
operator|+
name|otherFieldSizeInBytes
argument_list|,
name|is
argument_list|(
name|totalSizeInBytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// regexes
name|IndicesStatsResponse
name|regexFieldStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setIndices
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setCompletionFields
argument_list|(
literal|"*"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ObjectLongHashMap
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|regexFieldStats
operator|.
name|getIndex
argument_list|(
name|INDEX
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|completion
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|long
name|regexSizeInBytes
init|=
name|fields
operator|.
name|get
argument_list|(
name|FIELD
argument_list|)
operator|+
name|fields
operator|.
name|get
argument_list|(
name|otherField
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|regexSizeInBytes
argument_list|,
name|is
argument_list|(
name|totalSizeInBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatSortingOnCompletionFieldReturnsUsefulException
specifier|public
name|void
name|testThatSortingOnCompletionFieldReturnsUsefulException
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Nirvana"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setTypes
argument_list|(
name|TYPE
argument_list|)
operator|.
name|addSort
argument_list|(
operator|new
name|FieldSortBuilder
argument_list|(
name|FIELD
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception due to trying to sort on completion field, but did not happen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|status
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|,
name|is
argument_list|(
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Sorting not supported for field["
operator|+
name|FIELD
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThatSuggestStopFilterWorks
specifier|public
name|void
name|testThatSuggestStopFilterWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
operator|.
name|Builder
name|settingsBuilder
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.stoptest.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.stoptest.filter"
argument_list|,
literal|"standard"
argument_list|,
literal|"suggest_stop_filter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.suggest_stop_filter.type"
argument_list|,
literal|"stop"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.suggest_stop_filter.remove_trailing"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CompletionMappingBuilder
name|completionMappingBuilder
init|=
operator|new
name|CompletionMappingBuilder
argument_list|()
decl_stmt|;
name|completionMappingBuilder
operator|.
name|preserveSeparators
argument_list|(
literal|true
argument_list|)
operator|.
name|preservePositionIncrements
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|completionMappingBuilder
operator|.
name|searchAnalyzer
argument_list|(
literal|"stoptest"
argument_list|)
expr_stmt|;
name|completionMappingBuilder
operator|.
name|indexAnalyzer
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|createIndexAndMappingAndSettings
argument_list|(
name|settingsBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Feed trolls"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|5
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Higher weight so it's ranked first:
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Feed the trolls"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"f"
argument_list|,
literal|"Feed the trolls"
argument_list|,
literal|"Feed trolls"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"fe"
argument_list|,
literal|"Feed the trolls"
argument_list|,
literal|"Feed trolls"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"fee"
argument_list|,
literal|"Feed the trolls"
argument_list|,
literal|"Feed trolls"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"feed"
argument_list|,
literal|"Feed the trolls"
argument_list|,
literal|"Feed trolls"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"feed t"
argument_list|,
literal|"Feed the trolls"
argument_list|,
literal|"Feed trolls"
argument_list|)
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"feed the"
argument_list|,
literal|"Feed the trolls"
argument_list|)
expr_stmt|;
comment|// stop word complete, gets ignored on query time, makes it "feed" only
name|assertSuggestions
argument_list|(
literal|"feed the "
argument_list|,
literal|"Feed the trolls"
argument_list|,
literal|"Feed trolls"
argument_list|)
expr_stmt|;
comment|// stopword gets removed, but position increment kicks in, which doesnt work for the prefix suggester
name|assertSuggestions
argument_list|(
literal|"feed the t"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MapperParsingException
operator|.
name|class
argument_list|)
DECL|method|testThatIndexingInvalidFieldsInCompletionFieldResultsInException
specifier|public
name|void
name|testThatIndexingInvalidFieldsInCompletionFieldResultsInException
parameter_list|()
throws|throws
name|Exception
block|{
name|CompletionMappingBuilder
name|completionMappingBuilder
init|=
operator|new
name|CompletionMappingBuilder
argument_list|()
decl_stmt|;
name|createIndexAndMapping
argument_list|(
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"FRIGGININVALID"
argument_list|)
operator|.
name|value
argument_list|(
literal|"Nirvana"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|assertSuggestions
specifier|public
name|void
name|assertSuggestions
parameter_list|(
name|String
name|suggestion
parameter_list|,
name|String
modifier|...
name|suggestions
parameter_list|)
block|{
name|String
name|suggestionName
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggestion
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
name|suggestionName
argument_list|,
name|suggestions
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuggestionsNotInOrder
specifier|public
name|void
name|assertSuggestionsNotInOrder
parameter_list|(
name|String
name|suggestString
parameter_list|,
name|String
modifier|...
name|suggestions
parameter_list|)
block|{
name|String
name|suggestionName
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggestString
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|false
argument_list|,
name|suggestionName
argument_list|,
name|suggestions
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuggestions
specifier|private
name|void
name|assertSuggestions
parameter_list|(
name|SuggestResponse
name|suggestResponse
parameter_list|,
name|String
name|name
parameter_list|,
name|String
modifier|...
name|suggestions
parameter_list|)
block|{
name|assertSuggestions
argument_list|(
name|suggestResponse
argument_list|,
literal|true
argument_list|,
name|name
argument_list|,
name|suggestions
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuggestions
specifier|private
name|void
name|assertSuggestions
parameter_list|(
name|SuggestResponse
name|suggestResponse
parameter_list|,
name|boolean
name|suggestionOrderStrict
parameter_list|,
name|String
name|name
parameter_list|,
name|String
modifier|...
name|suggestions
parameter_list|)
block|{
name|assertAllSuccessful
argument_list|(
name|suggestResponse
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|suggestionNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
argument_list|>
name|suggestion
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
control|)
block|{
name|suggestionNames
operator|.
name|add
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|expectFieldInResponseMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected suggestion named %s in response, got %s"
argument_list|,
name|name
argument_list|,
name|suggestionNames
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expectFieldInResponseMsg
argument_list|,
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
name|name
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
argument_list|<
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
argument_list|>
name|suggestion
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|suggestionList
init|=
name|getNames
argument_list|(
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|suggestion
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|String
name|assertMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected options %s length to be %s, but was %s"
argument_list|,
name|suggestionList
argument_list|,
name|suggestions
operator|.
name|length
argument_list|,
name|options
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|assertMsg
argument_list|,
name|options
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|suggestions
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestionOrderStrict
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suggestions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected elem %s in list %s to be [%s] score: %s"
argument_list|,
name|i
argument_list|,
name|suggestionList
argument_list|,
name|suggestions
index|[
name|i
index|]
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getScore
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|errMsg
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|suggestions
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|expectedSuggestion
range|:
name|suggestions
control|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected elem %s to be in list %s"
argument_list|,
name|expectedSuggestion
argument_list|,
name|suggestionList
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|errMsg
argument_list|,
name|suggestionList
argument_list|,
name|hasItem
argument_list|(
name|expectedSuggestion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getNames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
argument_list|<
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|suggestEntry
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
name|entry
range|:
name|suggestEntry
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
DECL|method|createIndexAndMappingAndSettings
specifier|private
name|void
name|createIndexAndMappingAndSettings
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|CompletionMappingBuilder
name|completionMappingBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|completionMappingBuilder
operator|.
name|indexAnalyzer
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
name|completionMappingBuilder
operator|.
name|searchAnalyzer
argument_list|)
operator|.
name|field
argument_list|(
literal|"payloads"
argument_list|,
name|completionMappingBuilder
operator|.
name|payloads
argument_list|)
operator|.
name|field
argument_list|(
literal|"preserve_separators"
argument_list|,
name|completionMappingBuilder
operator|.
name|preserveSeparators
argument_list|)
operator|.
name|field
argument_list|(
literal|"preserve_position_increments"
argument_list|,
name|completionMappingBuilder
operator|.
name|preservePositionIncrements
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndexAndMapping
specifier|private
name|void
name|createIndexAndMapping
parameter_list|(
name|CompletionMappingBuilder
name|completionMappingBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|createIndexAndMappingAndSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|completionMappingBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|createData
specifier|private
name|void
name|createData
parameter_list|(
name|boolean
name|optimize
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|String
index|[]
index|[]
name|input
init|=
block|{
block|{
literal|"Foo Fighters"
block|}
block|,
block|{
literal|"Generator"
block|,
literal|"Foo Fighters Generator"
block|}
block|,
block|{
literal|"Learn to Fly"
block|,
literal|"Foo Fighters Learn to Fly"
block|}
block|,
block|{
literal|"The Prodigy"
block|}
block|,
block|{
literal|"Firestarter"
block|,
literal|"The Prodigy Firestarter"
block|}
block|,
block|{
literal|"Turbonegro"
block|}
block|,
block|{
literal|"Get it on"
block|,
literal|"Turbonegro Get it on"
block|}
block|}
decl_stmt|;
name|String
index|[]
name|surface
init|=
block|{
literal|"Foo Fighters"
block|,
literal|"Generator - Foo Fighters"
block|,
literal|"Learn to Fly - Foo Fighters"
block|,
literal|"The Prodigy"
block|,
literal|"Firestarter - The Prodigy"
block|,
literal|"Turbonegro"
block|,
literal|"Get it on - Turbonegro"
block|}
decl_stmt|;
name|int
index|[]
name|weight
init|=
block|{
literal|10
block|,
literal|9
block|,
literal|8
block|,
literal|12
block|,
literal|11
block|,
literal|6
block|,
literal|7
block|}
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|builders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|input
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|input
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
name|surface
index|[
name|i
index|]
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"payload"
argument_list|)
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|1
argument_list|)
comment|// WE FORCEFULLY INDEX A BOGUS WEIGHT
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|false
argument_list|,
name|builders
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// add them again to make sure we deduplicate on the surface form
name|builders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"n"
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|input
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
name|surface
index|[
name|i
index|]
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"payload"
argument_list|)
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
name|weight
index|[
name|i
index|]
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|false
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|INDEX
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|optimize
condition|)
block|{
comment|// make sure merging works just fine
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
name|INDEX
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// see #3555
DECL|method|testPrunedSegments
specifier|public
name|void
name|testPrunedSegments
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndexAndMappingAndSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|completionMappingBuilder
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"The Beatles"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"somefield"
argument_list|,
literal|"somevalue"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// we have 2 docs in a segment...
name|OptimizeResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|()
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertAllSuccessful
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// update the first one and then merge.. the target segment will have no value in FIELD
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"somefield"
argument_list|,
literal|"somevalue"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|actionGet
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|()
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertAllSuccessful
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertSuggestions
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|2l
argument_list|,
name|equalTo
argument_list|(
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexShardSegments
name|seg
range|:
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareSegments
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|INDEX
argument_list|)
control|)
block|{
name|ShardSegments
index|[]
name|shards
init|=
name|seg
operator|.
name|getShards
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardSegments
name|shardSegments
range|:
name|shards
control|)
block|{
name|assertThat
argument_list|(
name|shardSegments
operator|.
name|getSegments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMaxFieldLength
specifier|public
name|void
name|testMaxFieldLength
parameter_list|()
throws|throws
name|IOException
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|int
name|maxInputLen
init|=
name|between
argument_list|(
literal|3
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|replaceReservedChars
argument_list|(
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
name|maxInputLen
operator|+
literal|1
argument_list|,
name|maxInputLen
operator|+
name|scaledRandomIntBetween
argument_list|(
literal|2
argument_list|,
literal|50
argument_list|)
argument_list|)
argument_list|,
operator|(
name|char
operator|)
literal|0x01
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setType
argument_list|(
name|TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"max_input_length"
argument_list|,
name|maxInputLen
argument_list|)
comment|// upgrade mapping each time
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|str
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// need to flush and refresh, because we keep changing the same document
comment|// we have to make sure that segments without any live documents are deleted
name|flushAndRefresh
argument_list|()
expr_stmt|;
name|int
name|prefixLen
init|=
name|CompletionFieldMapper
operator|.
name|correctSubStringLen
argument_list|(
name|str
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
name|maxInputLen
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestions
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefixLen
argument_list|)
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxInputLen
operator|+
literal|1
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|Character
operator|.
name|isHighSurrogate
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|maxInputLen
operator|-
literal|1
argument_list|)
argument_list|)
condition|?
literal|2
else|:
literal|1
decl_stmt|;
name|int
name|correctSubStringLen
init|=
name|CompletionFieldMapper
operator|.
name|correctSubStringLen
argument_list|(
name|str
argument_list|,
name|maxInputLen
operator|+
name|offset
argument_list|)
decl_stmt|;
name|String
name|shortenedSuggestion
init|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|correctSubStringLen
argument_list|)
decl_stmt|;
name|assertSuggestions
argument_list|(
name|shortenedSuggestion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
comment|// see #3596
DECL|method|testVeryLongInput
specifier|public
name|void
name|testVeryLongInput
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// can cause stack overflow without the default max_input_length
name|String
name|longString
init|=
name|replaceReservedChars
argument_list|(
name|randomRealisticUnicodeOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|5000
argument_list|,
literal|10000
argument_list|)
argument_list|)
argument_list|,
operator|(
name|char
operator|)
literal|0x01
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|longString
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// see #3648
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MapperParsingException
operator|.
name|class
argument_list|)
DECL|method|testReservedChars
specifier|public
name|void
name|testReservedChars
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// can cause stack overflow without the default max_input_length
name|String
name|string
init|=
literal|"foo"
operator|+
operator|(
name|char
operator|)
literal|0x00
operator|+
literal|"bar"
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|string
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"foobar"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #5930
DECL|method|testIssue5930
specifier|public
name|void
name|testIssue5930
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|String
name|string
init|=
literal|"foo bar"
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|FIELD
argument_list|,
name|string
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|terms
argument_list|(
literal|"suggest_agg"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Exception must be thrown
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"found no fielddata type for field ["
operator|+
name|FIELD
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// see issue #6399
annotation|@
name|Test
DECL|method|testIndexingUnrelatedNullValue
specifier|public
name|void
name|testIndexingUnrelatedNullValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|mapping
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|FIELD
argument_list|,
literal|"strings make me happy"
argument_list|,
name|FIELD
operator|+
literal|"_1"
argument_list|,
literal|"nulls make me sad"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|FIELD
argument_list|,
literal|null
argument_list|,
name|FIELD
operator|+
literal|"_1"
argument_list|,
literal|"nulls make me sad"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MapperParsingException for null value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
comment|// make sure that the exception has the name of the field causing the error
name|assertTrue
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replaceReservedChars
specifier|private
specifier|static
name|String
name|replaceReservedChars
parameter_list|(
name|String
name|input
parameter_list|,
name|char
name|replacement
parameter_list|)
block|{
name|char
index|[]
name|charArray
init|=
name|input
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|CompletionFieldMapper
operator|.
name|isReservedChar
argument_list|(
name|charArray
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|charArray
index|[
name|i
index|]
operator|=
name|replacement
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|charArray
argument_list|)
return|;
block|}
DECL|class|CompletionMappingBuilder
specifier|private
specifier|static
class|class
name|CompletionMappingBuilder
block|{
DECL|field|searchAnalyzer
specifier|private
name|String
name|searchAnalyzer
init|=
literal|"simple"
decl_stmt|;
DECL|field|indexAnalyzer
specifier|private
name|String
name|indexAnalyzer
init|=
literal|"simple"
decl_stmt|;
DECL|field|payloads
specifier|private
name|Boolean
name|payloads
init|=
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
DECL|field|preserveSeparators
specifier|private
name|Boolean
name|preserveSeparators
init|=
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
DECL|field|preservePositionIncrements
specifier|private
name|Boolean
name|preservePositionIncrements
init|=
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
DECL|method|searchAnalyzer
specifier|public
name|CompletionMappingBuilder
name|searchAnalyzer
parameter_list|(
name|String
name|searchAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|searchAnalyzer
operator|=
name|searchAnalyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|indexAnalyzer
specifier|public
name|CompletionMappingBuilder
name|indexAnalyzer
parameter_list|(
name|String
name|indexAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|indexAnalyzer
operator|=
name|indexAnalyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|payloads
specifier|public
name|CompletionMappingBuilder
name|payloads
parameter_list|(
name|Boolean
name|payloads
parameter_list|)
block|{
name|this
operator|.
name|payloads
operator|=
name|payloads
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preserveSeparators
specifier|public
name|CompletionMappingBuilder
name|preserveSeparators
parameter_list|(
name|Boolean
name|preserveSeparators
parameter_list|)
block|{
name|this
operator|.
name|preserveSeparators
operator|=
name|preserveSeparators
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|preservePositionIncrements
specifier|public
name|CompletionMappingBuilder
name|preservePositionIncrements
parameter_list|(
name|Boolean
name|preservePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|preservePositionIncrements
operator|=
name|preservePositionIncrements
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

