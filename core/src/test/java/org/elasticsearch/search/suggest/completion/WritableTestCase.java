begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_comment
comment|/**  * Base class for testing serialization and equality for  * {@link Writeable} models  */
end_comment

begin_class
DECL|class|WritableTestCase
specifier|public
specifier|abstract
class|class
name|WritableTestCase
parameter_list|<
name|M
extends|extends
name|Writeable
parameter_list|>
extends|extends
name|ESTestCase
block|{
DECL|field|NUMBER_OF_RUNS
specifier|protected
specifier|static
specifier|final
name|int
name|NUMBER_OF_RUNS
init|=
literal|20
decl_stmt|;
comment|/**      * create random model that is put under test      */
DECL|method|createTestModel
specifier|protected
specifier|abstract
name|M
name|createTestModel
parameter_list|()
function_decl|;
comment|/**      * mutate the given model so the returned model is different      */
DECL|method|createMutation
specifier|protected
specifier|abstract
name|M
name|createMutation
parameter_list|(
name|M
name|original
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Read from a stream.      */
DECL|method|readFrom
specifier|protected
specifier|abstract
name|M
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Test serialization and deserialization of the tested model.      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_RUNS
condition|;
name|i
operator|++
control|)
block|{
name|M
name|testModel
init|=
name|createTestModel
argument_list|()
decl_stmt|;
name|M
name|deserializedModel
init|=
name|copyModel
argument_list|(
name|testModel
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testModel
argument_list|,
name|deserializedModel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|deserializedModel
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|testModel
argument_list|,
name|deserializedModel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test equality and hashCode properties      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|IOException
block|{
name|M
name|firstModel
init|=
name|createTestModel
argument_list|()
decl_stmt|;
name|String
name|modelName
init|=
name|firstModel
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|modelName
operator|+
literal|" is equal to null"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|modelName
operator|+
literal|" is equal to incompatible type"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|modelName
operator|+
literal|" is not equal to self"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
name|firstModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"same "
operator|+
name|modelName
operator|+
literal|"'s hashcode returns different values if called multiple times"
argument_list|,
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"different "
operator|+
name|modelName
operator|+
literal|" should not be equal"
argument_list|,
name|createMutation
argument_list|(
name|firstModel
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstModel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|M
name|secondModel
init|=
name|copyModel
argument_list|(
name|firstModel
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|modelName
operator|+
literal|" is not equal to self"
argument_list|,
name|secondModel
operator|.
name|equals
argument_list|(
name|secondModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|modelName
operator|+
literal|" is not equal to its copy"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
name|secondModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|secondModel
operator|.
name|equals
argument_list|(
name|firstModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modelName
operator|+
literal|" copy's hashcode is different from original hashcode"
argument_list|,
name|secondModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|M
name|thirdModel
init|=
name|copyModel
argument_list|(
name|secondModel
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|modelName
operator|+
literal|" is not equal to self"
argument_list|,
name|thirdModel
operator|.
name|equals
argument_list|(
name|thirdModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|modelName
operator|+
literal|" is not equal to its copy"
argument_list|,
name|secondModel
operator|.
name|equals
argument_list|(
name|thirdModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modelName
operator|+
literal|" copy's hashcode is different from original hashcode"
argument_list|,
name|secondModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not transitive"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
name|thirdModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modelName
operator|+
literal|" copy's hashcode is different from original hashcode"
argument_list|,
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|modelName
operator|+
literal|" equals is not symmetric"
argument_list|,
name|thirdModel
operator|.
name|equals
argument_list|(
name|secondModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|modelName
operator|+
literal|" equals is not symmetric"
argument_list|,
name|thirdModel
operator|.
name|equals
argument_list|(
name|firstModel
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyModel
specifier|private
name|M
name|copyModel
parameter_list|(
name|M
name|original
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|original
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|provideNamedWritableRegistry
argument_list|()
argument_list|)
init|)
block|{
return|return
name|readFrom
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|provideNamedWritableRegistry
specifier|protected
name|NamedWriteableRegistry
name|provideNamedWritableRegistry
parameter_list|()
block|{
return|return
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

