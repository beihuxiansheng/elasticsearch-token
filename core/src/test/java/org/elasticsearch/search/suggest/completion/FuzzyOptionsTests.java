begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|EqualsHashCodeTestUtils
operator|.
name|checkEqualsAndHashCode
import|;
end_import

begin_class
DECL|class|FuzzyOptionsTests
specifier|public
class|class
name|FuzzyOptionsTests
extends|extends
name|ESTestCase
block|{
DECL|field|NUMBER_OF_RUNS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_RUNS
init|=
literal|20
decl_stmt|;
DECL|method|randomFuzzyOptions
specifier|public
specifier|static
name|FuzzyOptions
name|randomFuzzyOptions
parameter_list|()
block|{
specifier|final
name|FuzzyOptions
operator|.
name|Builder
name|builder
init|=
name|FuzzyOptions
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|maybeSet
argument_list|(
name|builder
operator|::
name|setFuzziness
argument_list|,
name|randomFrom
argument_list|(
name|Fuzziness
operator|.
name|ZERO
argument_list|,
name|Fuzziness
operator|.
name|ONE
argument_list|,
name|Fuzziness
operator|.
name|TWO
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maybeSet
argument_list|(
name|builder
operator|::
name|setFuzziness
argument_list|,
name|randomFrom
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|maybeSet
argument_list|(
name|builder
operator|::
name|setFuzzyMinLength
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|builder
operator|::
name|setFuzzyPrefixLength
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|builder
operator|::
name|setMaxDeterminizedStates
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|builder
operator|::
name|setTranspositions
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|builder
operator|::
name|setUnicodeAware
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createMutation
specifier|protected
name|FuzzyOptions
name|createMutation
parameter_list|(
name|FuzzyOptions
name|original
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FuzzyOptions
operator|.
name|Builder
name|builder
init|=
name|FuzzyOptions
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setFuzziness
argument_list|(
name|original
operator|.
name|getEditDistance
argument_list|()
argument_list|)
operator|.
name|setFuzzyPrefixLength
argument_list|(
name|original
operator|.
name|getFuzzyPrefixLength
argument_list|()
argument_list|)
operator|.
name|setFuzzyMinLength
argument_list|(
name|original
operator|.
name|getFuzzyMinLength
argument_list|()
argument_list|)
operator|.
name|setMaxDeterminizedStates
argument_list|(
name|original
operator|.
name|getMaxDeterminizedStates
argument_list|()
argument_list|)
operator|.
name|setTranspositions
argument_list|(
name|original
operator|.
name|isTranspositions
argument_list|()
argument_list|)
operator|.
name|setUnicodeAware
argument_list|(
name|original
operator|.
name|isUnicodeAware
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|mutators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|mutators
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|builder
operator|.
name|setFuzziness
argument_list|(
name|randomValueOtherThan
argument_list|(
name|original
operator|.
name|getEditDistance
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomFrom
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mutators
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|builder
operator|.
name|setFuzzyPrefixLength
argument_list|(
name|randomValueOtherThan
argument_list|(
name|original
operator|.
name|getFuzzyPrefixLength
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mutators
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|builder
operator|.
name|setFuzzyMinLength
argument_list|(
name|randomValueOtherThan
argument_list|(
name|original
operator|.
name|getFuzzyMinLength
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mutators
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|builder
operator|.
name|setMaxDeterminizedStates
argument_list|(
name|randomValueOtherThan
argument_list|(
name|original
operator|.
name|getMaxDeterminizedStates
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mutators
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|builder
operator|.
name|setTranspositions
argument_list|(
operator|!
name|original
operator|.
name|isTranspositions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutators
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|builder
operator|.
name|setUnicodeAware
argument_list|(
operator|!
name|original
operator|.
name|isUnicodeAware
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|randomFrom
argument_list|(
name|mutators
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Test serialization and deserialization      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_RUNS
condition|;
name|i
operator|++
control|)
block|{
name|FuzzyOptions
name|testModel
init|=
name|randomFuzzyOptions
argument_list|()
decl_stmt|;
name|FuzzyOptions
name|deserializedModel
init|=
name|copyWriteable
argument_list|(
name|testModel
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|FuzzyOptions
operator|::
operator|new
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testModel
argument_list|,
name|deserializedModel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|deserializedModel
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|testModel
argument_list|,
name|deserializedModel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEqualsAndHashCode
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_RUNS
condition|;
name|i
operator|++
control|)
block|{
name|checkEqualsAndHashCode
argument_list|(
name|randomFuzzyOptions
argument_list|()
argument_list|,
name|original
lambda|->
name|copyWriteable
argument_list|(
name|original
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|FuzzyOptions
operator|::
operator|new
argument_list|)
argument_list|,
name|this
operator|::
name|createMutation
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIllegalArguments
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
block|{
specifier|final
name|FuzzyOptions
operator|.
name|Builder
name|builder
init|=
name|FuzzyOptions
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setFuzziness
argument_list|(
operator|-
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fuzziness must be> 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"fuzziness must be between 0 and 2"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|setFuzziness
argument_list|(
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fuzziness must be< 2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"fuzziness must be between 0 and 2"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|setFuzziness
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fuzziness must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"fuzziness must not be null"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|setFuzzyMinLength
argument_list|(
operator|-
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fuzzyMinLength must be>= 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"fuzzyMinLength must not be negative"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|setFuzzyPrefixLength
argument_list|(
operator|-
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fuzzyPrefixLength must be>= 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"fuzzyPrefixLength must not be negative"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|builder
operator|.
name|setMaxDeterminizedStates
argument_list|(
operator|-
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"max determinized state must be>= 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"maxDeterminizedStates must not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

