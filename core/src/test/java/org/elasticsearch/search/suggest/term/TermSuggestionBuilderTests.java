begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.term
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|AbstractSuggestionBuilderTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestionBuilder
operator|.
name|StringDistanceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestionBuilder
operator|.
name|SuggestMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|DirectSpellcheckerSettings
operator|.
name|DEFAULT_ACCURACY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|DirectSpellcheckerSettings
operator|.
name|DEFAULT_MAX_EDITS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|DirectSpellcheckerSettings
operator|.
name|DEFAULT_MAX_INSPECTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|DirectSpellcheckerSettings
operator|.
name|DEFAULT_MAX_TERM_FREQ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|DirectSpellcheckerSettings
operator|.
name|DEFAULT_MIN_DOC_FREQ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|DirectSpellcheckerSettings
operator|.
name|DEFAULT_MIN_WORD_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|DirectSpellcheckerSettings
operator|.
name|DEFAULT_PREFIX_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  * Test the {@link TermSuggestionBuilder} class.  */
end_comment

begin_class
DECL|class|TermSuggestionBuilderTests
specifier|public
class|class
name|TermSuggestionBuilderTests
extends|extends
name|AbstractSuggestionBuilderTestCase
argument_list|<
name|TermSuggestionBuilder
argument_list|>
block|{
comment|/**      *  creates random suggestion builder, renders it to xContent and back to new instance that should be equal to original      */
annotation|@
name|Override
DECL|method|randomSuggestionBuilder
specifier|protected
name|TermSuggestionBuilder
name|randomSuggestionBuilder
parameter_list|()
block|{
return|return
name|randomTermSuggestionBuilder
argument_list|()
return|;
block|}
comment|/**      * Creates a random TermSuggestionBuilder      */
DECL|method|randomTermSuggestionBuilder
specifier|public
specifier|static
name|TermSuggestionBuilder
name|randomTermSuggestionBuilder
parameter_list|()
block|{
name|TermSuggestionBuilder
name|testBuilder
init|=
operator|new
name|TermSuggestionBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|setCommonPropertiesOnRandomBuilder
argument_list|(
name|testBuilder
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|suggestMode
argument_list|,
name|randomSuggestMode
argument_list|()
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|accuracy
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|sort
argument_list|,
name|randomSort
argument_list|()
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|stringDistance
argument_list|,
name|randomStringDistance
argument_list|()
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|maxEdits
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|maxInspections
argument_list|,
name|randomInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|maxTermFreq
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|prefixLength
argument_list|,
name|randomInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|minWordLength
argument_list|,
name|randomInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|minDocFreq
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|testBuilder
return|;
block|}
DECL|method|randomSuggestMode
specifier|private
specifier|static
name|SuggestMode
name|randomSuggestMode
parameter_list|()
block|{
specifier|final
name|int
name|randomVal
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|randomVal
condition|)
block|{
case|case
literal|0
case|:
return|return
name|SuggestMode
operator|.
name|MISSING
return|;
case|case
literal|1
case|:
return|return
name|SuggestMode
operator|.
name|POPULAR
return|;
case|case
literal|2
case|:
return|return
name|SuggestMode
operator|.
name|ALWAYS
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No suggest mode with an ordinal of "
operator|+
name|randomVal
argument_list|)
throw|;
block|}
block|}
DECL|method|randomSort
specifier|private
specifier|static
name|SortBy
name|randomSort
parameter_list|()
block|{
name|int
name|randomVal
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|randomVal
condition|)
block|{
case|case
literal|0
case|:
return|return
name|SortBy
operator|.
name|SCORE
return|;
case|case
literal|1
case|:
return|return
name|SortBy
operator|.
name|FREQUENCY
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No sort mode with an ordinal of "
operator|+
name|randomVal
argument_list|)
throw|;
block|}
block|}
DECL|method|randomStringDistance
specifier|private
specifier|static
name|StringDistanceImpl
name|randomStringDistance
parameter_list|()
block|{
name|int
name|randomVal
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|randomVal
condition|)
block|{
case|case
literal|0
case|:
return|return
name|StringDistanceImpl
operator|.
name|INTERNAL
return|;
case|case
literal|1
case|:
return|return
name|StringDistanceImpl
operator|.
name|DAMERAU_LEVENSHTEIN
return|;
case|case
literal|2
case|:
return|return
name|StringDistanceImpl
operator|.
name|LEVENSTEIN
return|;
case|case
literal|3
case|:
return|return
name|StringDistanceImpl
operator|.
name|JAROWINKLER
return|;
case|case
literal|4
case|:
return|return
name|StringDistanceImpl
operator|.
name|NGRAM
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No string distance algorithm with an ordinal of "
operator|+
name|randomVal
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|mutateSpecificParameters
specifier|protected
name|void
name|mutateSpecificParameters
parameter_list|(
name|TermSuggestionBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|9
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|builder
operator|.
name|suggestMode
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|suggestMode
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomSuggestMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|builder
operator|.
name|accuracy
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|accuracy
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|builder
operator|.
name|sort
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|sort
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomSort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|builder
operator|.
name|stringDistance
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|stringDistance
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomStringDistance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|builder
operator|.
name|maxEdits
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|maxEdits
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|builder
operator|.
name|maxInspections
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|maxInspections
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|builder
operator|.
name|maxTermFreq
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|maxTermFreq
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|builder
operator|.
name|prefixLength
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|prefixLength
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|builder
operator|.
name|minWordLength
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|minWordLength
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|builder
operator|.
name|minDocFreq
argument_list|(
name|randomValueOtherThan
argument_list|(
name|builder
operator|.
name|minDocFreq
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|randomFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
comment|// do nothing
block|}
block|}
DECL|method|testInvalidParameters
specifier|public
name|void
name|testInvalidParameters
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test missing field name
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|TermSuggestionBuilder
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"suggestion requires a field name"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// test empty field name
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|TermSuggestionBuilder
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"suggestion field name is empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|TermSuggestionBuilder
name|builder
init|=
operator|new
name|TermSuggestionBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
comment|// test invalid accuracy values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|accuracy
argument_list|(
operator|-
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|accuracy
argument_list|(
literal|1.1f
argument_list|)
argument_list|)
expr_stmt|;
comment|// test invalid max edit distance values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|maxEdits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|maxEdits
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|maxEdits
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// test invalid max inspections values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|maxInspections
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test invalid max term freq values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|maxTermFreq
argument_list|(
operator|-
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|maxTermFreq
argument_list|(
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|maxTermFreq
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
comment|// test invalid min doc freq values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|minDocFreq
argument_list|(
operator|-
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|minDocFreq
argument_list|(
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|minDocFreq
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
comment|// test invalid min word length values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|minWordLength
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|minWordLength
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test invalid prefix length values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|prefixLength
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test invalid size values
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|size
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|size
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// null values not allowed for enums
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|sort
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|stringDistance
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|suggestMode
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultValuesSet
specifier|public
name|void
name|testDefaultValuesSet
parameter_list|()
block|{
name|TermSuggestionBuilder
name|builder
init|=
operator|new
name|TermSuggestionBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_ACCURACY
argument_list|,
name|builder
operator|.
name|accuracy
argument_list|()
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MAX_EDITS
argument_list|,
name|builder
operator|.
name|maxEdits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MAX_INSPECTIONS
argument_list|,
name|builder
operator|.
name|maxInspections
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MAX_TERM_FREQ
argument_list|,
name|builder
operator|.
name|maxTermFreq
argument_list|()
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MIN_DOC_FREQ
argument_list|,
name|builder
operator|.
name|minDocFreq
argument_list|()
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MIN_WORD_LENGTH
argument_list|,
name|builder
operator|.
name|minWordLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_PREFIX_LENGTH
argument_list|,
name|builder
operator|.
name|prefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SortBy
operator|.
name|SCORE
argument_list|,
name|builder
operator|.
name|sort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StringDistanceImpl
operator|.
name|INTERNAL
argument_list|,
name|builder
operator|.
name|stringDistance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SuggestMode
operator|.
name|MISSING
argument_list|,
name|builder
operator|.
name|suggestMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedJson
specifier|public
name|void
name|testMalformedJson
parameter_list|()
block|{
specifier|final
name|String
name|field
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|String
name|suggest
init|=
literal|"{\n"
operator|+
literal|"  \"bad-payload\" : {\n"
operator|+
literal|"    \"text\" : \"the amsterdma meetpu\",\n"
operator|+
literal|"    \"term\" : {\n"
operator|+
literal|"      \"field\" : { \""
operator|+
name|field
operator|+
literal|"\" : \"bad-object\" }\n"
operator|+
literal|"    }\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|suggest
argument_list|)
init|)
block|{
specifier|final
name|SuggestBuilder
name|suggestBuilder
init|=
name|SuggestBuilder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should not have been able to create SuggestBuilder from malformed JSON: "
operator|+
name|suggestBuilder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"parsing failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

