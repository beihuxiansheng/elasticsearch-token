begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.completion
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|AbstractSuggestionBuilderTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionSearchContext
operator|.
name|SuggestionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|CategoryQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|GeoQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|context
operator|.
name|QueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|CompletionSuggesterBuilderTests
specifier|public
class|class
name|CompletionSuggesterBuilderTests
extends|extends
name|AbstractSuggestionBuilderTestCase
argument_list|<
name|CompletionSuggestionBuilder
argument_list|>
block|{
annotation|@
name|BeforeClass
DECL|method|initQueryContexts
specifier|public
specifier|static
name|void
name|initQueryContexts
parameter_list|()
block|{
name|namedWriteableRegistry
operator|.
name|registerPrototype
argument_list|(
name|QueryContext
operator|.
name|class
argument_list|,
name|CategoryQueryContext
operator|.
name|PROTOTYPE
argument_list|)
expr_stmt|;
name|namedWriteableRegistry
operator|.
name|registerPrototype
argument_list|(
name|QueryContext
operator|.
name|class
argument_list|,
name|GeoQueryContext
operator|.
name|PROTOTYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|randomSuggestionBuilder
specifier|protected
name|CompletionSuggestionBuilder
name|randomSuggestionBuilder
parameter_list|()
block|{
name|CompletionSuggestionBuilder
name|testBuilder
init|=
operator|new
name|CompletionSuggestionBuilder
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|testBuilder
operator|.
name|prefix
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|testBuilder
operator|.
name|prefix
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|FuzzyOptionsTests
operator|.
name|randomFuzzyOptions
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|testBuilder
operator|.
name|prefix
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|Fuzziness
operator|.
name|ZERO
argument_list|,
name|Fuzziness
operator|.
name|ONE
argument_list|,
name|Fuzziness
operator|.
name|TWO
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|testBuilder
operator|.
name|regex
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|RegexOptionsTests
operator|.
name|randomRegexOptions
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|payloads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|payloads
argument_list|,
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|maybeSet
argument_list|(
name|testBuilder
operator|::
name|payload
argument_list|,
name|payloads
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numContext
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|CategoryQueryContext
index|[]
name|contexts
init|=
operator|new
name|CategoryQueryContext
index|[
name|numContext
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContext
condition|;
name|i
operator|++
control|)
block|{
name|contexts
index|[
name|i
index|]
operator|=
name|CategoryQueryContextTests
operator|.
name|randomCategoryQueryContext
argument_list|()
expr_stmt|;
block|}
name|testBuilder
operator|.
name|categoryContexts
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numContext
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|GeoQueryContext
index|[]
name|contexts
init|=
operator|new
name|GeoQueryContext
index|[
name|numContext
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContext
condition|;
name|i
operator|++
control|)
block|{
name|contexts
index|[
name|i
index|]
operator|=
name|GeoQueryContextTests
operator|.
name|randomGeoQueryContext
argument_list|()
expr_stmt|;
block|}
name|testBuilder
operator|.
name|geoContexts
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
return|return
name|testBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|assertSuggestionContext
specifier|protected
name|void
name|assertSuggestionContext
parameter_list|(
name|SuggestionContext
name|oldSuggestion
parameter_list|,
name|SuggestionContext
name|newSuggestion
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|testBuild
specifier|public
name|void
name|testBuild
parameter_list|()
throws|throws
name|IOException
block|{
comment|// skip for now
block|}
annotation|@
name|Override
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
comment|// skip for now
block|}
annotation|@
name|Override
DECL|method|mutateSpecificParameters
specifier|protected
name|void
name|mutateSpecificParameters
parameter_list|(
name|CompletionSuggestionBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|List
argument_list|<
name|String
argument_list|>
name|payloads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|payloads
argument_list|,
name|generateRandomStringArray
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|payload
argument_list|(
name|payloads
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|int
name|numCategoryContext
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|CategoryQueryContext
index|[]
name|categoryContexts
init|=
operator|new
name|CategoryQueryContext
index|[
name|numCategoryContext
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCategoryContext
condition|;
name|i
operator|++
control|)
block|{
name|categoryContexts
index|[
name|i
index|]
operator|=
name|CategoryQueryContextTests
operator|.
name|randomCategoryQueryContext
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|categoryContexts
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|categoryContexts
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|int
name|numGeoContext
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|GeoQueryContext
index|[]
name|geoContexts
init|=
operator|new
name|GeoQueryContext
index|[
name|numGeoContext
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGeoContext
condition|;
name|i
operator|++
control|)
block|{
name|geoContexts
index|[
name|i
index|]
operator|=
name|GeoQueryContextTests
operator|.
name|randomGeoQueryContext
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|geoContexts
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|geoContexts
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|builder
operator|.
name|prefix
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|FuzzyOptionsTests
operator|.
name|randomFuzzyOptions
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|builder
operator|.
name|prefix
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|Fuzziness
operator|.
name|ZERO
argument_list|,
name|Fuzziness
operator|.
name|ONE
argument_list|,
name|Fuzziness
operator|.
name|TWO
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|builder
operator|.
name|regex
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|RegexOptionsTests
operator|.
name|randomRegexOptions
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"should not through"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

