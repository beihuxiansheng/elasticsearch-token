begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ReduceSearchPhaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|CompiledScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|DirectCandidateGeneratorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|Laplace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|LinearInterpolation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|StupidBackoff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestionBuilder
operator|.
name|SuggestMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilders
operator|.
name|phraseSuggestion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilders
operator|.
name|termSuggestion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSuggestion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSuggestionPhraseCollateMatchExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSuggestionSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  * Integration tests for term and phrase suggestions.  Many of these tests many requests that vary only slightly from one another.  Where  * possible these tests should declare for the first request, make the request, modify the configuration for the next request, make that  * request, modify again, request again, etc.  This makes it very obvious what changes between requests.  */
end_comment

begin_class
DECL|class|SuggestSearchIT
specifier|public
class|class
name|SuggestSearchIT
extends|extends
name|ESIntegTestCase
block|{
comment|// see #3196
DECL|method|testSuggestAcrossMultipleIndices
specifier|public
name|void
name|testSuggestAcrossMultipleIndices
parameter_list|()
throws|throws
name|IOException
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"aacd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"abbd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|TermSuggestionBuilder
name|termSuggest
init|=
name|termSuggestion
argument_list|(
literal|"text"
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> run suggestions with one index"
argument_list|)
expr_stmt|;
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test_1"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test_1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"ab cd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_1"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"aa cd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_1"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"ab bd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_1"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"ab cc"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|termSuggest
operator|=
name|termSuggestion
argument_list|(
literal|"text"
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"ab cd"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> run suggestions with two indices"
argument_list|)
expr_stmt|;
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test_2"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"ab cd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"aa cd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"ab bd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"ab cc"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"aacd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"abbd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test_2"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|termSuggest
operator|=
name|termSuggestion
argument_list|(
literal|"text"
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"ab cd"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> run suggestions with three indices"
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|" can not suggest across multiple indices with different analysis chains"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|endsWith
argument_list|(
literal|"Suggest entries have different sizes actual [1] expected [2]"
argument_list|)
argument_list|,
name|endsWith
argument_list|(
literal|"Suggest entries have different sizes actual [2] expected [1]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|endsWith
argument_list|(
literal|"Suggest entries have different sizes actual [1] expected [2]"
argument_list|)
argument_list|,
name|endsWith
argument_list|(
literal|"Suggest entries have different sizes actual [2] expected [1]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|termSuggest
operator|=
name|termSuggestion
argument_list|(
literal|"text"
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"ABCD"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> run suggestions with four indices"
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|" can not suggest across multiple indices with different analysis chains"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|endsWith
argument_list|(
literal|"Suggest entries have different text actual [ABCD] expected [abcd]"
argument_list|)
argument_list|,
name|endsWith
argument_list|(
literal|"Suggest entries have different text actual [abcd] expected [ABCD]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|endsWith
argument_list|(
literal|"Suggest entries have different text actual [ABCD] expected [abcd]"
argument_list|)
argument_list|,
name|endsWith
argument_list|(
literal|"Suggest entries have different text actual [abcd] expected [ABCD]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// see #3037
DECL|method|testSuggestModes
specifier|public
name|void
name|testSuggestModes
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.biword.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.biword.filter"
argument_list|,
literal|"shingler"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"shingled"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"biword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"I like iced tea"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"I like tea."
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"name"
argument_list|,
literal|"I like ice cream."
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|DirectCandidateGeneratorBuilder
name|generator
init|=
name|candidateGenerator
argument_list|(
literal|"name"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|0
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxEdits
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"name.shingled"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|generator
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"ice tea"
argument_list|,
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"iced tea"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|suggestMode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"ice tea"
argument_list|,
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@link DirectCandidateGeneratorBuilder}      *      * @param field      *            the field this candidate generator operates on.      */
DECL|method|candidateGenerator
specifier|private
name|DirectCandidateGeneratorBuilder
name|candidateGenerator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
operator|new
name|DirectCandidateGeneratorBuilder
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|// see #2729
DECL|method|testSizeOneShard
specifier|public
name|void
name|testSizeOneShard
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"text"
argument_list|,
literal|"abc"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"spellchecker"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"didn't ask for suggestions but got some"
argument_list|,
name|search
operator|.
name|getSuggest
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|TermSuggestionBuilder
name|termSuggestion
init|=
name|termSuggestion
argument_list|(
literal|"text"
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|10
argument_list|,
literal|"abc0"
argument_list|)
expr_stmt|;
name|termSuggestion
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggestion
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|5
argument_list|,
literal|"abc0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnmappedField
specifier|public
name|void
name|testUnmappedField
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.biword.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.biword.filter"
argument_list|,
literal|"shingler"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"shingled"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"biword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"I like iced tea"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"I like tea."
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"I like ice cream."
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"name.shingled"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"name"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|0
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxEdits
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"ice tea"
argument_list|,
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"iced tea"
argument_list|)
expr_stmt|;
name|phraseSuggestion
operator|=
name|phraseSuggestion
argument_list|(
literal|"nosuchField"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"name"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|0
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxEdits
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|{
name|SearchRequestBuilder
name|searchBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|searchBuilder
operator|.
name|suggest
argument_list|(
operator|new
name|SuggestBuilder
argument_list|()
operator|.
name|setGlobalText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|searchBuilder
argument_list|,
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|{
name|SearchRequestBuilder
name|searchBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|searchBuilder
operator|.
name|suggest
argument_list|(
operator|new
name|SuggestBuilder
argument_list|()
operator|.
name|setGlobalText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|searchBuilder
argument_list|,
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"aacd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"abbd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"spellcecker"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"didn't ask for suggestions but got some"
argument_list|,
name|search
operator|.
name|getSuggest
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|TermSuggestionBuilder
name|termSuggest
init|=
name|termSuggestion
argument_list|(
literal|"text"
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|"aacd"
argument_list|,
literal|"abbd"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|"aacd"
argument_list|,
literal|"abbd"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|TermSuggestionBuilder
name|termSuggest
init|=
name|termSuggestion
argument_list|(
literal|"text"
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
literal|"test"
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithMultipleCommands
specifier|public
name|void
name|testWithMultipleCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"1"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_abcd"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_efgh"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"2"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_eeeh"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"3"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_abbd"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_efff"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"4"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_eggg"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|suggestions
operator|.
name|put
argument_list|(
literal|"size1"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|(
literal|"prefix_abcd"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|10
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|put
argument_list|(
literal|"field2"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|text
argument_list|(
literal|"prefix_eeeh prefix_efgh"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|put
argument_list|(
literal|"accuracy"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|text
argument_list|(
literal|"prefix_efgh"
argument_list|)
operator|.
name|accuracy
argument_list|(
literal|1f
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
name|suggestions
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size1"
argument_list|,
literal|"prefix_aacd"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"prefix_eeeh"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_efgh"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"prefix_efgh"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|1
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_eeeh"
argument_list|,
literal|"prefix_efff"
argument_list|,
literal|"prefix_eggg"
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"accuracy"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSizeAndSort
specifier|public
name|void
name|testSizeAndSort
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|termsAndDocCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_aaad"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abbb"
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_aaca"
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abba"
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_accc"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_addd"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abaa"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_dbca"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_cbad"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_aacd"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abcc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_accd"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|termsAndDocCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getValue
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|+
name|i
argument_list|,
literal|"field1"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|refresh
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|suggestions
operator|.
name|put
argument_list|(
literal|"size3SortScoreFirst"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|put
argument_list|(
literal|"size10SortScoreFirst"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|put
argument_list|(
literal|"size3SortScoreFirstMaxEdits1"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|maxEdits
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|put
argument_list|(
literal|"size10SortFrequencyFirst"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|sort
argument_list|(
name|SortBy
operator|.
name|FREQUENCY
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
literal|"prefix_abcd"
argument_list|,
literal|0
argument_list|,
name|suggestions
argument_list|)
decl_stmt|;
comment|// The commented out assertions fail sometimes because suggestions are based off of shard frequencies instead of index frequencies.
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size3SortScoreFirst"
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"prefix_accd"
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size10SortScoreFirst"
argument_list|,
literal|10
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"prefix_accd"
comment|/*, "prefix_aaad" */
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size3SortScoreFirstMaxEdits1"
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"prefix_accd"
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size10SortFrequencyFirst"
argument_list|,
literal|"prefix_aaad"
argument_list|,
literal|"prefix_abbb"
argument_list|,
literal|"prefix_aaca"
argument_list|,
literal|"prefix_abba"
argument_list|,
literal|"prefix_accc"
argument_list|,
literal|"prefix_addd"
argument_list|,
literal|"prefix_abaa"
argument_list|,
literal|"prefix_dbca"
argument_list|,
literal|"prefix_cbad"
argument_list|,
literal|"prefix_aacd"
argument_list|)
expr_stmt|;
comment|// assertThat(suggest.get(3).getSuggestedWords().get("prefix_abcd").get(4).getTerm(), equalTo("prefix_abcc"));
comment|// assertThat(suggest.get(3).getSuggestedWords().get("prefix_abcd").get(4).getTerm(), equalTo("prefix_accd"));
block|}
comment|// see #2817
DECL|method|testStopwordsOnlyPhraseSuggest
specifier|public
name|void
name|testStopwordsOnlyPhraseSuggest
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"typ1"
argument_list|,
literal|"body"
argument_list|,
literal|"type=text,analyzer=stopwd"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.stopwd.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.stopwd.filter"
argument_list|,
literal|"stop"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"1"
argument_list|,
literal|"body"
argument_list|,
literal|"this is a test"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"a an the"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"body"
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|1
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixLength
specifier|public
name|void
name|testPrefixLength
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.reverse.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.reverse.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"body"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"body"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"body"
argument_list|,
literal|"hello words"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"hello word"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|4
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|confidence
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"hello words"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"hello word"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|2
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|confidence
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicPhraseSuggest
specifier|public
name|void
name|testBasicPhraseSuggest
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.reverse.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.reverse.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[]
block|{
literal|"Arthur, King of the Britons"
block|,
literal|"Sir Lancelot the Brave"
block|,
literal|"Patsy, Arthur's Servant"
block|,
literal|"Sir Robin the Not-Quite-So-Brave-as-Sir-Lancelot"
block|,
literal|"Sir Bedevere the Wise"
block|,
literal|"Sir Galahad the Pure"
block|,
literal|"Miss Islington, the Witch"
block|,
literal|"Zoot"
block|,
literal|"Leader of Robin's Minstrels"
block|,
literal|"Old Crone"
block|,
literal|"Frank, the Historian"
block|,
literal|"Frank's Wife"
block|,
literal|"Dr. Piglet"
block|,
literal|"Dr. Winston"
block|,
literal|"Sir Robin (Stand-in)"
block|,
literal|"Knight Who Says Ni"
block|,
literal|"Police sergeant who stops the film"
block|,         }
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|strings
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|line
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"body_reverse"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggest
init|=
name|phraseSuggestion
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|2
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"Frank's Wise"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"frank's wife"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Frank's Wise"
argument_list|)
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|realWordErrorLikelihood
argument_list|(
literal|0.95f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, Kinh of the Britons"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
comment|// Check the "text" field this one time.
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Artur, Kinh of the Britons"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ask for highlighting
name|phraseSuggest
operator|.
name|highlight
argument_list|(
literal|"<em>"
argument_list|,
literal|"</em>"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlighted
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>arthur</em> king of the<em>britons</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// pass in a correct phrase
name|phraseSuggest
operator|.
name|highlight
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|confidence
argument_list|(
literal|0f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Arthur, King of the Britons"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
comment|// pass in a correct phrase - set confidence to 2
name|phraseSuggest
operator|.
name|confidence
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Arthur, King of the Britons"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
comment|// pass in a correct phrase - set confidence to 0.99
name|phraseSuggest
operator|.
name|confidence
argument_list|(
literal|0.99f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Arthur, King of the Britons"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
comment|//test reverse suggestions with pre& post filter
name|phraseSuggest
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|preFilter
argument_list|(
literal|"reverse"
argument_list|)
operator|.
name|postFilter
argument_list|(
literal|"reverse"
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, Ging of the Britons"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
comment|// set all mass to trigrams (not indexed)
name|phraseSuggest
operator|.
name|clearCandidateGenerators
argument_list|()
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|smoothingModel
argument_list|(
operator|new
name|LinearInterpolation
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
comment|// set all mass to bigrams
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|LinearInterpolation
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
comment|// distribute mass
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|LinearInterpolation
argument_list|(
literal|0.4
argument_list|,
literal|0.4
argument_list|,
literal|0.2
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Frank's Wise"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"frank's wife"
argument_list|)
expr_stmt|;
comment|// try all smoothing methods
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|LinearInterpolation
argument_list|(
literal|0.4
argument_list|,
literal|0.4
argument_list|,
literal|0.2
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|Laplace
argument_list|(
literal|0.2
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|StupidBackoff
argument_list|(
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"arthur king of the britons"
argument_list|)
expr_stmt|;
comment|// check tokenLimit
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
literal|null
argument_list|)
operator|.
name|tokenLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Artur, King of the Britns"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|tokenLimit
argument_list|(
literal|15
argument_list|)
operator|.
name|smoothingModel
argument_list|(
operator|new
name|StupidBackoff
argument_list|(
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Sir Bedever the Wife Sir Bedever the Wife Sir Bedever the Wife"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"sir bedevere the wise sir bedevere the wise sir bedevere the wise"
argument_list|)
expr_stmt|;
comment|// Check the name this time because we're repeating it which is funky
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Sir Bedever the Wife Sir Bedever the Wife Sir Bedever the Wife"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSizeParam
specifier|public
name|void
name|testSizeParam
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.reverse.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.reverse.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|line
init|=
literal|"xorr the god jewel"
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"body_reverse"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
literal|"I got it this time"
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"body_reverse"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|realWordErrorLikelihood
argument_list|(
literal|0.95f
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|2
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|accuracy
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
operator|.
name|smoothingModel
argument_list|(
operator|new
name|StupidBackoff
argument_list|(
literal|0.1
argument_list|)
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|size
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"Xorr the Gut-Jewel"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
comment|// we allow a size of 2 now on the shard generator level so "god" will be found since it's LD2
name|phraseSuggestion
operator|.
name|clearCandidateGenerators
argument_list|()
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|size
argument_list|(
literal|2
argument_list|)
operator|.
name|accuracy
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Xorr the Gut-Jewel"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhraseBoundaryCases
specifier|public
name|void
name|testPhraseBoundaryCases
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
comment|// to get reliable statistics we should put this all into one shard
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.ngram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.ngram.filter"
argument_list|,
literal|"my_shingle2"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.myDefAnalyzer.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.myDefAnalyzer.filter"
argument_list|,
literal|"shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.output_unigrams"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"ngram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[]
block|{
literal|"Xorr the God-Jewel"
block|,
literal|"Grog the God-Crusher"
block|,
literal|"Xorn"
block|,
literal|"Walter Newell"
block|,
literal|"Wanda Maximoff"
block|,
literal|"Captain America"
block|,
literal|"American Ace"
block|,
literal|"Wundarr the Aquarian"
block|,
literal|"Will o' the Wisp"
block|,
literal|"Xemnu the Titan"
block|}
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|strings
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|line
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|,
literal|"ngram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|NumShards
name|numShards
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// Lets make sure some things throw exceptions
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"does_not_exist"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|realWordErrorLikelihood
argument_list|(
literal|0.95f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|0.5f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|phraseSuggestion
operator|.
name|clearCandidateGenerators
argument_list|()
operator|.
name|analyzer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"xor the got-jewel"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"analyzer does only produce ngrams"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{         }
name|phraseSuggestion
operator|.
name|analyzer
argument_list|(
literal|"bigram"
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"xor the got-jewel"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"analyzer does only produce ngrams"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{         }
comment|// Now we'll make sure some things don't
name|phraseSuggestion
operator|.
name|forceUnigrams
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchSuggest
argument_list|(
literal|"xor the got-jewel"
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
comment|// Field doesn't produce unigrams but the analyzer does
name|phraseSuggestion
operator|.
name|forceUnigrams
argument_list|(
literal|true
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"ngram"
argument_list|)
expr_stmt|;
name|searchSuggest
argument_list|(
literal|"xor the got-jewel"
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
name|phraseSuggestion
operator|=
name|phraseSuggestion
argument_list|(
literal|"ngram"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"myDefAnalyzer"
argument_list|)
operator|.
name|forceUnigrams
argument_list|(
literal|true
argument_list|)
operator|.
name|realWordErrorLikelihood
argument_list|(
literal|0.95f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|0.5f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
literal|"xor the got-jewel"
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
decl_stmt|;
comment|// "xorr the god jewel" and and "xorn the god jewel" have identical scores (we are only using unigrams to score), so we tie break by
comment|// earlier term (xorn):
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorn the god jewel"
argument_list|)
expr_stmt|;
name|phraseSuggestion
operator|.
name|analyzer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
literal|"xor the got-jewel"
argument_list|,
literal|0
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
comment|// In this case xorr has a better score than xorn because we set the field back to the default (my_shingle2) analyzer, so the
comment|// probability that the term is not in the dictionary but is NOT a misspelling is relatively high in this case compared to the
comment|// others that have no n-gram with the other terms in the phrase :) you can set this realWorldErrorLikelyhood
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDifferentShardSize
specifier|public
name|void
name|testDifferentShardSize
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"foobar1"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"foobar2"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"foobar3"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
literal|"foobar"
argument_list|,
literal|"simple"
argument_list|,
name|termSuggestion
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
name|SuggestMode
operator|.
name|ALWAYS
argument_list|)
argument_list|)
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
block|}
comment|// see #3469
DECL|method|testShardFailures
specifier|public
name|void
name|testShardFailures
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.suggest.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.suggest.filter"
argument_list|,
literal|"standard"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"shingler"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.output_unigrams"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"suggest"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type2"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"3"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"4"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"5"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"Just testing the suggestions api"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"An other title about equal length"
argument_list|)
expr_stmt|;
comment|// Note that the last document has to have about the same length as the other or cutoff rechecking will remove the useful suggestion
name|refresh
argument_list|()
expr_stmt|;
comment|// When searching on a shard with a non existing mapping, we should fail
name|SearchRequestBuilder
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|suggest
argument_list|(
operator|new
name|SuggestBuilder
argument_list|()
operator|.
name|setGlobalText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"fielddoesnotexist"
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5.0f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|request
argument_list|,
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// When searching on a shard which does not hold yet any document of an existing type, we should not fail
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|suggest
argument_list|(
operator|new
name|SuggestBuilder
argument_list|()
operator|.
name|setGlobalText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"name"
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5.0f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertSuggestion
argument_list|(
name|searchResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"testing suggestions"
argument_list|)
expr_stmt|;
block|}
comment|// see #3469
DECL|method|testEmptyShards
specifier|public
name|void
name|testEmptyShards
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|XContentBuilder
name|mappingBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"suggest"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.suggest.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.suggest.filter"
argument_list|,
literal|"standard"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"shingler"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.output_unigrams"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mappingBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"11"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"12"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"Just testing the suggestions api"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"An other title about equal length"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|suggest
argument_list|(
operator|new
name|SuggestBuilder
argument_list|()
operator|.
name|setGlobalText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"name"
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5.0f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"testing suggestions"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Searching for a rare phrase shouldn't provide any suggestions if confidence&gt; 1.  This was possible before we rechecked the cutoff      * score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.      */
DECL|method|testSearchForRarePhrase
specifier|public
name|void
name|testSearchForRarePhrase
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If there isn't enough chaf per shard then shards can become unbalanced, making the cutoff recheck this is testing do more harm
comment|// then good.
name|int
name|chafPerShard
init|=
literal|100
decl_stmt|;
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"my_shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|NumShards
name|test
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|phrases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|phrases
argument_list|,
literal|"nobel prize"
argument_list|,
literal|"noble gases"
argument_list|,
literal|"somethingelse prize"
argument_list|,
literal|"pride and joy"
argument_list|,
literal|"notes are fun"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|phrases
operator|.
name|add
argument_list|(
literal|"noble somethingelse"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|numPrimaries
operator|*
name|chafPerShard
condition|;
name|i
operator|++
control|)
block|{
name|phrases
operator|.
name|add
argument_list|(
literal|"chaff"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|phrase
range|:
name|phrases
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|phrase
argument_list|,
literal|"body"
argument_list|,
name|phrase
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"nobel prize"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|.99f
argument_list|)
argument_list|)
operator|.
name|confidence
argument_list|(
literal|2f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"noble prize"
argument_list|,
literal|"simple_phrase"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|.99f
argument_list|)
argument_list|)
operator|.
name|confidence
argument_list|(
literal|2f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"nobel prize"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSuggestWithManyCandidates
specifier|public
name|void
name|testSuggestWithManyCandidates
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
comment|// A single shard will help to keep the tests repeatable.
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.text.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.text.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"my_shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|titles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// We're going to be searching for:
comment|//   united states house of representatives elections in washington 2006
comment|// But we need to make sure we generate a ton of suggestions so we add a bunch of candidates.
comment|// Many of these candidates are drawn from page names on English Wikipedia.
comment|// Tons of different options very near the exact query term
name|titles
operator|.
name|add
argument_list|(
literal|"United States House of Representatives Elections in Washington 1789"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|year
init|=
literal|1790
init|;
name|year
operator|<
literal|2014
condition|;
name|year
operator|+=
literal|2
control|)
block|{
name|titles
operator|.
name|add
argument_list|(
literal|"United States House of Representatives Elections in Washington "
operator|+
name|year
argument_list|)
expr_stmt|;
block|}
comment|// Six of these are near enough to be viable suggestions, just not the top one
comment|// But we can't stop there!  Titles that are just a year are pretty common so lets just add one per year
comment|// since 0.  Why not?
for|for
control|(
name|int
name|year
init|=
literal|0
init|;
name|year
operator|<
literal|2015
condition|;
name|year
operator|++
control|)
block|{
name|titles
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|year
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// That ought to provide more less good candidates for the last term
comment|// Now remove or add plural copies of every term we can
name|titles
operator|.
name|add
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Houses of Parliament"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Representative Government"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Election"
argument_list|)
expr_stmt|;
comment|// Now some possessive
name|titles
operator|.
name|add
argument_list|(
literal|"Washington's Birthday"
argument_list|)
expr_stmt|;
comment|// And some conjugation
name|titles
operator|.
name|add
argument_list|(
literal|"Unified Modeling Language"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Unite Against Fascism"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Stated Income Tax"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Media organizations housed within colleges"
argument_list|)
expr_stmt|;
comment|// And other stuff
name|titles
operator|.
name|add
argument_list|(
literal|"Untied shoelaces"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Unit circle"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Untitled"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Unicef"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Unrated"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"UniRed"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Jalan UnitenâDengkil"
argument_list|)
expr_stmt|;
comment|// Highway in Malaysia
name|titles
operator|.
name|add
argument_list|(
literal|"UNITAS"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"UNITER"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Un-Led-Ed"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"STATS LLC"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Staples"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Skates"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Statues of the Liberators"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Staten Island"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Statens Museum for Kunst"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Hause"
argument_list|)
expr_stmt|;
comment|// The last name or the German word, whichever.
name|titles
operator|.
name|add
argument_list|(
literal|"Hose"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Hoses"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Howse Peak"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"The Hoose-Gow"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Hooser"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Electron"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Electors"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Evictions"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Coronal mass ejection"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Wasington"
argument_list|)
expr_stmt|;
comment|// A film?
name|titles
operator|.
name|add
argument_list|(
literal|"Warrington"
argument_list|)
expr_stmt|;
comment|// A town in England
name|titles
operator|.
name|add
argument_list|(
literal|"Waddington"
argument_list|)
expr_stmt|;
comment|// Lots of places have this name
name|titles
operator|.
name|add
argument_list|(
literal|"Watlington"
argument_list|)
expr_stmt|;
comment|// Ditto
name|titles
operator|.
name|add
argument_list|(
literal|"Waplington"
argument_list|)
expr_stmt|;
comment|// Yup, also a town
name|titles
operator|.
name|add
argument_list|(
literal|"Washing of the Spears"
argument_list|)
expr_stmt|;
comment|// Book
for|for
control|(
name|char
name|c
init|=
literal|'A'
init|;
name|c
operator|<=
literal|'Z'
condition|;
name|c
operator|++
control|)
block|{
comment|// Can't forget lists, glorious lists!
name|titles
operator|.
name|add
argument_list|(
literal|"List of former members of the United States House of Representatives ("
operator|+
name|c
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// Lots of people are named Washington<Middle Initial>. LastName
name|titles
operator|.
name|add
argument_list|(
literal|"Washington "
operator|+
name|c
operator|+
literal|". Lastname"
argument_list|)
expr_stmt|;
comment|// Lets just add some more to be evil
name|titles
operator|.
name|add
argument_list|(
literal|"United "
operator|+
name|c
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"States "
operator|+
name|c
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"House "
operator|+
name|c
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Elections "
operator|+
name|c
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"2006 "
operator|+
name|c
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
name|c
operator|+
literal|" United"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
name|c
operator|+
literal|" States"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
name|c
operator|+
literal|" House"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
name|c
operator|+
literal|" Elections"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
name|c
operator|+
literal|" 2006"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|title
range|:
name|titles
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|PhraseSuggestionBuilder
name|suggest
init|=
name|phraseSuggestion
argument_list|(
literal|"title"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"title"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|.99f
argument_list|)
operator|.
name|size
argument_list|(
literal|1000
argument_list|)
comment|// Setting a silly high size helps of generate a larger list of candidates for testing.
operator|.
name|maxInspections
argument_list|(
literal|1000
argument_list|)
comment|// This too
argument_list|)
operator|.
name|confidence
argument_list|(
literal|0f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|2f
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|30000
argument_list|)
operator|.
name|size
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|suggest
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"united states house of representatives elections in washington 2006"
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|25480
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// Just to prove that we've run through a ton of options
name|suggest
operator|.
name|size
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|suggest
argument_list|)
expr_stmt|;
name|long
name|total
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"united states house of representatives elections in washington 2006"
argument_list|)
expr_stmt|;
comment|// assertThat(total, lessThan(1000L)); // Takes many seconds without fix - just for debugging
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|DummyTemplatePlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|class|DummyTemplatePlugin
specifier|public
specifier|static
class|class
name|DummyTemplatePlugin
extends|extends
name|Plugin
implements|implements
name|ScriptPlugin
block|{
annotation|@
name|Override
DECL|method|getScriptEngineService
specifier|public
name|ScriptEngineService
name|getScriptEngineService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|DummyTemplateScriptEngine
argument_list|()
return|;
block|}
block|}
DECL|class|DummyTemplateScriptEngine
specifier|public
specifier|static
class|class
name|DummyTemplateScriptEngine
implements|implements
name|ScriptEngineService
block|{
comment|// The collate query setter is hard coded to use mustache, so lets lie in this test about the script plugin,
comment|// which makes the collate code thinks mustache is evaluating the query.
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"mustache"
decl_stmt|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getExtension
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|compile
specifier|public
name|Object
name|compile
parameter_list|(
name|String
name|scriptName
parameter_list|,
name|String
name|scriptSource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
return|return
name|scriptSource
return|;
block|}
annotation|@
name|Override
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|CompiledScript
name|compiledScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|String
name|script
init|=
operator|(
name|String
operator|)
name|compiledScript
operator|.
name|compiled
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|script
operator|=
name|script
operator|.
name|replace
argument_list|(
literal|"{{"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"}}"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|script
decl_stmt|;
return|return
operator|new
name|ExecutableScript
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"setNextVar not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
operator|new
name|BytesArray
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|CompiledScript
name|compiledScript
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"search script not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isInlineScriptEnabled
specifier|public
name|boolean
name|isInlineScriptEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|testPhraseSuggesterCollate
specifier|public
name|void
name|testPhraseSuggesterCollate
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
comment|// A single shard will help to keep the tests repeatable.
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.text.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.text.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"my_shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"text"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|titles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"United States House of Representatives Elections in Washington 2006"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"United States House of Representatives Elections in Washington 2005"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Houses of Parliament"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Representative Government"
argument_list|)
expr_stmt|;
name|titles
operator|.
name|add
argument_list|(
literal|"Election"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|title
range|:
name|titles
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
comment|// suggest without collate
name|PhraseSuggestionBuilder
name|suggest
init|=
name|phraseSuggestion
argument_list|(
literal|"title"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
operator|new
name|DirectCandidateGeneratorBuilder
argument_list|(
literal|"title"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|.99f
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|maxInspections
argument_list|(
literal|200
argument_list|)
argument_list|)
operator|.
name|confidence
argument_list|(
literal|0f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|2f
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|30000
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|suggest
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// suggest with collate
name|String
name|filterString
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"match_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"{{field}}"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|filteredQuerySuggest
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|filterString
argument_list|)
decl_stmt|;
name|filteredQuerySuggest
operator|.
name|collateParams
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|filteredQuerySuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// collate suggest with no result (boundary case)
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"Elections of Representatives Parliament"
argument_list|,
literal|"title"
argument_list|,
name|filteredQuerySuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|NumShards
name|numShards
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// collate suggest with bad query
name|String
name|incorrectFilterString
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|incorrectFilteredSuggest
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|incorrectFilterString
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|namedSuggestion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|namedSuggestion
operator|.
name|put
argument_list|(
literal|"my_title_suggestion"
argument_list|,
name|incorrectFilteredSuggest
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|namedSuggestion
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Post query error has been swallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// suggest with collation
name|String
name|filterStringAsFilter
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"match_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|filteredFilterSuggest
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|filterStringAsFilter
argument_list|)
decl_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|filteredFilterSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// collate suggest with bad query
name|String
name|filterStr
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"pprefix"
argument_list|)
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|in
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|filterStr
argument_list|)
decl_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|namedSuggestion
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Post filter error has been swallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|//expected
block|}
comment|// collate script failure due to no additional params
name|String
name|collateWithParams
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"{{query_type}}"
argument_list|)
operator|.
name|field
argument_list|(
literal|"{{query_field}}"
argument_list|,
literal|"{{suggestion}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestWithNoParams
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|collateWithParams
argument_list|)
decl_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
name|numShards
operator|.
name|numPrimaries
argument_list|,
name|namedSuggestion
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Malformed query (lack of additional params) should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// collate script with additional params
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"query_type"
argument_list|,
literal|"match_phrase"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"query_field"
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestWithParams
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|collateWithParams
argument_list|)
operator|.
name|collateParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|phraseSuggestWithParams
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
comment|// collate query request with prune set to true
name|PhraseSuggestionBuilder
name|phraseSuggestWithParamsAndReturn
init|=
name|suggest
operator|.
name|collateQuery
argument_list|(
name|collateWithParams
argument_list|)
operator|.
name|collateParams
argument_list|(
name|params
argument_list|)
operator|.
name|collatePrune
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
literal|"united states house of representatives elections in washington 2006"
argument_list|,
literal|"title"
argument_list|,
name|phraseSuggestWithParamsAndReturn
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
name|assertSuggestionPhraseCollateMatchExists
argument_list|(
name|searchSuggest
argument_list|,
literal|"title"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|String
name|name
parameter_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
parameter_list|)
block|{
return|return
name|searchSuggest
argument_list|(
literal|null
argument_list|,
name|name
argument_list|,
name|suggestion
argument_list|)
return|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|String
name|suggestText
parameter_list|,
name|String
name|name
parameter_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
return|return
name|searchSuggest
argument_list|(
name|suggestText
argument_list|,
literal|0
argument_list|,
name|map
argument_list|)
return|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|String
name|suggestText
parameter_list|,
name|int
name|expectShardsFailed
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestions
parameter_list|)
block|{
name|SearchRequestBuilder
name|builder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SuggestBuilder
name|suggestBuilder
init|=
operator|new
name|SuggestBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|suggestText
operator|!=
literal|null
condition|)
block|{
name|suggestBuilder
operator|.
name|setGlobalText
argument_list|(
name|suggestText
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestion
range|:
name|suggestions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|suggestBuilder
operator|.
name|addSuggestion
argument_list|(
name|suggestion
operator|.
name|getKey
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|suggest
argument_list|(
name|suggestBuilder
argument_list|)
expr_stmt|;
name|SearchResponse
name|actionGet
init|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|actionGet
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|actionGet
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectShardsFailed
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getSuggest
argument_list|()
return|;
block|}
block|}
end_class

end_unit

