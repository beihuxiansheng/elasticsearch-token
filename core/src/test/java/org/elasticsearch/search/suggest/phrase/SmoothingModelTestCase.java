begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.phrase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|PerFieldAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|BytesRefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|SmoothingModelTestCase
specifier|public
specifier|abstract
class|class
name|SmoothingModelTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|namedWriteableRegistry
specifier|private
specifier|static
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
comment|/**      * setup for the whole base test class      */
annotation|@
name|BeforeClass
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|namedWriteableRegistry
operator|==
literal|null
condition|)
block|{
name|namedWriteableRegistry
operator|=
operator|new
name|NamedWriteableRegistry
argument_list|()
expr_stmt|;
name|SearchModule
operator|.
name|registerSmoothingModels
argument_list|(
name|namedWriteableRegistry
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|namedWriteableRegistry
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * create random model that is put under test      */
DECL|method|createTestModel
specifier|protected
specifier|abstract
name|SmoothingModel
name|createTestModel
parameter_list|()
function_decl|;
comment|/**      * mutate the given model so the returned smoothing model is different      */
DECL|method|createMutation
specifier|protected
specifier|abstract
name|SmoothingModel
name|createMutation
parameter_list|(
name|SmoothingModel
name|original
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|fromXContent
specifier|protected
specifier|abstract
name|SmoothingModel
name|fromXContent
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Test that creates new smoothing model from a random test smoothing model and checks both for equality      */
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|SmoothingModel
name|testModel
init|=
name|createTestModel
argument_list|()
decl_stmt|;
name|XContentBuilder
name|contentBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|contentBuilder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
name|contentBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|testModel
operator|.
name|innerToXContent
argument_list|(
name|contentBuilder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|contentBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|shuffleXContent
argument_list|(
name|contentBuilder
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
operator|new
name|QueryParseContext
argument_list|(
operator|new
name|IndicesQueriesRegistry
argument_list|()
argument_list|,
name|parser
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// go to start token, real parsing would do that in the outer element parser
name|SmoothingModel
name|parsedModel
init|=
name|fromXContent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|testModel
argument_list|,
name|parsedModel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testModel
argument_list|,
name|parsedModel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|parsedModel
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the WordScorer emitted by the smoothing model      */
DECL|method|testBuildWordScorer
specifier|public
name|void
name|testBuildWordScorer
parameter_list|()
throws|throws
name|IOException
block|{
name|SmoothingModel
name|testModel
init|=
name|createTestModel
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|PerFieldAnalyzerWrapper
name|wrapper
init|=
operator|new
name|PerFieldAnalyzerWrapper
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
operator|new
name|RAMDirectory
argument_list|()
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|wrapper
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"someText"
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|WordScorer
name|wordScorer
init|=
name|testModel
operator|.
name|buildWordScorerFactory
argument_list|()
operator|.
name|newScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"field"
argument_list|)
argument_list|,
literal|"field"
argument_list|,
literal|0.9d
argument_list|,
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|assertWordScorer
argument_list|(
name|wordScorer
argument_list|,
name|testModel
argument_list|)
expr_stmt|;
block|}
comment|/**      * implementation dependant assertions on the wordScorer produced by the smoothing model under test      */
DECL|method|assertWordScorer
specifier|abstract
name|void
name|assertWordScorer
parameter_list|(
name|WordScorer
name|wordScorer
parameter_list|,
name|SmoothingModel
name|testModel
parameter_list|)
function_decl|;
comment|/**      * Test serialization and deserialization of the tested model.      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|SmoothingModel
name|testModel
init|=
name|createTestModel
argument_list|()
decl_stmt|;
name|SmoothingModel
name|deserializedModel
init|=
name|copyModel
argument_list|(
name|testModel
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testModel
argument_list|,
name|deserializedModel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|deserializedModel
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|testModel
argument_list|,
name|deserializedModel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test equality and hashCode properties      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|IOException
block|{
name|SmoothingModel
name|firstModel
init|=
name|createTestModel
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"smoothing model is equal to null"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"smoothing model is equal to incompatible type"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"smoothing model is not equal to self"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
name|firstModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"same smoothing model's hashcode returns different values if called multiple times"
argument_list|,
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"different smoothing models should not be equal"
argument_list|,
name|createMutation
argument_list|(
name|firstModel
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstModel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SmoothingModel
name|secondModel
init|=
name|copyModel
argument_list|(
name|firstModel
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"smoothing model is not equal to self"
argument_list|,
name|secondModel
operator|.
name|equals
argument_list|(
name|secondModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"smoothing model is not equal to its copy"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
name|secondModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|secondModel
operator|.
name|equals
argument_list|(
name|firstModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"smoothing model copy's hashcode is different from original hashcode"
argument_list|,
name|secondModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SmoothingModel
name|thirdModel
init|=
name|copyModel
argument_list|(
name|secondModel
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"smoothing model is not equal to self"
argument_list|,
name|thirdModel
operator|.
name|equals
argument_list|(
name|thirdModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"smoothing model is not equal to its copy"
argument_list|,
name|secondModel
operator|.
name|equals
argument_list|(
name|thirdModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"smoothing model copy's hashcode is different from original hashcode"
argument_list|,
name|secondModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not transitive"
argument_list|,
name|firstModel
operator|.
name|equals
argument_list|(
name|thirdModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"smoothing model copy's hashcode is different from original hashcode"
argument_list|,
name|firstModel
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdModel
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdModel
operator|.
name|equals
argument_list|(
name|secondModel
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdModel
operator|.
name|equals
argument_list|(
name|firstModel
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyModel
specifier|static
name|SmoothingModel
name|copyModel
parameter_list|(
name|SmoothingModel
name|original
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|original
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
return|return
name|namedWriteableRegistry
operator|.
name|getReader
argument_list|(
name|SmoothingModel
operator|.
name|class
argument_list|,
name|original
operator|.
name|getWriteableName
argument_list|()
argument_list|)
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

