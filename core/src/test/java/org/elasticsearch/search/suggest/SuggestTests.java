begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|SuggestTests
specifier|public
class|class
name|SuggestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFilter
specifier|public
name|void
name|testFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
argument_list|>
argument_list|>
name|suggestions
decl_stmt|;
name|CompletionSuggestion
name|completionSuggestion
init|=
operator|new
name|CompletionSuggestion
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|PhraseSuggestion
name|phraseSuggestion
init|=
operator|new
name|PhraseSuggestion
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TermSuggestion
name|termSuggestion
init|=
operator|new
name|TermSuggestion
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|,
name|SortBy
operator|.
name|SCORE
argument_list|)
decl_stmt|;
name|suggestions
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|completionSuggestion
argument_list|,
name|phraseSuggestion
argument_list|,
name|termSuggestion
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
operator|new
name|Suggest
argument_list|(
name|suggestions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PhraseSuggestion
argument_list|>
name|phraseSuggestions
init|=
name|suggest
operator|.
name|filter
argument_list|(
name|PhraseSuggestion
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|phraseSuggestions
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|phraseSuggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|phraseSuggestion
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TermSuggestion
argument_list|>
name|termSuggestions
init|=
name|suggest
operator|.
name|filter
argument_list|(
name|TermSuggestion
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|termSuggestions
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termSuggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|termSuggestion
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|completionSuggestions
init|=
name|suggest
operator|.
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|completionSuggestions
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|completionSuggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|completionSuggestion
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSuggestionOrdering
specifier|public
name|void
name|testSuggestionOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
argument_list|>
argument_list|>
name|suggestions
decl_stmt|;
name|suggestions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|int
name|n
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|CompletionSuggestion
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|suggestions
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
operator|new
name|Suggest
argument_list|(
name|suggestions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
argument_list|>
argument_list|>
name|sortedSuggestions
decl_stmt|;
name|sortedSuggestions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|suggestions
argument_list|)
expr_stmt|;
name|sortedSuggestions
operator|.
name|sort
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompletionSuggestion
argument_list|>
name|completionSuggestions
init|=
name|suggest
operator|.
name|filter
argument_list|(
name|CompletionSuggestion
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|completionSuggestions
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|completionSuggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|sortedSuggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

