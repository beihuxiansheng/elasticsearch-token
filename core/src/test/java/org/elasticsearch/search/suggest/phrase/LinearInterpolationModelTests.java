begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.phrase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
operator|.
name|LinearInterpolation
import|;
end_import

begin_class
DECL|class|LinearInterpolationModelTests
specifier|public
class|class
name|LinearInterpolationModelTests
extends|extends
name|SmoothingModelTest
argument_list|<
name|LinearInterpolation
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestModel
specifier|protected
name|LinearInterpolation
name|createTestModel
parameter_list|()
block|{
name|double
name|trigramLambda
init|=
name|randomDoubleBetween
argument_list|(
literal|0.0
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|double
name|bigramLambda
init|=
name|randomDoubleBetween
argument_list|(
literal|0.0
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|double
name|unigramLambda
init|=
name|randomDoubleBetween
argument_list|(
literal|0.0
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// normalize
name|double
name|sum
init|=
name|trigramLambda
operator|+
name|bigramLambda
operator|+
name|unigramLambda
decl_stmt|;
return|return
operator|new
name|LinearInterpolation
argument_list|(
name|trigramLambda
operator|/
name|sum
argument_list|,
name|bigramLambda
operator|/
name|sum
argument_list|,
name|unigramLambda
operator|/
name|sum
argument_list|)
return|;
block|}
comment|/**      * mutate the given model so the returned smoothing model is different      */
annotation|@
name|Override
DECL|method|createMutation
specifier|protected
name|LinearInterpolation
name|createMutation
parameter_list|(
name|LinearInterpolation
name|original
parameter_list|)
block|{
comment|// swap two values permute original lambda values
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// swap first two
return|return
operator|new
name|LinearInterpolation
argument_list|(
name|original
operator|.
name|getBigramLambda
argument_list|()
argument_list|,
name|original
operator|.
name|getTrigramLambda
argument_list|()
argument_list|,
name|original
operator|.
name|getUnigramLambda
argument_list|()
argument_list|)
return|;
case|case
literal|1
case|:
comment|// swap last two
return|return
operator|new
name|LinearInterpolation
argument_list|(
name|original
operator|.
name|getTrigramLambda
argument_list|()
argument_list|,
name|original
operator|.
name|getUnigramLambda
argument_list|()
argument_list|,
name|original
operator|.
name|getBigramLambda
argument_list|()
argument_list|)
return|;
case|case
literal|2
case|:
default|default:
comment|// swap first and last
return|return
operator|new
name|LinearInterpolation
argument_list|(
name|original
operator|.
name|getUnigramLambda
argument_list|()
argument_list|,
name|original
operator|.
name|getBigramLambda
argument_list|()
argument_list|,
name|original
operator|.
name|getTrigramLambda
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

