begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.moving.avg
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|moving
operator|.
name|avg
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|EwmaModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|HoltLinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|HoltWintersModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|LinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|MovAvgModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|SimpleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|MovAvgUnitTests
specifier|public
class|class
name|MovAvgUnitTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSimpleMovAvgModel
specifier|public
name|void
name|testSimpleMovAvgModel
parameter_list|()
block|{
name|MovAvgModel
name|model
init|=
operator|new
name|SimpleModel
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|double
name|randValue
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|expected
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|expected
operator|+=
name|value
expr_stmt|;
block|}
name|expected
operator|/=
name|window
operator|.
name|size
argument_list|()
expr_stmt|;
name|double
name|actual
init|=
name|model
operator|.
name|next
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimplePredictionModel
specifier|public
name|void
name|testSimplePredictionModel
parameter_list|()
block|{
name|MovAvgModel
name|model
init|=
operator|new
name|SimpleModel
argument_list|()
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|actual
index|[]
init|=
name|model
operator|.
name|predict
argument_list|(
name|window
argument_list|,
name|numPredictions
argument_list|)
decl_stmt|;
name|double
name|expected
index|[]
init|=
operator|new
name|double
index|[
name|numPredictions
index|]
decl_stmt|;
name|double
name|t
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|t
operator|+=
name|value
expr_stmt|;
block|}
name|t
operator|/=
name|window
operator|.
name|size
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|expected
argument_list|,
name|t
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLinearMovAvgModel
specifier|public
name|void
name|testLinearMovAvgModel
parameter_list|()
block|{
name|MovAvgModel
name|model
init|=
operator|new
name|LinearModel
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|double
name|randValue
init|=
name|randomDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|long
name|totalWeight
init|=
literal|1
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|avg
operator|+=
name|value
operator|*
name|current
expr_stmt|;
name|totalWeight
operator|+=
name|current
expr_stmt|;
name|current
operator|+=
literal|1
expr_stmt|;
block|}
name|double
name|expected
init|=
name|avg
operator|/
name|totalWeight
decl_stmt|;
name|double
name|actual
init|=
name|model
operator|.
name|next
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLinearPredictionModel
specifier|public
name|void
name|testLinearPredictionModel
parameter_list|()
block|{
name|MovAvgModel
name|model
init|=
operator|new
name|LinearModel
argument_list|()
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|actual
index|[]
init|=
name|model
operator|.
name|predict
argument_list|(
name|window
argument_list|,
name|numPredictions
argument_list|)
decl_stmt|;
name|double
name|expected
index|[]
init|=
operator|new
name|double
index|[
name|numPredictions
index|]
decl_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|long
name|totalWeight
init|=
literal|1
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|avg
operator|+=
name|value
operator|*
name|current
expr_stmt|;
name|totalWeight
operator|+=
name|current
expr_stmt|;
name|current
operator|+=
literal|1
expr_stmt|;
block|}
name|avg
operator|=
name|avg
operator|/
name|totalWeight
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|expected
argument_list|,
name|avg
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEWMAMovAvgModel
specifier|public
name|void
name|testEWMAMovAvgModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|EwmaModel
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|double
name|randValue
init|=
name|randomDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|avg
operator|=
name|value
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|avg
operator|=
operator|(
name|value
operator|*
name|alpha
operator|)
operator|+
operator|(
name|avg
operator|*
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|double
name|expected
init|=
name|avg
decl_stmt|;
name|double
name|actual
init|=
name|model
operator|.
name|next
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEWMAPredictionModel
specifier|public
name|void
name|testEWMAPredictionModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|EwmaModel
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|actual
index|[]
init|=
name|model
operator|.
name|predict
argument_list|(
name|window
argument_list|,
name|numPredictions
argument_list|)
decl_stmt|;
name|double
name|expected
index|[]
init|=
operator|new
name|double
index|[
name|numPredictions
index|]
decl_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|avg
operator|=
name|value
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|avg
operator|=
operator|(
name|value
operator|*
name|alpha
operator|)
operator|+
operator|(
name|avg
operator|*
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|expected
argument_list|,
name|avg
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHoltLinearMovAvgModel
specifier|public
name|void
name|testHoltLinearMovAvgModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|beta
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|HoltLinearModel
argument_list|(
name|alpha
argument_list|,
name|beta
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|double
name|randValue
init|=
name|randomDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
name|last
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|last
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|s
operator|=
name|value
expr_stmt|;
name|b
operator|=
name|value
operator|-
name|last
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
name|value
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|double
name|expected
init|=
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
decl_stmt|;
name|double
name|actual
init|=
name|model
operator|.
name|next
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|offer
argument_list|(
name|randValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHoltLinearPredictionModel
specifier|public
name|void
name|testHoltLinearPredictionModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|beta
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|HoltLinearModel
argument_list|(
name|alpha
argument_list|,
name|beta
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|actual
index|[]
init|=
name|model
operator|.
name|predict
argument_list|(
name|window
argument_list|,
name|numPredictions
argument_list|)
decl_stmt|;
name|double
name|expected
index|[]
init|=
operator|new
name|double
index|[
name|numPredictions
index|]
decl_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
name|last
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|last
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|s
operator|=
name|value
expr_stmt|;
name|b
operator|=
name|value
operator|-
name|last
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
name|value
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
name|s
operator|+
operator|(
name|i
operator|*
name|b
operator|)
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHoltWintersMultiplicativePadModel
specifier|public
name|void
name|testHoltWintersMultiplicativePadModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|beta
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|gamma
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|int
name|period
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|HoltWintersModel
argument_list|(
name|alpha
argument_list|,
name|beta
argument_list|,
name|gamma
argument_list|,
name|period
argument_list|,
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|MULTIPLICATIVE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
name|period
operator|*
literal|2
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|// HW requires at least two periods of data
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Smoothed value
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
comment|// Seasonal value
name|double
index|[]
name|seasonal
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
index|[]
name|vs
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|window
control|)
block|{
name|vs
index|[
name|counter
index|]
operator|=
name|v
operator|+
literal|0.0000000001
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
comment|// Initial level value is average of first season
comment|// Calculate the slopes between first and second season for each period
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|+=
name|vs
index|[
name|i
index|]
expr_stmt|;
name|b
operator|+=
operator|(
name|vs
index|[
name|i
operator|+
name|period
index|]
operator|-
name|vs
index|[
name|i
index|]
operator|)
operator|/
name|period
expr_stmt|;
block|}
name|s
operator|/=
name|period
expr_stmt|;
name|b
operator|/=
name|period
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
comment|// Calculate first seasonal
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
literal|0.0
argument_list|)
operator|==
literal|0
operator|||
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
operator|-
literal|0.0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|seasonal
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|seasonal
index|[
name|i
index|]
operator|=
name|vs
index|[
name|i
index|]
operator|/
name|s
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|period
init|;
name|i
operator|<
name|vs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|=
name|alpha
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|/
name|seasonal
index|[
name|i
operator|-
name|period
index|]
operator|)
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
name|seasonal
index|[
name|i
index|]
operator|=
name|gamma
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|/
operator|(
name|last_s
operator|+
name|last_b
operator|)
operator|)
operator|+
operator|(
literal|1
operator|-
name|gamma
operator|)
operator|*
name|seasonal
index|[
name|i
operator|-
name|period
index|]
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|int
name|idx
init|=
name|window
operator|.
name|size
argument_list|()
operator|-
name|period
operator|+
operator|(
literal|0
operator|%
name|period
operator|)
decl_stmt|;
name|double
name|expected
init|=
operator|(
name|s
operator|+
operator|(
literal|1
operator|*
name|b
operator|)
operator|)
operator|*
name|seasonal
index|[
name|idx
index|]
decl_stmt|;
name|double
name|actual
init|=
name|model
operator|.
name|next
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHoltWintersMultiplicativePadPredictionModel
specifier|public
name|void
name|testHoltWintersMultiplicativePadPredictionModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|beta
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|gamma
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|int
name|period
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|HoltWintersModel
argument_list|(
name|alpha
argument_list|,
name|beta
argument_list|,
name|gamma
argument_list|,
name|period
argument_list|,
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|MULTIPLICATIVE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
name|period
operator|*
literal|2
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|// HW requires at least two periods of data
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|actual
index|[]
init|=
name|model
operator|.
name|predict
argument_list|(
name|window
argument_list|,
name|numPredictions
argument_list|)
decl_stmt|;
name|double
name|expected
index|[]
init|=
operator|new
name|double
index|[
name|numPredictions
index|]
decl_stmt|;
comment|// Smoothed value
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
comment|// Seasonal value
name|double
index|[]
name|seasonal
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
index|[]
name|vs
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|window
control|)
block|{
name|vs
index|[
name|counter
index|]
operator|=
name|v
operator|+
literal|0.0000000001
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
comment|// Initial level value is average of first season
comment|// Calculate the slopes between first and second season for each period
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|+=
name|vs
index|[
name|i
index|]
expr_stmt|;
name|b
operator|+=
operator|(
name|vs
index|[
name|i
operator|+
name|period
index|]
operator|-
name|vs
index|[
name|i
index|]
operator|)
operator|/
name|period
expr_stmt|;
block|}
name|s
operator|/=
name|period
expr_stmt|;
name|b
operator|/=
name|period
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
comment|// Calculate first seasonal
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
literal|0.0
argument_list|)
operator|==
literal|0
operator|||
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
operator|-
literal|0.0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|seasonal
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|seasonal
index|[
name|i
index|]
operator|=
name|vs
index|[
name|i
index|]
operator|/
name|s
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|period
init|;
name|i
operator|<
name|vs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|=
name|alpha
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|/
name|seasonal
index|[
name|i
operator|-
name|period
index|]
operator|)
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
name|seasonal
index|[
name|i
index|]
operator|=
name|gamma
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|/
operator|(
name|last_s
operator|+
name|last_b
operator|)
operator|)
operator|+
operator|(
literal|1
operator|-
name|gamma
operator|)
operator|*
name|seasonal
index|[
name|i
operator|-
name|period
index|]
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
name|window
operator|.
name|size
argument_list|()
operator|-
name|period
operator|+
operator|(
operator|(
name|i
operator|-
literal|1
operator|)
operator|%
name|period
operator|)
decl_stmt|;
name|expected
index|[
name|i
operator|-
literal|1
index|]
operator|=
operator|(
name|s
operator|+
operator|(
name|i
operator|*
name|b
operator|)
operator|)
operator|*
name|seasonal
index|[
name|idx
index|]
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|actual
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHoltWintersAdditiveModel
specifier|public
name|void
name|testHoltWintersAdditiveModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|beta
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|gamma
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|int
name|period
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|HoltWintersModel
argument_list|(
name|alpha
argument_list|,
name|beta
argument_list|,
name|gamma
argument_list|,
name|period
argument_list|,
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|ADDITIVE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
name|period
operator|*
literal|2
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|// HW requires at least two periods of data
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Smoothed value
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
comment|// Seasonal value
name|double
index|[]
name|seasonal
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
index|[]
name|vs
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|window
control|)
block|{
name|vs
index|[
name|counter
index|]
operator|=
name|v
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
comment|// Initial level value is average of first season
comment|// Calculate the slopes between first and second season for each period
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|+=
name|vs
index|[
name|i
index|]
expr_stmt|;
name|b
operator|+=
operator|(
name|vs
index|[
name|i
operator|+
name|period
index|]
operator|-
name|vs
index|[
name|i
index|]
operator|)
operator|/
name|period
expr_stmt|;
block|}
name|s
operator|/=
name|period
expr_stmt|;
name|b
operator|/=
name|period
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
comment|// Calculate first seasonal
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
literal|0.0
argument_list|)
operator|==
literal|0
operator|||
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
operator|-
literal|0.0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|seasonal
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|seasonal
index|[
name|i
index|]
operator|=
name|vs
index|[
name|i
index|]
operator|/
name|s
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|period
init|;
name|i
operator|<
name|vs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|=
name|alpha
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|-
name|seasonal
index|[
name|i
operator|-
name|period
index|]
operator|)
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
name|seasonal
index|[
name|i
index|]
operator|=
name|gamma
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|-
operator|(
name|last_s
operator|-
name|last_b
operator|)
operator|)
operator|+
operator|(
literal|1
operator|-
name|gamma
operator|)
operator|*
name|seasonal
index|[
name|i
operator|-
name|period
index|]
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|int
name|idx
init|=
name|window
operator|.
name|size
argument_list|()
operator|-
name|period
operator|+
operator|(
literal|0
operator|%
name|period
operator|)
decl_stmt|;
name|double
name|expected
init|=
name|s
operator|+
operator|(
literal|1
operator|*
name|b
operator|)
operator|+
name|seasonal
index|[
name|idx
index|]
decl_stmt|;
name|double
name|actual
init|=
name|model
operator|.
name|next
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHoltWintersAdditivePredictionModel
specifier|public
name|void
name|testHoltWintersAdditivePredictionModel
parameter_list|()
block|{
name|double
name|alpha
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|beta
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|double
name|gamma
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|int
name|period
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MovAvgModel
name|model
init|=
operator|new
name|HoltWintersModel
argument_list|(
name|alpha
argument_list|,
name|beta
argument_list|,
name|gamma
argument_list|,
name|period
argument_list|,
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|ADDITIVE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|windowSize
init|=
name|randomIntBetween
argument_list|(
name|period
operator|*
literal|2
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|// HW requires at least two periods of data
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
operator|new
name|EvictingQueue
argument_list|<>
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowSize
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|actual
index|[]
init|=
name|model
operator|.
name|predict
argument_list|(
name|window
argument_list|,
name|numPredictions
argument_list|)
decl_stmt|;
name|double
name|expected
index|[]
init|=
operator|new
name|double
index|[
name|numPredictions
index|]
decl_stmt|;
comment|// Smoothed value
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
comment|// Seasonal value
name|double
index|[]
name|seasonal
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
index|[]
name|vs
init|=
operator|new
name|double
index|[
name|windowSize
index|]
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|window
control|)
block|{
name|vs
index|[
name|counter
index|]
operator|=
name|v
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
comment|// Initial level value is average of first season
comment|// Calculate the slopes between first and second season for each period
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|+=
name|vs
index|[
name|i
index|]
expr_stmt|;
name|b
operator|+=
operator|(
name|vs
index|[
name|i
operator|+
name|period
index|]
operator|-
name|vs
index|[
name|i
index|]
operator|)
operator|/
name|period
expr_stmt|;
block|}
name|s
operator|/=
name|period
expr_stmt|;
name|b
operator|/=
name|period
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
comment|// Calculate first seasonal
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
literal|0.0
argument_list|)
operator|==
literal|0
operator|||
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
operator|-
literal|0.0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|seasonal
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|seasonal
index|[
name|i
index|]
operator|=
name|vs
index|[
name|i
index|]
operator|/
name|s
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|period
init|;
name|i
operator|<
name|vs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|=
name|alpha
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|-
name|seasonal
index|[
name|i
operator|-
name|period
index|]
operator|)
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
name|seasonal
index|[
name|i
index|]
operator|=
name|gamma
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|-
operator|(
name|last_s
operator|-
name|last_b
operator|)
operator|)
operator|+
operator|(
literal|1
operator|-
name|gamma
operator|)
operator|*
name|seasonal
index|[
name|i
operator|-
name|period
index|]
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
name|window
operator|.
name|size
argument_list|()
operator|-
name|period
operator|+
operator|(
operator|(
name|i
operator|-
literal|1
operator|)
operator|%
name|period
operator|)
decl_stmt|;
name|expected
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|s
operator|+
operator|(
name|i
operator|*
name|b
operator|)
operator|+
name|seasonal
index|[
name|idx
index|]
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|expected
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|actual
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNumericValidation
specifier|public
name|void
name|testNumericValidation
parameter_list|()
block|{
name|List
argument_list|<
name|MovAvgModel
operator|.
name|AbstractModelParser
argument_list|>
name|parsers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Simple and Linear don't have any settings to test
name|parsers
operator|.
name|add
argument_list|(
name|EwmaModel
operator|.
name|PARSER
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|add
argument_list|(
name|HoltWintersModel
operator|.
name|PARSER
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|add
argument_list|(
name|HoltLinearModel
operator|.
name|PARSER
argument_list|)
expr_stmt|;
name|Object
index|[]
name|values
init|=
block|{
operator|(
name|byte
operator|)
literal|1
block|,
literal|1
block|,
literal|1L
block|,
operator|(
name|short
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|1
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|settings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|MovAvgModel
operator|.
name|AbstractModelParser
name|parser
range|:
name|parsers
control|)
block|{
for|for
control|(
name|Object
name|v
range|:
name|values
control|)
block|{
name|settings
operator|.
name|put
argument_list|(
literal|"alpha"
argument_list|,
name|v
argument_list|)
expr_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|settings
argument_list|,
literal|"pipeline"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|parser
operator|+
literal|" parser should not have thrown SearchParseException while parsing ["
operator|+
name|v
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|MovAvgModel
operator|.
name|AbstractModelParser
name|parser
range|:
name|parsers
control|)
block|{
name|settings
operator|.
name|put
argument_list|(
literal|"alpha"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
literal|"beta"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
literal|"gamma"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|settings
argument_list|,
literal|"pipeline"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|//all good
continue|continue;
block|}
name|fail
argument_list|(
name|parser
operator|+
literal|" parser should have thrown SearchParseException while parsing [String]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

