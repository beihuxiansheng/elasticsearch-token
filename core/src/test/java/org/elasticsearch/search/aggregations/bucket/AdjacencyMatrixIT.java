begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|BoolQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|adjacency
operator|.
name|AdjacencyMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|adjacency
operator|.
name|AdjacencyMatrix
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|avg
operator|.
name|Avg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|termQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|adjacencyMatrix
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|avg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|AdjacencyMatrixIT
specifier|public
class|class
name|AdjacencyMatrixIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|numDocs
DECL|field|numSingleTag1Docs
DECL|field|numSingleTag2Docs
DECL|field|numTag1Docs
DECL|field|numTag2Docs
DECL|field|numMultiTagDocs
specifier|static
name|int
name|numDocs
decl_stmt|,
name|numSingleTag1Docs
decl_stmt|,
name|numSingleTag2Docs
decl_stmt|,
name|numTag1Docs
decl_stmt|,
name|numTag2Docs
decl_stmt|,
name|numMultiTagDocs
decl_stmt|;
DECL|field|MAX_NUM_FILTERS
specifier|static
specifier|final
name|int
name|MAX_NUM_FILTERS
init|=
literal|3
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|MAX_ADJACENCY_MATRIX_FILTERS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|MAX_NUM_FILTERS
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|numTag1Docs
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|)
expr_stmt|;
name|numTag2Docs
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numDocs
operator|-
name|numTag1Docs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTag1Docs
condition|;
name|i
operator|++
control|)
block|{
name|numSingleTag1Docs
operator|++
expr_stmt|;
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// randomly index the document twice so that we have deleted
comment|// docs that match the filter
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|numTag1Docs
init|;
name|i
operator|<
operator|(
name|numTag1Docs
operator|+
name|numTag2Docs
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|numSingleTag2Docs
operator|++
expr_stmt|;
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
literal|"tag2"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|numTag1Docs
operator|+
name|numTag2Docs
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|numMultiTagDocs
operator|++
expr_stmt|;
name|numTag1Docs
operator|++
expr_stmt|;
name|numTag2Docs
operator|++
expr_stmt|;
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|.
name|array
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|,
literal|"tag2"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|prepareCreate
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"value"
argument_list|,
literal|"type=integer"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"empty_bucket_idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|i
operator|*
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"tags"
argument_list|,
name|newMap
argument_list|(
literal|"tag1"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
name|matrix
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matrix
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matrix
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
name|numMultiTagDocs
operator|>
literal|0
condition|?
literal|3
else|:
literal|2
decl_stmt|;
name|assertThat
argument_list|(
name|matrix
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
operator|.
name|Bucket
name|bucket
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numTag1Docs
argument_list|)
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numTag2Docs
argument_list|)
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag1&tag2"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numMultiTagDocs
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numMultiTagDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCustomSeparator
specifier|public
name|void
name|testCustomSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"tags"
argument_list|,
literal|"\t"
argument_list|,
name|newMap
argument_list|(
literal|"tag1"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
name|matrix
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matrix
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
operator|.
name|Bucket
name|bucket
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag1\ttag2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numMultiTagDocs
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numMultiTagDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// See NullPointer issue when filters are empty:
comment|// https://github.com/elastic/elasticsearch/issues/8438
DECL|method|testEmptyFilterDeclarations
specifier|public
name|void
name|testEmptyFilterDeclarations
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryBuilder
name|emptyFilter
init|=
operator|new
name|BoolQueryBuilder
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"tags"
argument_list|,
name|newMap
argument_list|(
literal|"all"
argument_list|,
name|emptyFilter
argument_list|)
operator|.
name|add
argument_list|(
literal|"tag1"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
name|filters
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filters
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
operator|.
name|Bucket
name|allBucket
init|=
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"all"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|allBucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
operator|.
name|Bucket
name|bucket
init|=
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"tag1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numTag1Docs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithSubAggregation
specifier|public
name|void
name|testWithSubAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|BoolQueryBuilder
name|boolQ
init|=
operator|new
name|BoolQueryBuilder
argument_list|()
decl_stmt|;
name|boolQ
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|)
argument_list|)
expr_stmt|;
name|boolQ
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag2"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"tags"
argument_list|,
name|newMap
argument_list|(
literal|"tag1"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag2"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"both"
argument_list|,
name|boolQ
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg_value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
name|matrix
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matrix
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matrix
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedBuckets
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numTag1Docs
operator|>
literal|0
condition|)
block|{
name|expectedBuckets
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|numTag2Docs
operator|>
literal|0
condition|)
block|{
name|expectedBuckets
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|numMultiTagDocs
operator|>
literal|0
condition|)
block|{
comment|// both, both&tag1, both&tag2, tag1&tag2
name|expectedBuckets
operator|+=
literal|4
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|matrix
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matrix
operator|.
name|getProperty
argument_list|(
literal|"_bucket_count"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|propertiesKeys
init|=
operator|(
name|Object
index|[]
operator|)
name|matrix
operator|.
name|getProperty
argument_list|(
literal|"_key"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesDocCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|matrix
operator|.
name|getProperty
argument_list|(
literal|"_count"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|matrix
operator|.
name|getProperty
argument_list|(
literal|"avg_value.value"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBuckets
argument_list|,
name|propertiesKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|propertiesKeys
operator|.
name|length
argument_list|,
name|propertiesDocCounts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|propertiesKeys
operator|.
name|length
argument_list|,
name|propertiesCounts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertiesCounts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|AdjacencyMatrix
operator|.
name|Bucket
name|bucket
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
name|propertiesKeys
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Avg
name|avgValue
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_value"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avgValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|propertiesCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|avgValue
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AdjacencyMatrix
operator|.
name|Bucket
name|tag1Bucket
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tag1Bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag1Bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numTag1Docs
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSingleTag1Docs
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|i
operator|+
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|numSingleTag1Docs
operator|+
name|numSingleTag2Docs
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|i
operator|+
literal|1
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|tag1Bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avgBucket1Value
init|=
name|tag1Bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_value"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avgBucket1Value
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avgBucket1Value
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"avg_value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avgBucket1Value
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|sum
operator|/
name|numTag1Docs
argument_list|)
argument_list|)
expr_stmt|;
name|Bucket
name|tag2Bucket
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tag2Bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag2Bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numTag2Docs
argument_list|)
argument_list|)
expr_stmt|;
name|sum
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numSingleTag1Docs
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|i
operator|+
literal|1
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|tag2Bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avgBucket2Value
init|=
name|tag2Bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_value"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avgBucket2Value
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avgBucket2Value
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"avg_value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avgBucket2Value
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|sum
operator|/
name|numTag2Docs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check intersection buckets are computed correctly by comparing with
comment|// ANDed query bucket results
name|Bucket
name|bucketBothQ
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"both"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numMultiTagDocs
operator|==
literal|0
condition|)
block|{
comment|// Empty intersections are not returned.
name|assertThat
argument_list|(
name|bucketBothQ
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Bucket
name|bucketIntersectQ
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag1&tag2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucketIntersectQ
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Bucket
name|tag1Both
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"both&tag1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tag1Both
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bucketBothQ
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucketBothQ
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numMultiTagDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avgValueBothQ
init|=
name|bucketBothQ
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_value"
argument_list|)
decl_stmt|;
name|Bucket
name|bucketIntersectQ
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"tag1&tag2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucketIntersectQ
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucketIntersectQ
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numMultiTagDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avgValueIntersectQ
init|=
name|bucketBothQ
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_value"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avgValueIntersectQ
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|avgValueBothQ
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Bucket
name|tag1Both
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"both&tag1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|tag1Both
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tag1Both
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numMultiTagDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avgValueTag1BothIntersectQ
init|=
name|tag1Both
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg_value"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avgValueTag1BothIntersectQ
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|avgValueBothQ
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTooLargeMatrix
specifier|public
name|void
name|testTooLargeMatrix
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create more filters than is permitted by index settings.
name|MapBuilder
name|filtersMap
init|=
operator|new
name|MapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|MAX_NUM_FILTERS
condition|;
name|i
operator|++
control|)
block|{
name|filtersMap
operator|.
name|add
argument_list|(
literal|"tag"
operator|+
name|i
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"tags"
argument_list|,
literal|"\t"
argument_list|,
name|filtersMap
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"SearchPhaseExecutionException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Number of filters is too large"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAsSubAggregation
specifier|public
name|void
name|testAsSubAggregation
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|interval
argument_list|(
literal|2L
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"matrix"
argument_list|,
name|newMap
argument_list|(
literal|"all"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Histogram
operator|.
name|Bucket
name|bucket
range|:
name|histo
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|AdjacencyMatrix
name|matrix
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"matrix"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matrix
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matrix
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
operator|.
name|Bucket
name|filterBucket
init|=
name|matrix
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|filterBucket
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWithContextBasedSubAggregation
specifier|public
name|void
name|testWithContextBasedSubAggregation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"tags"
argument_list|,
name|newMap
argument_list|(
literal|"tag1"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|,
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"tag2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg_value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected execution to fail - an attempt to have a context based numeric sub-aggregation, but there is not value source"
operator|+
literal|"context which the sub-aggregation can inherit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"all shards failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmptyAggregation
specifier|public
name|void
name|testEmptyAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|interval
argument_list|(
literal|1L
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|adjacencyMatrix
argument_list|(
literal|"matrix"
argument_list|,
name|newMap
argument_list|(
literal|"all"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
name|matrix
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"matrix"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matrix
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|AdjacencyMatrix
operator|.
name|Bucket
name|all
init|=
name|matrix
operator|.
name|getBucketByKey
argument_list|(
literal|"all"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|all
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Helper methods for building maps of QueryBuilders
DECL|method|newMap
specifier|static
name|MapBuilder
name|newMap
parameter_list|(
name|String
name|name
parameter_list|,
name|QueryBuilder
name|builder
parameter_list|)
block|{
return|return
operator|new
name|MapBuilder
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|builder
argument_list|)
return|;
block|}
DECL|class|MapBuilder
specifier|static
class|class
name|MapBuilder
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueryBuilder
argument_list|>
block|{
DECL|method|add
specifier|public
name|MapBuilder
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|QueryBuilder
name|builder
parameter_list|)
block|{
name|put
argument_list|(
name|name
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

