begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ParsedAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|InternalStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|ParsedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|InternalStatsTests
specifier|public
class|class
name|InternalStatsTests
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|InternalStats
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|InternalStats
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|long
name|count
init|=
name|frequently
argument_list|()
condition|?
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
else|:
literal|0
decl_stmt|;
name|double
name|min
init|=
name|randomDoubleBetween
argument_list|(
operator|-
literal|1000000
argument_list|,
literal|1000000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|double
name|max
init|=
name|randomDoubleBetween
argument_list|(
operator|-
literal|1000000
argument_list|,
literal|1000000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|double
name|sum
init|=
name|randomDoubleBetween
argument_list|(
operator|-
literal|1000000
argument_list|,
literal|1000000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DocValueFormat
name|format
init|=
name|randomNumericDocValueFormat
argument_list|()
decl_stmt|;
return|return
operator|new
name|InternalStats
argument_list|(
name|name
argument_list|,
name|count
argument_list|,
name|sum
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|format
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
name|void
name|assertReduced
parameter_list|(
name|InternalStats
name|reduced
parameter_list|,
name|List
argument_list|<
name|InternalStats
argument_list|>
name|inputs
parameter_list|)
block|{
name|long
name|expectedCount
init|=
literal|0
decl_stmt|;
name|double
name|expectedSum
init|=
literal|0
decl_stmt|;
name|double
name|expectedMin
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|expectedMax
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|InternalStats
name|stats
range|:
name|inputs
control|)
block|{
name|expectedCount
operator|+=
name|stats
operator|.
name|getCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|stats
operator|.
name|getMin
argument_list|()
argument_list|,
name|expectedMin
argument_list|)
operator|<
literal|0
condition|)
block|{
name|expectedMin
operator|=
name|stats
operator|.
name|getMin
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
name|expectedMax
argument_list|)
operator|>
literal|0
condition|)
block|{
name|expectedMax
operator|=
name|stats
operator|.
name|getMax
argument_list|()
expr_stmt|;
block|}
name|expectedSum
operator|+=
name|stats
operator|.
name|getSum
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|reduced
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSum
argument_list|,
name|reduced
operator|.
name|getSum
argument_list|()
argument_list|,
literal|1e-7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMin
argument_list|,
name|reduced
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMax
argument_list|,
name|reduced
operator|.
name|getMax
argument_list|()
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
name|void
name|assertFromXContent
parameter_list|(
name|InternalStats
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|ParsedStats
argument_list|)
expr_stmt|;
name|ParsedStats
name|parsed
init|=
operator|(
name|ParsedStats
operator|)
name|parsedAggregation
decl_stmt|;
name|assertStats
argument_list|(
name|aggregation
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStats
specifier|static
name|void
name|assertStats
parameter_list|(
name|InternalStats
name|aggregation
parameter_list|,
name|ParsedStats
name|parsed
parameter_list|)
block|{
name|long
name|count
init|=
name|aggregation
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|parsed
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// for count == 0, fields are rendered as `null`, so  we test that we parse to default values used also in the reduce phase
name|assertEquals
argument_list|(
name|count
operator|>
literal|0
condition|?
name|aggregation
operator|.
name|getMin
argument_list|()
else|:
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|parsed
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|>
literal|0
condition|?
name|aggregation
operator|.
name|getMax
argument_list|()
else|:
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|parsed
operator|.
name|getMax
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|>
literal|0
condition|?
name|aggregation
operator|.
name|getSum
argument_list|()
else|:
literal|0
argument_list|,
name|parsed
operator|.
name|getSum
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|>
literal|0
condition|?
name|aggregation
operator|.
name|getAvg
argument_list|()
else|:
literal|0
argument_list|,
name|parsed
operator|.
name|getAvg
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// also as_string values are only rendered for count != 0
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|getMinAsString
argument_list|()
argument_list|,
name|parsed
operator|.
name|getMinAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|getMaxAsString
argument_list|()
argument_list|,
name|parsed
operator|.
name|getMaxAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|getSumAsString
argument_list|()
argument_list|,
name|parsed
operator|.
name|getSumAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|getAvgAsString
argument_list|()
argument_list|,
name|parsed
operator|.
name|getAvgAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|InternalStats
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|InternalStats
operator|::
operator|new
return|;
block|}
block|}
end_class

end_unit

