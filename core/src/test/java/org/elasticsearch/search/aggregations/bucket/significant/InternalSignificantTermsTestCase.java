begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalMultiBucketAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|MultiBucketsAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|ChiSquare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|GND
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|JLHScore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|MutualInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_class
DECL|class|InternalSignificantTermsTestCase
specifier|public
specifier|abstract
class|class
name|InternalSignificantTermsTestCase
extends|extends
name|InternalMultiBucketAggregationTestCase
argument_list|<
name|InternalSignificantTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
block|{
DECL|field|significanceHeuristic
specifier|private
name|SignificanceHeuristic
name|significanceHeuristic
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|significanceHeuristic
operator|=
name|randomSignificanceHeuristic
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
specifier|final
name|InternalSignificantTerms
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|)
block|{
specifier|final
name|int
name|requiredSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numBuckets
init|=
name|randomInt
argument_list|(
name|requiredSize
operator|+
literal|2
argument_list|)
decl_stmt|;
name|long
name|subsetSize
init|=
literal|0
decl_stmt|;
name|long
name|supersetSize
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|subsetDfs
init|=
operator|new
name|int
index|[
name|numBuckets
index|]
decl_stmt|;
name|int
index|[]
name|supersetDfs
init|=
operator|new
name|int
index|[
name|numBuckets
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBuckets
condition|;
operator|++
name|i
control|)
block|{
name|int
name|subsetDf
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|subsetDfs
index|[
name|i
index|]
operator|=
name|subsetDf
expr_stmt|;
name|int
name|supersetDf
init|=
name|randomIntBetween
argument_list|(
name|subsetDf
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|supersetDfs
index|[
name|i
index|]
operator|=
name|supersetDf
expr_stmt|;
name|subsetSize
operator|+=
name|subsetDf
expr_stmt|;
name|supersetSize
operator|+=
name|supersetDf
expr_stmt|;
block|}
return|return
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|,
name|aggregations
argument_list|,
name|requiredSize
argument_list|,
name|numBuckets
argument_list|,
name|subsetSize
argument_list|,
name|subsetDfs
argument_list|,
name|supersetSize
argument_list|,
name|supersetDfs
argument_list|,
name|significanceHeuristic
argument_list|)
return|;
block|}
DECL|method|createTestInstance
specifier|protected
specifier|abstract
name|InternalSignificantTerms
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|,
name|int
name|requiredSize
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|long
name|subsetSize
parameter_list|,
name|int
index|[]
name|subsetDfs
parameter_list|,
name|long
name|supersetSize
parameter_list|,
name|int
index|[]
name|supersetDfs
parameter_list|,
name|SignificanceHeuristic
name|significanceHeuristic
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createUnmappedInstance
specifier|protected
name|InternalSignificantTerms
name|createUnmappedInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|InternalSignificantTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|testInstance
init|=
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
decl_stmt|;
return|return
operator|new
name|UnmappedSignificantTerms
argument_list|(
name|name
argument_list|,
name|testInstance
operator|.
name|requiredSize
argument_list|,
name|testInstance
operator|.
name|minDocCount
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
name|void
name|assertReduced
parameter_list|(
name|InternalSignificantTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|reduced
parameter_list|,
name|List
argument_list|<
name|InternalSignificantTerms
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|inputs
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|InternalSignificantTerms
operator|::
name|getSubsetSize
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|,
name|reduced
operator|.
name|getSubsetSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|InternalSignificantTerms
operator|::
name|getSupersetSize
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|,
name|reduced
operator|.
name|getSupersetSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Function
argument_list|<
name|SignificantTerms
operator|.
name|Bucket
argument_list|,
name|Long
argument_list|>
argument_list|>
name|counts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SignificantTerms
operator|.
name|Bucket
operator|::
name|getSubsetDf
argument_list|,
name|SignificantTerms
operator|.
name|Bucket
operator|::
name|getSupersetDf
argument_list|,
name|SignificantTerms
operator|.
name|Bucket
operator|::
name|getDocCount
argument_list|)
decl_stmt|;
for|for
control|(
name|Function
argument_list|<
name|SignificantTerms
operator|.
name|Bucket
argument_list|,
name|Long
argument_list|>
name|count
range|:
name|counts
control|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Long
argument_list|>
name|reducedCounts
init|=
name|toCounts
argument_list|(
name|reduced
operator|.
name|getBuckets
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Long
argument_list|>
name|totalCounts
init|=
name|toCounts
argument_list|(
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SignificantTerms
operator|::
name|getBuckets
argument_list|)
operator|.
name|flatMap
argument_list|(
name|List
operator|::
name|stream
argument_list|)
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Long
argument_list|>
name|expectedReducedCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|totalCounts
argument_list|)
decl_stmt|;
name|expectedReducedCounts
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|reducedCounts
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedReducedCounts
argument_list|,
name|reducedCounts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|assertMultiBucketsAggregation
specifier|protected
name|void
name|assertMultiBucketsAggregation
parameter_list|(
name|MultiBucketsAggregation
name|expected
parameter_list|,
name|MultiBucketsAggregation
name|actual
parameter_list|,
name|boolean
name|checkOrder
parameter_list|)
block|{
name|super
operator|.
name|assertMultiBucketsAggregation
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|,
name|checkOrder
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|instanceof
name|InternalSignificantTerms
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|instanceof
name|ParsedSignificantTerms
argument_list|)
expr_stmt|;
name|InternalSignificantTerms
name|expectedSigTerms
init|=
operator|(
name|InternalSignificantTerms
operator|)
name|expected
decl_stmt|;
name|ParsedSignificantTerms
name|actualSigTerms
init|=
operator|(
name|ParsedSignificantTerms
operator|)
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerms
operator|.
name|getSubsetSize
argument_list|()
argument_list|,
name|actualSigTerms
operator|.
name|getSubsetSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerms
operator|.
name|getSupersetSize
argument_list|()
argument_list|,
name|actualSigTerms
operator|.
name|getSupersetSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SignificantTerms
operator|.
name|Bucket
name|bucket
range|:
operator|(
name|SignificantTerms
operator|)
name|expected
control|)
block|{
name|String
name|key
init|=
name|bucket
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|assertBucket
argument_list|(
name|expectedSigTerms
operator|.
name|getBucketByKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|actualSigTerms
operator|.
name|getBucketByKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|checkOrder
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|assertBucket
specifier|protected
name|void
name|assertBucket
parameter_list|(
name|MultiBucketsAggregation
operator|.
name|Bucket
name|expected
parameter_list|,
name|MultiBucketsAggregation
operator|.
name|Bucket
name|actual
parameter_list|,
name|boolean
name|checkOrder
parameter_list|)
block|{
name|super
operator|.
name|assertBucket
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|,
name|checkOrder
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|instanceof
name|InternalSignificantTerms
operator|.
name|Bucket
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|instanceof
name|ParsedSignificantTerms
operator|.
name|ParsedBucket
argument_list|)
expr_stmt|;
name|SignificantTerms
operator|.
name|Bucket
name|expectedSigTerm
init|=
operator|(
name|SignificantTerms
operator|.
name|Bucket
operator|)
name|expected
decl_stmt|;
name|SignificantTerms
operator|.
name|Bucket
name|actualSigTerm
init|=
operator|(
name|SignificantTerms
operator|.
name|Bucket
operator|)
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerm
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
name|actualSigTerm
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerm
operator|.
name|getSubsetDf
argument_list|()
argument_list|,
name|actualSigTerm
operator|.
name|getSubsetDf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerm
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|actualSigTerm
operator|.
name|getSubsetDf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerm
operator|.
name|getSupersetDf
argument_list|()
argument_list|,
name|actualSigTerm
operator|.
name|getSupersetDf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerm
operator|.
name|getSubsetSize
argument_list|()
argument_list|,
name|actualSigTerm
operator|.
name|getSubsetSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSigTerm
operator|.
name|getSupersetSize
argument_list|()
argument_list|,
name|actualSigTerm
operator|.
name|getSupersetSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toCounts
specifier|private
specifier|static
name|Map
argument_list|<
name|Object
argument_list|,
name|Long
argument_list|>
name|toCounts
parameter_list|(
name|Stream
argument_list|<
name|?
extends|extends
name|SignificantTerms
operator|.
name|Bucket
argument_list|>
name|buckets
parameter_list|,
name|Function
argument_list|<
name|SignificantTerms
operator|.
name|Bucket
argument_list|,
name|Long
argument_list|>
name|fn
parameter_list|)
block|{
return|return
name|buckets
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|SignificantTerms
operator|.
name|Bucket
operator|::
name|getKey
argument_list|,
name|fn
argument_list|,
name|Long
operator|::
name|sum
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomSignificanceHeuristic
specifier|private
specifier|static
name|SignificanceHeuristic
name|randomSignificanceHeuristic
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
operator|new
name|JLHScore
argument_list|()
argument_list|,
operator|new
name|MutualInformation
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|,
operator|new
name|GND
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ChiSquare
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

