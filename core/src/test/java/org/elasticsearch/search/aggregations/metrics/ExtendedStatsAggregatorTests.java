begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ExtendedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ExtendedStatsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|InternalExtendedStats
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_class
DECL|class|ExtendedStatsAggregatorTests
specifier|public
class|class
name|ExtendedStatsAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|field|TOLERANCE
specifier|private
specifier|static
specifier|final
name|double
name|TOLERANCE
init|=
literal|1e-5
decl_stmt|;
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|testCase
argument_list|(
name|ft
argument_list|,
name|iw
lambda|->
block|{}
argument_list|,
name|stats
lambda|->
block|{
name|assertEquals
argument_list|(
literal|0d
argument_list|,
name|stats
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0d
argument_list|,
name|stats
operator|.
name|getSum
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|NaN
argument_list|,
name|stats
operator|.
name|getAvg
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|stats
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|stats
operator|.
name|getVariance
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|stats
operator|.
name|getStdDeviation
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0d
argument_list|,
name|stats
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomDoubles
specifier|public
name|void
name|testRandomDoubles
parameter_list|()
throws|throws
name|IOException
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
specifier|final
name|ExtendedSimpleStatsAggregator
name|expected
init|=
operator|new
name|ExtendedSimpleStatsAggregator
argument_list|()
decl_stmt|;
name|testCase
argument_list|(
name|ft
argument_list|,
name|iw
lambda|->
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|double
name|value
init|=
name|randomDoubleBetween
argument_list|(
operator|-
literal|100d
argument_list|,
literal|100d
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|valueAsLong
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|valueAsLong
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|stats
lambda|->
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|count
argument_list|,
name|stats
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|sum
argument_list|,
name|stats
operator|.
name|getSum
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|min
argument_list|,
name|stats
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|max
argument_list|,
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|sum
operator|/
name|expected
operator|.
name|count
argument_list|,
name|stats
operator|.
name|getAvg
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|sumOfSqrs
argument_list|,
name|stats
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|stdDev
argument_list|()
argument_list|,
name|stats
operator|.
name|getStdDeviation
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|variance
argument_list|()
argument_list|,
name|stats
operator|.
name|getVariance
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|stdDevBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|LOWER
argument_list|,
name|stats
operator|.
name|getSigma
argument_list|()
argument_list|)
argument_list|,
name|stats
operator|.
name|getStdDeviationBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|LOWER
argument_list|)
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|stdDevBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|UPPER
argument_list|,
name|stats
operator|.
name|getSigma
argument_list|()
argument_list|)
argument_list|,
name|stats
operator|.
name|getStdDeviationBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|UPPER
argument_list|)
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomLongs
specifier|public
name|void
name|testRandomLongs
parameter_list|()
throws|throws
name|IOException
block|{
name|MappedFieldType
name|ft
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
specifier|final
name|ExtendedSimpleStatsAggregator
name|expected
init|=
operator|new
name|ExtendedSimpleStatsAggregator
argument_list|()
decl_stmt|;
name|testCase
argument_list|(
name|ft
argument_list|,
name|iw
lambda|->
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|long
name|value
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|stats
lambda|->
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|count
argument_list|,
name|stats
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|sum
argument_list|,
name|stats
operator|.
name|getSum
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|min
argument_list|,
name|stats
operator|.
name|getMin
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|max
argument_list|,
name|stats
operator|.
name|getMax
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|sum
operator|/
name|expected
operator|.
name|count
argument_list|,
name|stats
operator|.
name|getAvg
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|sumOfSqrs
argument_list|,
name|stats
operator|.
name|getSumOfSquares
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|stdDev
argument_list|()
argument_list|,
name|stats
operator|.
name|getStdDeviation
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|variance
argument_list|()
argument_list|,
name|stats
operator|.
name|getVariance
argument_list|()
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|stdDevBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|LOWER
argument_list|,
name|stats
operator|.
name|getSigma
argument_list|()
argument_list|)
argument_list|,
name|stats
operator|.
name|getStdDeviationBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|LOWER
argument_list|)
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|stdDevBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|UPPER
argument_list|,
name|stats
operator|.
name|getSigma
argument_list|()
argument_list|)
argument_list|,
name|stats
operator|.
name|getStdDeviationBound
argument_list|(
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|UPPER
argument_list|)
argument_list|,
name|TOLERANCE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testCase
specifier|public
name|void
name|testCase
parameter_list|(
name|MappedFieldType
name|ft
parameter_list|,
name|CheckedConsumer
argument_list|<
name|RandomIndexWriter
argument_list|,
name|IOException
argument_list|>
name|buildIndex
parameter_list|,
name|Consumer
argument_list|<
name|InternalExtendedStats
argument_list|>
name|verify
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|indexWriter
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
init|)
block|{
name|buildIndex
operator|.
name|accept
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|indexWriter
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ExtendedStatsAggregationBuilder
name|aggBuilder
init|=
operator|new
name|ExtendedStatsAggregationBuilder
argument_list|(
literal|"my_agg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
operator|.
name|sigma
argument_list|(
name|randomDoubleBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|InternalExtendedStats
name|stats
init|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggBuilder
argument_list|,
name|ft
argument_list|)
decl_stmt|;
name|verify
operator|.
name|accept
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ExtendedSimpleStatsAggregator
specifier|static
class|class
name|ExtendedSimpleStatsAggregator
extends|extends
name|StatsAggregatorTests
operator|.
name|SimpleStatsAggregator
block|{
DECL|field|sumOfSqrs
name|double
name|sumOfSqrs
init|=
literal|0
decl_stmt|;
DECL|method|add
name|void
name|add
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sumOfSqrs
operator|+=
operator|(
name|value
operator|*
name|value
operator|)
expr_stmt|;
block|}
DECL|method|stdDev
name|double
name|stdDev
parameter_list|()
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|()
argument_list|)
return|;
block|}
DECL|method|stdDevBound
name|double
name|stdDevBound
parameter_list|(
name|ExtendedStats
operator|.
name|Bounds
name|bounds
parameter_list|,
name|double
name|sigma
parameter_list|)
block|{
if|if
condition|(
name|bounds
operator|==
name|ExtendedStats
operator|.
name|Bounds
operator|.
name|UPPER
condition|)
block|{
return|return
operator|(
name|sum
operator|/
name|count
operator|)
operator|+
operator|(
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|()
argument_list|)
operator|*
name|sigma
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|sum
operator|/
name|count
operator|)
operator|-
operator|(
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|()
argument_list|)
operator|*
name|sigma
operator|)
return|;
block|}
block|}
DECL|method|variance
name|double
name|variance
parameter_list|()
block|{
return|return
operator|(
name|sumOfSqrs
operator|-
operator|(
operator|(
name|sum
operator|*
name|sum
operator|)
operator|/
name|count
operator|)
operator|)
operator|/
name|count
return|;
block|}
block|}
block|}
end_class

end_unit

