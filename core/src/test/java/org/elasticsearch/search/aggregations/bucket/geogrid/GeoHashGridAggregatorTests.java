begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.geogrid
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|geogrid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LatLonDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|GeoPointFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
operator|.
name|stringEncode
import|;
end_import

begin_class
DECL|class|GeoHashGridAggregatorTests
specifier|public
class|class
name|GeoHashGridAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|field|FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_NAME
init|=
literal|"location"
decl_stmt|;
DECL|method|testNoDocs
specifier|public
name|void
name|testNoDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|testCase
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|FIELD_NAME
argument_list|,
literal|1
argument_list|,
name|iw
lambda|->
block|{
comment|// Intentionally not writing any docs
block|}
argument_list|,
name|geoHashGrid
lambda|->
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|geoHashGrid
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldMissing
specifier|public
name|void
name|testFieldMissing
parameter_list|()
throws|throws
name|IOException
block|{
name|testCase
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|"wrong_field"
argument_list|,
literal|1
argument_list|,
name|iw
lambda|->
block|{
name|iw
operator|.
name|addDocument
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|LatLonDocValuesField
argument_list|(
name|FIELD_NAME
argument_list|,
literal|10D
argument_list|,
literal|10D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|geoHashGrid
lambda|->
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|geoHashGrid
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithSeveralDocs
specifier|public
name|void
name|testWithSeveralDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|precision
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|int
name|numPoints
init|=
name|randomIntBetween
argument_list|(
literal|8
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expectedCountPerGeoHash
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|testCase
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|FIELD_NAME
argument_list|,
name|precision
argument_list|,
name|iw
lambda|->
block|{
name|List
argument_list|<
name|LatLonDocValuesField
argument_list|>
name|points
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|distinctHashesPerDoc
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pointId
init|=
literal|0
init|;
name|pointId
operator|<
name|numPoints
condition|;
name|pointId
operator|++
control|)
block|{
name|double
name|lat
init|=
operator|(
literal|180d
operator|*
name|randomDouble
argument_list|()
operator|)
operator|-
literal|90d
decl_stmt|;
name|double
name|lng
init|=
operator|(
literal|360d
operator|*
name|randomDouble
argument_list|()
operator|)
operator|-
literal|180d
decl_stmt|;
name|points
operator|.
name|add
argument_list|(
operator|new
name|LatLonDocValuesField
argument_list|(
name|FIELD_NAME
argument_list|,
name|lat
argument_list|,
name|lng
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hash
init|=
name|stringEncode
argument_list|(
name|lng
argument_list|,
name|lat
argument_list|,
name|precision
argument_list|)
decl_stmt|;
if|if
condition|(
name|distinctHashesPerDoc
operator|.
name|contains
argument_list|(
name|hash
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expectedCountPerGeoHash
operator|.
name|put
argument_list|(
name|hash
argument_list|,
name|expectedCountPerGeoHash
operator|.
name|getOrDefault
argument_list|(
name|hash
argument_list|,
literal|0
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|distinctHashesPerDoc
operator|.
name|add
argument_list|(
name|hash
argument_list|)
expr_stmt|;
if|if
condition|(
name|usually
argument_list|()
condition|)
block|{
name|iw
operator|.
name|addDocument
argument_list|(
name|points
argument_list|)
expr_stmt|;
name|points
operator|.
name|clear
argument_list|()
expr_stmt|;
name|distinctHashesPerDoc
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|points
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|iw
operator|.
name|addDocument
argument_list|(
name|points
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|geoHashGrid
lambda|->
block|{
name|assertEquals
argument_list|(
name|expectedCountPerGeoHash
operator|.
name|size
argument_list|()
argument_list|,
name|geoHashGrid
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|GeoHashGrid
operator|.
name|Bucket
name|bucket
range|:
name|geoHashGrid
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|expectedCountPerGeoHash
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKeyAsString
argument_list|()
argument_list|)
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testCase
specifier|private
name|void
name|testCase
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|precision
parameter_list|,
name|CheckedConsumer
argument_list|<
name|RandomIndexWriter
argument_list|,
name|IOException
argument_list|>
name|buildIndex
parameter_list|,
name|Consumer
argument_list|<
name|InternalGeoHashGrid
argument_list|>
name|verify
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|buildIndex
operator|.
name|accept
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GeoGridAggregationBuilder
name|aggregationBuilder
init|=
operator|new
name|GeoGridAggregationBuilder
argument_list|(
literal|"_name"
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|aggregationBuilder
operator|.
name|precision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|MappedFieldType
name|fieldType
init|=
operator|new
name|GeoPointFieldMapper
operator|.
name|GeoPointFieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
name|FIELD_NAME
argument_list|)
expr_stmt|;
try|try
init|(
name|Aggregator
name|aggregator
init|=
name|createAggregator
argument_list|(
name|aggregationBuilder
argument_list|,
name|indexSearcher
argument_list|,
name|fieldType
argument_list|)
init|)
block|{
name|aggregator
operator|.
name|preCollection
argument_list|()
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|aggregator
argument_list|)
expr_stmt|;
name|aggregator
operator|.
name|postCollection
argument_list|()
expr_stmt|;
name|verify
operator|.
name|accept
argument_list|(
operator|(
name|InternalGeoHashGrid
operator|)
name|aggregator
operator|.
name|buildAggregation
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

