begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|KeywordFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|SignificantTermsAggregatorTests
specifier|public
class|class
name|SignificantTermsAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|field|fieldType
specifier|private
name|MappedFieldType
name|fieldType
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpTest
specifier|public
name|void
name|setUpTest
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|fieldType
operator|=
operator|new
name|KeywordFieldMapper
operator|.
name|KeywordFieldType
argument_list|()
expr_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsedAsFilter
specifier|public
name|void
name|testParsedAsFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexReader
name|indexReader
init|=
operator|new
name|MultiReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|QueryBuilder
name|filter
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|SignificantTermsAggregationBuilder
name|builder
init|=
operator|new
name|SignificantTermsAggregationBuilder
argument_list|(
literal|"test"
argument_list|,
name|ValueType
operator|.
name|STRING
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
operator|.
name|backgroundFilter
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|factory
init|=
name|createAggregatorFactory
argument_list|(
name|builder
argument_list|,
name|indexSearcher
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|factory
argument_list|,
name|Matchers
operator|.
name|instanceOf
argument_list|(
name|SignificantTermsAggregatorFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SignificantTermsAggregatorFactory
name|sigTermsFactory
init|=
operator|(
name|SignificantTermsAggregatorFactory
operator|)
name|factory
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|sigTermsFactory
operator|.
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|Matchers
operator|.
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// means the bool query has been parsed as a filter, if it was a query minShouldMatch would
comment|// be 0
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

