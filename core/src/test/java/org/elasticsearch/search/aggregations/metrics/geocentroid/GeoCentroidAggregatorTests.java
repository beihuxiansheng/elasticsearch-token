begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.geocentroid
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geocentroid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LatLonDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|GeoPointFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomGeoGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|GeoCentroidAggregatorTests
specifier|public
class|class
name|GeoCentroidAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|field|GEOHASH_TOLERANCE
specifier|private
specifier|static
specifier|final
name|double
name|GEOHASH_TOLERANCE
init|=
literal|1E
operator|-
literal|4D
decl_stmt|;
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|GeoCentroidAggregationBuilder
name|aggBuilder
init|=
operator|new
name|GeoCentroidAggregationBuilder
argument_list|(
literal|"my_agg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|MappedFieldType
name|fieldType
init|=
operator|new
name|GeoPointFieldMapper
operator|.
name|GeoPointFieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|InternalGeoCentroid
name|result
init|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggBuilder
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|centroid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testUnmapped
specifier|public
name|void
name|testUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|GeoCentroidAggregationBuilder
name|aggBuilder
init|=
operator|new
name|GeoCentroidAggregationBuilder
argument_list|(
literal|"my_agg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"another_field"
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|LatLonDocValuesField
argument_list|(
literal|"field"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|MappedFieldType
name|fieldType
init|=
operator|new
name|GeoPointFieldMapper
operator|.
name|GeoPointFieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"another_field"
argument_list|)
expr_stmt|;
name|InternalGeoCentroid
name|result
init|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggBuilder
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|centroid
argument_list|()
argument_list|)
expr_stmt|;
name|fieldType
operator|=
operator|new
name|GeoPointFieldMapper
operator|.
name|GeoPointFieldType
argument_list|()
expr_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggBuilder
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|centroid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSingleValuedField
specifier|public
name|void
name|testSingleValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|64
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|int
name|numUniqueGeoPoints
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|GeoPoint
name|expectedCentroid
init|=
operator|new
name|GeoPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|GeoPoint
index|[]
name|singleValues
init|=
operator|new
name|GeoPoint
index|[
name|numUniqueGeoPoints
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|singleValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|singleValues
index|[
name|i
index|]
operator|=
name|RandomGeoGenerator
operator|.
name|randomPoint
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|GeoPoint
name|singleVal
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|singleVal
operator|=
name|singleValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
expr_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|LatLonDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|singleVal
operator|.
name|getLat
argument_list|()
argument_list|,
name|singleVal
operator|.
name|getLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|expectedCentroid
operator|=
name|expectedCentroid
operator|.
name|reset
argument_list|(
name|expectedCentroid
operator|.
name|lat
argument_list|()
operator|+
operator|(
name|singleVal
operator|.
name|lat
argument_list|()
operator|-
name|expectedCentroid
operator|.
name|lat
argument_list|()
operator|)
operator|/
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|expectedCentroid
operator|.
name|lon
argument_list|()
operator|+
operator|(
name|singleVal
operator|.
name|lon
argument_list|()
operator|-
name|expectedCentroid
operator|.
name|lon
argument_list|()
operator|)
operator|/
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertCentroid
argument_list|(
name|w
argument_list|,
name|expectedCentroid
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultiValuedField
specifier|public
name|void
name|testMultiValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|64
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|int
name|numUniqueGeoPoints
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|GeoPoint
name|expectedCentroid
init|=
operator|new
name|GeoPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|GeoPoint
index|[]
name|multiValues
init|=
operator|new
name|GeoPoint
index|[
name|numUniqueGeoPoints
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multiValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|multiValues
index|[
name|i
index|]
operator|=
name|RandomGeoGenerator
operator|.
name|randomPoint
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|GeoPoint
index|[]
name|multiVal
init|=
operator|new
name|GeoPoint
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|multiVal
index|[
literal|0
index|]
operator|=
name|multiValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
expr_stmt|;
name|multiVal
index|[
literal|1
index|]
operator|=
name|multiValues
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|numUniqueGeoPoints
index|]
expr_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|LatLonDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|multiVal
index|[
literal|0
index|]
operator|.
name|getLat
argument_list|()
argument_list|,
name|multiVal
index|[
literal|0
index|]
operator|.
name|getLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|LatLonDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|multiVal
index|[
literal|1
index|]
operator|.
name|getLat
argument_list|()
argument_list|,
name|multiVal
index|[
literal|1
index|]
operator|.
name|getLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|double
name|newMVLat
init|=
operator|(
name|multiVal
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
operator|+
name|multiVal
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
operator|)
operator|/
literal|2d
decl_stmt|;
name|double
name|newMVLon
init|=
operator|(
name|multiVal
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
operator|+
name|multiVal
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
operator|)
operator|/
literal|2d
decl_stmt|;
name|expectedCentroid
operator|=
name|expectedCentroid
operator|.
name|reset
argument_list|(
name|expectedCentroid
operator|.
name|lat
argument_list|()
operator|+
operator|(
name|newMVLat
operator|-
name|expectedCentroid
operator|.
name|lat
argument_list|()
operator|)
operator|/
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|expectedCentroid
operator|.
name|lon
argument_list|()
operator|+
operator|(
name|newMVLon
operator|-
name|expectedCentroid
operator|.
name|lon
argument_list|()
operator|)
operator|/
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertCentroid
argument_list|(
name|w
argument_list|,
name|expectedCentroid
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCentroid
specifier|private
name|void
name|assertCentroid
parameter_list|(
name|RandomIndexWriter
name|w
parameter_list|,
name|GeoPoint
name|expectedCentroid
parameter_list|)
throws|throws
name|IOException
block|{
name|MappedFieldType
name|fieldType
init|=
operator|new
name|GeoPointFieldMapper
operator|.
name|GeoPointFieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|GeoCentroidAggregationBuilder
name|aggBuilder
init|=
operator|new
name|GeoCentroidAggregationBuilder
argument_list|(
literal|"my_agg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|InternalGeoCentroid
name|result
init|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggBuilder
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my_agg"
argument_list|,
name|result
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|GeoPoint
name|centroid
init|=
name|result
operator|.
name|centroid
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|centroid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCentroid
operator|.
name|getLat
argument_list|()
argument_list|,
name|centroid
operator|.
name|getLat
argument_list|()
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCentroid
operator|.
name|getLon
argument_list|()
argument_list|,
name|centroid
operator|.
name|getLon
argument_list|()
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

