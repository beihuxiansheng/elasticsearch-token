begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryCachingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|query
operator|.
name|DisabledQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|DocValueFieldsFetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ContextIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Base class for testing {@link Aggregator} implementations.  * Provides a helper constructing the {@link Aggregator} implementation based on a provided {@link AggregationBuilder} instance.  */
end_comment

begin_class
DECL|class|AggregatorTestCase
specifier|public
specifier|abstract
class|class
name|AggregatorTestCase
extends|extends
name|ESTestCase
block|{
DECL|method|createAggregator
specifier|protected
parameter_list|<
name|A
extends|extends
name|Aggregator
parameter_list|,
name|B
extends|extends
name|AggregationBuilder
parameter_list|>
name|A
name|createAggregator
parameter_list|(
name|B
name|aggregationBuilder
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|IndexSearcher
name|indexSearcher
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"_index"
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|creationDate
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Searcher
name|searcher
init|=
operator|new
name|Engine
operator|.
name|Searcher
argument_list|(
literal|"aggregator_test"
argument_list|,
name|indexSearcher
argument_list|)
decl_stmt|;
name|QueryCache
name|queryCache
init|=
operator|new
name|DisabledQueryCache
argument_list|(
name|indexSettings
argument_list|)
decl_stmt|;
name|QueryCachingPolicy
name|queryCachingPolicy
init|=
operator|new
name|QueryCachingPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
comment|// never cache a query
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|ContextIndexSearcher
name|contextIndexSearcher
init|=
operator|new
name|ContextIndexSearcher
argument_list|(
name|searcher
argument_list|,
name|queryCache
argument_list|,
name|queryCachingPolicy
argument_list|)
decl_stmt|;
name|CircuitBreakerService
name|circuitBreakerService
init|=
operator|new
name|NoneCircuitBreakerService
argument_list|()
decl_stmt|;
name|SearchContext
name|searchContext
init|=
name|mock
argument_list|(
name|SearchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|searcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contextIndexSearcher
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|parseFieldMatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|bigArrays
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockBigArrays
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|circuitBreakerService
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|fetchPhase
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FetchPhase
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FetchSourceSubPhase
argument_list|()
argument_list|,
operator|new
name|DocValueFieldsFetchSubPhase
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: now just needed for top_hits, this will need to be revised for other agg unit tests:
name|MapperService
name|mapperService
init|=
name|mock
argument_list|(
name|MapperService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mapperService
operator|.
name|hasNested
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|mapperService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mapperService
argument_list|)
expr_stmt|;
name|SearchLookup
name|searchLookup
init|=
operator|new
name|SearchLookup
argument_list|(
name|mapperService
argument_list|,
name|mock
argument_list|(
name|IndexFieldDataService
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"type"
block|}
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|lookup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|searchLookup
argument_list|)
expr_stmt|;
name|QueryShardContext
name|queryShardContext
init|=
name|mock
argument_list|(
name|QueryShardContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|fieldData
init|=
name|fieldType
operator|.
name|fielddataBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|indexSettings
argument_list|,
name|fieldType
argument_list|,
literal|null
argument_list|,
name|circuitBreakerService
argument_list|,
name|mock
argument_list|(
name|MapperService
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queryShardContext
operator|.
name|fieldMapper
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queryShardContext
operator|.
name|getForField
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queryShardContext
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|A
name|aggregator
init|=
operator|(
name|A
operator|)
name|aggregationBuilder
operator|.
name|build
argument_list|(
name|searchContext
argument_list|,
literal|null
argument_list|)
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|aggregator
return|;
block|}
block|}
end_class

end_unit

