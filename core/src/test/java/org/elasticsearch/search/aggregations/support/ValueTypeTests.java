begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|ValueTypeTests
specifier|public
class|class
name|ValueTypeTests
extends|extends
name|ESTestCase
block|{
DECL|method|testResolve
specifier|public
name|void
name|testResolve
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|STRING
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|DOUBLE
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|DOUBLE
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|LONG
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"byte"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|LONG
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"short"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|LONG
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"integer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|LONG
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|DATE
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|IP
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ValueType
operator|.
name|BOOLEAN
argument_list|,
name|ValueType
operator|.
name|resolveForScript
argument_list|(
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompatibility
specifier|public
name|void
name|testCompatibility
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ValueType
operator|.
name|DOUBLE
operator|.
name|isA
argument_list|(
name|ValueType
operator|.
name|NUMERIC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ValueType
operator|.
name|LONG
operator|.
name|isA
argument_list|(
name|ValueType
operator|.
name|NUMERIC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ValueType
operator|.
name|DATE
operator|.
name|isA
argument_list|(
name|ValueType
operator|.
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ValueType
operator|.
name|NUMERIC
operator|.
name|isA
argument_list|(
name|ValueType
operator|.
name|NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ValueType
operator|.
name|BOOLEAN
operator|.
name|isA
argument_list|(
name|ValueType
operator|.
name|NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ValueType
operator|.
name|STRING
operator|.
name|isA
argument_list|(
name|ValueType
operator|.
name|NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ValueType
operator|.
name|DATE
operator|.
name|isA
argument_list|(
name|ValueType
operator|.
name|IP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

