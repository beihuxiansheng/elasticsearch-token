begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|support
operator|.
name|IncludeExclude
operator|.
name|OrdinalsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
DECL|class|IncludeExcludeTests
specifier|public
class|class
name|IncludeExcludeTests
extends|extends
name|ESTestCase
block|{
DECL|method|testEmptyTermsWithOrds
specifier|public
name|void
name|testEmptyTermsWithOrds
parameter_list|()
throws|throws
name|IOException
block|{
name|IncludeExclude
name|inexcl
init|=
operator|new
name|IncludeExclude
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OrdinalsFilter
name|filter
init|=
name|inexcl
operator|.
name|convertToOrdinalsFilter
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
decl_stmt|;
name|LongBitSet
name|acceptedOrds
init|=
name|filter
operator|.
name|acceptedGlobalOrdinals
argument_list|(
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acceptedOrds
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|inexcl
operator|=
operator|new
name|IncludeExclude
argument_list|(
literal|null
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|inexcl
operator|.
name|convertToOrdinalsFilter
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
expr_stmt|;
name|acceptedOrds
operator|=
name|filter
operator|.
name|acceptedGlobalOrdinals
argument_list|(
name|DocValues
operator|.
name|emptySortedSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acceptedOrds
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleTermWithOrds
specifier|public
name|void
name|testSingleTermWithOrds
parameter_list|()
throws|throws
name|IOException
block|{
name|RandomAccessOrds
name|ords
init|=
operator|new
name|RandomAccessOrds
argument_list|()
block|{
name|boolean
name|consumed
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|consumed
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
if|if
condition|(
name|consumed
condition|)
block|{
return|return
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
return|;
block|}
else|else
block|{
name|consumed
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ord
argument_list|)
expr_stmt|;
return|return
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ordAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|cardinality
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
name|IncludeExclude
name|inexcl
init|=
operator|new
name|IncludeExclude
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OrdinalsFilter
name|filter
init|=
name|inexcl
operator|.
name|convertToOrdinalsFilter
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
decl_stmt|;
name|LongBitSet
name|acceptedOrds
init|=
name|filter
operator|.
name|acceptedGlobalOrdinals
argument_list|(
name|ords
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acceptedOrds
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acceptedOrds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|inexcl
operator|=
operator|new
name|IncludeExclude
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|filter
operator|=
name|inexcl
operator|.
name|convertToOrdinalsFilter
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
expr_stmt|;
name|acceptedOrds
operator|=
name|filter
operator|.
name|acceptedGlobalOrdinals
argument_list|(
name|ords
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acceptedOrds
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acceptedOrds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|inexcl
operator|=
operator|new
name|IncludeExclude
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|inexcl
operator|.
name|convertToOrdinalsFilter
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
expr_stmt|;
name|acceptedOrds
operator|=
name|filter
operator|.
name|acceptedGlobalOrdinals
argument_list|(
name|ords
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acceptedOrds
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acceptedOrds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|inexcl
operator|=
operator|new
name|IncludeExclude
argument_list|(
literal|null
argument_list|,
comment|// means everything included
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|inexcl
operator|.
name|convertToOrdinalsFilter
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|)
expr_stmt|;
name|acceptedOrds
operator|=
name|filter
operator|.
name|acceptedGlobalOrdinals
argument_list|(
name|ords
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acceptedOrds
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acceptedOrds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|4
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|!=
operator|new
name|IncludeExclude
argument_list|(
literal|4
argument_list|,
literal|20
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|21
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|!=
operator|new
name|IncludeExclude
argument_list|(
literal|3
argument_list|,
literal|21
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

