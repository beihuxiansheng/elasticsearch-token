begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
package|;
end_package

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|Percentile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|Sum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|percentile
operator|.
name|PercentilesBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|sum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
operator|.
name|percentilesBucket
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|PercentilesBucketIT
specifier|public
class|class
name|PercentilesBucketIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|SINGLE_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_FIELD_NAME
init|=
literal|"l_value"
decl_stmt|;
DECL|field|PERCENTS
specifier|private
specifier|static
specifier|final
name|Double
index|[]
name|PERCENTS
init|=
block|{
literal|1.0
block|,
literal|25.0
block|,
literal|50.0
block|,
literal|75.0
block|,
literal|99.0
block|}
decl_stmt|;
DECL|field|numDocs
specifier|static
name|int
name|numDocs
decl_stmt|;
DECL|field|interval
specifier|static
name|int
name|interval
decl_stmt|;
DECL|field|minRandomValue
specifier|static
name|int
name|minRandomValue
decl_stmt|;
DECL|field|maxRandomValue
specifier|static
name|int
name|maxRandomValue
decl_stmt|;
DECL|field|numValueBuckets
specifier|static
name|int
name|numValueBuckets
decl_stmt|;
DECL|field|valueCounts
specifier|static
name|long
index|[]
name|valueCounts
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|randomIntBetween
argument_list|(
literal|6
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|interval
operator|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|minRandomValue
operator|=
literal|0
expr_stmt|;
name|maxRandomValue
operator|=
literal|20
expr_stmt|;
name|numValueBuckets
operator|=
operator|(
operator|(
name|maxRandomValue
operator|-
name|minRandomValue
operator|)
operator|/
name|interval
operator|)
operator|+
literal|1
expr_stmt|;
name|valueCounts
operator|=
operator|new
name|long
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldValue
init|=
name|randomIntBetween
argument_list|(
name|minRandomValue
argument_list|,
name|maxRandomValue
argument_list|)
decl_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|fieldValue
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|bucket
init|=
operator|(
name|fieldValue
operator|/
name|interval
operator|)
decl_stmt|;
comment|// + (fieldValue< 0 ? -1 : 0) - (minRandomValue / interval - 1);
name|valueCounts
index|[
name|bucket
index|]
operator|++
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"empty_bucket_idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|i
operator|*
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDocCount_topLevel
specifier|public
name|void
name|testDocCount_topLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|(
name|long
operator|)
name|minRandomValue
argument_list|,
operator|(
name|long
operator|)
name|maxRandomValue
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"histo>_count"
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|numValueBuckets
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|valueCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|double
name|expected
init|=
name|values
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDocCount_asSubAgg
specifier|public
name|void
name|testDocCount_asSubAgg
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|(
name|long
operator|)
name|minRandomValue
argument_list|,
operator|(
name|long
operator|)
name|maxRandomValue
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"histo>_count"
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|termsBuckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termsBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
condition|;
operator|++
name|i
control|)
block|{
name|Terms
operator|.
name|Bucket
name|termsBucket
init|=
name|termsBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|termsBucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|termsBucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|numValueBuckets
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValueBuckets
condition|;
operator|++
name|j
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|j
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|values
index|[
name|j
index|]
operator|=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|double
name|expected
init|=
name|values
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMetric_topLevel
specifier|public
name|void
name|testMetric_topLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"terms>sum"
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|interval
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
condition|;
operator|++
name|i
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|sum
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|double
name|expected
init|=
name|values
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMetric_topLevelDefaultPercents
specifier|public
name|void
name|testMetric_topLevelDefaultPercents
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"terms>sum"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|interval
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
condition|;
operator|++
name|i
control|)
block|{
name|Terms
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|sum
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Percentile
name|p
range|:
name|percentilesBucketValue
control|)
block|{
name|double
name|expected
init|=
name|values
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|.
name|getPercent
argument_list|()
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
operator|.
name|getPercent
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMetric_asSubAgg
specifier|public
name|void
name|testMetric_asSubAgg
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|(
name|long
operator|)
name|minRandomValue
argument_list|,
operator|(
name|long
operator|)
name|maxRandomValue
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"histo>sum"
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|termsBuckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termsBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
condition|;
operator|++
name|i
control|)
block|{
name|Terms
operator|.
name|Bucket
name|termsBucket
init|=
name|termsBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|termsBucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|termsBucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numValueBuckets
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValueBuckets
condition|;
operator|++
name|j
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|j
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|.
name|getDocCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|sum
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|double
name|expected
init|=
name|values
operator|.
name|get
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMetric_asSubAggWithInsertZeros
specifier|public
name|void
name|testMetric_asSubAggWithInsertZeros
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|(
name|long
operator|)
name|minRandomValue
argument_list|,
operator|(
name|long
operator|)
name|maxRandomValue
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"histo>sum"
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|termsBuckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termsBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
condition|;
operator|++
name|i
control|)
block|{
name|Terms
operator|.
name|Bucket
name|termsBucket
init|=
name|termsBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|termsBucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|termsBucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|numValueBuckets
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValueBuckets
condition|;
operator|++
name|j
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|j
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|values
index|[
name|j
index|]
operator|=
name|sum
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|double
name|expected
init|=
name|values
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testNoBuckets
specifier|public
name|void
name|testNoBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"tag.*"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"terms>sum"
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWrongPercents
specifier|public
name|void
name|testWrongPercents
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"tag.*"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"terms>sum"
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentiles_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentiles_bucket"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"2.0 was not a valid percent, should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exception
parameter_list|)
block|{
comment|// All good
block|}
block|}
annotation|@
name|Test
DECL|method|testBadPercents
specifier|public
name|void
name|testBadPercents
parameter_list|()
throws|throws
name|Exception
block|{
name|Double
index|[]
name|badPercents
init|=
block|{
operator|-
literal|1.0
block|,
literal|110.0
block|}
decl_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"terms>sum"
argument_list|)
operator|.
name|percents
argument_list|(
name|badPercents
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Illegal percent's were provided but no exception was thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
name|ElasticsearchException
index|[]
name|rootCauses
init|=
name|exception
operator|.
name|guessRootCauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rootCauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|rootCause
init|=
name|rootCauses
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"must only contain non-null doubles from 0.0-100.0 inclusive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBadPercents_asSubAgg
specifier|public
name|void
name|testBadPercents_asSubAgg
parameter_list|()
throws|throws
name|Exception
block|{
name|Double
index|[]
name|badPercents
init|=
block|{
operator|-
literal|1.0
block|,
literal|110.0
block|}
decl_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|(
name|long
operator|)
name|minRandomValue
argument_list|,
operator|(
name|long
operator|)
name|maxRandomValue
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentiles_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"histo>_count"
argument_list|)
operator|.
name|percents
argument_list|(
name|badPercents
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Illegal percent's were provided but no exception was thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
name|ElasticsearchException
index|[]
name|rootCauses
init|=
name|exception
operator|.
name|guessRootCauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|rootCauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|rootCause
init|=
name|rootCauses
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"must only contain non-null doubles from 0.0-100.0 inclusive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNested
specifier|public
name|void
name|testNested
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|(
name|long
operator|)
name|minRandomValue
argument_list|,
operator|(
name|long
operator|)
name|maxRandomValue
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentile_histo_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"histo>_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentile_terms_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"terms>percentile_histo_bucket.50"
argument_list|)
operator|.
name|percents
argument_list|(
name|PERCENTS
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|termsBuckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termsBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|termsBuckets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
condition|;
operator|++
name|i
control|)
block|{
name|Terms
operator|.
name|Bucket
name|termsBucket
init|=
name|termsBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|termsBucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|termsBucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|double
index|[]
name|innerValues
init|=
operator|new
name|double
index|[
name|numValueBuckets
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValueBuckets
condition|;
operator|++
name|j
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|j
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|innerValues
index|[
name|j
index|]
operator|=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|innerValues
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_histo_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentile_histo_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|double
name|expected
init|=
name|innerValues
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|innerValues
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
literal|50.0
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_terms_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentile_terms_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|PERCENTS
control|)
block|{
name|double
name|expected
init|=
name|values
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNestedWithDecimal
specifier|public
name|void
name|testNestedWithDecimal
parameter_list|()
throws|throws
name|Exception
block|{
name|Double
index|[]
name|percent
init|=
block|{
literal|99.9
block|}
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|term
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|(
name|long
operator|)
name|minRandomValue
argument_list|,
operator|(
name|long
operator|)
name|maxRandomValue
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentile_histo_bucket"
argument_list|)
operator|.
name|percents
argument_list|(
name|percent
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"histo>_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentilesBucket
argument_list|(
literal|"percentile_terms_bucket"
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"terms>percentile_histo_bucket[99.9]"
argument_list|)
operator|.
name|percents
argument_list|(
name|percent
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|termsBuckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termsBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|termsBuckets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
condition|;
operator|++
name|i
control|)
block|{
name|Terms
operator|.
name|Bucket
name|termsBucket
init|=
name|termsBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|termsBucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|termsBucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tag"
operator|+
operator|(
name|i
operator|%
name|interval
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|double
index|[]
name|innerValues
init|=
operator|new
name|double
index|[
name|numValueBuckets
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValueBuckets
condition|;
operator|++
name|j
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|j
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|innerValues
index|[
name|j
index|]
operator|=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|innerValues
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|termsBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_histo_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentile_histo_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|percent
control|)
block|{
name|double
name|expected
init|=
name|innerValues
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|innerValues
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
literal|99.9
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|PercentilesBucket
name|percentilesBucketValue
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_terms_bucket"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentile_terms_bucket"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Double
name|p
range|:
name|percent
control|)
block|{
name|double
name|expected
init|=
name|values
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|p
operator|/
literal|100
operator|)
operator|*
name|values
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|percentilesBucketValue
operator|.
name|percentile
argument_list|(
name|p
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

