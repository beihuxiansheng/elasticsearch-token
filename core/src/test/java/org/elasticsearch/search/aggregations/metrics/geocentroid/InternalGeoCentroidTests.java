begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.geocentroid
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geocentroid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ParsedAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomGeoGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|InternalGeoCentroidTests
specifier|public
class|class
name|InternalGeoCentroidTests
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|InternalGeoCentroid
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|InternalGeoCentroid
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|GeoPoint
name|centroid
init|=
name|RandomGeoGenerator
operator|.
name|randomPoint
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
comment|// Re-encode lat/longs to avoid rounding issue when testing InternalGeoCentroid#hashCode() and
comment|// InternalGeoCentroid#equals()
name|int
name|encodedLon
init|=
name|GeoEncodingUtils
operator|.
name|encodeLongitude
argument_list|(
name|centroid
operator|.
name|lon
argument_list|()
argument_list|)
decl_stmt|;
name|centroid
operator|.
name|resetLon
argument_list|(
name|GeoEncodingUtils
operator|.
name|decodeLongitude
argument_list|(
name|encodedLon
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|encodedLat
init|=
name|GeoEncodingUtils
operator|.
name|encodeLatitude
argument_list|(
name|centroid
operator|.
name|lat
argument_list|()
argument_list|)
decl_stmt|;
name|centroid
operator|.
name|resetLat
argument_list|(
name|GeoEncodingUtils
operator|.
name|decodeLatitude
argument_list|(
name|encodedLat
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|centroid
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|InternalGeoCentroid
argument_list|(
name|name
argument_list|,
name|centroid
argument_list|,
name|count
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|InternalGeoCentroid
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|InternalGeoCentroid
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
name|void
name|assertReduced
parameter_list|(
name|InternalGeoCentroid
name|reduced
parameter_list|,
name|List
argument_list|<
name|InternalGeoCentroid
argument_list|>
name|inputs
parameter_list|)
block|{
name|double
name|lonSum
init|=
literal|0
decl_stmt|;
name|double
name|latSum
init|=
literal|0
decl_stmt|;
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InternalGeoCentroid
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|input
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|lonSum
operator|+=
operator|(
name|input
operator|.
name|count
argument_list|()
operator|*
name|input
operator|.
name|centroid
argument_list|()
operator|.
name|getLon
argument_list|()
operator|)
expr_stmt|;
name|latSum
operator|+=
operator|(
name|input
operator|.
name|count
argument_list|()
operator|*
name|input
operator|.
name|centroid
argument_list|()
operator|.
name|getLat
argument_list|()
operator|)
expr_stmt|;
block|}
name|totalCount
operator|+=
name|input
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|latSum
operator|/
name|totalCount
argument_list|,
name|reduced
operator|.
name|centroid
argument_list|()
operator|.
name|getLat
argument_list|()
argument_list|,
literal|1E
operator|-
literal|5D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lonSum
operator|/
name|totalCount
argument_list|,
name|reduced
operator|.
name|centroid
argument_list|()
operator|.
name|getLon
argument_list|()
argument_list|,
literal|1E
operator|-
literal|5D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCount
argument_list|,
name|reduced
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
name|void
name|assertFromXContent
parameter_list|(
name|InternalGeoCentroid
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|ParsedGeoCentroid
argument_list|)
expr_stmt|;
name|ParsedGeoCentroid
name|parsed
init|=
operator|(
name|ParsedGeoCentroid
operator|)
name|parsedAggregation
decl_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|centroid
argument_list|()
argument_list|,
name|parsed
operator|.
name|centroid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|count
argument_list|()
argument_list|,
name|parsed
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

