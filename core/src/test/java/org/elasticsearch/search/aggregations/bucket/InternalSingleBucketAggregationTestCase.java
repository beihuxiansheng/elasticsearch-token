begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|max
operator|.
name|InternalMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|min
operator|.
name|InternalMin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_class
DECL|class|InternalSingleBucketAggregationTestCase
specifier|public
specifier|abstract
class|class
name|InternalSingleBucketAggregationTestCase
parameter_list|<
name|T
extends|extends
name|InternalSingleBucketAggregation
parameter_list|>
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|T
argument_list|>
block|{
DECL|field|hasInternalMax
specifier|private
specifier|final
name|boolean
name|hasInternalMax
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
DECL|field|hasInternalMin
specifier|private
specifier|final
name|boolean
name|hasInternalMin
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
DECL|method|createTestInstance
specifier|protected
specifier|abstract
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|docCount
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
function_decl|;
DECL|method|extraAssertReduced
specifier|protected
specifier|abstract
name|void
name|extraAssertReduced
parameter_list|(
name|T
name|reduced
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
specifier|final
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|internal
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasInternalMax
condition|)
block|{
name|internal
operator|.
name|add
argument_list|(
operator|new
name|InternalMax
argument_list|(
literal|"max"
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|DocValueFormat
operator|.
name|BOOLEAN
argument_list|,
name|DocValueFormat
operator|.
name|GEOHASH
argument_list|,
name|DocValueFormat
operator|.
name|IP
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|)
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasInternalMin
condition|)
block|{
name|internal
operator|.
name|add
argument_list|(
operator|new
name|InternalMin
argument_list|(
literal|"min"
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|DocValueFormat
operator|.
name|BOOLEAN
argument_list|,
name|DocValueFormat
operator|.
name|GEOHASH
argument_list|,
name|DocValueFormat
operator|.
name|IP
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|)
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we shouldn't use the full long range here since we sum doc count on reduce, and don't want to overflow the long range there
name|long
name|docCount
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|docCount
argument_list|,
operator|new
name|InternalAggregations
argument_list|(
name|internal
argument_list|)
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
specifier|final
name|void
name|assertReduced
parameter_list|(
name|T
name|reduced
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|InternalSingleBucketAggregation
operator|::
name|getDocCount
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|,
name|reduced
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasInternalMax
condition|)
block|{
name|double
name|expected
init|=
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|i
lambda|->
block|{
name|InternalMax
name|max
init|=
name|i
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
return|return
name|max
operator|.
name|getValue
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|getAsDouble
argument_list|()
decl_stmt|;
name|InternalMax
name|reducedMax
init|=
name|reduced
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reducedMax
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasInternalMin
condition|)
block|{
name|double
name|expected
init|=
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|i
lambda|->
block|{
name|InternalMin
name|min
init|=
name|i
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
return|return
name|min
operator|.
name|getValue
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getAsDouble
argument_list|()
decl_stmt|;
name|InternalMin
name|reducedMin
init|=
name|reduced
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reducedMin
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|extraAssertReduced
argument_list|(
name|reduced
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

