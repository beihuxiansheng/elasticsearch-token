begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|BaseAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|ip
operator|.
name|IpRangeAggregationBuilder
import|;
end_import

begin_class
DECL|class|IpRangeTests
specifier|public
class|class
name|IpRangeTests
extends|extends
name|BaseAggregationTestCase
argument_list|<
name|IpRangeAggregationBuilder
argument_list|>
block|{
DECL|method|randomIp
specifier|private
specifier|static
name|String
name|randomIp
parameter_list|(
name|boolean
name|v4
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|v4
condition|)
block|{
name|byte
index|[]
name|ipv4
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|ipv4
argument_list|)
expr_stmt|;
return|return
name|NetworkAddress
operator|.
name|format
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|ipv4
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|byte
index|[]
name|ipv6
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|ipv6
argument_list|)
expr_stmt|;
return|return
name|NetworkAddress
operator|.
name|format
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|ipv6
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createTestAggregatorBuilder
specifier|protected
name|IpRangeAggregationBuilder
name|createTestAggregatorBuilder
parameter_list|()
block|{
name|int
name|numRanges
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|IpRangeAggregationBuilder
name|factory
init|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRanges
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|key
operator|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|randomInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|boolean
name|v4
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|int
name|prefixLength
decl_stmt|;
if|if
condition|(
name|v4
condition|)
block|{
name|prefixLength
operator|=
name|randomInt
argument_list|(
literal|32
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefixLength
operator|=
name|randomInt
argument_list|(
literal|128
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|addMaskRange
argument_list|(
name|key
argument_list|,
name|randomIp
argument_list|(
name|v4
argument_list|)
operator|+
literal|"/"
operator|+
name|prefixLength
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|factory
operator|.
name|addUnboundedFrom
argument_list|(
name|key
argument_list|,
name|randomIp
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|factory
operator|.
name|addUnboundedTo
argument_list|(
name|key
argument_list|,
name|randomIp
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|factory
operator|.
name|addRange
argument_list|(
name|key
argument_list|,
name|randomIp
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|,
name|randomIp
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
name|factory
operator|.
name|field
argument_list|(
name|IP_FIELD_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|keyed
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|missing
argument_list|(
name|randomIp
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
DECL|method|testMask
specifier|public
name|void
name|testMask
parameter_list|()
block|{
name|IpRangeAggregationBuilder
name|b1
init|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|IpRangeAggregationBuilder
name|b2
init|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|b1
operator|.
name|addMaskRange
argument_list|(
literal|"bar"
argument_list|,
literal|"192.168.10.12/16"
argument_list|)
expr_stmt|;
name|b2
operator|.
name|addRange
argument_list|(
literal|"bar"
argument_list|,
literal|"192.168.0.0"
argument_list|,
literal|"192.169.0.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b1
operator|.
name|addMaskRange
argument_list|(
literal|"bar"
argument_list|,
literal|"192.168.0.0/31"
argument_list|)
expr_stmt|;
name|b2
operator|.
name|addRange
argument_list|(
literal|"bar"
argument_list|,
literal|"192.168.0.0"
argument_list|,
literal|"192.168.0.2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b1
operator|.
name|addMaskRange
argument_list|(
literal|"bar"
argument_list|,
literal|"0.0.0.0/0"
argument_list|)
expr_stmt|;
name|b2
operator|.
name|addRange
argument_list|(
literal|"bar"
argument_list|,
literal|"0.0.0.0"
argument_list|,
literal|"::1:0:0:0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b1
operator|.
name|addMaskRange
argument_list|(
literal|"bar"
argument_list|,
literal|"fe80::821f:2ff:fe4a:c5bd/64"
argument_list|)
expr_stmt|;
name|b2
operator|.
name|addRange
argument_list|(
literal|"bar"
argument_list|,
literal|"fe80::"
argument_list|,
literal|"fe80:0:0:1::"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b1
operator|.
name|addMaskRange
argument_list|(
literal|"bar"
argument_list|,
literal|"::/16"
argument_list|)
expr_stmt|;
name|b2
operator|.
name|addRange
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|,
literal|"1::"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|b1
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b2
operator|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|b1
operator|.
name|addMaskRange
argument_list|(
literal|"bar"
argument_list|,
literal|"::/0"
argument_list|)
expr_stmt|;
name|b2
operator|.
name|addRange
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

