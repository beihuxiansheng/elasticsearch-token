begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.bucketmetrics.percentile
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|percentile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
operator|.
name|CommonFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ParsedAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|Percentile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|InternalPercentilesTestCase
operator|.
name|randomPercents
import|;
end_import

begin_class
DECL|class|InternalPercentilesBucketTests
specifier|public
class|class
name|InternalPercentilesBucketTests
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|InternalPercentilesBucket
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|InternalPercentilesBucket
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
return|return
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|,
name|randomPercents
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createTestInstance
specifier|private
specifier|static
name|InternalPercentilesBucket
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|,
name|double
index|[]
name|percents
parameter_list|)
block|{
name|DocValueFormat
name|format
init|=
name|randomNumericDocValueFormat
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|percentiles
init|=
operator|new
name|double
index|[
name|percents
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|percents
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|percentiles
index|[
name|i
index|]
operator|=
name|frequently
argument_list|()
condition|?
name|randomDouble
argument_list|()
else|:
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
return|return
operator|new
name|InternalPercentilesBucket
argument_list|(
name|name
argument_list|,
name|percents
argument_list|,
name|percentiles
argument_list|,
name|format
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|testReduceRandom
specifier|public
name|void
name|testReduceRandom
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|createTestInstance
argument_list|(
literal|"name"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|reduce
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
name|void
name|assertReduced
parameter_list|(
name|InternalPercentilesBucket
name|reduced
parameter_list|,
name|List
argument_list|<
name|InternalPercentilesBucket
argument_list|>
name|inputs
parameter_list|)
block|{
comment|// no test since reduce operation is unsupported
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|InternalPercentilesBucket
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|InternalPercentilesBucket
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
specifier|final
name|void
name|assertFromXContent
parameter_list|(
name|InternalPercentilesBucket
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|ParsedPercentilesBucket
argument_list|)
expr_stmt|;
name|ParsedPercentilesBucket
name|parsedPercentiles
init|=
operator|(
name|ParsedPercentilesBucket
operator|)
name|parsedAggregation
decl_stmt|;
for|for
control|(
name|Percentile
name|percentile
range|:
name|aggregation
control|)
block|{
name|Double
name|percent
init|=
name|percentile
operator|.
name|getPercent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|percentile
argument_list|(
name|percent
argument_list|)
argument_list|,
name|parsedPercentiles
operator|.
name|percentile
argument_list|(
name|percent
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// we cannot ensure we get the same as_string output for Double.NaN values since they are rendered as
comment|// null and we don't have a formatted string representation in the rest output
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|aggregation
operator|.
name|percentile
argument_list|(
name|percent
argument_list|)
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|percentileAsString
argument_list|(
name|percent
argument_list|)
argument_list|,
name|parsedPercentiles
operator|.
name|percentileAsString
argument_list|(
name|percent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * check that we don't rely on the percent array order and that the iterator returns the values in the original order      */
DECL|method|testPercentOrder
specifier|public
name|void
name|testPercentOrder
parameter_list|()
block|{
specifier|final
name|double
index|[]
name|percents
init|=
operator|new
name|double
index|[]
block|{
literal|0.50
block|,
literal|0.25
block|,
literal|0.01
block|,
literal|0.99
block|,
literal|0.60
block|}
decl_stmt|;
name|InternalPercentilesBucket
name|aggregation
init|=
name|createTestInstance
argument_list|(
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|percents
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Percentile
argument_list|>
name|iterator
init|=
name|aggregation
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|double
name|percent
range|:
name|percents
control|)
block|{
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Percentile
name|percentile
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|percent
argument_list|,
name|percentile
operator|.
name|getPercent
argument_list|()
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|percentile
argument_list|(
name|percent
argument_list|)
argument_list|,
name|percentile
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testErrorOnDifferentArgumentSize
specifier|public
name|void
name|testErrorOnDifferentArgumentSize
parameter_list|()
block|{
specifier|final
name|double
index|[]
name|percents
init|=
operator|new
name|double
index|[]
block|{
literal|0.1
block|,
literal|0.2
block|,
literal|0.3
block|}
decl_stmt|;
specifier|final
name|double
index|[]
name|percentiles
init|=
operator|new
name|double
index|[]
block|{
literal|0.10
block|,
literal|0.2
block|}
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|InternalPercentilesBucket
argument_list|(
literal|"test"
argument_list|,
name|percents
argument_list|,
name|percentiles
argument_list|,
name|DocValueFormat
operator|.
name|RAW
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of provided percents and percentiles didn't match. percents: [0.1, 0.2, 0.3], percentiles: [0.1, 0.2]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParsedAggregationIteratorOrder
specifier|public
name|void
name|testParsedAggregationIteratorOrder
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|InternalPercentilesBucket
name|aggregation
init|=
name|createTestInstance
argument_list|()
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|Percentile
argument_list|>
name|parsedAggregation
init|=
name|parseAndAssert
argument_list|(
name|aggregation
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Percentile
argument_list|>
name|it
init|=
name|aggregation
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Percentile
argument_list|>
name|parsedIt
init|=
name|parsedAggregation
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|parsedIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|excludePathsFromXContentInsertion
specifier|protected
name|Predicate
argument_list|<
name|String
argument_list|>
name|excludePathsFromXContentInsertion
parameter_list|()
block|{
return|return
name|path
lambda|->
name|path
operator|.
name|endsWith
argument_list|(
name|CommonFields
operator|.
name|VALUES
operator|.
name|getPreferredName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

