begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.scripted
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|scripted
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ParsedAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
DECL|class|InternalScriptedMetricTests
specifier|public
class|class
name|InternalScriptedMetricTests
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|InternalScriptedMetric
argument_list|>
block|{
DECL|field|REDUCE_SCRIPT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|REDUCE_SCRIPT_NAME
init|=
literal|"reduceScript"
decl_stmt|;
DECL|field|hasReduceScript
specifier|private
name|boolean
name|hasReduceScript
decl_stmt|;
DECL|field|valueTypes
specifier|private
name|Supplier
argument_list|<
name|Object
argument_list|>
index|[]
name|valueTypes
decl_stmt|;
DECL|field|leafValueSuppliers
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Object
argument_list|>
index|[]
name|leafValueSuppliers
init|=
operator|new
name|Supplier
index|[]
block|{
parameter_list|()
lambda|->
name|randomInt
argument_list|()
block|,
parameter_list|()
lambda|->
name|randomLong
argument_list|()
block|,
parameter_list|()
lambda|->
name|randomDouble
argument_list|()
block|,
parameter_list|()
lambda|->
name|randomFloat
argument_list|()
block|,
parameter_list|()
lambda|->
name|randomBoolean
argument_list|()
block|,
parameter_list|()
lambda|->
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
block|,
parameter_list|()
lambda|->
operator|new
name|GeoPoint
argument_list|(
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|)
block|,
parameter_list|()
lambda|->
literal|null
block|}
decl_stmt|;
DECL|field|nestedValueSuppliers
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Object
argument_list|>
index|[]
name|nestedValueSuppliers
init|=
operator|new
name|Supplier
index|[]
block|{
parameter_list|()
lambda|->
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|,
parameter_list|()
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|hasReduceScript
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
comment|// we want the same value types (also for nested lists, maps) for all random aggregations
name|int
name|levels
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|valueTypes
operator|=
operator|new
name|Supplier
index|[
name|levels
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levels
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|levels
operator|-
literal|1
condition|)
block|{
name|valueTypes
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|nestedValueSuppliers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the last one needs to be a leaf value, not map or list
name|valueTypes
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|leafValueSuppliers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|InternalScriptedMetric
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Script
name|reduceScript
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasReduceScript
condition|)
block|{
name|reduceScript
operator|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
name|REDUCE_SCRIPT_NAME
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|Object
name|randomValue
init|=
name|randomValue
argument_list|(
name|valueTypes
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|InternalScriptedMetric
argument_list|(
name|name
argument_list|,
name|randomValue
argument_list|,
name|reduceScript
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|randomValue
specifier|private
specifier|static
name|Object
name|randomValue
parameter_list|(
name|Supplier
argument_list|<
name|Object
argument_list|>
index|[]
name|valueTypes
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|Object
name|value
init|=
name|valueTypes
index|[
name|level
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|int
name|elements
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomValue
argument_list|(
name|valueTypes
argument_list|,
name|level
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|int
name|elements
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|randomValue
argument_list|(
name|valueTypes
argument_list|,
name|level
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
comment|/**      * Mock of the script service. The script that is run looks at the      * "_aggs" parameter visible when executing the script and simply returns the count.      * This should be equal to the number of input InternalScriptedMetrics that are reduced      * in total.      */
annotation|@
name|Override
DECL|method|mockScriptService
specifier|protected
name|ScriptService
name|mockScriptService
parameter_list|()
block|{
comment|// mock script always retuns the size of the input aggs list as result
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|MockScriptEngine
name|scriptEngine
init|=
operator|new
name|MockScriptEngine
argument_list|(
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REDUCE_SCRIPT_NAME
argument_list|,
name|script
lambda|->
operator|(
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|script
operator|.
name|get
argument_list|(
literal|"_aggs"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|scriptEngine
operator|.
name|getType
argument_list|()
argument_list|,
name|scriptEngine
argument_list|)
argument_list|,
name|ScriptContext
operator|.
name|BUILTINS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
name|void
name|assertReduced
parameter_list|(
name|InternalScriptedMetric
name|reduced
parameter_list|,
name|List
argument_list|<
name|InternalScriptedMetric
argument_list|>
name|inputs
parameter_list|)
block|{
name|InternalScriptedMetric
name|firstAgg
init|=
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|firstAgg
operator|.
name|getName
argument_list|()
argument_list|,
name|reduced
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstAgg
operator|.
name|pipelineAggregators
argument_list|()
argument_list|,
name|reduced
operator|.
name|pipelineAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstAgg
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|reduced
operator|.
name|getMetaData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasReduceScript
condition|)
block|{
name|assertEquals
argument_list|(
name|inputs
operator|.
name|size
argument_list|()
argument_list|,
name|reduced
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|inputs
operator|.
name|size
argument_list|()
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|reduced
operator|.
name|aggregation
argument_list|()
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Reader
argument_list|<
name|InternalScriptedMetric
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|InternalScriptedMetric
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
name|void
name|assertFromXContent
parameter_list|(
name|InternalScriptedMetric
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|ParsedScriptedMetric
argument_list|)
expr_stmt|;
name|ParsedScriptedMetric
name|parsed
init|=
operator|(
name|ParsedScriptedMetric
operator|)
name|parsedAggregation
decl_stmt|;
name|assertValues
argument_list|(
name|aggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|parsed
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertValues
specifier|private
specifier|static
name|void
name|assertValues
parameter_list|(
name|Object
name|expected
parameter_list|,
name|Object
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|instanceof
name|Long
condition|)
block|{
comment|// longs that fit into the integer range are parsed back as integer
if|if
condition|(
name|actual
operator|instanceof
name|Integer
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|expected
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expected
operator|instanceof
name|Float
condition|)
block|{
comment|// based on the xContent type, floats are sometimes parsed back as doubles
if|if
condition|(
name|actual
operator|instanceof
name|Double
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|actual
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expected
operator|instanceof
name|GeoPoint
condition|)
block|{
name|assertTrue
argument_list|(
name|actual
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|GeoPoint
name|point
init|=
operator|(
name|GeoPoint
operator|)
name|expected
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pointMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|point
operator|.
name|getLat
argument_list|()
argument_list|,
name|pointMap
operator|.
name|get
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|point
operator|.
name|getLon
argument_list|()
argument_list|,
name|pointMap
operator|.
name|get
argument_list|(
literal|"lon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expected
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|expected
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actualMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMap
operator|.
name|size
argument_list|()
argument_list|,
name|actualMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expectedMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertValues
argument_list|(
name|expectedMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|actualMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expected
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|expectedList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|expected
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|actualList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedList
operator|.
name|size
argument_list|()
argument_list|,
name|actualList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|actualIterator
init|=
name|actualList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|element
range|:
name|expectedList
control|)
block|{
name|assertValues
argument_list|(
name|element
argument_list|,
name|actualIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

