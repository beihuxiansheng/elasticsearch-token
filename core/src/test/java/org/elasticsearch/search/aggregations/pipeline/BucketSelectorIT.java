begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|Sum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
operator|.
name|GapPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|sum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
operator|.
name|bucketSelector
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
operator|.
name|derivative
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|BucketSelectorIT
specifier|public
class|class
name|BucketSelectorIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|FIELD_1_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_1_NAME
init|=
literal|"field1"
decl_stmt|;
DECL|field|FIELD_2_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_2_NAME
init|=
literal|"field2"
decl_stmt|;
DECL|field|FIELD_3_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_3_NAME
init|=
literal|"field3"
decl_stmt|;
DECL|field|FIELD_4_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_4_NAME
init|=
literal|"field4"
decl_stmt|;
DECL|field|interval
specifier|private
specifier|static
name|int
name|interval
decl_stmt|;
DECL|field|numDocs
specifier|private
specifier|static
name|int
name|numDocs
decl_stmt|;
DECL|field|minNumber
specifier|private
specifier|static
name|int
name|minNumber
decl_stmt|;
DECL|field|maxNumber
specifier|private
specifier|static
name|int
name|maxNumber
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|CustomScriptPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|class|CustomScriptPlugin
specifier|public
specifier|static
class|class
name|CustomScriptPlugin
extends|extends
name|MockScriptPlugin
block|{
annotation|@
name|Override
DECL|method|pluginScripts
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pluginScripts
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"Double.isNaN(_value0) ? false : (_value0 + _value1> 100)"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
name|double
name|value1
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value1"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|value0
argument_list|)
condition|?
literal|false
else|:
operator|(
name|value0
operator|+
name|value1
operator|>
literal|100
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"Double.isNaN(_value0) ? true : (_value0< 10000)"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|value0
argument_list|)
condition|?
literal|true
else|:
operator|(
name|value0
operator|<
literal|10000
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"Double.isNaN(_value0) ? false : (_value0> 10000)"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|value0
argument_list|)
condition|?
literal|false
else|:
operator|(
name|value0
operator|>
literal|10000
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"Double.isNaN(_value0) ? false : (_value0< _value1)"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
name|double
name|value1
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value1"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|value0
argument_list|)
condition|?
literal|false
else|:
operator|(
name|value0
operator|<
name|value1
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"Double.isNaN(_value0) ? false : (_value0> 100)"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|value0
argument_list|)
condition|?
literal|false
else|:
operator|(
name|value0
operator|>
literal|10000
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"Double.isNaN(my_value1) ? false : (my_value1 + my_value2> 100)"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|myValue1
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"my_value1"
argument_list|)
decl_stmt|;
name|double
name|myValue2
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"my_value2"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|myValue1
argument_list|)
condition|?
literal|false
else|:
operator|(
name|myValue1
operator|+
name|myValue2
operator|>
literal|100
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"Double.isNaN(_value0) ? false : (_value0 + _value1> threshold)"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
name|double
name|value1
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value1"
argument_list|)
decl_stmt|;
name|int
name|threshold
init|=
operator|(
name|int
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"threshold"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|value0
argument_list|)
condition|?
literal|false
else|:
operator|(
name|value0
operator|+
name|value1
operator|>
name|threshold
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"_value0 + _value1> 100"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
name|double
name|value1
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value1"
argument_list|)
decl_stmt|;
return|return
operator|(
name|value0
operator|+
name|value1
operator|>
literal|100
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"my_script"
argument_list|,
name|vars
lambda|->
block|{
name|double
name|value0
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value0"
argument_list|)
decl_stmt|;
name|double
name|value1
init|=
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value1"
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|value0
argument_list|)
condition|?
literal|false
else|:
operator|(
name|value0
operator|+
name|value1
operator|>
literal|100
operator|)
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|scripts
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_with_gaps"
argument_list|)
expr_stmt|;
name|interval
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|minNumber
operator|=
operator|-
literal|200
expr_stmt|;
name|maxNumber
operator|=
literal|200
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|docs
init|=
literal|0
init|;
name|docs
operator|<
name|numDocs
condition|;
name|docs
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx_with_gaps"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx_with_gaps"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx_with_gaps"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx_with_gaps"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
DECL|method|newDocBuilder
specifier|private
name|XContentBuilder
name|newDocBuilder
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newDocBuilder
argument_list|(
name|randomIntBetween
argument_list|(
name|minNumber
argument_list|,
name|maxNumber
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
name|minNumber
argument_list|,
name|maxNumber
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
name|minNumber
argument_list|,
name|maxNumber
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
name|minNumber
argument_list|,
name|maxNumber
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newDocBuilder
specifier|private
name|XContentBuilder
name|newDocBuilder
parameter_list|(
name|int
name|field1Value
parameter_list|,
name|int
name|field2Value
parameter_list|,
name|int
name|field3Value
parameter_list|,
name|int
name|field4Value
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|jsonBuilder
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|jsonBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|jsonBuilder
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|,
name|field1Value
argument_list|)
expr_stmt|;
name|jsonBuilder
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|,
name|field2Value
argument_list|)
expr_stmt|;
name|jsonBuilder
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|,
name|field3Value
argument_list|)
expr_stmt|;
name|jsonBuilder
operator|.
name|field
argument_list|(
name|FIELD_4_NAME
argument_list|,
name|field4Value
argument_list|)
expr_stmt|;
name|jsonBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|jsonBuilder
return|;
block|}
DECL|method|testInlineScript
specifier|public
name|void
name|testInlineScript
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? false : (_value0 + _value1> 100)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
operator|+
name|field3SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInlineScriptNoBucketsPruned
specifier|public
name|void
name|testInlineScriptNoBucketsPruned
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? true : (_value0< 10000)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
operator|+
name|field3SumValue
argument_list|,
name|lessThan
argument_list|(
literal|10000.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInlineScriptNoBucketsLeft
specifier|public
name|void
name|testInlineScriptNoBucketsLeft
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? false : (_value0> 10000)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInlineScript2
specifier|public
name|void
name|testInlineScript2
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? false : (_value0< _value1)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field3SumValue
operator|-
name|field2SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInlineScriptSingleVariable
specifier|public
name|void
name|testInlineScriptSingleVariable
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? false : (_value0> 100)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInlineScriptNamedVars
specifier|public
name|void
name|testInlineScriptNamedVars
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(my_value1) ? false : (my_value1 + my_value2> 100)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bucketPathsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|bucketPathsMap
operator|.
name|put
argument_list|(
literal|"my_value1"
argument_list|,
literal|"field2Sum"
argument_list|)
expr_stmt|;
name|bucketPathsMap
operator|.
name|put
argument_list|(
literal|"my_value2"
argument_list|,
literal|"field3Sum"
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|bucketPathsMap
argument_list|,
name|script
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
operator|+
name|field3SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInlineScriptWithParams
specifier|public
name|void
name|testInlineScriptWithParams
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? false : (_value0 + _value1> threshold)"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"threshold"
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
operator|+
name|field3SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInlineScriptInsertZeros
specifier|public
name|void
name|testInlineScriptInsertZeros
parameter_list|()
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_value0 + _value1> 100"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
operator|+
name|field3SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStoredScript
specifier|public
name|void
name|testStoredScript
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setId
argument_list|(
literal|"my_script"
argument_list|)
operator|.
name|setScriptLang
argument_list|(
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|)
comment|// Source is not interpreted but my_script is defined in CustomScriptPlugin
operator|.
name|setSource
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{ \"script\": \"Double.isNaN(_value0) ? false : (_value0 + _value1> 100)\" }"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"my_script"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
operator|+
name|field3SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUnmapped
specifier|public
name|void
name|testUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? false : (_value0 + _value1> 100)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartiallyUnmapped
specifier|public
name|void
name|testPartiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|Script
name|script
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"Double.isNaN(_value0) ? false : (_value0 + _value1> 100)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field2Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_2_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"field3Sum"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_3_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|bucketSelector
argument_list|(
literal|"bucketSelector"
argument_list|,
name|script
argument_list|,
literal|"field2Sum"
argument_list|,
literal|"field3Sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Sum
name|field2Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field2Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field2SumValue
init|=
name|field2Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Sum
name|field3Sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3Sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|field3Sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|field3SumValue
init|=
name|field3Sum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|field2SumValue
operator|+
name|field3SumValue
argument_list|,
name|greaterThan
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmptyBuckets
specifier|public
name|void
name|testEmptyBuckets
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_with_gaps"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"inner_histo"
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD_1_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|1L
argument_list|,
literal|4L
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"derivative"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getKeyAsString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|innerHisto
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"inner_histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|innerHisto
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|innerBuckets
init|=
name|innerHisto
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|innerBuckets
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|innerBuckets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|innerBucket
init|=
name|innerBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|innerBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"derivative"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|innerBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"derivative"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getKeyAsString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2.0"
argument_list|)
argument_list|)
expr_stmt|;
name|innerHisto
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"inner_histo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerHisto
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|innerBuckets
operator|=
name|innerHisto
operator|.
name|getBuckets
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|innerBuckets
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|innerBuckets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|innerBucket
init|=
name|innerBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|innerBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"derivative"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|innerBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"derivative"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getKeyAsString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3.0"
argument_list|)
argument_list|)
expr_stmt|;
name|innerHisto
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"inner_histo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerHisto
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|innerBuckets
operator|=
name|innerHisto
operator|.
name|getBuckets
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|innerBuckets
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerBuckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|innerBuckets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|innerBucket
init|=
name|innerBuckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|innerBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"derivative"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|innerBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"derivative"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

