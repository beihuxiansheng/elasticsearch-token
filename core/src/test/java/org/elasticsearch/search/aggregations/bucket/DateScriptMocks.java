begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|internal
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|AbstractSearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|NativeScriptFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Mock scripts shared by DateRangeIT and DateHistogramIT  */
end_comment

begin_class
DECL|class|DateScriptMocks
specifier|public
class|class
name|DateScriptMocks
block|{
comment|/**      * Mock plugin for the {@link DateScriptMocks.ExtractFieldScript} and {@link DateScriptMocks.PlusOneMonthScript}      */
DECL|class|DateScriptsMockPlugin
specifier|public
specifier|static
class|class
name|DateScriptsMockPlugin
extends|extends
name|Plugin
block|{
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|ScriptModule
name|module
parameter_list|)
block|{
name|module
operator|.
name|registerScript
argument_list|(
name|ExtractFieldScript
operator|.
name|NAME
argument_list|,
name|ExtractFieldScriptFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|module
operator|.
name|registerScript
argument_list|(
name|PlusOneMonthScript
operator|.
name|NAME
argument_list|,
name|PlusOneMonthScriptFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ExtractFieldScriptFactory
specifier|public
specifier|static
class|class
name|ExtractFieldScriptFactory
implements|implements
name|NativeScriptFactory
block|{
annotation|@
name|Override
DECL|method|newScript
specifier|public
name|ExecutableScript
name|newScript
parameter_list|(
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
return|return
operator|new
name|ExtractFieldScript
argument_list|(
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"fieldname"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ExtractFieldScript
specifier|public
specifier|static
class|class
name|ExtractFieldScript
extends|extends
name|AbstractSearchScript
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"extract_field"
decl_stmt|;
DECL|field|fieldname
specifier|private
name|String
name|fieldname
decl_stmt|;
DECL|method|ExtractFieldScript
specifier|public
name|ExtractFieldScript
parameter_list|(
name|String
name|fieldname
parameter_list|)
block|{
name|this
operator|.
name|fieldname
operator|=
name|fieldname
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|doc
argument_list|()
operator|.
name|get
argument_list|(
name|fieldname
argument_list|)
return|;
block|}
block|}
DECL|class|PlusOneMonthScriptFactory
specifier|public
specifier|static
class|class
name|PlusOneMonthScriptFactory
implements|implements
name|NativeScriptFactory
block|{
annotation|@
name|Override
DECL|method|newScript
specifier|public
name|ExecutableScript
name|newScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
return|return
operator|new
name|PlusOneMonthScript
argument_list|(
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"fieldname"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * This mock script takes date field value and adds one month to the returned date      */
DECL|class|PlusOneMonthScript
specifier|public
specifier|static
class|class
name|PlusOneMonthScript
extends|extends
name|AbstractSearchScript
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"date_plus_1_month"
decl_stmt|;
DECL|field|fieldname
specifier|private
name|String
name|fieldname
decl_stmt|;
DECL|field|vars
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PlusOneMonthScript
specifier|public
name|PlusOneMonthScript
parameter_list|(
name|String
name|fieldname
parameter_list|)
block|{
name|this
operator|.
name|fieldname
operator|=
name|fieldname
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextVar
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|vars
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|runAsLong
specifier|public
name|long
name|runAsLong
parameter_list|()
block|{
return|return
operator|new
name|DateTime
argument_list|(
operator|(
name|long
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value"
argument_list|)
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|plusMonths
argument_list|(
literal|1
argument_list|)
operator|.
name|getMillis
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runAsDouble
specifier|public
name|double
name|runAsDouble
parameter_list|()
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value"
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|plusMonths
argument_list|(
literal|1
argument_list|)
operator|.
name|getMillis
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
operator|new
name|UnsupportedOperationException
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

