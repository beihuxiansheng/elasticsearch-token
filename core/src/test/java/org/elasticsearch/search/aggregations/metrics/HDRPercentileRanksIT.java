begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|global
operator|.
name|Global
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|Percentile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|PercentileRanks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|PercentilesMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|global
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|percentileRanks
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|HDRPercentileRanksIT
specifier|public
class|class
name|HDRPercentileRanksIT
extends|extends
name|AbstractNumericTestCase
block|{
DECL|method|randomPercents
specifier|private
specifier|static
name|double
index|[]
name|randomPercents
parameter_list|(
name|long
name|minValue
parameter_list|,
name|long
name|maxValue
parameter_list|)
block|{
specifier|final
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|percents
init|=
operator|new
name|double
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|percents
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|randomInt
argument_list|(
literal|20
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|percents
index|[
name|i
index|]
operator|=
name|minValue
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|percents
index|[
name|i
index|]
operator|=
name|maxValue
expr_stmt|;
break|break;
default|default:
name|percents
index|[
name|i
index|]
operator|=
operator|(
name|randomDouble
argument_list|()
operator|*
operator|(
name|maxValue
operator|-
name|minValue
operator|)
operator|)
operator|+
name|minValue
expr_stmt|;
break|break;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|percents
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|getLogger
argument_list|(
name|HDRPercentileRanksIT
operator|.
name|class
argument_list|)
operator|.
name|info
argument_list|(
literal|"Using percentiles={}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|percents
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|percents
return|;
block|}
DECL|method|randomSignificantDigits
specifier|private
specifier|static
name|int
name|randomSignificantDigits
parameter_list|()
block|{
return|return
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
return|;
block|}
DECL|method|assertConsistent
specifier|private
name|void
name|assertConsistent
parameter_list|(
name|double
index|[]
name|pcts
parameter_list|,
name|PercentileRanks
name|percentiles
parameter_list|,
name|long
name|minValue
parameter_list|,
name|long
name|maxValue
parameter_list|,
name|int
name|numberSigDigits
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Percentile
argument_list|>
name|percentileList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|percentiles
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pcts
operator|.
name|length
argument_list|,
name|percentileList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pcts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Percentile
name|percentile
init|=
name|percentileList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentile
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|pcts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentile
operator|.
name|getPercent
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentile
operator|.
name|getPercent
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|100.0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|percentile
operator|.
name|getPercent
argument_list|()
operator|==
literal|0
condition|)
block|{
name|double
name|allowedError
init|=
name|minValue
operator|/
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|numberSigDigits
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentile
operator|.
name|getValue
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|minValue
operator|+
name|allowedError
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|percentile
operator|.
name|getPercent
argument_list|()
operator|==
literal|100
condition|)
block|{
name|double
name|allowedError
init|=
name|maxValue
operator|/
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
name|numberSigDigits
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentile
operator|.
name|getValue
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|maxValue
operator|-
name|allowedError
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|percentileList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertThat
argument_list|(
name|percentileList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|percentileList
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testEmptyAggregation
specifier|public
name|void
name|testEmptyAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|interval
argument_list|(
literal|1l
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|percentiles
argument_list|(
literal|10
argument_list|,
literal|15
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|PercentileRanks
name|reversePercentiles
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentile_ranks"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|percent
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|percent
argument_list|(
literal|15
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testUnmapped
specifier|public
name|void
name|testUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|percentiles
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|PercentileRanks
name|reversePercentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentile_ranks"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|percent
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|percent
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|percent
argument_list|(
literal|15
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reversePercentiles
operator|.
name|percent
argument_list|(
literal|100
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSingleValuedField
specifier|public
name|void
name|testSingleValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSingleValuedField_getProperty
specifier|public
name|void
name|testSingleValuedField_getProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|global
argument_list|(
literal|"global"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Global
name|global
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"global"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|global
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"global"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getAggregations
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PercentileRanks
name|percentiles
init|=
name|global
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentiles
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentiles
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"percentile_ranks"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|PercentileRanks
operator|)
name|global
operator|.
name|getProperty
argument_list|(
literal|"percentile_ranks"
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|percentiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleValuedFieldOutsideRange
specifier|public
name|void
name|testSingleValuedFieldOutsideRange
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
operator|new
name|double
index|[]
block|{
name|minValue
operator|-
literal|1
block|,
name|maxValue
operator|+
literal|1
block|}
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSingleValuedField_PartiallyUnmapped
specifier|public
name|void
name|testSingleValuedField_PartiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSingleValuedField_WithValueScript
specifier|public
name|void
name|testSingleValuedField_WithValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value - 1"
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSingleValuedField_WithValueScript_WithParams
specifier|public
name|void
name|testSingleValuedField_WithValueScript_WithParams
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"dec"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value - dec"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testMultiValuedField
specifier|public
name|void
name|testMultiValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValues
argument_list|,
name|maxValues
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"values"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValues
argument_list|,
name|maxValues
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testMultiValuedField_WithValueScript
specifier|public
name|void
name|testMultiValuedField_WithValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValues
operator|-
literal|1
argument_list|,
name|maxValues
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"values"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value - 1"
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValues
operator|-
literal|1
argument_list|,
name|maxValues
operator|-
literal|1
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuedField_WithValueScript_Reverse
specifier|public
name|void
name|testMultiValuedField_WithValueScript_Reverse
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
literal|20
operator|-
name|maxValues
argument_list|,
literal|20
operator|-
name|minValues
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"values"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"20 - _value"
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
literal|20
operator|-
name|maxValues
argument_list|,
literal|20
operator|-
name|minValues
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testMultiValuedField_WithValueScript_WithParams
specifier|public
name|void
name|testMultiValuedField_WithValueScript_WithParams
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"dec"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValues
operator|-
literal|1
argument_list|,
name|maxValues
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|field
argument_list|(
literal|"values"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value - dec"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValues
operator|-
literal|1
argument_list|,
name|maxValues
operator|-
literal|1
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testScript_SingleValued
specifier|public
name|void
name|testScript_SingleValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
argument_list|,
name|maxValue
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['value'].value"
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testScript_SingleValued_WithParams
specifier|public
name|void
name|testScript_SingleValued_WithParams
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"dec"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['value'].value - dec"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testScript_ExplicitSingleValued_WithParams
specifier|public
name|void
name|testScript_ExplicitSingleValued_WithParams
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"dec"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['value'].value - dec"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValue
operator|-
literal|1
argument_list|,
name|maxValue
operator|-
literal|1
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testScript_MultiValued
specifier|public
name|void
name|testScript_MultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValues
argument_list|,
name|maxValues
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['values'].values"
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValues
argument_list|,
name|maxValues
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testScript_ExplicitMultiValued
specifier|public
name|void
name|testScript_ExplicitMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValues
argument_list|,
name|maxValues
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['values'].values"
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValues
argument_list|,
name|maxValues
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testScript_MultiValued_WithParams
specifier|public
name|void
name|testScript_MultiValued_WithParams
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"dec"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|pcts
init|=
name|randomPercents
argument_list|(
name|minValues
operator|-
literal|1
argument_list|,
name|maxValues
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"List values = doc['values'].values; double[] res = new double[values.size()]; for (int i = 0; i< res.length; i++) { res[i] = values.get(i) - dec; }; return res;"
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|percentiles
argument_list|(
name|pcts
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|PercentileRanks
name|percentiles
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|assertConsistent
argument_list|(
name|pcts
argument_list|,
name|percentiles
argument_list|,
name|minValues
operator|-
literal|1
argument_list|,
name|maxValues
operator|-
literal|1
argument_list|,
name|sigDigits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderBySubAggregation
specifier|public
name|void
name|testOrderBySubAggregation
parameter_list|()
block|{
name|int
name|sigDigits
init|=
name|randomSignificantDigits
argument_list|()
decl_stmt|;
name|boolean
name|asc
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|interval
argument_list|(
literal|2l
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|percentileRanks
argument_list|(
literal|"percentile_ranks"
argument_list|)
operator|.
name|method
argument_list|(
name|PercentilesMethod
operator|.
name|HDR
argument_list|)
operator|.
name|numberOfSignificantValueDigits
argument_list|(
name|sigDigits
argument_list|)
operator|.
name|percentiles
argument_list|(
literal|99
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
name|Order
operator|.
name|aggregation
argument_list|(
literal|"percentile_ranks"
argument_list|,
literal|"99"
argument_list|,
name|asc
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|double
name|previous
init|=
name|asc
condition|?
name|Double
operator|.
name|NEGATIVE_INFINITY
else|:
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
for|for
control|(
name|Histogram
operator|.
name|Bucket
name|bucket
range|:
name|histo
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|PercentileRanks
name|percentiles
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"percentile_ranks"
argument_list|)
decl_stmt|;
name|double
name|p99
init|=
name|percentiles
operator|.
name|percent
argument_list|(
literal|99
argument_list|)
decl_stmt|;
if|if
condition|(
name|asc
condition|)
block|{
name|assertThat
argument_list|(
name|p99
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|previous
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|p99
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|previous
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|p99
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

