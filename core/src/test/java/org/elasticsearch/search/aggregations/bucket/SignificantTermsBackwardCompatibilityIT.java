begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTermsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|StringTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESBackcompatTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SignificantTermsBackwardCompatibilityIT
specifier|public
class|class
name|SignificantTermsBackwardCompatibilityIT
extends|extends
name|ESBackcompatTestCase
block|{
DECL|field|INDEX_NAME
specifier|static
specifier|final
name|String
name|INDEX_NAME
init|=
literal|"testidx"
decl_stmt|;
DECL|field|DOC_TYPE
specifier|static
specifier|final
name|String
name|DOC_TYPE
init|=
literal|"doc"
decl_stmt|;
DECL|field|TEXT_FIELD
specifier|static
specifier|final
name|String
name|TEXT_FIELD
init|=
literal|"text"
decl_stmt|;
DECL|field|CLASS_FIELD
specifier|static
specifier|final
name|String
name|CLASS_FIELD
init|=
literal|"class"
decl_stmt|;
comment|/**      * Test for streaming significant terms buckets to old es versions.      */
DECL|method|testBucketStreaming
specifier|public
name|void
name|testBucketStreaming
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"testBucketStreaming: indexing documents"
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
literal|"string"
else|:
literal|"long"
decl_stmt|;
name|String
name|settings
init|=
literal|"{\"index.number_of_shards\": 5, \"index.number_of_replicas\": 0}"
decl_stmt|;
name|index01Docs
argument_list|(
name|type
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logClusterState
argument_list|()
expr_stmt|;
name|checkSignificantTermsAggregationCorrect
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"testBucketStreaming: done testing significant terms while upgrading"
argument_list|)
expr_stmt|;
block|}
DECL|method|index01Docs
specifier|private
name|void
name|index01Docs
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|settings
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|String
name|mappings
init|=
literal|"{\"doc\": {\"properties\":{\""
operator|+
name|TEXT_FIELD
operator|+
literal|"\": {\"type\":\""
operator|+
name|type
operator|+
literal|"\"},\""
operator|+
name|CLASS_FIELD
operator|+
literal|"\": {\"type\":\"string\"}}}}"
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|gb
init|=
block|{
literal|"0"
block|,
literal|"1"
block|}
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexRequestBuilderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"1"
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"1"
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"0"
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"0"
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|gb
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|gb
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"7"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
literal|"0"
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilderList
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSignificantTermsAggregationCorrect
specifier|private
name|void
name|checkSignificantTermsAggregationCorrect
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setTypes
argument_list|(
name|DOC_TYPE
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|TermsBuilder
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
name|CLASS_FIELD
argument_list|)
operator|.
name|subAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"sig_terms"
argument_list|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|StringTerms
name|classes
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|classBucket
range|:
name|classes
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|aggs
init|=
name|classBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aggs
operator|.
name|containsKey
argument_list|(
literal|"sig_terms"
argument_list|)
argument_list|)
expr_stmt|;
name|SignificantTerms
name|agg
init|=
operator|(
name|SignificantTerms
operator|)
name|aggs
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|agg
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|term
init|=
name|agg
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|String
name|classTerm
init|=
name|classBucket
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|classTerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

