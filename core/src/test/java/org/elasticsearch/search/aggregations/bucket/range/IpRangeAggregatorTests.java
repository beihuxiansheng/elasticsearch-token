begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.range
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|InetAddressPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|IpFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|ip
operator|.
name|IpRangeAggregationBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|IpRangeAggregatorTests
specifier|public
class|class
name|IpRangeAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|method|randomIp
specifier|private
specifier|static
name|InetAddress
name|randomIp
parameter_list|(
name|boolean
name|v4
parameter_list|,
name|boolean
name|withNull
parameter_list|)
block|{
if|if
condition|(
name|withNull
operator|&&
name|rarely
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
if|if
condition|(
name|v4
condition|)
block|{
name|byte
index|[]
name|ipv4
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|ipv4
argument_list|)
expr_stmt|;
return|return
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|ipv4
argument_list|)
return|;
block|}
else|else
block|{
name|byte
index|[]
name|ipv6
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|ipv6
argument_list|)
expr_stmt|;
return|return
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|ipv6
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
DECL|method|isInRange
specifier|private
specifier|static
name|boolean
name|isInRange
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|BytesRef
name|from
parameter_list|,
name|BytesRef
name|to
parameter_list|)
block|{
if|if
condition|(
name|to
operator|==
literal|null
operator|||
name|to
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>
literal|0
operator|&&
operator|(
name|from
operator|==
literal|null
operator|||
name|from
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<=
literal|0
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|testRanges
specifier|public
name|void
name|testRanges
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|v4
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|IpRangeAggregationBuilder
name|builder
init|=
operator|new
name|IpRangeAggregationBuilder
argument_list|(
literal|"test_agg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|numRanges
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Tuple
argument_list|<
name|BytesRef
argument_list|,
name|BytesRef
argument_list|>
index|[]
name|requestedRanges
init|=
operator|new
name|Tuple
index|[
name|numRanges
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRanges
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
argument_list|<
name|InetAddress
argument_list|,
name|BytesRef
argument_list|>
index|[]
name|arr
init|=
operator|new
name|Tuple
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|InetAddress
name|addr
init|=
name|randomIp
argument_list|(
name|v4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|arr
index|[
name|j
index|]
operator|=
operator|new
name|Tuple
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arr
index|[
name|j
index|]
operator|=
operator|new
name|Tuple
argument_list|(
name|addr
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|addr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|arr
argument_list|,
parameter_list|(
name|t1
parameter_list|,
name|t2
parameter_list|)
lambda|->
name|t1
operator|.
name|v2
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|v2
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addRange
argument_list|(
name|NetworkAddress
operator|.
name|format
argument_list|(
name|arr
index|[
literal|0
index|]
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|arr
index|[
literal|1
index|]
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requestedRanges
index|[
name|i
index|]
operator|=
operator|new
name|Tuple
argument_list|(
name|arr
index|[
literal|0
index|]
operator|.
name|v2
argument_list|()
argument_list|,
name|arr
index|[
literal|1
index|]
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|requestedRanges
argument_list|,
parameter_list|(
name|t1
parameter_list|,
name|t2
parameter_list|)
lambda|->
name|t1
operator|.
name|v1
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[
name|numRanges
index|]
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
name|values
init|=
operator|new
name|BytesRef
index|[
name|numValues
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|randomIp
argument_list|(
name|v4
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|values
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numRanges
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numValues
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|isInRange
argument_list|(
name|values
index|[
name|k
index|]
argument_list|,
name|requestedRanges
index|[
name|j
index|]
operator|.
name|v1
argument_list|()
argument_list|,
name|requestedRanges
index|[
name|j
index|]
operator|.
name|v2
argument_list|()
argument_list|)
condition|)
block|{
name|expectedCounts
index|[
name|j
index|]
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|MappedFieldType
name|fieldType
init|=
operator|new
name|IpFieldMapper
operator|.
name|IpFieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|InternalBinaryRange
name|range
init|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numRanges
argument_list|,
name|range
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|range
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
argument_list|<
name|BytesRef
argument_list|,
name|BytesRef
argument_list|>
name|expected
init|=
name|requestedRanges
index|[
name|i
index|]
decl_stmt|;
name|Range
operator|.
name|Bucket
name|bucket
init|=
name|range
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValueFormat
operator|.
name|IP
operator|.
name|format
argument_list|(
name|expected
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|,
name|bucket
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValueFormat
operator|.
name|IP
operator|.
name|format
argument_list|(
name|expected
operator|.
name|v2
argument_list|()
argument_list|)
argument_list|,
name|bucket
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCounts
index|[
name|i
index|]
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

