begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.geobounds
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geobounds
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LatLonDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|GeoPointFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomGeoGenerator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geobounds
operator|.
name|InternalGeoBoundsTests
operator|.
name|GEOHASH_TOLERANCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_class
DECL|class|GeoBoundsAggregatorTests
specifier|public
class|class
name|GeoBoundsAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|GeoBoundsAggregationBuilder
name|aggBuilder
init|=
operator|new
name|GeoBoundsAggregationBuilder
argument_list|(
literal|"my_agg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MappedFieldType
name|fieldType
init|=
operator|new
name|GeoPointFieldMapper
operator|.
name|GeoPointFieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|InternalGeoBounds
name|bounds
init|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggBuilder
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|bounds
operator|.
name|top
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|bounds
operator|.
name|bottom
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|bounds
operator|.
name|posLeft
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|bounds
operator|.
name|posRight
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|bounds
operator|.
name|negLeft
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|bounds
operator|.
name|negRight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|double
name|top
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|bottom
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|posLeft
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|posRight
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|double
name|negLeft
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|double
name|negRight
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|GeoPoint
name|point
init|=
name|RandomGeoGenerator
operator|.
name|randomPoint
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|point
operator|.
name|getLat
argument_list|()
operator|>
name|top
condition|)
block|{
name|top
operator|=
name|point
operator|.
name|getLat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|point
operator|.
name|getLat
argument_list|()
operator|<
name|bottom
condition|)
block|{
name|bottom
operator|=
name|point
operator|.
name|getLat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|point
operator|.
name|getLon
argument_list|()
operator|>=
literal|0
operator|&&
name|point
operator|.
name|getLon
argument_list|()
operator|<
name|posLeft
condition|)
block|{
name|posLeft
operator|=
name|point
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|point
operator|.
name|getLon
argument_list|()
operator|>=
literal|0
operator|&&
name|point
operator|.
name|getLon
argument_list|()
operator|>
name|posRight
condition|)
block|{
name|posRight
operator|=
name|point
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|point
operator|.
name|getLon
argument_list|()
operator|<
literal|0
operator|&&
name|point
operator|.
name|getLon
argument_list|()
operator|<
name|negLeft
condition|)
block|{
name|negLeft
operator|=
name|point
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|point
operator|.
name|getLon
argument_list|()
operator|<
literal|0
operator|&&
name|point
operator|.
name|getLon
argument_list|()
operator|>
name|negRight
condition|)
block|{
name|negRight
operator|=
name|point
operator|.
name|getLon
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LatLonDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|point
operator|.
name|getLat
argument_list|()
argument_list|,
name|point
operator|.
name|getLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|GeoBoundsAggregationBuilder
name|aggBuilder
init|=
operator|new
name|GeoBoundsAggregationBuilder
argument_list|(
literal|"my_agg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MappedFieldType
name|fieldType
init|=
operator|new
name|GeoPointFieldMapper
operator|.
name|GeoPointFieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|InternalGeoBounds
name|bounds
init|=
name|search
argument_list|(
name|searcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggBuilder
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bounds
operator|.
name|top
argument_list|,
name|closeTo
argument_list|(
name|top
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bounds
operator|.
name|bottom
argument_list|,
name|closeTo
argument_list|(
name|bottom
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bounds
operator|.
name|posLeft
argument_list|,
name|closeTo
argument_list|(
name|posLeft
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bounds
operator|.
name|posRight
argument_list|,
name|closeTo
argument_list|(
name|posRight
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bounds
operator|.
name|negRight
argument_list|,
name|closeTo
argument_list|(
name|negRight
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bounds
operator|.
name|negLeft
argument_list|,
name|closeTo
argument_list|(
name|negLeft
argument_list|,
name|GEOHASH_TOLERANCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

