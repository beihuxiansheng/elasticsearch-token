begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|LeafDocLookup
import|;
end_import

begin_comment
comment|/**  * Provides a number of dummy scripts for tests.  *  * Each script provided allows for an {@code inc} parameter which will  * be added to each value read from a document.  */
end_comment

begin_class
DECL|class|MetricAggScriptPlugin
specifier|public
class|class
name|MetricAggScriptPlugin
extends|extends
name|MockScriptPlugin
block|{
comment|/** The name of the script engine type this plugin provides. */
DECL|field|METRIC_SCRIPT_ENGINE
specifier|public
specifier|static
specifier|final
name|String
name|METRIC_SCRIPT_ENGINE
init|=
literal|"metric_scripts"
decl_stmt|;
comment|/** Script to take a field name in params and sum the values of the field. */
DECL|field|SUM_FIELD_PARAMS_SCRIPT
specifier|public
specifier|static
specifier|final
name|String
name|SUM_FIELD_PARAMS_SCRIPT
init|=
literal|"sum_field_params"
decl_stmt|;
comment|/** Script to sum the values of a field named {@code values}. */
DECL|field|SUM_VALUES_FIELD_SCRIPT
specifier|public
specifier|static
specifier|final
name|String
name|SUM_VALUES_FIELD_SCRIPT
init|=
literal|"sum_values_field"
decl_stmt|;
comment|/** Script to return the value of a field named {@code value}. */
DECL|field|VALUE_FIELD_SCRIPT
specifier|public
specifier|static
specifier|final
name|String
name|VALUE_FIELD_SCRIPT
init|=
literal|"value_field"
decl_stmt|;
comment|/** Script to return the {@code _value} provided by aggs framework. */
DECL|field|VALUE_SCRIPT
specifier|public
specifier|static
specifier|final
name|String
name|VALUE_SCRIPT
init|=
literal|"_value"
decl_stmt|;
annotation|@
name|Override
DECL|method|pluginScriptLang
specifier|public
name|String
name|pluginScriptLang
parameter_list|()
block|{
return|return
name|METRIC_SCRIPT_ENGINE
return|;
block|}
annotation|@
name|Override
DECL|method|pluginScripts
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pluginScripts
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|getInc
init|=
name|vars
lambda|->
block|{
if|if
condition|(
name|vars
operator|==
literal|null
operator|||
name|vars
operator|.
name|containsKey
argument_list|(
literal|"inc"
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"inc"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|BiFunction
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|String
argument_list|,
name|Object
argument_list|>
name|sum
init|=
parameter_list|(
name|vars
parameter_list|,
name|fieldname
parameter_list|)
lambda|->
block|{
name|int
name|inc
init|=
name|getInc
operator|.
name|apply
argument_list|(
name|vars
argument_list|)
decl_stmt|;
name|LeafDocLookup
name|docLookup
init|=
operator|(
name|LeafDocLookup
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|v
range|:
name|docLookup
operator|.
name|get
argument_list|(
name|fieldname
argument_list|)
control|)
block|{
name|values
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|v
operator|)
operator|.
name|longValue
argument_list|()
operator|+
name|inc
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|SUM_FIELD_PARAMS_SCRIPT
argument_list|,
name|vars
lambda|->
block|{
name|String
name|fieldname
init|=
operator|(
name|String
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
return|return
name|sum
operator|.
name|apply
argument_list|(
name|vars
argument_list|,
name|fieldname
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|SUM_VALUES_FIELD_SCRIPT
argument_list|,
name|vars
lambda|->
name|sum
operator|.
name|apply
argument_list|(
name|vars
argument_list|,
literal|"values"
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|VALUE_FIELD_SCRIPT
argument_list|,
name|vars
lambda|->
name|sum
operator|.
name|apply
argument_list|(
name|vars
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
name|VALUE_SCRIPT
argument_list|,
name|vars
lambda|->
block|{
name|int
name|inc
init|=
name|getInc
operator|.
name|apply
argument_list|(
name|vars
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_value"
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
operator|+
name|inc
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|scripts
return|;
block|}
block|}
end_class

end_unit

