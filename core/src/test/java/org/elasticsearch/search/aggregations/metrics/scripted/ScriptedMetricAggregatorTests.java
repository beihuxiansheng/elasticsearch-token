begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.scripted
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|scripted
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScoreAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContextRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_class
DECL|class|ScriptedMetricAggregatorTests
specifier|public
class|class
name|ScriptedMetricAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|field|AGG_NAME
specifier|private
specifier|static
specifier|final
name|String
name|AGG_NAME
init|=
literal|"scriptedMetric"
decl_stmt|;
DECL|field|INIT_SCRIPT
specifier|private
specifier|static
specifier|final
name|Script
name|INIT_SCRIPT
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
literal|"initScript"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|MAP_SCRIPT
specifier|private
specifier|static
specifier|final
name|Script
name|MAP_SCRIPT
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
literal|"mapScript"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|COMBINE_SCRIPT
specifier|private
specifier|static
specifier|final
name|Script
name|COMBINE_SCRIPT
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
literal|"combineScript"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|INIT_SCRIPT_SCORE
specifier|private
specifier|static
specifier|final
name|Script
name|INIT_SCRIPT_SCORE
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
literal|"initScriptScore"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|MAP_SCRIPT_SCORE
specifier|private
specifier|static
specifier|final
name|Script
name|MAP_SCRIPT_SCORE
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
literal|"mapScriptScore"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|COMBINE_SCRIPT_SCORE
specifier|private
specifier|static
specifier|final
name|Script
name|COMBINE_SCRIPT_SCORE
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
literal|"combineScriptScore"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|SCRIPTS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|SCRIPTS
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initMockScripts
specifier|public
specifier|static
name|void
name|initMockScripts
parameter_list|()
block|{
name|SCRIPTS
operator|.
name|put
argument_list|(
literal|"initScript"
argument_list|,
name|params
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agg
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
name|agg
operator|.
name|put
argument_list|(
literal|"collector"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|agg
return|;
block|}
argument_list|)
expr_stmt|;
name|SCRIPTS
operator|.
name|put
argument_list|(
literal|"mapScript"
argument_list|,
name|params
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agg
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|agg
operator|.
name|get
argument_list|(
literal|"collector"
argument_list|)
operator|)
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// just add 1 for each doc the script is run on
return|return
name|agg
return|;
block|}
argument_list|)
expr_stmt|;
name|SCRIPTS
operator|.
name|put
argument_list|(
literal|"combineScript"
argument_list|,
name|params
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agg
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|agg
operator|.
name|get
argument_list|(
literal|"collector"
argument_list|)
operator|)
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|Integer
operator|::
name|intValue
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|SCRIPTS
operator|.
name|put
argument_list|(
literal|"initScriptScore"
argument_list|,
name|params
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agg
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
name|agg
operator|.
name|put
argument_list|(
literal|"collector"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|agg
return|;
block|}
argument_list|)
expr_stmt|;
name|SCRIPTS
operator|.
name|put
argument_list|(
literal|"mapScriptScore"
argument_list|,
name|params
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agg
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|agg
operator|.
name|get
argument_list|(
literal|"collector"
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ScoreAccessor
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"_score"
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|agg
return|;
block|}
argument_list|)
expr_stmt|;
name|SCRIPTS
operator|.
name|put
argument_list|(
literal|"combineScriptScore"
argument_list|,
name|params
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agg
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|params
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|agg
operator|.
name|get
argument_list|(
literal|"collector"
argument_list|)
operator|)
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|Double
operator|::
name|doubleValue
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNoDocs
specifier|public
name|void
name|testNoDocs
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
init|)
block|{
try|try
init|(
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
init|)
block|{
comment|// intentionally not writing any docs
block|}
try|try
init|(
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
init|)
block|{
name|ScriptedMetricAggregationBuilder
name|aggregationBuilder
init|=
operator|new
name|ScriptedMetricAggregationBuilder
argument_list|(
name|AGG_NAME
argument_list|)
decl_stmt|;
name|aggregationBuilder
operator|.
name|mapScript
argument_list|(
name|MAP_SCRIPT
argument_list|)
expr_stmt|;
comment|// map script is mandatory, even if its not used in this case
name|ScriptedMetric
name|scriptedMetric
init|=
name|search
argument_list|(
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggregationBuilder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AGG_NAME
argument_list|,
name|scriptedMetric
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|HashMap
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
operator|)
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * without combine script, the "_aggs" map should contain a list of the size of the number of documents matched      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testScriptedMetricWithoutCombine
specifier|public
name|void
name|testScriptedMetricWithoutCombine
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|int
name|numDocs
init|=
name|randomInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|singleton
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"number"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
init|)
block|{
name|ScriptedMetricAggregationBuilder
name|aggregationBuilder
init|=
operator|new
name|ScriptedMetricAggregationBuilder
argument_list|(
name|AGG_NAME
argument_list|)
decl_stmt|;
name|aggregationBuilder
operator|.
name|initScript
argument_list|(
name|INIT_SCRIPT
argument_list|)
operator|.
name|mapScript
argument_list|(
name|MAP_SCRIPT
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetric
init|=
name|search
argument_list|(
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggregationBuilder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AGG_NAME
argument_list|,
name|scriptedMetric
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agg
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|agg
operator|.
name|get
argument_list|(
literal|"collector"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * test that combine script sums the list produced by the "mapScript"      */
DECL|method|testScriptedMetricWithCombine
specifier|public
name|void
name|testScriptedMetricWithCombine
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|Integer
name|numDocs
init|=
name|randomInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|singleton
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"number"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
init|)
block|{
name|ScriptedMetricAggregationBuilder
name|aggregationBuilder
init|=
operator|new
name|ScriptedMetricAggregationBuilder
argument_list|(
name|AGG_NAME
argument_list|)
decl_stmt|;
name|aggregationBuilder
operator|.
name|initScript
argument_list|(
name|INIT_SCRIPT
argument_list|)
operator|.
name|mapScript
argument_list|(
name|MAP_SCRIPT
argument_list|)
operator|.
name|combineScript
argument_list|(
name|COMBINE_SCRIPT
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetric
init|=
name|search
argument_list|(
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggregationBuilder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AGG_NAME
argument_list|,
name|scriptedMetric
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * test that uses the score of the documents      */
DECL|method|testScriptedMetricWithCombineAccessesScores
specifier|public
name|void
name|testScriptedMetricWithCombineAccessesScores
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|Integer
name|numDocs
init|=
name|randomInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|singleton
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"number"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
init|)
block|{
name|ScriptedMetricAggregationBuilder
name|aggregationBuilder
init|=
operator|new
name|ScriptedMetricAggregationBuilder
argument_list|(
name|AGG_NAME
argument_list|)
decl_stmt|;
name|aggregationBuilder
operator|.
name|initScript
argument_list|(
name|INIT_SCRIPT_SCORE
argument_list|)
operator|.
name|mapScript
argument_list|(
name|MAP_SCRIPT_SCORE
argument_list|)
operator|.
name|combineScript
argument_list|(
name|COMBINE_SCRIPT_SCORE
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetric
init|=
name|search
argument_list|(
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|aggregationBuilder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AGG_NAME
argument_list|,
name|scriptedMetric
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
comment|// all documents have score of 1.0
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
name|numDocs
argument_list|,
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * We cannot use Mockito for mocking QueryShardContext in this case because      * script-related methods (e.g. QueryShardContext#getLazyExecutableScript)      * is final and cannot be mocked      */
annotation|@
name|Override
DECL|method|queryShardContextMock
specifier|protected
name|QueryShardContext
name|queryShardContextMock
parameter_list|(
name|MapperService
name|mapperService
parameter_list|,
specifier|final
name|MappedFieldType
index|[]
name|fieldTypes
parameter_list|,
name|CircuitBreakerService
name|circuitBreakerService
parameter_list|)
block|{
name|MockScriptEngine
name|scriptEngine
init|=
operator|new
name|MockScriptEngine
argument_list|(
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
name|SCRIPTS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngine
argument_list|>
name|engines
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|scriptEngine
operator|.
name|getType
argument_list|()
argument_list|,
name|scriptEngine
argument_list|)
decl_stmt|;
name|ScriptContextRegistry
name|scriptContextRegistry
init|=
operator|new
name|ScriptContextRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|ScriptService
name|scriptService
decl_stmt|;
try|try
block|{
name|scriptService
operator|=
operator|new
name|ScriptService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|engines
argument_list|,
name|scriptContextRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|QueryShardContext
argument_list|(
literal|0
argument_list|,
name|mapperService
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mapperService
argument_list|,
literal|null
argument_list|,
name|scriptService
argument_list|,
name|xContentRegistry
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|System
operator|::
name|currentTimeMillis
argument_list|)
return|;
block|}
block|}
end_class

end_unit

