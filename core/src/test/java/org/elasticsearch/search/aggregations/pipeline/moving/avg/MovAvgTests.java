begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.moving.avg
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|moving
operator|.
name|avg
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|BasePipelineAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
operator|.
name|GapPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|MovAvgPipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|MovAvgPipelineAggregator
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|EwmaModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|HoltLinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|HoltWintersModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|HoltWintersModel
operator|.
name|SeasonalityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|LinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|SimpleModel
import|;
end_import

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_class
DECL|class|MovAvgTests
specifier|public
class|class
name|MovAvgTests
extends|extends
name|BasePipelineAggregationTestCase
argument_list|<
name|MovAvgPipelineAggregator
operator|.
name|Factory
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestAggregatorFactory
specifier|protected
name|Factory
name|createTestAggregatorFactory
parameter_list|()
block|{
name|String
name|name
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketsPaths
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|bucketsPaths
index|[
literal|0
index|]
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Factory
name|factory
init|=
operator|new
name|Factory
argument_list|(
name|name
argument_list|,
name|bucketsPaths
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|format
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|gapPolicy
argument_list|(
name|randomFrom
argument_list|(
name|GapPolicy
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|randomInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|factory
operator|.
name|model
argument_list|(
operator|new
name|SimpleModel
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|factory
operator|.
name|model
argument_list|(
operator|new
name|LinearModel
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|model
argument_list|(
operator|new
name|EwmaModel
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|.
name|model
argument_list|(
operator|new
name|EwmaModel
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|model
argument_list|(
operator|new
name|HoltLinearModel
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|.
name|model
argument_list|(
operator|new
name|HoltLinearModel
argument_list|(
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
default|default:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|model
argument_list|(
operator|new
name|HoltWintersModel
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|period
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|factory
operator|.
name|model
argument_list|(
operator|new
name|HoltWintersModel
argument_list|(
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|period
argument_list|,
name|randomFrom
argument_list|(
name|SeasonalityType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|window
argument_list|(
name|randomIntBetween
argument_list|(
literal|2
operator|*
name|period
argument_list|,
literal|200
operator|*
name|period
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|factory
operator|.
name|predict
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|factory
operator|.
name|model
argument_list|()
operator|.
name|canBeMinimized
argument_list|()
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|minimize
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
block|}
end_class

end_unit

