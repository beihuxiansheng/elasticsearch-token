begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|ExtendedBounds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Stats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|Sum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
operator|.
name|GapPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|derivative
operator|.
name|Derivative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|SimpleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|filters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|stats
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|sum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|avg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
operator|.
name|derivative
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
operator|.
name|movingAvg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|nullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|DerivativeIT
specifier|public
class|class
name|DerivativeIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|SINGLE_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_FIELD_NAME
init|=
literal|"l_value"
decl_stmt|;
DECL|field|interval
specifier|private
specifier|static
name|int
name|interval
decl_stmt|;
DECL|field|numValueBuckets
specifier|private
specifier|static
name|int
name|numValueBuckets
decl_stmt|;
DECL|field|numFirstDerivValueBuckets
specifier|private
specifier|static
name|int
name|numFirstDerivValueBuckets
decl_stmt|;
DECL|field|numSecondDerivValueBuckets
specifier|private
specifier|static
name|int
name|numSecondDerivValueBuckets
decl_stmt|;
DECL|field|valueCounts
specifier|private
specifier|static
name|long
index|[]
name|valueCounts
decl_stmt|;
DECL|field|firstDerivValueCounts
specifier|private
specifier|static
name|long
index|[]
name|firstDerivValueCounts
decl_stmt|;
DECL|field|secondDerivValueCounts
specifier|private
specifier|static
name|long
index|[]
name|secondDerivValueCounts
decl_stmt|;
DECL|field|valueCounts_empty
specifier|private
specifier|static
name|Long
index|[]
name|valueCounts_empty
decl_stmt|;
DECL|field|numDocsEmptyIdx
specifier|private
specifier|static
name|long
name|numDocsEmptyIdx
decl_stmt|;
DECL|field|firstDerivValueCounts_empty
specifier|private
specifier|static
name|Double
index|[]
name|firstDerivValueCounts_empty
decl_stmt|;
comment|// expected bucket values for random setup with gaps
DECL|field|numBuckets_empty_rnd
specifier|private
specifier|static
name|int
name|numBuckets_empty_rnd
decl_stmt|;
DECL|field|valueCounts_empty_rnd
specifier|private
specifier|static
name|Long
index|[]
name|valueCounts_empty_rnd
decl_stmt|;
DECL|field|firstDerivValueCounts_empty_rnd
specifier|private
specifier|static
name|Double
index|[]
name|firstDerivValueCounts_empty_rnd
decl_stmt|;
DECL|field|numDocsEmptyIdx_rnd
specifier|private
specifier|static
name|long
name|numDocsEmptyIdx_rnd
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|interval
operator|=
literal|5
expr_stmt|;
name|numValueBuckets
operator|=
name|randomIntBetween
argument_list|(
literal|6
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|valueCounts
operator|=
operator|new
name|long
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|valueCounts
index|[
name|i
index|]
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
name|numFirstDerivValueBuckets
operator|=
name|numValueBuckets
operator|-
literal|1
expr_stmt|;
name|firstDerivValueCounts
operator|=
operator|new
name|long
index|[
name|numFirstDerivValueBuckets
index|]
expr_stmt|;
name|Long
name|lastValueCount
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|long
name|thisValue
init|=
name|valueCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|lastValueCount
operator|!=
literal|null
condition|)
block|{
name|long
name|diff
init|=
name|thisValue
operator|-
name|lastValueCount
decl_stmt|;
name|firstDerivValueCounts
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|diff
expr_stmt|;
block|}
name|lastValueCount
operator|=
name|thisValue
expr_stmt|;
block|}
name|numSecondDerivValueBuckets
operator|=
name|numFirstDerivValueBuckets
operator|-
literal|1
expr_stmt|;
name|secondDerivValueCounts
operator|=
operator|new
name|long
index|[
name|numSecondDerivValueBuckets
index|]
expr_stmt|;
name|Long
name|lastFirstDerivativeValueCount
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFirstDerivValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|long
name|thisFirstDerivativeValue
init|=
name|firstDerivValueCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|lastFirstDerivativeValueCount
operator|!=
literal|null
condition|)
block|{
name|long
name|diff
init|=
name|thisFirstDerivativeValue
operator|-
name|lastFirstDerivativeValueCount
decl_stmt|;
name|secondDerivValueCounts
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|diff
expr_stmt|;
block|}
name|lastFirstDerivativeValueCount
operator|=
name|thisFirstDerivativeValue
expr_stmt|;
block|}
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|docs
init|=
literal|0
init|;
name|docs
operator|<
name|valueCounts
index|[
name|i
index|]
condition|;
name|docs
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|(
name|i
operator|*
name|interval
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// setup for index with empty buckets
name|valueCounts_empty
operator|=
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|1L
block|,
literal|2L
block|,
literal|0L
block|,
literal|2L
block|,
literal|2L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|,
literal|3L
block|,
literal|2L
block|,
literal|1L
block|}
expr_stmt|;
name|firstDerivValueCounts_empty
operator|=
operator|new
name|Double
index|[]
block|{
literal|null
block|,
literal|0d
block|,
literal|1d
block|,
operator|-
literal|2d
block|,
literal|2d
block|,
literal|0d
block|,
operator|-
literal|2d
block|,
literal|0d
block|,
literal|0d
block|,
literal|3d
block|,
operator|-
literal|1d
block|,
operator|-
literal|1d
block|}
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCounts_empty
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|docs
init|=
literal|0
init|;
name|docs
operator|<
name|valueCounts_empty
index|[
name|i
index|]
condition|;
name|docs
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"empty_bucket_idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numDocsEmptyIdx
operator|++
expr_stmt|;
block|}
block|}
comment|// randomized setup for index with empty buckets
name|numBuckets_empty_rnd
operator|=
name|randomIntBetween
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|valueCounts_empty_rnd
operator|=
operator|new
name|Long
index|[
name|numBuckets_empty_rnd
index|]
expr_stmt|;
name|firstDerivValueCounts_empty_rnd
operator|=
operator|new
name|Double
index|[
name|numBuckets_empty_rnd
index|]
expr_stmt|;
name|firstDerivValueCounts_empty_rnd
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"empty_bucket_idx_rnd"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBuckets_empty_rnd
condition|;
name|i
operator|++
control|)
block|{
name|valueCounts_empty_rnd
index|[
name|i
index|]
operator|=
operator|(
name|long
operator|)
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// make approximately half of the buckets empty
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
name|valueCounts_empty_rnd
index|[
name|i
index|]
operator|=
literal|0L
expr_stmt|;
for|for
control|(
name|int
name|docs
init|=
literal|0
init|;
name|docs
operator|<
name|valueCounts_empty_rnd
index|[
name|i
index|]
condition|;
name|docs
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"empty_bucket_idx_rnd"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|newDocBuilder
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numDocsEmptyIdx_rnd
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|firstDerivValueCounts_empty_rnd
index|[
name|i
index|]
operator|=
operator|(
name|double
operator|)
name|valueCounts_empty_rnd
index|[
name|i
index|]
operator|-
name|valueCounts_empty_rnd
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
DECL|method|newDocBuilder
specifier|private
name|XContentBuilder
name|newDocBuilder
parameter_list|(
name|int
name|singleValueFieldValue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|singleValueFieldValue
argument_list|)
operator|.
name|endObject
argument_list|()
return|;
block|}
comment|/**      * test first and second derivative on the sing      */
DECL|method|testDocCountDerivative
specifier|public
name|void
name|testDocCountDerivative
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"2nd_deriv"
argument_list|,
literal|"deriv"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|valueCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|firstDerivValueCounts
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SimpleValue
name|docCount2ndDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"2nd_deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|docCount2ndDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCount2ndDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|secondDerivValueCounts
index|[
name|i
operator|-
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCount2ndDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * test first and second derivative on the sing      */
DECL|method|testSingleValuedField_normalised
specifier|public
name|void
name|testSingleValuedField_normalised
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|unit
argument_list|(
literal|"1ms"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"2nd_deriv"
argument_list|,
literal|"deriv"
argument_list|)
operator|.
name|unit
argument_list|(
literal|"10ms"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|valueCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Derivative
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|(
name|firstDerivValueCounts
index|[
name|i
operator|-
literal|1
index|]
operator|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|normalizedValue
argument_list|()
argument_list|,
name|closeTo
argument_list|(
call|(
name|double
call|)
argument_list|(
name|firstDerivValueCounts
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
operator|/
literal|5
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Derivative
name|docCount2ndDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"2nd_deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|docCount2ndDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCount2ndDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|(
name|secondDerivValueCounts
index|[
name|i
operator|-
literal|2
index|]
operator|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCount2ndDeriv
operator|.
name|normalizedValue
argument_list|()
argument_list|,
name|closeTo
argument_list|(
call|(
name|double
call|)
argument_list|(
name|secondDerivValueCounts
index|[
name|i
operator|-
literal|2
index|]
argument_list|)
operator|*
literal|2
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCount2ndDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSingleValueAggDerivative
specifier|public
name|void
name|testSingleValueAggDerivative
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|propertiesKeys
init|=
operator|(
name|Object
index|[]
operator|)
name|deriv
operator|.
name|getProperty
argument_list|(
literal|"_key"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesDocCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|deriv
operator|.
name|getProperty
argument_list|(
literal|"_count"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesSumCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|deriv
operator|.
name|getProperty
argument_list|(
literal|"sum.value"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<
name|Bucket
argument_list|>
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|expectedSumPreviousBucket
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// start value, gets
comment|// overwritten
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|valueCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|expectedSum
init|=
name|valueCounts
index|[
name|i
index|]
operator|*
operator|(
name|i
operator|*
name|interval
operator|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|expectedSum
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|sumDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|sumDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|sumDerivValue
init|=
name|expectedSum
operator|-
name|expectedSumPreviousBucket
decl_stmt|;
name|assertThat
argument_list|(
name|sumDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|sumDerivValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|bucket
operator|.
name|getProperty
argument_list|(
literal|"histo"
argument_list|,
name|AggregationPath
operator|.
name|parse
argument_list|(
literal|"deriv.value"
argument_list|)
operator|.
name|getPathElementsAsStringList
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|sumDerivValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|sumDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expectedSumPreviousBucket
operator|=
name|expectedSum
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesKeys
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|valueCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|propertiesSumCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|expectedSum
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultiValueAggDerivative
specifier|public
name|void
name|testMultiValueAggDerivative
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|stats
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"stats.sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|propertiesKeys
init|=
operator|(
name|Object
index|[]
operator|)
name|deriv
operator|.
name|getProperty
argument_list|(
literal|"_key"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesDocCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|deriv
operator|.
name|getProperty
argument_list|(
literal|"_count"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesSumCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|deriv
operator|.
name|getProperty
argument_list|(
literal|"stats.sum"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<
name|Bucket
argument_list|>
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|expectedSumPreviousBucket
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// start value, gets
comment|// overwritten
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|valueCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Stats
name|stats
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|expectedSum
init|=
name|valueCounts
index|[
name|i
index|]
operator|*
operator|(
name|i
operator|*
name|interval
operator|)
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getSum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|expectedSum
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|sumDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|sumDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|sumDerivValue
init|=
name|expectedSum
operator|-
name|expectedSumPreviousBucket
decl_stmt|;
name|assertThat
argument_list|(
name|sumDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|sumDerivValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|bucket
operator|.
name|getProperty
argument_list|(
literal|"histo"
argument_list|,
name|AggregationPath
operator|.
name|parse
argument_list|(
literal|"deriv.value"
argument_list|)
operator|.
name|getPathElementsAsStringList
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|sumDerivValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|sumDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expectedSumPreviousBucket
operator|=
name|expectedSum
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesKeys
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
operator|*
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|valueCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|propertiesSumCounts
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|expectedSum
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUnmapped
specifier|public
name|void
name|testUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartiallyUnmapped
specifier|public
name|void
name|testPartiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|valueCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|firstDerivValueCounts
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDocCountDerivativeWithGaps
specifier|public
name|void
name|testDocCountDerivativeWithGaps
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocsEmptyIdx
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|valueCounts_empty
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCounts_empty
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
argument_list|,
name|valueCounts_empty
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDerivValueCounts_empty
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstDerivValueCounts_empty
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDocCountDerivativeWithGaps_random
specifier|public
name|void
name|testDocCountDerivativeWithGaps_random
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx_rnd"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|new
name|ExtendedBounds
argument_list|(
literal|0L
argument_list|,
operator|(
name|long
operator|)
name|numBuckets_empty_rnd
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|randomFrom
argument_list|(
name|GapPolicy
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocsEmptyIdx_rnd
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numBuckets_empty_rnd
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCounts_empty_rnd
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
argument_list|,
name|valueCounts_empty_rnd
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDerivValueCounts_empty_rnd
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstDerivValueCounts_empty_rnd
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDocCountDerivativeWithGaps_insertZeros
specifier|public
name|void
name|testDocCountDerivativeWithGaps_insertZeros
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocsEmptyIdx
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|valueCounts_empty
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCounts_empty
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
operator|+
literal|": "
argument_list|,
name|bucket
argument_list|,
name|i
argument_list|,
name|valueCounts_empty
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDerivValueCounts_empty
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstDerivValueCounts_empty
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSingleValueAggDerivativeWithGaps
specifier|public
name|void
name|testSingleValueAggDerivativeWithGaps
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocsEmptyIdx
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|valueCounts_empty
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastSumValue
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCounts_empty
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
argument_list|,
name|valueCounts_empty
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|double
name|thisSumValue
init|=
name|sum
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|bucket
operator|.
name|getDocCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|thisSumValue
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
name|SimpleValue
name|sumDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|sumDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|expectedDerivative
init|=
name|thisSumValue
operator|-
name|lastSumValue
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|expectedDerivative
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|sumDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDerivative
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|sumDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expectedDerivative
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|lastSumValue
operator|=
name|thisSumValue
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueAggDerivativeWithGaps_insertZeros
specifier|public
name|void
name|testSingleValueAggDerivativeWithGaps_insertZeros
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"sum"
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocsEmptyIdx
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|valueCounts_empty
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastSumValue
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCounts_empty
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
argument_list|,
name|valueCounts_empty
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|double
name|thisSumValue
init|=
name|sum
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|bucket
operator|.
name|getDocCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|thisSumValue
operator|=
literal|0
expr_stmt|;
block|}
name|SimpleValue
name|sumDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|sumDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|expectedDerivative
init|=
name|thisSumValue
operator|-
name|lastSumValue
decl_stmt|;
name|assertThat
argument_list|(
name|sumDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expectedDerivative
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastSumValue
operator|=
name|thisSumValue
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueAggDerivativeWithGaps_random
specifier|public
name|void
name|testSingleValueAggDerivativeWithGaps_random
parameter_list|()
throws|throws
name|Exception
block|{
name|GapPolicy
name|gapPolicy
init|=
name|randomFrom
argument_list|(
name|GapPolicy
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx_rnd"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
operator|new
name|ExtendedBounds
argument_list|(
literal|0L
argument_list|,
operator|(
name|long
operator|)
name|numBuckets_empty_rnd
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"sum"
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocsEmptyIdx_rnd
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|deriv
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numBuckets_empty_rnd
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastSumValue
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCounts_empty_rnd
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"InternalBucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
argument_list|,
name|valueCounts_empty_rnd
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|double
name|thisSumValue
init|=
name|sum
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|bucket
operator|.
name|getDocCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|thisSumValue
operator|=
name|gapPolicy
operator|==
name|GapPolicy
operator|.
name|INSERT_ZEROS
condition|?
literal|0
else|:
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
name|SimpleValue
name|sumDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|sumDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|expectedDerivative
init|=
name|thisSumValue
operator|-
name|lastSumValue
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|expectedDerivative
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|sumDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDerivative
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|sumDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expectedDerivative
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|lastSumValue
operator|=
name|thisSumValue
expr_stmt|;
block|}
block|}
DECL|method|testSingleValueAggDerivative_invalidPath
specifier|public
name|void
name|testSingleValueAggDerivative_invalidPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|filters
argument_list|(
literal|"filters"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"tag"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"filters>get>sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an Exception but didn't get one"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|SearchPhaseExecutionException
condition|)
block|{
name|SearchPhaseExecutionException
name|spee
init|=
operator|(
name|SearchPhaseExecutionException
operator|)
name|e
decl_stmt|;
name|Throwable
name|rootCause
init|=
name|spee
operator|.
name|getRootCause
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|rootCause
operator|instanceof
name|IllegalArgumentException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|cause
operator|instanceof
name|IllegalArgumentException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|testAvgMovavgDerivNPE
specifier|public
name|void
name|testAvgMovavgDerivNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"movavg_npe"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|value
init|=
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
operator|||
name|i
operator|==
literal|3
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
name|XContentBuilder
name|doc
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"tick"
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"movavg_npe"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"movavg_npe"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tick"
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg"
argument_list|,
literal|"avg"
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|window
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"movavg"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBucketKeyAndDocCount
specifier|private
name|void
name|checkBucketKeyAndDocCount
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|Histogram
operator|.
name|Bucket
name|bucket
parameter_list|,
specifier|final
name|long
name|expectedKey
parameter_list|,
specifier|final
name|long
name|expectedDocCount
parameter_list|)
block|{
name|assertThat
argument_list|(
name|msg
argument_list|,
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|" key"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|" docCount"
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDocCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

