begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.bucketmetrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ExtendedStatsBucketPipelineAggregationBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ExtendedStatsBucketTests
specifier|public
class|class
name|ExtendedStatsBucketTests
extends|extends
name|AbstractBucketMetricsTestCase
argument_list|<
name|ExtendedStatsBucketPipelineAggregationBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|doCreateTestAggregatorFactory
specifier|protected
name|ExtendedStatsBucketPipelineAggregationBuilder
name|doCreateTestAggregatorFactory
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|bucketsPath
parameter_list|)
block|{
name|ExtendedStatsBucketPipelineAggregationBuilder
name|factory
init|=
operator|new
name|ExtendedStatsBucketPipelineAggregationBuilder
argument_list|(
name|name
argument_list|,
name|bucketsPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|factory
operator|.
name|sigma
argument_list|(
name|randomDoubleBetween
argument_list|(
literal|0.0
argument_list|,
literal|10.0
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
DECL|method|testSigmaFromInt
specifier|public
name|void
name|testSigmaFromInt
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|content
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"extended_stats_bucket"
argument_list|)
operator|.
name|field
argument_list|(
literal|"sigma"
argument_list|,
literal|5
argument_list|)
operator|.
name|field
argument_list|(
literal|"buckets_path"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|ExtendedStatsBucketPipelineAggregationBuilder
name|builder
init|=
operator|(
name|ExtendedStatsBucketPipelineAggregationBuilder
operator|)
name|parse
argument_list|(
name|createParser
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|sigma
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

