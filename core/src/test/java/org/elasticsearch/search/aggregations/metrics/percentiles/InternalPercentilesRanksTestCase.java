begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ParsedAggregation
import|;
end_import

begin_class
DECL|class|InternalPercentilesRanksTestCase
specifier|public
specifier|abstract
class|class
name|InternalPercentilesRanksTestCase
parameter_list|<
name|T
extends|extends
name|InternalAggregation
operator|&
name|PercentileRanks
parameter_list|>
extends|extends
name|AbstractPercentilesTestCase
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
specifier|final
name|void
name|assertFromXContent
parameter_list|(
name|T
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|PercentileRanks
argument_list|)
expr_stmt|;
name|PercentileRanks
name|parsedPercentileRanks
init|=
operator|(
name|PercentileRanks
operator|)
name|parsedAggregation
decl_stmt|;
for|for
control|(
name|Percentile
name|percentile
range|:
name|aggregation
control|)
block|{
name|Double
name|value
init|=
name|percentile
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|percent
argument_list|(
name|value
argument_list|)
argument_list|,
name|parsedPercentileRanks
operator|.
name|percent
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|percentAsString
argument_list|(
name|value
argument_list|)
argument_list|,
name|parsedPercentileRanks
operator|.
name|percentAsString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|ParsedPercentiles
argument_list|>
name|parsedClass
init|=
name|implementationClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|parsedClass
operator|!=
literal|null
operator|&&
name|parsedClass
operator|.
name|isInstance
argument_list|(
name|parsedAggregation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

