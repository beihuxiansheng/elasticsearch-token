begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ParsedAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_class
DECL|class|InternalPercentilesRanksTestCase
specifier|public
specifier|abstract
class|class
name|InternalPercentilesRanksTestCase
parameter_list|<
name|T
extends|extends
name|InternalAggregation
parameter_list|>
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
specifier|final
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
specifier|final
name|boolean
name|keyed
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|DocValueFormat
name|format
init|=
name|randomFrom
argument_list|(
name|DocValueFormat
operator|.
name|RAW
argument_list|,
operator|new
name|DocValueFormat
operator|.
name|Decimal
argument_list|(
literal|"###.##"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|randomCdfValues
init|=
name|randomSubsetOf
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|0.01d
argument_list|,
literal|0.05d
argument_list|,
literal|0.25d
argument_list|,
literal|0.50d
argument_list|,
literal|0.75d
argument_list|,
literal|0.95d
argument_list|,
literal|0.99d
argument_list|)
decl_stmt|;
name|double
index|[]
name|cdfValues
init|=
operator|new
name|double
index|[
name|randomCdfValues
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomCdfValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cdfValues
index|[
name|i
index|]
operator|=
name|randomCdfValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|,
name|cdfValues
argument_list|,
name|keyed
argument_list|,
name|format
argument_list|)
return|;
block|}
DECL|method|createTestInstance
specifier|protected
specifier|abstract
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|aggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metadata
parameter_list|,
name|double
index|[]
name|cdfValues
parameter_list|,
name|boolean
name|keyed
parameter_list|,
name|DocValueFormat
name|format
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
specifier|final
name|void
name|assertFromXContent
parameter_list|(
name|T
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|aggregation
operator|instanceof
name|PercentileRanks
argument_list|)
expr_stmt|;
name|PercentileRanks
name|percentileRanks
init|=
operator|(
name|PercentileRanks
operator|)
name|aggregation
decl_stmt|;
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|PercentileRanks
argument_list|)
expr_stmt|;
name|PercentileRanks
name|parsedPercentileRanks
init|=
operator|(
name|PercentileRanks
operator|)
name|parsedAggregation
decl_stmt|;
for|for
control|(
name|Percentile
name|percentile
range|:
name|percentileRanks
control|)
block|{
name|Double
name|value
init|=
name|percentile
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|percentileRanks
operator|.
name|percent
argument_list|(
name|value
argument_list|)
argument_list|,
name|parsedPercentileRanks
operator|.
name|percent
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|percentileRanks
operator|.
name|percentAsString
argument_list|(
name|value
argument_list|)
argument_list|,
name|parsedPercentileRanks
operator|.
name|percentAsString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|ParsedPercentileRanks
argument_list|>
name|parsedClass
init|=
name|parsedParsedPercentileRanksClass
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|parsedClass
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parsedClass
operator|.
name|isInstance
argument_list|(
name|parsedAggregation
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPercentilesRanksIterators
specifier|public
name|void
name|testPercentilesRanksIterators
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|T
name|aggregation
init|=
name|createTestInstance
argument_list|()
decl_stmt|;
specifier|final
name|ToXContent
operator|.
name|Params
name|params
init|=
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|singletonMap
argument_list|(
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BytesReference
name|originalBytes
init|=
name|toXContent
argument_list|(
name|aggregation
argument_list|,
name|xContentType
argument_list|,
name|params
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|Aggregation
name|parsedAggregation
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContentType
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|,
name|originalBytes
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|currentName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|currentName
operator|.
name|indexOf
argument_list|(
name|InternalAggregation
operator|.
name|TYPED_KEYS_DELIMITER
argument_list|)
decl_stmt|;
name|String
name|aggType
init|=
name|currentName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|aggName
init|=
name|currentName
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|parsedAggregation
operator|=
name|parser
operator|.
name|namedObject
argument_list|(
name|Aggregation
operator|.
name|class
argument_list|,
name|aggType
argument_list|,
name|aggName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Iterator
argument_list|<
name|Percentile
argument_list|>
name|it
init|=
operator|(
operator|(
name|PercentileRanks
operator|)
name|aggregation
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Percentile
argument_list|>
name|parsedIt
init|=
operator|(
operator|(
name|PercentileRanks
operator|)
name|parsedAggregation
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|parsedIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parsedParsedPercentileRanksClass
specifier|protected
specifier|abstract
name|Class
argument_list|<
name|?
extends|extends
name|ParsedPercentileRanks
argument_list|>
name|parsedParsedPercentileRanksClass
parameter_list|()
function_decl|;
block|}
end_class

end_unit

