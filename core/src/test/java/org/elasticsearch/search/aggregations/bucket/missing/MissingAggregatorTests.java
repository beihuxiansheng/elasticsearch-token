begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.missing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|missing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_class
DECL|class|MissingAggregatorTests
specifier|public
class|class
name|MissingAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|method|testMatchNoDocs
specifier|public
name|void
name|testMatchNoDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|testBothCases
argument_list|(
name|numDocs
argument_list|,
literal|"field"
argument_list|,
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|,
name|doc
lambda|->
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|internalMissing
lambda|->
name|assertEquals
argument_list|(
name|internalMissing
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchAllDocs
specifier|public
name|void
name|testMatchAllDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|testBothCases
argument_list|(
name|numDocs
argument_list|,
literal|"field"
argument_list|,
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|,
name|doc
lambda|->
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"another_field"
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|internalMissing
lambda|->
name|assertEquals
argument_list|(
name|internalMissing
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchSparse
specifier|public
name|void
name|testMatchSparse
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|testBothCases
argument_list|(
name|numDocs
argument_list|,
literal|"field"
argument_list|,
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|,
name|doc
lambda|->
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"another_field"
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|internalMissing
lambda|->
block|{
name|assertEquals
argument_list|(
name|internalMissing
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingField
specifier|public
name|void
name|testMissingField
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|testBothCases
argument_list|(
name|numDocs
argument_list|,
literal|"unknown_field"
argument_list|,
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|,
name|doc
lambda|->
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"field"
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|internalMissing
lambda|->
block|{
name|assertEquals
argument_list|(
name|internalMissing
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBothCases
specifier|private
name|void
name|testBothCases
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Query
name|query
parameter_list|,
name|Consumer
argument_list|<
name|Document
argument_list|>
name|consumer
parameter_list|,
name|Consumer
argument_list|<
name|InternalMissing
argument_list|>
name|verify
parameter_list|)
throws|throws
name|IOException
block|{
name|executeTestCase
argument_list|(
name|numDocs
argument_list|,
name|fieldName
argument_list|,
name|query
argument_list|,
name|consumer
argument_list|,
name|verify
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|executeTestCase
argument_list|(
name|numDocs
argument_list|,
name|fieldName
argument_list|,
name|query
argument_list|,
name|consumer
argument_list|,
name|verify
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|executeTestCase
specifier|private
name|void
name|executeTestCase
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Query
name|query
parameter_list|,
name|Consumer
argument_list|<
name|Document
argument_list|>
name|consumer
parameter_list|,
name|Consumer
argument_list|<
name|InternalMissing
argument_list|>
name|verify
parameter_list|,
name|boolean
name|reduced
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
init|)
block|{
try|try
init|(
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
init|)
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|consumer
operator|.
name|accept
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
try|try
init|(
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
init|)
block|{
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MissingAggregationBuilder
name|builder
init|=
operator|new
name|MissingAggregationBuilder
argument_list|(
literal|"_name"
argument_list|,
name|ValueType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|NumberFieldMapper
operator|.
name|Builder
name|mapperBuilder
init|=
operator|new
name|NumberFieldMapper
operator|.
name|Builder
argument_list|(
literal|"_name"
argument_list|,
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|MappedFieldType
name|fieldType
init|=
name|mapperBuilder
operator|.
name|fieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
name|builder
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|InternalMissing
name|missing
decl_stmt|;
if|if
condition|(
name|reduced
condition|)
block|{
name|missing
operator|=
name|searchAndReduce
argument_list|(
name|indexSearcher
argument_list|,
name|query
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|missing
operator|=
name|search
argument_list|(
name|indexSearcher
argument_list|,
name|query
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
block|}
name|verify
operator|.
name|accept
argument_list|(
name|missing
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

