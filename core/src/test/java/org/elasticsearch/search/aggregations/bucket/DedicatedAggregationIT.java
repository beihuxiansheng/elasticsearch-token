begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|StringTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
operator|.
name|copyToStringFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|DedicatedAggregationIT
specifier|public
class|class
name|DedicatedAggregationIT
extends|extends
name|ElasticsearchIntegrationTest
block|{
comment|// https://github.com/elasticsearch/elasticsearch/issues/7240
annotation|@
name|Test
DECL|method|testEmptyBoolIsMatchAll
specifier|public
name|void
name|testEmptyBoolIsMatchAll
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/search/aggregations/bucket/agg-filter-with-empty-bool.json"
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
literal|"testidx"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"testidx"
argument_list|,
literal|"apache"
argument_list|,
literal|"1"
argument_list|,
literal|"field"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"testidx"
argument_list|,
literal|"nginx"
argument_list|,
literal|"2"
argument_list|,
literal|"field"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"testidx"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"testidx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"testidx"
argument_list|)
operator|.
name|setSource
argument_list|(
name|query
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"issue7240"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterAgg
init|=
operator|(
name|Filter
operator|)
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"issue7240"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filterAgg
operator|.
name|getAggregations
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|StringTerms
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|StringTerms
operator|)
name|filterAgg
operator|.
name|getAggregations
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
operator|)
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

