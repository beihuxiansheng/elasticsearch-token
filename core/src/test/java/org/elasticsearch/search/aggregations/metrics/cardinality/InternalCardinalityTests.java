begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.cardinality
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|cardinality
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|ParsedAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|InternalCardinalityTests
specifier|public
class|class
name|InternalCardinalityTests
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|InternalCardinality
argument_list|>
block|{
DECL|field|algos
specifier|private
specifier|static
name|List
argument_list|<
name|HyperLogLogPlusPlus
argument_list|>
name|algos
decl_stmt|;
DECL|field|p
specifier|private
specifier|static
name|int
name|p
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|algos
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|p
operator|=
name|randomIntBetween
argument_list|(
name|HyperLogLogPlusPlus
operator|.
name|MIN_PRECISION
argument_list|,
name|HyperLogLogPlusPlus
operator|.
name|MAX_PRECISION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
comment|//we force @After to have it run before ESTestCase#after otherwise it fails
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|Releasables
operator|.
name|close
argument_list|(
name|algos
argument_list|)
expr_stmt|;
name|algos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|algos
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|InternalCardinality
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
name|HyperLogLogPlusPlus
name|hllpp
init|=
operator|new
name|HyperLogLogPlusPlus
argument_list|(
name|p
argument_list|,
operator|new
name|MockBigArrays
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|algos
operator|.
name|add
argument_list|(
name|hllpp
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|hllpp
operator|.
name|collect
argument_list|(
literal|0
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InternalCardinality
argument_list|(
name|name
argument_list|,
name|hllpp
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Reader
argument_list|<
name|InternalCardinality
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|InternalCardinality
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
name|void
name|assertReduced
parameter_list|(
name|InternalCardinality
name|reduced
parameter_list|,
name|List
argument_list|<
name|InternalCardinality
argument_list|>
name|inputs
parameter_list|)
block|{
name|HyperLogLogPlusPlus
index|[]
name|algos
init|=
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|InternalCardinality
operator|::
name|getState
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|HyperLogLogPlusPlus
index|[
name|size
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|algos
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|HyperLogLogPlusPlus
name|result
init|=
name|algos
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|algos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|merge
argument_list|(
literal|0
argument_list|,
name|algos
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|result
operator|.
name|cardinality
argument_list|(
literal|0
argument_list|)
argument_list|,
name|reduced
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
name|void
name|assertFromXContent
parameter_list|(
name|InternalCardinality
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|ParsedCardinality
argument_list|)
expr_stmt|;
name|ParsedCardinality
name|parsed
init|=
operator|(
name|ParsedCardinality
operator|)
name|parsedAggregation
decl_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|getValue
argument_list|()
argument_list|,
name|parsed
operator|.
name|getValue
argument_list|()
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|getValueAsString
argument_list|()
argument_list|,
name|parsed
operator|.
name|getValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

