begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractWireSerializingTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_class
DECL|class|InternalAggregationTestCase
specifier|public
specifier|abstract
class|class
name|InternalAggregationTestCase
parameter_list|<
name|T
extends|extends
name|InternalAggregation
parameter_list|>
extends|extends
name|AbstractWireSerializingTestCase
argument_list|<
name|T
argument_list|>
block|{
DECL|field|namedWriteableRegistry
specifier|private
specifier|final
name|NamedWriteableRegistry
name|namedWriteableRegistry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|emptyList
argument_list|()
argument_list|)
operator|.
name|getNamedWriteables
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|createTestInstance
specifier|protected
specifier|abstract
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
function_decl|;
comment|/** Return an instance on an unmapped field. */
DECL|method|createUnmappedInstance
specifier|protected
name|T
name|createUnmappedInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
comment|// For most impls, we use the same instance in the unmapped case and in the mapped case
return|return
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
DECL|method|testReduceRandom
specifier|public
name|void
name|testReduceRandom
parameter_list|()
block|{
name|String
name|name
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|toReduce
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|toReduceSize
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|200
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toReduceSize
condition|;
name|i
operator|++
control|)
block|{
name|T
name|t
init|=
name|randomBoolean
argument_list|()
condition|?
name|createUnmappedInstance
argument_list|(
name|name
argument_list|)
else|:
name|createTestInstance
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|toReduce
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|ScriptService
name|mockScriptService
init|=
name|mockScriptService
argument_list|()
decl_stmt|;
name|MockBigArrays
name|bigArrays
init|=
operator|new
name|MockBigArrays
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
name|toReduce
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// sometimes do an incremental reduce
name|Collections
operator|.
name|shuffle
argument_list|(
name|toReduce
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|toReduceSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|internalAggregations
init|=
name|toReduce
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|InternalAggregation
operator|.
name|ReduceContext
name|context
init|=
operator|new
name|InternalAggregation
operator|.
name|ReduceContext
argument_list|(
name|bigArrays
argument_list|,
name|mockScriptService
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|reduced
init|=
operator|(
name|T
operator|)
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reduce
argument_list|(
name|internalAggregations
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|toReduce
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|toReduce
operator|.
name|subList
argument_list|(
name|r
argument_list|,
name|toReduceSize
argument_list|)
argument_list|)
expr_stmt|;
name|toReduce
operator|.
name|add
argument_list|(
name|reduced
argument_list|)
expr_stmt|;
block|}
name|InternalAggregation
operator|.
name|ReduceContext
name|context
init|=
operator|new
name|InternalAggregation
operator|.
name|ReduceContext
argument_list|(
name|bigArrays
argument_list|,
name|mockScriptService
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|reduced
init|=
operator|(
name|T
operator|)
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reduce
argument_list|(
name|toReduce
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertReduced
argument_list|(
name|reduced
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
comment|/**      * overwrite in tests that need it      */
DECL|method|mockScriptService
specifier|protected
name|ScriptService
name|mockScriptService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|assertReduced
specifier|protected
specifier|abstract
name|void
name|assertReduced
parameter_list|(
name|T
name|reduced
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
specifier|final
name|T
name|createTestInstance
parameter_list|()
block|{
return|return
name|createTestInstance
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createTestInstance
specifier|private
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO populate pipelineAggregators
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|metaDataCount
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
name|metaData
operator|.
name|size
argument_list|()
operator|<
name|metaDataCount
condition|)
block|{
name|metaData
operator|.
name|put
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
comment|/** Return an instance on an unmapped field. */
DECL|method|createUnmappedInstance
specifier|protected
specifier|final
name|T
name|createUnmappedInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO populate pipelineAggregators
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|metaDataCount
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
name|metaData
operator|.
name|size
argument_list|()
operator|<
name|metaDataCount
condition|)
block|{
name|metaData
operator|.
name|put
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createUnmappedInstance
argument_list|(
name|name
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNamedWriteableRegistry
specifier|protected
name|NamedWriteableRegistry
name|getNamedWriteableRegistry
parameter_list|()
block|{
return|return
name|namedWriteableRegistry
return|;
block|}
block|}
end_class

end_unit

