begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|SearchPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|NativeScriptFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filter
operator|.
name|InternalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|script
operator|.
name|NativeSignificanceScoreScriptNoParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|script
operator|.
name|NativeSignificanceScoreScriptWithParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTermsAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|ChiSquare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|GND
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|MutualInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|ScriptHeuristic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|StringTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|SharedSignificantTermsTestMethods
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|significantTerms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|)
DECL|class|SignificantTermsSignificanceScoreIT
specifier|public
class|class
name|SignificantTermsSignificanceScoreIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|INDEX_NAME
specifier|static
specifier|final
name|String
name|INDEX_NAME
init|=
literal|"testidx"
decl_stmt|;
DECL|field|DOC_TYPE
specifier|static
specifier|final
name|String
name|DOC_TYPE
init|=
literal|"doc"
decl_stmt|;
DECL|field|TEXT_FIELD
specifier|static
specifier|final
name|String
name|TEXT_FIELD
init|=
literal|"text"
decl_stmt|;
DECL|field|CLASS_FIELD
specifier|static
specifier|final
name|String
name|CLASS_FIELD
init|=
literal|"class"
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|CustomSignificanceHeuristicPlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|transportClientPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|transportClientPlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|CustomSignificanceHeuristicPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|randomExecutionHint
specifier|public
name|String
name|randomExecutionHint
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomFrom
argument_list|(
name|SignificantTermsAggregatorFactory
operator|.
name|ExecutionMode
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testPlugin
specifier|public
name|void
name|testPlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
literal|"text"
else|:
literal|"long"
decl_stmt|;
name|String
name|settings
init|=
literal|"{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}"
decl_stmt|;
name|SharedSignificantTermsTestMethods
operator|.
name|index01Docs
argument_list|(
name|type
argument_list|,
name|settings
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setTypes
argument_list|(
name|DOC_TYPE
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
name|CLASS_FIELD
argument_list|)
operator|.
name|subAggregation
argument_list|(
operator|(
name|significantTerms
argument_list|(
literal|"sig_terms"
argument_list|)
operator|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
operator|new
name|SimpleHeuristic
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|StringTerms
name|classes
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|classBucket
range|:
name|classes
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|aggs
init|=
name|classBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aggs
operator|.
name|containsKey
argument_list|(
literal|"sig_terms"
argument_list|)
argument_list|)
expr_stmt|;
name|SignificantTerms
name|agg
init|=
operator|(
name|SignificantTerms
operator|)
name|aggs
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|agg
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SignificantTerms
operator|.
name|Bucket
argument_list|>
name|bucketIterator
init|=
name|agg
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SignificantTerms
operator|.
name|Bucket
name|sigBucket
init|=
name|bucketIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|sigBucket
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|String
name|classTerm
init|=
name|classBucket
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|classTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sigBucket
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|1.e-8
argument_list|)
argument_list|)
expr_stmt|;
name|sigBucket
operator|=
name|bucketIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sigBucket
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.0
argument_list|,
literal|1.e-8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we run the same test again but this time we do not call assertSearchResponse() before the assertions
comment|// the reason is that this would trigger toXContent and we would like to check that this has no potential side effects
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setTypes
argument_list|(
name|DOC_TYPE
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
name|CLASS_FIELD
argument_list|)
operator|.
name|subAggregation
argument_list|(
operator|(
name|significantTerms
argument_list|(
literal|"sig_terms"
argument_list|)
operator|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
operator|new
name|SimpleHeuristic
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|classes
operator|=
operator|(
name|StringTerms
operator|)
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|classBucket
range|:
name|classes
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|aggs
init|=
name|classBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aggs
operator|.
name|containsKey
argument_list|(
literal|"sig_terms"
argument_list|)
argument_list|)
expr_stmt|;
name|SignificantTerms
name|agg
init|=
operator|(
name|SignificantTerms
operator|)
name|aggs
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|agg
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SignificantTerms
operator|.
name|Bucket
argument_list|>
name|bucketIterator
init|=
name|agg
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SignificantTerms
operator|.
name|Bucket
name|sigBucket
init|=
name|bucketIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|sigBucket
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|String
name|classTerm
init|=
name|classBucket
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|classTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sigBucket
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|1.e-8
argument_list|)
argument_list|)
expr_stmt|;
name|sigBucket
operator|=
name|bucketIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|sigBucket
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.0
argument_list|,
literal|1.e-8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CustomSignificanceHeuristicPlugin
specifier|public
specifier|static
class|class
name|CustomSignificanceHeuristicPlugin
extends|extends
name|Plugin
implements|implements
name|ScriptPlugin
implements|,
name|SearchPlugin
block|{
annotation|@
name|Override
DECL|method|getSignificanceHeuristics
specifier|public
name|List
argument_list|<
name|SearchExtensionSpec
argument_list|<
name|SignificanceHeuristic
argument_list|,
name|SignificanceHeuristicParser
argument_list|>
argument_list|>
name|getSignificanceHeuristics
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|SearchExtensionSpec
argument_list|<
name|SignificanceHeuristic
argument_list|,
name|SignificanceHeuristicParser
argument_list|>
argument_list|(
name|SimpleHeuristic
operator|.
name|NAME
argument_list|,
name|SimpleHeuristic
operator|::
operator|new
argument_list|,
parameter_list|(
name|context
parameter_list|)
lambda|->
name|SimpleHeuristic
operator|.
name|parse
argument_list|(
name|context
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNativeScripts
specifier|public
name|List
argument_list|<
name|NativeScriptFactory
argument_list|>
name|getNativeScripts
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|NativeSignificanceScoreScriptNoParams
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|NativeSignificanceScoreScriptWithParams
operator|.
name|Factory
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|SimpleHeuristic
specifier|public
specifier|static
class|class
name|SimpleHeuristic
extends|extends
name|SignificanceHeuristic
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"simple"
decl_stmt|;
DECL|method|SimpleHeuristic
specifier|public
name|SimpleHeuristic
parameter_list|()
block|{         }
comment|/**          * Read from a stream.          */
DECL|method|SimpleHeuristic
specifier|public
name|SimpleHeuristic
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Nothing to read
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Nothing to write
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**          * @param subsetFreq   The frequency of the term in the selected sample          * @param subsetSize   The size of the selected sample (typically number of docs)          * @param supersetFreq The frequency of the term in the superset from which the sample was taken          * @param supersetSize The size of the superset from which the sample was taken  (typically number of docs)          * @return a "significance" score          */
annotation|@
name|Override
DECL|method|getScore
specifier|public
name|double
name|getScore
parameter_list|(
name|long
name|subsetFreq
parameter_list|,
name|long
name|subsetSize
parameter_list|,
name|long
name|supersetFreq
parameter_list|,
name|long
name|supersetSize
parameter_list|)
block|{
return|return
name|subsetFreq
operator|/
name|subsetSize
operator|>
name|supersetFreq
operator|/
name|supersetSize
condition|?
literal|2.0
else|:
literal|1.0
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|SignificanceHeuristic
name|parse
parameter_list|(
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|QueryShardException
block|{
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
operator|new
name|SimpleHeuristic
argument_list|()
return|;
block|}
block|}
DECL|method|testXContentResponse
specifier|public
name|void
name|testXContentResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
literal|"text"
else|:
literal|"long"
decl_stmt|;
name|String
name|settings
init|=
literal|"{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}"
decl_stmt|;
name|SharedSignificantTermsTestMethods
operator|.
name|index01Docs
argument_list|(
name|type
argument_list|,
name|settings
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setTypes
argument_list|(
name|DOC_TYPE
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
name|CLASS_FIELD
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"sig_terms"
argument_list|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|StringTerms
name|classes
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|classBucket
range|:
name|classes
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|aggs
init|=
name|classBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aggs
operator|.
name|containsKey
argument_list|(
literal|"sig_terms"
argument_list|)
argument_list|)
expr_stmt|;
name|SignificantTerms
name|agg
init|=
operator|(
name|SignificantTerms
operator|)
name|aggs
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|agg
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|term
init|=
name|agg
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|String
name|classTerm
init|=
name|classBucket
operator|.
name|getKeyAsString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|classTerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|responseBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|responseBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|classes
operator|.
name|toXContent
argument_list|(
name|responseBuilder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|responseBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|result
init|=
literal|"{\"class\":{\"doc_count_error_upper_bound\":0,\"sum_other_doc_count\":0,"
operator|+
literal|"\"buckets\":["
operator|+
literal|"{"
operator|+
literal|"\"key\":\"0\","
operator|+
literal|"\"doc_count\":4,"
operator|+
literal|"\"sig_terms\":{"
operator|+
literal|"\"doc_count\":4,"
operator|+
literal|"\"buckets\":["
operator|+
literal|"{"
operator|+
literal|"\"key\":"
operator|+
operator|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|?
literal|"0,"
else|:
literal|"\"0\","
operator|)
operator|+
literal|"\"doc_count\":4,"
operator|+
literal|"\"score\":0.39999999999999997,"
operator|+
literal|"\"bg_count\":5"
operator|+
literal|"}"
operator|+
literal|"]"
operator|+
literal|"}"
operator|+
literal|"},"
operator|+
literal|"{"
operator|+
literal|"\"key\":\"1\","
operator|+
literal|"\"doc_count\":3,"
operator|+
literal|"\"sig_terms\":{"
operator|+
literal|"\"doc_count\":3,"
operator|+
literal|"\"buckets\":["
operator|+
literal|"{"
operator|+
literal|"\"key\":"
operator|+
operator|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|?
literal|"1,"
else|:
literal|"\"1\","
operator|)
operator|+
literal|"\"doc_count\":3,"
operator|+
literal|"\"score\":0.75,"
operator|+
literal|"\"bg_count\":4"
operator|+
literal|"}]}}]}}"
decl_stmt|;
name|assertThat
argument_list|(
name|responseBuilder
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeletesIssue7951
specifier|public
name|void
name|testDeletesIssue7951
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|settings
init|=
literal|"{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}"
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"text"
argument_list|,
literal|"type=keyword"
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"type=keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|cat1v1
init|=
block|{
literal|"constant"
block|,
literal|"one"
block|}
decl_stmt|;
name|String
index|[]
name|cat1v2
init|=
block|{
literal|"constant"
block|,
literal|"uno"
block|}
decl_stmt|;
name|String
index|[]
name|cat2v1
init|=
block|{
literal|"constant"
block|,
literal|"two"
block|}
decl_stmt|;
name|String
index|[]
name|cat2v2
init|=
block|{
literal|"constant"
block|,
literal|"duo"
block|}
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexRequestBuilderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|cat1v1
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|cat1v2
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|cat2v1
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|cat2v2
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|indexRequestBuilderList
argument_list|)
expr_stmt|;
comment|// Now create some holes in the index with selective deletes caused by updates.
comment|// This is the scenario that caused this issue https://github.com/elastic/elasticsearch/issues/7951
comment|// Scoring algorithms throw exceptions if term docFreqs exceed the reported size of the index
comment|// from which they are taken so need to make sure this doesn't happen.
name|String
index|[]
name|text
init|=
name|cat1v1
decl_stmt|;
name|indexRequestBuilderList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|text
operator|=
name|text
operator|==
name|cat1v2
condition|?
name|cat1v1
else|:
name|cat1v2
expr_stmt|;
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|text
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|indexRequestBuilderList
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setTypes
argument_list|(
name|DOC_TYPE
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
name|CLASS_FIELD
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"sig_terms"
argument_list|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
DECL|method|testBackgroundVsSeparateSet
specifier|public
name|void
name|testBackgroundVsSeparateSet
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|type
init|=
name|randomBoolean
argument_list|()
condition|?
literal|"text"
else|:
literal|"long"
decl_stmt|;
name|String
name|settings
init|=
literal|"{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}"
decl_stmt|;
name|SharedSignificantTermsTestMethods
operator|.
name|index01Docs
argument_list|(
name|type
argument_list|,
name|settings
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|testBackgroundVsSeparateSet
argument_list|(
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testBackgroundVsSeparateSet
argument_list|(
operator|new
name|ChiSquare
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ChiSquare
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testBackgroundVsSeparateSet
argument_list|(
operator|new
name|GND
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|GND
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// compute significance score by
comment|// 1. terms agg on class and significant terms
comment|// 2. filter buckets and set the background to the other class and set is_background false
comment|// both should yield exact same result
DECL|method|testBackgroundVsSeparateSet
specifier|public
name|void
name|testBackgroundVsSeparateSet
parameter_list|(
name|SignificanceHeuristic
name|significanceHeuristicExpectingSuperset
parameter_list|,
name|SignificanceHeuristic
name|significanceHeuristicExpectingSeparateSets
parameter_list|)
throws|throws
name|Exception
block|{
name|SearchResponse
name|response1
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setTypes
argument_list|(
name|DOC_TYPE
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
name|CLASS_FIELD
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"sig_terms"
argument_list|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
name|significanceHeuristicExpectingSuperset
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response1
argument_list|)
expr_stmt|;
name|SearchResponse
name|response2
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|setTypes
argument_list|(
name|DOC_TYPE
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"0"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
name|CLASS_FIELD
argument_list|,
literal|"0"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"sig_terms"
argument_list|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
operator|.
name|backgroundFilter
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
name|significanceHeuristicExpectingSeparateSets
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"1"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
name|CLASS_FIELD
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"sig_terms"
argument_list|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
operator|.
name|backgroundFilter
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
name|CLASS_FIELD
argument_list|,
literal|"0"
argument_list|)
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
name|significanceHeuristicExpectingSeparateSets
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|StringTerms
name|classes
init|=
name|response1
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|SignificantTerms
name|sigTerms0
init|=
operator|(
call|(
name|SignificantTerms
call|)
argument_list|(
name|classes
operator|.
name|getBucketByKey
argument_list|(
literal|"0"
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|assertThat
argument_list|(
name|sigTerms0
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|score00Background
init|=
name|sigTerms0
operator|.
name|getBucketByKey
argument_list|(
literal|"0"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|double
name|score01Background
init|=
name|sigTerms0
operator|.
name|getBucketByKey
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|SignificantTerms
name|sigTerms1
init|=
operator|(
call|(
name|SignificantTerms
call|)
argument_list|(
name|classes
operator|.
name|getBucketByKey
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|double
name|score10Background
init|=
name|sigTerms1
operator|.
name|getBucketByKey
argument_list|(
literal|"0"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|double
name|score11Background
init|=
name|sigTerms1
operator|.
name|getBucketByKey
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|Aggregations
name|aggs
init|=
name|response2
operator|.
name|getAggregations
argument_list|()
decl_stmt|;
name|sigTerms0
operator|=
call|(
name|SignificantTerms
call|)
argument_list|(
operator|(
name|InternalFilter
operator|)
name|aggs
operator|.
name|get
argument_list|(
literal|"0"
argument_list|)
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
expr_stmt|;
name|double
name|score00SeparateSets
init|=
name|sigTerms0
operator|.
name|getBucketByKey
argument_list|(
literal|"0"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|double
name|score01SeparateSets
init|=
name|sigTerms0
operator|.
name|getBucketByKey
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|sigTerms1
operator|=
call|(
name|SignificantTerms
call|)
argument_list|(
operator|(
name|InternalFilter
operator|)
name|aggs
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"sig_terms"
argument_list|)
expr_stmt|;
name|double
name|score10SeparateSets
init|=
name|sigTerms1
operator|.
name|getBucketByKey
argument_list|(
literal|"0"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|double
name|score11SeparateSets
init|=
name|sigTerms1
operator|.
name|getBucketByKey
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getSignificanceScore
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|score00Background
argument_list|,
name|equalTo
argument_list|(
name|score00SeparateSets
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score01Background
argument_list|,
name|equalTo
argument_list|(
name|score01SeparateSets
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score10Background
argument_list|,
name|equalTo
argument_list|(
name|score10SeparateSets
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score11Background
argument_list|,
name|equalTo
argument_list|(
name|score11SeparateSets
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScoresEqualForPositiveAndNegative
specifier|public
name|void
name|testScoresEqualForPositiveAndNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|indexEqualTestData
argument_list|()
expr_stmt|;
name|testScoresEqualForPositiveAndNegative
argument_list|(
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|testScoresEqualForPositiveAndNegative
argument_list|(
operator|new
name|ChiSquare
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScoresEqualForPositiveAndNegative
specifier|public
name|void
name|testScoresEqualForPositiveAndNegative
parameter_list|(
name|SignificanceHeuristic
name|heuristic
parameter_list|)
throws|throws
name|Exception
block|{
comment|//check that results for both classes are the same with exclude negatives = false and classes are routing ids
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
literal|"class"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
name|heuristic
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|size
argument_list|(
literal|1000
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|StringTerms
name|classes
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|classBuckets
init|=
name|classes
operator|.
name|getBuckets
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Aggregations
name|aggregations
init|=
name|classBuckets
operator|.
name|next
argument_list|()
operator|.
name|getAggregations
argument_list|()
decl_stmt|;
name|SignificantTerms
name|sigTerms
init|=
name|aggregations
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|SignificantTerms
operator|.
name|Bucket
argument_list|>
name|classA
init|=
name|sigTerms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|SignificantTerms
operator|.
name|Bucket
argument_list|>
name|classBBucketIterator
init|=
name|sigTerms
operator|.
name|getBuckets
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|classA
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SignificantTerms
operator|.
name|Bucket
name|classABucket
range|:
name|classA
control|)
block|{
name|SignificantTerms
operator|.
name|Bucket
name|classBBucket
init|=
name|classBBucketIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|classABucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|classBBucket
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|classABucket
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|classBBucket
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
literal|1.e-5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexEqualTestData
specifier|private
name|void
name|indexEqualTestData
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"text"
argument_list|,
literal|"type=text,fielddata=true"
argument_list|,
literal|"class"
argument_list|,
literal|"type=keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|data
index|[]
init|=
block|{
literal|"A\ta"
block|,
literal|"A\ta"
block|,
literal|"A\tb"
block|,
literal|"A\tb"
block|,
literal|"A\tb"
block|,
literal|"B\tc"
block|,
literal|"B\tc"
block|,
literal|"B\tc"
block|,
literal|"B\tc"
block|,
literal|"B\td"
block|,
literal|"B\td"
block|,
literal|"B\td"
block|,
literal|"B\td"
block|,
literal|"B\td"
block|,
literal|"A\tc d"
block|,
literal|"B\ta b"
block|}
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexRequestBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|parts
init|=
name|data
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|indexRequestBuilders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"class"
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|,
literal|"text"
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
block|}
DECL|method|testScriptScore
specifier|public
name|void
name|testScriptScore
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|indexRandomFrequencies01
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|"text"
else|:
literal|"long"
argument_list|)
expr_stmt|;
name|ScriptHeuristic
name|scriptHeuristic
init|=
name|getScriptSignificanceHeuristic
argument_list|()
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"class"
argument_list|)
operator|.
name|field
argument_list|(
name|CLASS_FIELD
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
name|TEXT_FIELD
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
name|scriptHeuristic
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|classBucket
range|:
operator|(
operator|(
name|Terms
operator|)
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
operator|)
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|SignificantTerms
name|sigTerms
init|=
name|classBucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
for|for
control|(
name|SignificantTerms
operator|.
name|Bucket
name|bucket
range|:
name|sigTerms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getSignificanceScore
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|double
operator|)
name|bucket
operator|.
name|getSubsetDf
argument_list|()
operator|+
name|bucket
operator|.
name|getSubsetSize
argument_list|()
operator|+
name|bucket
operator|.
name|getSupersetDf
argument_list|()
operator|+
name|bucket
operator|.
name|getSupersetSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getScriptSignificanceHeuristic
specifier|private
name|ScriptHeuristic
name|getScriptSignificanceHeuristic
parameter_list|()
throws|throws
name|IOException
block|{
name|Script
name|script
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"param"
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"native"
argument_list|,
literal|"native_significance_score_script_with_params"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|script
operator|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"native"
argument_list|,
literal|"native_significance_score_script_no_params"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ScriptHeuristic
argument_list|(
name|script
argument_list|)
return|;
block|}
DECL|method|indexRandomFrequencies01
specifier|private
name|void
name|indexRandomFrequencies01
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|String
name|textMappings
init|=
literal|"type="
operator|+
name|type
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|textMappings
operator|+=
literal|",fielddata=true"
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|addMapping
argument_list|(
name|DOC_TYPE
argument_list|,
name|TEXT_FIELD
argument_list|,
name|textMappings
argument_list|,
name|CLASS_FIELD
argument_list|,
literal|"type=keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|gb
init|=
block|{
literal|"0"
block|,
literal|"1"
block|}
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexRequestBuilderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomInt
argument_list|(
literal|20
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|randNum
init|=
name|randomInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|text
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|randNum
operator|==
literal|2
condition|)
block|{
name|text
operator|=
name|gb
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
literal|0
index|]
operator|=
name|gb
index|[
name|randNum
index|]
expr_stmt|;
block|}
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX_NAME
argument_list|,
name|DOC_TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|TEXT_FIELD
argument_list|,
name|text
argument_list|,
name|CLASS_FIELD
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"one"
else|:
literal|"zero"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilderList
argument_list|)
expr_stmt|;
block|}
DECL|method|testReduceFromSeveralShards
specifier|public
name|void
name|testReduceFromSeveralShards
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|SharedSignificantTermsTestMethods
operator|.
name|aggregateAndCheckFromSeveralShards
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure that a request using a script does not get cached and a request      * not using a script does get cached.      */
DECL|method|testDontCacheScripts
specifier|public
name|void
name|testDontCacheScripts
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"d"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"requests.cache.enable"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"cache_test_idx"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"s"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"cache_test_idx"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"s"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure we are starting with a clear cache
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that a request using a script does not get cached
name|ScriptHeuristic
name|scriptHeuristic
init|=
name|getScriptSignificanceHeuristic
argument_list|()
decl_stmt|;
name|SearchResponse
name|r
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"s"
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
name|scriptHeuristic
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// To make sure that the cache is working test that a request not using
comment|// a script is cached
name|r
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|significantTerms
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"s"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

