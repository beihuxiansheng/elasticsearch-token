begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|AggregatorFactoriesTests
specifier|public
class|class
name|AggregatorFactoriesTests
extends|extends
name|ESTestCase
block|{
DECL|field|currentTypes
specifier|private
name|String
index|[]
name|currentTypes
decl_stmt|;
DECL|field|xContentRegistry
specifier|private
name|NamedXContentRegistry
name|xContentRegistry
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// we have to prefer CURRENT since with the range of versions we support
comment|// it's rather unlikely to get the current actually.
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|AbstractQueryTestCase
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// create some random type with some default field, those types will
comment|// stick around for all of the subclasses
name|currentTypes
operator|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|currentTypes
index|[
name|i
index|]
operator|=
name|type
expr_stmt|;
block|}
name|xContentRegistry
operator|=
operator|new
name|NamedXContentRegistry
argument_list|(
operator|new
name|SearchModule
argument_list|(
name|settings
argument_list|,
literal|false
argument_list|,
name|emptyList
argument_list|()
argument_list|)
operator|.
name|getNamedXContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetAggregatorFactories_returnsUnmodifiableList
specifier|public
name|void
name|testGetAggregatorFactories_returnsUnmodifiableList
parameter_list|()
block|{
name|AggregatorFactories
operator|.
name|Builder
name|builder
init|=
operator|new
name|AggregatorFactories
operator|.
name|Builder
argument_list|()
operator|.
name|addAggregator
argument_list|(
name|AggregationBuilders
operator|.
name|avg
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AggregationBuilder
argument_list|>
name|aggregatorFactories
init|=
name|builder
operator|.
name|getAggregatorFactories
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregatorFactories
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|aggregatorFactories
operator|.
name|add
argument_list|(
name|AggregationBuilders
operator|.
name|avg
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetPipelineAggregatorFactories_returnsUnmodifiableList
specifier|public
name|void
name|testGetPipelineAggregatorFactories_returnsUnmodifiableList
parameter_list|()
block|{
name|AggregatorFactories
operator|.
name|Builder
name|builder
init|=
operator|new
name|AggregatorFactories
operator|.
name|Builder
argument_list|()
operator|.
name|addPipelineAggregator
argument_list|(
name|PipelineAggregatorBuilders
operator|.
name|avgBucket
argument_list|(
literal|"foo"
argument_list|,
literal|"path1"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PipelineAggregationBuilder
argument_list|>
name|pipelineAggregatorFactories
init|=
name|builder
operator|.
name|getPipelineAggregatorFactories
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|pipelineAggregatorFactories
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|pipelineAggregatorFactories
operator|.
name|add
argument_list|(
name|PipelineAggregatorBuilders
operator|.
name|avgBucket
argument_list|(
literal|"bar"
argument_list|,
literal|"path2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoTypes
specifier|public
name|void
name|testTwoTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|source
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"in_stock"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"filter"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"range"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"stock"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gt"
argument_list|,
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"stock"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QueryParseContext
name|parseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AggregatorFactories
operator|.
name|parseAggregators
argument_list|(
name|parseContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Found two aggregation type definitions in [in_stock]: [filter] and [terms]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoAggs
specifier|public
name|void
name|testTwoAggs
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"Test only makes sense if XContent parser doesn't have strict duplicate checks enabled"
argument_list|,
name|XContent
operator|.
name|isStrictDuplicateDetectionEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|XContentBuilder
name|source
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"by_date"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"date_histogram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"interval"
argument_list|,
literal|"month"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"aggs"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"tag_count"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"tag"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"aggs"
argument_list|)
comment|// 2nd "aggs": illegal
operator|.
name|startObject
argument_list|(
literal|"tag_count2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"tag"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QueryParseContext
name|parseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AggregatorFactories
operator|.
name|parseAggregators
argument_list|(
name|parseContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Found two sub aggregation definitions under [by_date]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidAggregationName
specifier|public
name|void
name|testInvalidAggregationName
parameter_list|()
throws|throws
name|Exception
block|{
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^\\[\\]>]+"
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|name
decl_stmt|;
name|Random
name|rand
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|char
index|[]
name|word
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|word
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|word
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|rand
operator|.
name|nextInt
argument_list|(
literal|127
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|word
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|reset
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|XContentBuilder
name|source
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"filter"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"range"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"stock"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gt"
argument_list|,
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QueryParseContext
name|parseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AggregatorFactories
operator|.
name|parseAggregators
argument_list|(
name|parseContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Invalid aggregation name ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSameAggregationName
specifier|public
name|void
name|testSameAggregationName
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"Test only makes sense if XContent parser doesn't have strict duplicate checks enabled"
argument_list|,
name|XContent
operator|.
name|isStrictDuplicateDetectionEnabled
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|XContentBuilder
name|source
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QueryParseContext
name|parseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AggregatorFactories
operator|.
name|parseAggregators
argument_list|(
name|parseContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Two sibling aggregations cannot have the same name: ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingName
specifier|public
name|void
name|testMissingName
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|source
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"by_date"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"date_histogram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"interval"
argument_list|,
literal|"month"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"aggs"
argument_list|)
comment|// the aggregation name is missing
comment|//.startObject("tag_count")
operator|.
name|startObject
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"tag"
argument_list|)
operator|.
name|endObject
argument_list|()
comment|//.endObject()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QueryParseContext
name|parseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AggregatorFactories
operator|.
name|parseAggregators
argument_list|(
name|parseContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Expected [START_OBJECT] under [field], but got a [VALUE_STRING] in [cardinality]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingType
specifier|public
name|void
name|testMissingType
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|source
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"by_date"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"date_histogram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"interval"
argument_list|,
literal|"month"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"aggs"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"tag_count"
argument_list|)
comment|// the aggregation type is missing
comment|//.startObject("cardinality")
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"tag"
argument_list|)
comment|//.endObject()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QueryParseContext
name|parseContext
init|=
operator|new
name|QueryParseContext
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AggregatorFactories
operator|.
name|parseAggregators
argument_list|(
name|parseContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Expected [START_OBJECT] under [field], but got a [VALUE_STRING] in [tag_count]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|xContentRegistry
specifier|protected
name|NamedXContentRegistry
name|xContentRegistry
parameter_list|()
block|{
return|return
name|xContentRegistry
return|;
block|}
block|}
end_class

end_unit

