begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DateFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|DateHistogramInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|Sum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|derivative
operator|.
name|Derivative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|dateHistogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|sum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
operator|.
name|derivative
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|nullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|DateDerivativeIT
specifier|public
class|class
name|DateDerivativeIT
extends|extends
name|ESIntegTestCase
block|{
comment|// some index names used during these tests
DECL|field|IDX_DST_START
specifier|private
specifier|static
specifier|final
name|String
name|IDX_DST_START
init|=
literal|"idx_dst_start"
decl_stmt|;
DECL|field|IDX_DST_END
specifier|private
specifier|static
specifier|final
name|String
name|IDX_DST_END
init|=
literal|"idx_dst_end"
decl_stmt|;
DECL|field|IDX_DST_KATHMANDU
specifier|private
specifier|static
specifier|final
name|String
name|IDX_DST_KATHMANDU
init|=
literal|"idx_dst_kathmandu"
decl_stmt|;
DECL|method|date
specifier|private
name|DateTime
name|date
parameter_list|(
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
return|return
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
DECL|method|date
specifier|private
name|DateTime
name|date
parameter_list|(
name|String
name|date
parameter_list|)
block|{
return|return
name|DateFieldMapper
operator|.
name|DEFAULT_DATE_TIME_FORMATTER
operator|.
name|parser
argument_list|()
operator|.
name|parseDateTime
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|method|format
specifier|private
specifier|static
name|String
name|format
parameter_list|(
name|DateTime
name|date
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
return|return
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|pattern
argument_list|)
operator|.
name|print
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|method|indexDoc
specifier|private
specifier|static
name|IndexRequestBuilder
name|indexDoc
parameter_list|(
name|String
name|idx
parameter_list|,
name|DateTime
name|date
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|idx
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date"
argument_list|,
name|date
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
return|;
block|}
DECL|method|indexDoc
specifier|private
name|IndexRequestBuilder
name|indexDoc
parameter_list|(
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|,
name|date
argument_list|(
name|month
argument_list|,
name|day
argument_list|)
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"dates"
argument_list|)
operator|.
name|value
argument_list|(
name|date
argument_list|(
name|month
argument_list|,
name|day
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|date
argument_list|(
name|month
operator|+
literal|1
argument_list|,
name|day
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
comment|// TODO: would be nice to have more random data here
name|prepareCreate
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"value"
argument_list|,
literal|"type=integer"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"empty_bucket_idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|i
operator|*
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builders
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|indexDoc
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// date: Jan 2, dates: Jan 2, Feb 3
name|indexDoc
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
comment|// date: Feb 2, dates: Feb 2, Mar 3
name|indexDoc
argument_list|(
literal|2
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|)
argument_list|,
comment|// date: Feb 15, dates: Feb 15, Mar 16
name|indexDoc
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
comment|// date: Mar 2, dates: Mar 2, Apr 3
name|indexDoc
argument_list|(
literal|3
argument_list|,
literal|15
argument_list|,
literal|5
argument_list|)
argument_list|,
comment|// date: Mar 15, dates: Mar 15, Apr 16
name|indexDoc
argument_list|(
literal|3
argument_list|,
literal|23
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// date: Mar 23, dates: Mar 23, Apr 24
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterEachTest
specifier|public
name|void
name|afterEachTest
parameter_list|()
throws|throws
name|IOException
block|{
name|internalCluster
argument_list|()
operator|.
name|wipeIndices
argument_list|(
name|IDX_DST_START
argument_list|,
name|IDX_DST_END
argument_list|,
name|IDX_DST_KATHMANDU
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedField
specifier|public
name|void
name|testSingleValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|MONTH
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|DateTime
name|key
init|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1d
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1d
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleValuedFieldNormalised
specifier|public
name|void
name|testSingleValuedFieldNormalised
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|MONTH
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|unit
argument_list|(
name|DateHistogramInterval
operator|.
name|DAY
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|DateTime
name|key
init|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Derivative
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1d
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|normalizedValue
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1d
operator|/
literal|31d
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1d
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|normalizedValue
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1d
operator|/
literal|29d
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Do a derivative on a date histogram with time zone CET at DST start      */
DECL|method|testSingleValuedFieldNormalised_timeZone_CET_DstStart
specifier|public
name|void
name|testSingleValuedFieldNormalised_timeZone_CET_DstStart
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
name|IDX_DST_START
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DateTimeZone
name|timezone
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|addNTimes
argument_list|(
literal|1
argument_list|,
name|IDX_DST_START
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-24T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|addNTimes
argument_list|(
literal|2
argument_list|,
name|IDX_DST_START
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-25T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
comment|// day with dst shift, only 23h long
name|addNTimes
argument_list|(
literal|3
argument_list|,
name|IDX_DST_START
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-26T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|addNTimes
argument_list|(
literal|4
argument_list|,
name|IDX_DST_START
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-27T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX_DST_START
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|timezone
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|unit
argument_list|(
name|DateHistogramInterval
operator|.
name|HOUR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-24"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|nullValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-25"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|2L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|24d
argument_list|)
expr_stmt|;
comment|// the following is normalized using a 23h bucket width
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-26"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|3L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|23d
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-03-27"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|4L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|24d
argument_list|)
expr_stmt|;
block|}
comment|/**      * Do a derivative on a date histogram with time zone CET at DST end      */
DECL|method|testSingleValuedFieldNormalised_timeZone_CET_DstEnd
specifier|public
name|void
name|testSingleValuedFieldNormalised_timeZone_CET_DstEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
name|IDX_DST_END
argument_list|)
expr_stmt|;
name|DateTimeZone
name|timezone
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addNTimes
argument_list|(
literal|1
argument_list|,
name|IDX_DST_END
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-27T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|addNTimes
argument_list|(
literal|2
argument_list|,
name|IDX_DST_END
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-28T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
comment|// day with dst shift -1h, 25h long
name|addNTimes
argument_list|(
literal|3
argument_list|,
name|IDX_DST_END
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-29T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|addNTimes
argument_list|(
literal|4
argument_list|,
name|IDX_DST_END
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-30T01:00:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX_DST_END
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|timezone
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|unit
argument_list|(
name|DateHistogramInterval
operator|.
name|HOUR
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-27"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|nullValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-28"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|2L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|24d
argument_list|)
expr_stmt|;
comment|// the following is normalized using a 25h bucket width
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-29"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|3L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|25d
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"2012-10-30"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|4L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|24d
argument_list|)
expr_stmt|;
block|}
comment|/**      * also check for time zone shifts that are not one hour, e.g.      * "Asia/Kathmandu, 1 Jan 1986 - Time Zone Change (IST â NPT), at 00:00:00 clocks were turned forward 00:15 minutes      */
DECL|method|testSingleValuedFieldNormalised_timeZone_AsiaKathmandu
specifier|public
name|void
name|testSingleValuedFieldNormalised_timeZone_AsiaKathmandu
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
name|IDX_DST_KATHMANDU
argument_list|)
expr_stmt|;
name|DateTimeZone
name|timezone
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Asia/Kathmandu"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addNTimes
argument_list|(
literal|1
argument_list|,
name|IDX_DST_KATHMANDU
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1985-12-31T22:30:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
comment|// the shift happens during the next bucket, which includes the 45min that do not start on the full hour
name|addNTimes
argument_list|(
literal|2
argument_list|,
name|IDX_DST_KATHMANDU
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1985-12-31T23:30:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|addNTimes
argument_list|(
literal|3
argument_list|,
name|IDX_DST_KATHMANDU
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1986-01-01T01:30:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|addNTimes
argument_list|(
literal|4
argument_list|,
name|IDX_DST_KATHMANDU
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1986-01-01T02:30:00"
argument_list|,
name|timezone
argument_list|)
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|IDX_DST_KATHMANDU
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|HOUR
argument_list|)
operator|.
name|timeZone
argument_list|(
name|timezone
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
operator|.
name|unit
argument_list|(
name|DateHistogramInterval
operator|.
name|MINUTE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1985-12-31T22:00:00"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|nullValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1985-12-31T23:00:00"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|2L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|60d
argument_list|)
expr_stmt|;
comment|// the following is normalized using a 105min bucket width
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1986-01-01T01:00:00"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|3L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|105d
argument_list|)
expr_stmt|;
name|assertBucket
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|DateTime
argument_list|(
literal|"1986-01-01T02:00:00"
argument_list|,
name|timezone
argument_list|)
operator|.
name|toDateTime
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|,
literal|4L
argument_list|,
name|notNullValue
argument_list|()
argument_list|,
literal|1d
argument_list|,
literal|1d
operator|/
literal|60d
argument_list|)
expr_stmt|;
block|}
DECL|method|addNTimes
specifier|private
specifier|static
name|void
name|addNTimes
parameter_list|(
name|int
name|amount
parameter_list|,
name|String
name|index
parameter_list|,
name|DateTime
name|dateTime
parameter_list|,
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|indexDoc
argument_list|(
name|index
argument_list|,
name|dateTime
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertBucket
specifier|private
specifier|static
name|void
name|assertBucket
parameter_list|(
name|Histogram
operator|.
name|Bucket
name|bucket
parameter_list|,
name|DateTime
name|expectedKey
parameter_list|,
name|long
name|expectedDocCount
parameter_list|,
name|Matcher
argument_list|<
name|Object
argument_list|>
name|derivativeMatcher
parameter_list|,
name|Double
name|derivative
parameter_list|,
name|Double
name|normalizedDerivative
parameter_list|)
block|{
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDocCount
argument_list|)
argument_list|)
expr_stmt|;
name|Derivative
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|derivativeMatcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|docCountDeriv
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|derivative
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|normalizedValue
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|normalizedDerivative
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSingleValuedFieldWithSubAggregation
specifier|public
name|void
name|testSingleValuedFieldWithSubAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|MONTH
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|propertiesKeys
init|=
operator|(
name|Object
index|[]
operator|)
name|histo
operator|.
name|getProperty
argument_list|(
literal|"_key"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesDocCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|histo
operator|.
name|getProperty
argument_list|(
literal|"_count"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|propertiesCounts
init|=
operator|(
name|Object
index|[]
operator|)
name|histo
operator|.
name|getProperty
argument_list|(
literal|"sum.value"
argument_list|)
decl_stmt|;
name|DateTime
name|key
init|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Sum
name|sum
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sum
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|deriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|propertiesKeys
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|propertiesCounts
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|sum
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sum
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.0
argument_list|)
argument_list|)
expr_stmt|;
name|deriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|bucket
operator|.
name|getProperty
argument_list|(
literal|"histo"
argument_list|,
name|AggregationPath
operator|.
name|parse
argument_list|(
literal|"deriv.value"
argument_list|)
operator|.
name|getPathElementsAsStringList
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|propertiesKeys
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|propertiesCounts
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
literal|5.0
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|sum
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"sum"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sum
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sum
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|15.0
argument_list|)
argument_list|)
expr_stmt|;
name|deriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|bucket
operator|.
name|getProperty
argument_list|(
literal|"histo"
argument_list|,
name|AggregationPath
operator|.
name|parse
argument_list|(
literal|"deriv.value"
argument_list|)
operator|.
name|getPathElementsAsStringList
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|propertiesKeys
index|[
literal|2
index|]
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|propertiesDocCounts
index|[
literal|2
index|]
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|propertiesCounts
index|[
literal|2
index|]
argument_list|,
name|equalTo
argument_list|(
literal|15.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedField
specifier|public
name|void
name|testMultiValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dates"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|MONTH
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|DateTime
name|key
init|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnmapped
specifier|public
name|void
name|testUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|MONTH
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartiallyUnmapped
specifier|public
name|void
name|testPartiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|dateHistogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|dateHistogramInterval
argument_list|(
name|DateHistogramInterval
operator|.
name|MONTH
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|derivative
argument_list|(
literal|"deriv"
argument_list|,
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Histogram
name|deriv
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|deriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deriv
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|deriv
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|DateTime
name|key
init|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountDeriv
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|DateTime
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|docCountDeriv
operator|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"deriv"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountDeriv
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

