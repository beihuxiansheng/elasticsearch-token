begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|KeywordFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filters
operator|.
name|FiltersAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filters
operator|.
name|FiltersAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filters
operator|.
name|InternalFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|FiltersAggregatorTests
specifier|public
class|class
name|FiltersAggregatorTests
extends|extends
name|AggregatorTestCase
block|{
DECL|field|fieldType
specifier|private
name|MappedFieldType
name|fieldType
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpTest
specifier|public
name|void
name|setUpTest
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|fieldType
operator|=
operator|new
name|KeywordFieldMapper
operator|.
name|KeywordFieldType
argument_list|()
expr_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|numFilters
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QueryBuilder
index|[]
name|filters
init|=
operator|new
name|QueryBuilder
index|[
name|numFilters
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|filters
index|[
name|i
index|]
operator|=
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FiltersAggregationBuilder
name|builder
init|=
operator|new
name|FiltersAggregationBuilder
argument_list|(
literal|"test"
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|builder
operator|.
name|otherBucketKey
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
name|InternalFilters
name|response
init|=
name|search
argument_list|(
name|indexSearcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|numFilters
argument_list|)
expr_stmt|;
for|for
control|(
name|InternalFilters
operator|.
name|InternalBucket
name|filter
range|:
name|response
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|filter
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testKeyedFilter
specifier|public
name|void
name|testKeyedFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"else"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// make sure we have more than one segment to test the merge
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"foobar"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"something"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"foobar"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FiltersAggregator
operator|.
name|KeyedFilter
index|[]
name|keys
init|=
operator|new
name|FiltersAggregator
operator|.
name|KeyedFilter
index|[
literal|6
index|]
decl_stmt|;
name|keys
index|[
literal|0
index|]
operator|=
operator|new
name|FiltersAggregator
operator|.
name|KeyedFilter
argument_list|(
literal|"foobar"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|keys
index|[
literal|1
index|]
operator|=
operator|new
name|FiltersAggregator
operator|.
name|KeyedFilter
argument_list|(
literal|"bar"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|keys
index|[
literal|2
index|]
operator|=
operator|new
name|FiltersAggregator
operator|.
name|KeyedFilter
argument_list|(
literal|"foo"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|keys
index|[
literal|3
index|]
operator|=
operator|new
name|FiltersAggregator
operator|.
name|KeyedFilter
argument_list|(
literal|"foo2"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|keys
index|[
literal|4
index|]
operator|=
operator|new
name|FiltersAggregator
operator|.
name|KeyedFilter
argument_list|(
literal|"same"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// filter name already present so it should be merge with the previous one ?
name|keys
index|[
literal|5
index|]
operator|=
operator|new
name|FiltersAggregator
operator|.
name|KeyedFilter
argument_list|(
literal|"same"
argument_list|,
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|FiltersAggregationBuilder
name|builder
init|=
operator|new
name|FiltersAggregationBuilder
argument_list|(
literal|"test"
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|builder
operator|.
name|otherBucket
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|otherBucketKey
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|doReduce
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
specifier|final
name|InternalFilters
name|filters
decl_stmt|;
if|if
condition|(
name|doReduce
condition|)
block|{
name|filters
operator|=
name|searchAndReduce
argument_list|(
name|indexSearcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filters
operator|=
name|search
argument_list|(
name|indexSearcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|filters
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"foo2"
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"same"
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filters
operator|.
name|getBucketByKey
argument_list|(
literal|"other"
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|indexWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|int
name|maxTerm
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|int
index|[]
name|expectedBucketCount
init|=
operator|new
name|int
index|[
name|maxTerm
index|]
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
comment|// make sure we have more than one segment to test the merge
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|int
name|value
init|=
name|randomInt
argument_list|(
name|maxTerm
operator|-
literal|1
argument_list|)
decl_stmt|;
name|expectedBucketCount
index|[
name|value
index|]
operator|+=
literal|1
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|numFilters
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QueryBuilder
index|[]
name|filters
init|=
operator|new
name|QueryBuilder
index|[
name|numFilters
index|]
decl_stmt|;
name|int
index|[]
name|filterTerms
init|=
operator|new
name|int
index|[
name|numFilters
index|]
decl_stmt|;
name|int
name|expectedOtherCount
init|=
name|numDocs
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|filterSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|randomInt
argument_list|(
name|maxTerm
operator|-
literal|1
argument_list|)
decl_stmt|;
name|filters
index|[
name|i
index|]
operator|=
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"field"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|filterTerms
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|filterSet
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expectedOtherCount
operator|-=
name|expectedBucketCount
index|[
name|value
index|]
expr_stmt|;
name|filterSet
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|FiltersAggregationBuilder
name|builder
init|=
operator|new
name|FiltersAggregationBuilder
argument_list|(
literal|"test"
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|builder
operator|.
name|otherBucket
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|otherBucketKey
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|doReduce
range|:
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
specifier|final
name|InternalFilters
name|response
decl_stmt|;
if|if
condition|(
name|doReduce
condition|)
block|{
name|response
operator|=
name|searchAndReduce
argument_list|(
name|indexSearcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
name|search
argument_list|(
name|indexSearcher
argument_list|,
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|builder
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|InternalFilters
operator|.
name|InternalBucket
argument_list|>
name|buckets
init|=
name|response
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|filters
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|InternalFilters
operator|.
name|InternalBucket
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
literal|"other"
operator|.
name|equals
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|expectedOtherCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|expectedBucketCount
index|[
name|filterTerms
index|[
name|index
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

