begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|global
operator|.
name|Global
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|scripted
operator|.
name|ScriptedMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|global
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|scriptedMetric
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|SUITE
argument_list|)
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|ScriptedMetricIT
specifier|public
class|class
name|ScriptedMetricIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|numDocs
specifier|private
specifier|static
name|long
name|numDocs
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|CustomScriptPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|class|CustomScriptPlugin
specifier|public
specifier|static
class|class
name|CustomScriptPlugin
extends|extends
name|MockScriptPlugin
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|pluginScripts
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|pluginScripts
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"_agg['count'] = 1"
argument_list|,
name|vars
lambda|->
name|aggScript
argument_list|(
name|vars
argument_list|,
name|agg
lambda|->
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|agg
operator|)
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"_agg.add(1)"
argument_list|,
name|vars
lambda|->
name|aggScript
argument_list|(
name|vars
argument_list|,
name|agg
lambda|->
operator|(
operator|(
name|List
operator|)
name|agg
operator|)
operator|.
name|add
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"vars.multiplier = 3"
argument_list|,
name|vars
lambda|->
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"vars"
argument_list|)
operator|)
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|scripts
operator|.
name|put
argument_list|(
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|vars
lambda|->
name|aggScript
argument_list|(
name|vars
argument_list|,
name|agg
lambda|->
operator|(
operator|(
name|List
operator|)
name|agg
operator|)
operator|.
name|add
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"vars.multiplier"
argument_list|,
name|vars
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Equivalent to:
comment|//
comment|// newaggregation = [];
comment|// sum = 0;
comment|//
comment|// for (a in _agg) {
comment|//      sum += a
comment|// };
comment|//
comment|// newaggregation.add(sum);
comment|// return newaggregation"
comment|//
name|scripts
operator|.
name|put
argument_list|(
literal|"sum agg values as a new aggregation"
argument_list|,
name|vars
lambda|->
block|{
name|List
name|newAggregation
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|agg
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
if|if
condition|(
name|agg
operator|!=
literal|null
condition|)
block|{
name|Integer
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|a
range|:
operator|(
name|List
operator|)
name|agg
control|)
block|{
name|sum
operator|+=
operator|(
operator|(
name|Number
operator|)
name|a
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|newAggregation
operator|.
name|add
argument_list|(
name|sum
argument_list|)
expr_stmt|;
block|}
return|return
name|newAggregation
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Equivalent to:
comment|//
comment|// newaggregation = [];
comment|// sum = 0;
comment|//
comment|// for (aggregation in _aggs) {
comment|//      for (a in aggregation) {
comment|//          sum += a
comment|//      }
comment|// };
comment|//
comment|// newaggregation.add(sum);
comment|// return newaggregation"
comment|//
name|scripts
operator|.
name|put
argument_list|(
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|vars
lambda|->
block|{
name|List
name|newAggregation
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Integer
name|sum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggs
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_aggs"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|aggregation
range|:
operator|(
name|List
operator|)
name|aggs
control|)
block|{
if|if
condition|(
name|aggregation
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|a
range|:
operator|(
name|List
operator|)
name|aggregation
control|)
block|{
name|sum
operator|+=
operator|(
operator|(
name|Number
operator|)
name|a
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|newAggregation
operator|.
name|add
argument_list|(
name|sum
argument_list|)
expr_stmt|;
return|return
name|newAggregation
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Equivalent to:
comment|//
comment|// newaggregation = [];
comment|// sum = 0;
comment|//
comment|// for (aggregation in _aggs) {
comment|//      for (a in aggregation) {
comment|//          sum += a
comment|//      }
comment|// };
comment|//
comment|// newaggregation.add(sum * multiplier);
comment|// return newaggregation"
comment|//
name|scripts
operator|.
name|put
argument_list|(
literal|"multiplied sum aggs of agg values as a new aggregation"
argument_list|,
name|vars
lambda|->
block|{
name|Integer
name|multiplier
init|=
operator|(
name|Integer
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"multiplier"
argument_list|)
decl_stmt|;
name|List
name|newAggregation
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Integer
name|sum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggs
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_aggs"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|aggregation
range|:
operator|(
name|List
operator|)
name|aggs
control|)
block|{
if|if
condition|(
name|aggregation
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|a
range|:
operator|(
name|List
operator|)
name|aggregation
control|)
block|{
name|sum
operator|+=
operator|(
operator|(
name|Number
operator|)
name|a
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|newAggregation
operator|.
name|add
argument_list|(
name|sum
operator|*
name|multiplier
argument_list|)
expr_stmt|;
return|return
name|newAggregation
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|scripts
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|aggScript
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|aggScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|fn
parameter_list|)
block|{
name|T
name|agg
init|=
operator|(
name|T
operator|)
name|vars
operator|.
name|get
argument_list|(
literal|"_agg"
argument_list|)
decl_stmt|;
name|fn
operator|.
name|accept
argument_list|(
name|agg
argument_list|)
expr_stmt|;
return|return
name|agg
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|numDocs
operator|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|15
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"l_value"
argument_list|,
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
comment|// creating an index to test the empty buckets functionality. The way it
comment|// works is by indexing
comment|// two docs {value: 0} and {value : 2}, then building a histogram agg
comment|// with interval 1 and with empty
comment|// buckets computed.. the empty bucket is the one associated with key
comment|// "1". then each test will have
comment|// to check that this bucket exists with the appropriate sub
comment|// aggregations.
name|prepareCreate
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"value"
argument_list|,
literal|"type=integer"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|builders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"empty_bucket_idx"
argument_list|,
literal|"type"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|i
operator|*
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// When using the MockScriptPlugin we can map Stored scripts to inline scripts:
comment|// the id of the stored script is used in test method while the source of the stored script
comment|// must match a predefined script from CustomScriptPlugin.pluginScripts() method
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"initScript_stored"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"script\":\"vars.multiplier = 3\"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"mapScript_stored"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"script\":\"_agg.add(vars.multiplier)\"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"combineScript_stored"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"script\":\"sum agg values as a new aggregation\"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutStoredScript
argument_list|()
operator|.
name|setLang
argument_list|(
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|)
operator|.
name|setId
argument_list|(
literal|"reduceScript_stored"
argument_list|)
operator|.
name|setContent
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"script\":\"sum aggs of agg values as a new aggregation\"}"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
name|Path
name|config
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
name|Path
name|scripts
init|=
name|config
operator|.
name|resolve
argument_list|(
literal|"scripts"
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|scripts
argument_list|)
expr_stmt|;
comment|// When using the MockScriptPlugin we can map File scripts to inline scripts:
comment|// the name of the file script is used in test method while the source of the file script
comment|// must match a predefined script from CustomScriptPlugin.pluginScripts() method
name|Files
operator|.
name|write
argument_list|(
name|scripts
operator|.
name|resolve
argument_list|(
literal|"init_script.mockscript"
argument_list|)
argument_list|,
literal|"vars.multiplier = 3"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|scripts
operator|.
name|resolve
argument_list|(
literal|"map_script.mockscript"
argument_list|)
argument_list|,
literal|"_agg.add(vars.multiplier)"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|scripts
operator|.
name|resolve
argument_list|(
literal|"combine_script.mockscript"
argument_list|)
argument_list|,
literal|"sum agg values as a new aggregation"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|scripts
operator|.
name|resolve
argument_list|(
literal|"reduce_script.mockscript"
argument_list|)
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to create scripts"
argument_list|)
throw|;
block|}
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|config
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testMap
specifier|public
name|void
name|testMap
parameter_list|()
block|{
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg['count'] = 1"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|getNumShards
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numShardsRun
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|aggregationList
control|)
block|{
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Number
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|numShardsRun
operator|++
expr_stmt|;
block|}
block|}
comment|// We don't know how many shards will have documents but we need to make
comment|// sure that at least one shard ran the map script
name|assertThat
argument_list|(
name|numShardsRun
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapWithParams
specifier|public
name|void
name|testMapWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(1)"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|getNumShards
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|aggregationList
control|)
block|{
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
name|assertThat
argument_list|(
name|o
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|o
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Number
name|numberValue
init|=
operator|(
name|Number
operator|)
name|o
decl_stmt|;
name|assertThat
argument_list|(
name|numberValue
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Number
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|totalCount
operator|+=
name|numberValue
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|totalCount
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapWithParams
specifier|public
name|void
name|testInitMapWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|mapScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|getNumShards
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|aggregationList
control|)
block|{
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
name|assertThat
argument_list|(
name|o
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|o
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Number
name|numberValue
init|=
operator|(
name|Number
operator|)
name|o
decl_stmt|;
name|assertThat
argument_list|(
name|numberValue
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Number
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|totalCount
operator|+=
name|numberValue
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|totalCount
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapCombineWithParams
specifier|public
name|void
name|testMapCombineWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(1)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|getNumShards
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|aggregationList
control|)
block|{
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
name|assertThat
argument_list|(
name|o
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|o
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Number
name|numberValue
init|=
operator|(
name|Number
operator|)
name|o
decl_stmt|;
comment|// A particular shard may not have any documents stored on it so
comment|// we have to assume the lower bound may be 0. The check at the
comment|// bottom of the test method will make sure the count is correct
name|assertThat
argument_list|(
name|numberValue
operator|.
name|longValue
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|totalCount
operator|+=
name|numberValue
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|totalCount
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapCombineWithParams
specifier|public
name|void
name|testInitMapCombineWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|initScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
name|initScript
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|getNumShards
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|aggregationList
control|)
block|{
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
name|assertThat
argument_list|(
name|o
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|o
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Number
name|numberValue
init|=
operator|(
name|Number
operator|)
name|o
decl_stmt|;
comment|// A particular shard may not have any documents stored on it so
comment|// we have to assume the lower bound may be 0. The check at the
comment|// bottom of the test method will make sure the count is correct
name|assertThat
argument_list|(
name|numberValue
operator|.
name|longValue
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|totalCount
operator|+=
name|numberValue
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|totalCount
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapCombineReduceWithParams
specifier|public
name|void
name|testInitMapCombineReduceWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|initScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
name|initScript
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|testInitMapCombineReduceGetProperty
specifier|public
name|void
name|testInitMapCombineReduceGetProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|initScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|global
argument_list|(
literal|"global"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
name|initScript
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Global
name|global
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"global"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|global
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"global"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getAggregations
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
name|global
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|InternalAggregation
operator|)
name|global
operator|)
operator|.
name|getProperty
argument_list|(
literal|"scripted"
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|scriptedMetricAggregation
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|List
call|)
argument_list|(
operator|(
name|InternalAggregation
operator|)
name|global
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"scripted.value"
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
operator|(
name|List
operator|)
name|aggregationList
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|List
call|)
argument_list|(
operator|(
name|InternalAggregation
operator|)
name|scriptedMetricAggregation
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
operator|(
name|List
operator|)
name|aggregationList
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapCombineReduceWithParams
specifier|public
name|void
name|testMapCombineReduceWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapReduceWithParams
specifier|public
name|void
name|testInitMapReduceWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|initScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
name|initScript
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapReduceWithParams
specifier|public
name|void
name|testMapReduceWithParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapCombineReduceWithParamsAndReduceParams
specifier|public
name|void
name|testInitMapCombineReduceWithParamsAndReduceParams
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reduceParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|reduceParams
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Script
name|initScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"multiplied sum aggs of agg values as a new aggregation"
argument_list|,
name|reduceParams
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
name|initScript
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapCombineReduceWithParamsStored
specifier|public
name|void
name|testInitMapCombineReduceWithParamsStored
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"initScript_stored"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|mapScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"mapScript_stored"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|combineScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"combineScript_stored"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|reduceScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|STORED
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"reduceScript_stored"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapCombineReduceWithParamsFile
specifier|public
name|void
name|testInitMapCombineReduceWithParamsFile
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|FILE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"init_script"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|mapScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|FILE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"map_script"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|combineScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|FILE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"combine_script"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|reduceScript
argument_list|(
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|FILE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"reduce_script"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitMapCombineReduceWithParamsAsSubAgg
specifier|public
name|void
name|testInitMapCombineReduceWithParamsAsSubAgg
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|initScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"l_value"
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
name|initScript
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|aggregation
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregation
argument_list|,
name|instanceOf
argument_list|(
name|Histogram
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histoAgg
init|=
operator|(
name|Histogram
operator|)
name|aggregation
decl_stmt|;
name|assertThat
argument_list|(
name|histoAgg
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histoAgg
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Bucket
name|b
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|b
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|b
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregations
name|subAggs
init|=
name|b
operator|.
name|getAggregations
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|subAggs
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subAggs
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|subAgg
init|=
name|subAggs
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|subAgg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subAgg
argument_list|,
name|instanceOf
argument_list|(
name|ScriptedMetric
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetricAggregation
init|=
operator|(
name|ScriptedMetric
operator|)
name|subAgg
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|aggregationList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|scriptedMetricAggregation
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|aggregationList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmptyAggregation
specifier|public
name|void
name|testEmptyAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|varsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|varsMap
operator|.
name|put
argument_list|(
literal|"multiplier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"_agg"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vars"
argument_list|,
name|varsMap
argument_list|)
expr_stmt|;
name|Script
name|initScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"vars.multiplier = 3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg.add(vars.multiplier)"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|combineScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Script
name|reduceScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"sum aggs of agg values as a new aggregation"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_bucket_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|)
operator|.
name|interval
argument_list|(
literal|1L
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"scripted"
argument_list|)
operator|.
name|params
argument_list|(
name|params
argument_list|)
operator|.
name|initScript
argument_list|(
name|initScript
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
operator|.
name|combineScript
argument_list|(
name|combineScript
argument_list|)
operator|.
name|reduceScript
argument_list|(
name|reduceScript
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|ScriptedMetric
name|scriptedMetric
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"scripted"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|scriptedMetric
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetric
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"scripted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// We'll just get a ClassCastException a couple lines down if we're wrong, its ok.
name|List
argument_list|<
name|Integer
argument_list|>
name|aggregationResult
init|=
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|scriptedMetric
operator|.
name|aggregation
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregationResult
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregationResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure that a request using a script does not get cached and a request      * not using a script does get cached.      */
DECL|method|testDontCacheScripts
specifier|public
name|void
name|testDontCacheScripts
parameter_list|()
throws|throws
name|Exception
block|{
name|Script
name|mapScript
init|=
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|CustomScriptPlugin
operator|.
name|NAME
argument_list|,
literal|"_agg['count'] = 1"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"d"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"requests.cache.enable"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"cache_test_idx"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"s"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"cache_test_idx"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"s"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure we are starting with a clear cache
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that a request using a script does not get cached
name|SearchResponse
name|r
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|scriptedMetric
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|mapScript
argument_list|(
name|mapScript
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"cache_test_idx"
argument_list|)
operator|.
name|setRequestCache
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getRequestCache
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

