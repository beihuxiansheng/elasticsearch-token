begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModuleTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|GaussDecayFunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|SearchPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactories
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregation
operator|.
name|ReduceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|ChiSquare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|SignificanceHeuristicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|AbstractPipelineAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|derivative
operator|.
name|DerivativePipelineAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|derivative
operator|.
name|DerivativePipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|derivative
operator|.
name|InternalDerivative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|MovAvgModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|SimpleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceAggregatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValuesSourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|ExplainFetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|CustomHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|FastVectorHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|Highlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|PlainHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|PostingsHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|CustomSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|SearchModuleTests
specifier|public
class|class
name|SearchModuleTests
extends|extends
name|ModuleTestCase
block|{
DECL|method|testDoubleRegister
specifier|public
name|void
name|testDoubleRegister
parameter_list|()
block|{
name|SearchPlugin
name|registersDupeHighlighter
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Highlighter
argument_list|>
name|getHighlighters
parameter_list|()
block|{
return|return
name|singletonMap
argument_list|(
literal|"plain"
argument_list|,
operator|new
name|PlainHighlighter
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeHighlighter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupeSuggester
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggester
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSuggesters
parameter_list|()
block|{
return|return
name|singletonMap
argument_list|(
literal|"term"
argument_list|,
name|TermSuggester
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeSuggester
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupeScoreFunction
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ScoreFunctionSpec
argument_list|<
name|?
argument_list|>
argument_list|>
name|getScoreFunctions
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|ScoreFunctionSpec
argument_list|<>
argument_list|(
name|GaussDecayFunctionBuilder
operator|.
name|NAME
argument_list|,
name|GaussDecayFunctionBuilder
operator|::
operator|new
argument_list|,
name|GaussDecayFunctionBuilder
operator|.
name|PARSER
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeScoreFunction
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupeSignificanceHeuristic
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SearchExtensionSpec
argument_list|<
name|SignificanceHeuristic
argument_list|,
name|SignificanceHeuristicParser
argument_list|>
argument_list|>
name|getSignificanceHeuristics
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|SearchExtensionSpec
argument_list|<>
argument_list|(
name|ChiSquare
operator|.
name|NAME
argument_list|,
name|ChiSquare
operator|::
operator|new
argument_list|,
name|ChiSquare
operator|.
name|PARSER
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeSignificanceHeuristic
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupeMovAvgModel
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SearchExtensionSpec
argument_list|<
name|MovAvgModel
argument_list|,
name|MovAvgModel
operator|.
name|AbstractModelParser
argument_list|>
argument_list|>
name|getMovingAverageModels
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|SearchExtensionSpec
argument_list|<>
argument_list|(
name|SimpleModel
operator|.
name|NAME
argument_list|,
name|SimpleModel
operator|::
operator|new
argument_list|,
name|SimpleModel
operator|.
name|PARSER
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeMovAvgModel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupeFetchSubPhase
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FetchSubPhase
argument_list|>
name|getFetchSubPhases
parameter_list|(
name|FetchPhaseConstructionContext
name|context
parameter_list|)
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|ExplainFetchSubPhase
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeFetchSubPhase
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupeQuery
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|SearchPlugin
operator|.
name|QuerySpec
argument_list|<
name|?
argument_list|>
argument_list|>
name|getQueries
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|QuerySpec
argument_list|<>
argument_list|(
name|TermQueryBuilder
operator|.
name|NAME
argument_list|,
name|TermQueryBuilder
operator|::
operator|new
argument_list|,
name|TermQueryBuilder
operator|::
name|fromXContent
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeQuery
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupeAggregation
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|AggregationSpec
argument_list|>
name|getAggregations
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|AggregationSpec
argument_list|(
name|TermsAggregationBuilder
operator|.
name|NAME
argument_list|,
name|TermsAggregationBuilder
operator|::
operator|new
argument_list|,
operator|new
name|TermsParser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupeAggregation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SearchPlugin
name|registersDupePipelineAggregation
init|=
operator|new
name|SearchPlugin
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|PipelineAggregationSpec
argument_list|>
name|getPipelineAggregations
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|PipelineAggregationSpec
argument_list|(
name|DerivativePipelineAggregationBuilder
operator|.
name|NAME
argument_list|,
name|DerivativePipelineAggregationBuilder
operator|::
operator|new
argument_list|,
name|DerivativePipelineAggregator
operator|::
operator|new
argument_list|,
name|DerivativePipelineAggregationBuilder
operator|::
name|parse
argument_list|)
operator|.
name|addResultReader
argument_list|(
name|InternalDerivative
operator|::
operator|new
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
name|registersDupePipelineAggregation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterSuggester
specifier|public
name|void
name|testRegisterSuggester
parameter_list|()
block|{
name|SearchModule
name|module
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Suggester
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSuggesters
parameter_list|()
block|{
return|return
name|singletonMap
argument_list|(
literal|"custom"
argument_list|,
name|CustomSuggester
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TermSuggester
operator|.
name|INSTANCE
argument_list|,
name|module
operator|.
name|getSuggesters
argument_list|()
operator|.
name|getSuggester
argument_list|(
literal|"term"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|PhraseSuggester
operator|.
name|INSTANCE
argument_list|,
name|module
operator|.
name|getSuggesters
argument_list|()
operator|.
name|getSuggester
argument_list|(
literal|"phrase"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CompletionSuggester
operator|.
name|INSTANCE
argument_list|,
name|module
operator|.
name|getSuggesters
argument_list|()
operator|.
name|getSuggester
argument_list|(
literal|"completion"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|CustomSuggester
operator|.
name|INSTANCE
argument_list|,
name|module
operator|.
name|getSuggesters
argument_list|()
operator|.
name|getSuggester
argument_list|(
literal|"custom"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterHighlighter
specifier|public
name|void
name|testRegisterHighlighter
parameter_list|()
block|{
name|CustomHighlighter
name|customHighlighter
init|=
operator|new
name|CustomHighlighter
argument_list|()
decl_stmt|;
name|SearchModule
name|module
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
operator|new
name|SearchPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Highlighter
argument_list|>
name|getHighlighters
parameter_list|()
block|{
return|return
name|singletonMap
argument_list|(
literal|"custom"
argument_list|,
name|customHighlighter
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Highlighter
argument_list|>
name|highlighters
init|=
name|module
operator|.
name|getHighlighters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|FastVectorHighlighter
operator|.
name|class
argument_list|,
name|highlighters
operator|.
name|get
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PlainHighlighter
operator|.
name|class
argument_list|,
name|highlighters
operator|.
name|get
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PostingsHighlighter
operator|.
name|class
argument_list|,
name|highlighters
operator|.
name|get
argument_list|(
literal|"postings"
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|highlighters
operator|.
name|get
argument_list|(
literal|"custom"
argument_list|)
argument_list|,
name|customHighlighter
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisteredQueries
specifier|public
name|void
name|testRegisteredQueries
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchModule
name|module
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allSupportedQueries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|allSupportedQueries
argument_list|,
name|NON_DEPRECATED_QUERIES
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|allSupportedQueries
argument_list|,
name|DEPRECATED_QUERIES
argument_list|)
expr_stmt|;
name|String
index|[]
name|supportedQueries
init|=
name|allSupportedQueries
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allSupportedQueries
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|module
operator|.
name|getQueryParserRegistry
argument_list|()
operator|.
name|getNames
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
name|supportedQueries
argument_list|)
argument_list|)
expr_stmt|;
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
init|=
name|module
operator|.
name|getQueryParserRegistry
argument_list|()
decl_stmt|;
name|XContentParser
name|dummyParser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queryName
range|:
name|supportedQueries
control|)
block|{
name|indicesQueriesRegistry
operator|.
name|lookup
argument_list|(
name|queryName
argument_list|,
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|,
name|dummyParser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|queryName
range|:
name|NON_DEPRECATED_QUERIES
control|)
block|{
name|QueryParser
argument_list|<
name|?
argument_list|>
name|queryParser
init|=
name|indicesQueriesRegistry
operator|.
name|lookup
argument_list|(
name|queryName
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|,
name|dummyParser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|queryParser
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|queryName
range|:
name|DEPRECATED_QUERIES
control|)
block|{
try|try
block|{
name|indicesQueriesRegistry
operator|.
name|lookup
argument_list|(
name|queryName
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|,
name|dummyParser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"query is deprecated, getQueryParser should have failed in strict mode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Deprecated field ["
operator|+
name|queryName
operator|+
literal|"] used"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRegisterAggregation
specifier|public
name|void
name|testRegisterAggregation
parameter_list|()
block|{
name|SearchModule
name|module
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
operator|new
name|SearchPlugin
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|AggregationSpec
argument_list|>
name|getAggregations
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|AggregationSpec
argument_list|(
literal|"test"
argument_list|,
name|TestAggregationBuilder
operator|::
operator|new
argument_list|,
name|TestAggregationBuilder
operator|::
name|fromXContent
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|module
operator|.
name|getAggregatorParsers
argument_list|()
operator|.
name|parser
argument_list|(
literal|"test"
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterPipelineAggregation
specifier|public
name|void
name|testRegisterPipelineAggregation
parameter_list|()
block|{
name|SearchModule
name|module
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|singletonList
argument_list|(
operator|new
name|SearchPlugin
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|PipelineAggregationSpec
argument_list|>
name|getPipelineAggregations
parameter_list|()
block|{
return|return
name|singletonList
argument_list|(
operator|new
name|PipelineAggregationSpec
argument_list|(
literal|"test"
argument_list|,
name|TestPipelineAggregationBuilder
operator|::
operator|new
argument_list|,
name|TestPipelineAggregator
operator|::
operator|new
argument_list|,
name|TestPipelineAggregationBuilder
operator|::
name|fromXContent
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|module
operator|.
name|getAggregatorParsers
argument_list|()
operator|.
name|pipelineParser
argument_list|(
literal|"test"
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|NON_DEPRECATED_QUERIES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NON_DEPRECATED_QUERIES
init|=
operator|new
name|String
index|[]
block|{
literal|"bool"
block|,
literal|"boosting"
block|,
literal|"common"
block|,
literal|"constant_score"
block|,
literal|"dis_max"
block|,
literal|"exists"
block|,
literal|"field_masking_span"
block|,
literal|"function_score"
block|,
literal|"fuzzy"
block|,
literal|"geo_bounding_box"
block|,
literal|"geo_distance"
block|,
literal|"geo_distance_range"
block|,
literal|"geo_polygon"
block|,
literal|"geo_shape"
block|,
literal|"geohash_cell"
block|,
literal|"has_child"
block|,
literal|"has_parent"
block|,
literal|"ids"
block|,
literal|"indices"
block|,
literal|"match"
block|,
literal|"match_all"
block|,
literal|"match_none"
block|,
literal|"match_phrase"
block|,
literal|"match_phrase_prefix"
block|,
literal|"more_like_this"
block|,
literal|"multi_match"
block|,
literal|"nested"
block|,
literal|"parent_id"
block|,
literal|"prefix"
block|,
literal|"query_string"
block|,
literal|"range"
block|,
literal|"regexp"
block|,
literal|"script"
block|,
literal|"simple_query_string"
block|,
literal|"span_containing"
block|,
literal|"span_first"
block|,
literal|"span_multi"
block|,
literal|"span_near"
block|,
literal|"span_not"
block|,
literal|"span_or"
block|,
literal|"span_term"
block|,
literal|"span_within"
block|,
literal|"term"
block|,
literal|"terms"
block|,
literal|"type"
block|,
literal|"wildcard"
block|,
literal|"wrapper"
block|}
decl_stmt|;
DECL|field|DEPRECATED_QUERIES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEPRECATED_QUERIES
init|=
operator|new
name|String
index|[]
block|{
literal|"fuzzy_match"
block|,
literal|"geo_bbox"
block|,
literal|"in"
block|,
literal|"match_fuzzy"
block|,
literal|"mlt"
block|}
decl_stmt|;
comment|/**      * Dummy test {@link AggregationBuilder} used to test registering aggregation builders.      */
DECL|class|TestAggregationBuilder
specifier|private
specifier|static
class|class
name|TestAggregationBuilder
extends|extends
name|ValuesSourceAggregationBuilder
argument_list|<
name|ValuesSource
argument_list|,
name|TestAggregationBuilder
argument_list|>
block|{
comment|/**          * Read from a stream.          */
DECL|method|TestAggregationBuilder
specifier|protected
name|TestAggregationBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
DECL|method|innerWriteTo
specifier|protected
name|void
name|innerWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|innerBuild
specifier|protected
name|ValuesSourceAggregatorFactory
argument_list|<
name|ValuesSource
argument_list|,
name|?
argument_list|>
name|innerBuild
parameter_list|(
name|AggregationContext
name|context
parameter_list|,
name|ValuesSourceConfig
argument_list|<
name|ValuesSource
argument_list|>
name|config
parameter_list|,
name|AggregatorFactory
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|Builder
name|subFactoriesBuilder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|XContentBuilder
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|innerHashCode
specifier|protected
name|int
name|innerHashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|innerEquals
specifier|protected
name|boolean
name|innerEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|fromXContent
specifier|private
specifier|static
name|TestAggregationBuilder
name|fromXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|QueryParseContext
name|c
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Dummy test {@link PipelineAggregator} used to test registering aggregation builders.      */
DECL|class|TestPipelineAggregationBuilder
specifier|private
specifier|static
class|class
name|TestPipelineAggregationBuilder
extends|extends
name|AbstractPipelineAggregationBuilder
argument_list|<
name|TestPipelineAggregationBuilder
argument_list|>
block|{
comment|/**          * Read from a stream.          */
DECL|method|TestPipelineAggregationBuilder
specifier|public
name|TestPipelineAggregationBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|createInternal
specifier|protected
name|PipelineAggregator
name|createInternal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|internalXContent
specifier|protected
name|XContentBuilder
name|internalXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doHashCode
specifier|protected
name|int
name|doHashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|doEquals
specifier|protected
name|boolean
name|doEquals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|fromXContent
specifier|private
specifier|static
name|TestPipelineAggregationBuilder
name|fromXContent
parameter_list|(
name|String
name|name
parameter_list|,
name|QueryParseContext
name|c
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Dummy test {@link PipelineAggregator} used to test registering aggregation builders.      */
DECL|class|TestPipelineAggregator
specifier|private
specifier|static
class|class
name|TestPipelineAggregator
extends|extends
name|PipelineAggregator
block|{
comment|/**          * Read from a stream.          */
DECL|method|TestPipelineAggregator
specifier|public
name|TestPipelineAggregator
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
DECL|method|doWriteTo
specifier|protected
name|void
name|doWriteTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|reduce
specifier|public
name|InternalAggregation
name|reduce
parameter_list|(
name|InternalAggregation
name|aggregation
parameter_list|,
name|ReduceContext
name|reduceContext
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

