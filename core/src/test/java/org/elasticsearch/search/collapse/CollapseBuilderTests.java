begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.collapse
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|KeywordFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|InnerHitBuilderTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractSerializingTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|CollapseBuilderTests
specifier|public
class|class
name|CollapseBuilderTests
extends|extends
name|AbstractSerializingTestCase
argument_list|<
name|CollapseBuilder
argument_list|>
block|{
DECL|field|namedWriteableRegistry
specifier|private
specifier|static
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
DECL|field|xContentRegistry
specifier|private
specifier|static
name|NamedXContentRegistry
name|xContentRegistry
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|SearchModule
name|searchModule
init|=
operator|new
name|SearchModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|namedWriteableRegistry
operator|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|searchModule
operator|.
name|getNamedWriteables
argument_list|()
argument_list|)
expr_stmt|;
name|xContentRegistry
operator|=
operator|new
name|NamedXContentRegistry
argument_list|(
name|searchModule
operator|.
name|getNamedXContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|namedWriteableRegistry
operator|=
literal|null
expr_stmt|;
name|xContentRegistry
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|randomCollapseBuilder
specifier|public
specifier|static
name|CollapseBuilder
name|randomCollapseBuilder
parameter_list|()
block|{
return|return
name|randomCollapseBuilder
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|randomCollapseBuilder
specifier|public
specifier|static
name|CollapseBuilder
name|randomCollapseBuilder
parameter_list|(
name|boolean
name|multiInnerHits
parameter_list|)
block|{
name|CollapseBuilder
name|builder
init|=
operator|new
name|CollapseBuilder
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setMaxConcurrentGroupRequests
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|48
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numInnerHits
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|multiInnerHits
condition|?
literal|5
else|:
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|numInnerHits
operator|==
literal|1
condition|)
block|{
name|InnerHitBuilder
name|innerHit
init|=
name|InnerHitBuilderTests
operator|.
name|randomInnerHits
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setInnerHits
argument_list|(
name|innerHit
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numInnerHits
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|InnerHitBuilder
argument_list|>
name|innerHits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numInnerHits
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInnerHits
condition|;
name|i
operator|++
control|)
block|{
name|innerHits
operator|.
name|add
argument_list|(
name|InnerHitBuilderTests
operator|.
name|randomInnerHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setInnerHits
argument_list|(
name|innerHits
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|CollapseBuilder
name|createTestInstance
parameter_list|()
block|{
return|return
name|randomCollapseBuilder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|CollapseBuilder
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|CollapseBuilder
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|getNamedWriteableRegistry
specifier|protected
name|NamedWriteableRegistry
name|getNamedWriteableRegistry
parameter_list|()
block|{
return|return
name|namedWriteableRegistry
return|;
block|}
annotation|@
name|Override
DECL|method|xContentRegistry
specifier|protected
name|NamedXContentRegistry
name|xContentRegistry
parameter_list|()
block|{
return|return
name|xContentRegistry
return|;
block|}
DECL|method|mockSearchContext
specifier|private
name|SearchContext
name|mockSearchContext
parameter_list|()
block|{
name|SearchContext
name|context
init|=
name|mock
argument_list|(
name|SearchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueryShardContext
name|shardContext
init|=
name|mock
argument_list|(
name|QueryShardContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getQueryShardContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|shardContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|scrollContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|rescore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|searchAfter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|testBuild
specifier|public
name|void
name|testBuild
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
try|try
init|(
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|SearchContext
name|searchContext
init|=
name|mockSearchContext
argument_list|()
decl_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
init|)
block|{
name|when
argument_list|(
name|searchContext
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|MappedFieldType
name|numberFieldType
init|=
operator|new
name|NumberFieldMapper
operator|.
name|NumberFieldType
argument_list|(
name|NumberFieldMapper
operator|.
name|NumberType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|MappedFieldType
name|keywordFieldType
init|=
operator|new
name|KeywordFieldMapper
operator|.
name|KeywordFieldType
argument_list|()
decl_stmt|;
for|for
control|(
name|MappedFieldType
name|fieldType
range|:
operator|new
name|MappedFieldType
index|[]
block|{
name|numberFieldType
block|,
name|keywordFieldType
block|}
control|)
block|{
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|searchContext
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|fieldMapper
argument_list|(
literal|"field"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
name|CollapseBuilder
name|builder
init|=
operator|new
name|CollapseBuilder
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|CollapseContext
name|collapseContext
init|=
name|builder
operator|.
name|build
argument_list|(
name|searchContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|collapseContext
operator|.
name|getFieldType
argument_list|()
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|collapseContext
operator|=
name|builder
operator|.
name|build
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collapseContext
operator|.
name|getFieldType
argument_list|()
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SearchContextException
name|exc
init|=
name|expectThrows
argument_list|(
name|SearchContextException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|build
argument_list|(
name|searchContext
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"cannot collapse on field `field` without `doc_values`"
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setInnerHits
argument_list|(
operator|new
name|InnerHitBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|exc
operator|=
name|expectThrows
argument_list|(
name|SearchContextException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|build
argument_list|(
name|searchContext
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"cannot expand `inner_hits` for collapse field `field`, "
operator|+
literal|"only indexed field can retrieve `inner_hits`"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBuildWithSearchContextExceptions
specifier|public
name|void
name|testBuildWithSearchContextExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchContext
name|context
init|=
name|mockSearchContext
argument_list|()
decl_stmt|;
block|{
name|CollapseBuilder
name|builder
init|=
operator|new
name|CollapseBuilder
argument_list|(
literal|"unknown_field"
argument_list|)
decl_stmt|;
name|SearchContextException
name|exc
init|=
name|expectThrows
argument_list|(
name|SearchContextException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|build
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"no mapping found for `unknown_field` in order to collapse on"
argument_list|)
expr_stmt|;
block|}
block|{
name|MappedFieldType
name|fieldType
init|=
operator|new
name|MappedFieldType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MappedFieldType
name|clone
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|termQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|fieldType
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setHasDocValues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|fieldMapper
argument_list|(
literal|"field"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
name|CollapseBuilder
name|builder
init|=
operator|new
name|CollapseBuilder
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|SearchContextException
name|exc
init|=
name|expectThrows
argument_list|(
name|SearchContextException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|build
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exc
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"unknown type for collapse field `field`, only keywords and numbers are accepted"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doParseInstance
specifier|protected
name|CollapseBuilder
name|doParseInstance
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|CollapseBuilder
operator|.
name|fromXContent
argument_list|(
operator|new
name|QueryParseContext
argument_list|(
name|parser
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Rewrite this test to disable xcontent shuffling on the highlight builder      */
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TEST_RUNS
condition|;
name|runs
operator|++
control|)
block|{
name|CollapseBuilder
name|testInstance
init|=
name|createTestInstance
argument_list|()
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|toXContent
argument_list|(
name|testInstance
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|XContentBuilder
name|shuffled
init|=
name|shuffleXContent
argument_list|(
name|builder
argument_list|,
literal|"fields"
argument_list|)
decl_stmt|;
name|assertParsedInstance
argument_list|(
name|xContentType
argument_list|,
name|shuffled
operator|.
name|bytes
argument_list|()
argument_list|,
name|testInstance
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CollapseBuilder
argument_list|>
name|alternateVersion
range|:
name|getAlternateVersions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|instanceAsString
init|=
name|alternateVersion
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertParsedInstance
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|instanceAsString
argument_list|)
argument_list|,
name|alternateVersion
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

