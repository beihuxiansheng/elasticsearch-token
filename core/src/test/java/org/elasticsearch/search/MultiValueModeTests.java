begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|NumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
operator|.
name|UnsortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|MultiValueModeTests
specifier|public
class|class
name|MultiValueModeTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|FunctionalInterface
DECL|interface|Supplier
specifier|private
interface|interface
name|Supplier
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|get
name|T
name|get
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|method|randomRootDocs
specifier|private
specifier|static
name|FixedBitSet
name|randomRootDocs
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|set
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the last doc must be a root doc
name|set
operator|.
name|set
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|method|randomInnerDocs
specifier|private
specifier|static
name|FixedBitSet
name|randomInnerDocs
parameter_list|(
name|FixedBitSet
name|rootDocs
parameter_list|)
block|{
name|FixedBitSet
name|innerDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|rootDocs
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|innerDocs
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|rootDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|innerDocs
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|innerDocs
return|;
block|}
DECL|method|testSingleValuedLongs
specifier|public
name|void
name|testSingleValuedLongs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|array
init|=
operator|new
name|long
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithValue
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedNumericDocValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
name|DocValues
operator|.
name|singleton
argument_list|(
operator|new
name|AbstractNumericDocValues
argument_list|()
block|{
name|int
name|docId
operator|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docId
operator|=
name|target
expr_stmt|;
return|return
name|docsWithValue
operator|==
literal|null
condition|?
literal|true
else|:
name|docsWithValue
operator|.
name|get
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
block|{
return|return
name|array
index|[
name|docId
index|]
return|;
block|}
block|}
block|)
class|;
end_class

begin_expr_stmt
name|verifySortedNumeric
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedNumeric
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testMultiValuedLongs
name|void
name|testMultiValuedLongs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
index|[]
name|array
init|=
operator|new
name|long
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedNumericDocValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
operator|new
name|AbstractSortedNumericDocValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
name|int
name|i
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
index|[
name|i
operator|++
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|verifySortedNumeric
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedNumeric
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
DECL|method|verifySortedNumeric
name|void
name|verifySortedNumeric
parameter_list|(
name|Supplier
argument_list|<
name|SortedNumericDocValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
name|MultiValueMode
operator|.
name|values
argument_list|()
control|)
block|{
name|SortedNumericDocValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|NumericDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|selected
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|actual
init|=
name|selected
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|expected
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|docValueCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|SUM
operator|||
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|+=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|=
name|numValues
operator|>
literal|1
condition|?
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|expected
operator|/
operator|(
name|double
operator|)
name|numValues
argument_list|)
else|:
name|expected
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MEDIAN
condition|)
block|{
name|int
name|value
init|=
name|numValues
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|numValues
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|value
operator|-
literal|1
condition|;
operator|++
name|j
control|)
block|{
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
name|expected
operator|=
name|Math
operator|.
name|round
argument_list|(
operator|(
operator|(
name|double
operator|)
name|values
operator|.
name|nextValue
argument_list|()
operator|+
name|values
operator|.
name|nextValue
argument_list|()
operator|)
operator|/
literal|2.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|value
condition|;
operator|++
name|j
control|)
block|{
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
name|expected
operator|=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|verifySortedNumeric
specifier|private
name|void
name|verifySortedNumeric
parameter_list|(
name|Supplier
argument_list|<
name|SortedNumericDocValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|,
name|MultiValueMode
operator|.
name|SUM
block|,
name|MultiValueMode
operator|.
name|AVG
block|}
control|)
block|{
name|SortedNumericDocValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|NumericDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitSetIterator
argument_list|(
name|innerDocs
argument_list|,
literal|0L
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
name|assertTrue
argument_list|(
name|selected
operator|.
name|advanceExact
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|actual
init|=
name|selected
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|expected
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|int
name|numValues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|child
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|docValueCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|SUM
operator|||
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|+=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|++
name|numValues
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|=
name|numValues
operator|>
literal|1
condition|?
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|expected
operator|/
operator|(
name|double
operator|)
name|numValues
argument_list|)
else|:
name|expected
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|testSingleValuedDoubles
specifier|public
name|void
name|testSingleValuedDoubles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithValue
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedNumericDoubleValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
name|FieldData
operator|.
name|singleton
argument_list|(
operator|new
name|NumericDoubleValues
argument_list|()
block|{
name|int
name|docID
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|docID
operator|=
name|doc
expr_stmt|;
return|return
name|docsWithValue
operator|==
literal|null
operator|||
name|docsWithValue
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
name|array
index|[
name|docID
index|]
return|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|verifySortedNumericDouble
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedNumericDouble
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testMultiValuedDoubles
name|void
name|testMultiValuedDoubles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
index|[]
name|array
init|=
operator|new
name|double
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedNumericDoubleValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
operator|new
name|SortedNumericDoubleValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
name|int
name|i
decl_stmt|;
annotation|@
name|Override
specifier|public
name|double
name|nextValue
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
index|[
name|i
operator|++
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|verifySortedNumericDouble
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedNumericDouble
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
DECL|method|verifySortedNumericDouble
name|void
name|verifySortedNumericDouble
parameter_list|(
name|Supplier
argument_list|<
name|SortedNumericDoubleValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
name|MultiValueMode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiValueMode
operator|.
name|MEDIAN
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SortedNumericDoubleValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|NumericDoubleValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|selected
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|double
name|actual
init|=
name|selected
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|expected
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|docValueCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|SUM
operator|||
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|+=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|=
name|expected
operator|/
name|numValues
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MEDIAN
condition|)
block|{
name|int
name|value
init|=
name|numValues
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|numValues
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|value
operator|-
literal|1
condition|;
operator|++
name|j
control|)
block|{
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
name|expected
operator|=
operator|(
name|values
operator|.
name|nextValue
argument_list|()
operator|+
name|values
operator|.
name|nextValue
argument_list|()
operator|)
operator|/
literal|2.0
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|value
condition|;
operator|++
name|j
control|)
block|{
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
name|expected
operator|=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|verifySortedNumericDouble
specifier|private
name|void
name|verifySortedNumericDouble
parameter_list|(
name|Supplier
argument_list|<
name|SortedNumericDoubleValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|,
name|MultiValueMode
operator|.
name|SUM
block|,
name|MultiValueMode
operator|.
name|AVG
block|}
control|)
block|{
name|SortedNumericDoubleValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|NumericDoubleValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitSetIterator
argument_list|(
name|innerDocs
argument_list|,
literal|0L
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
name|assertTrue
argument_list|(
name|selected
operator|.
name|advanceExact
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|double
name|actual
init|=
name|selected
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
empty_stmt|;
name|double
name|expected
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|int
name|numValues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|child
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|docValueCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|SUM
operator|||
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|+=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|++
name|numValues
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|=
name|expected
operator|/
name|numValues
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|testSingleValuedStrings
specifier|public
name|void
name|testSingleValuedStrings
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
index|[]
name|array
init|=
operator|new
name|BytesRef
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithValue
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|array
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedBinaryDocValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
name|FieldData
operator|.
name|singleton
argument_list|(
operator|new
name|AbstractBinaryDocValues
argument_list|()
block|{
name|int
name|docID
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|docID
operator|=
name|target
expr_stmt|;
return|return
name|docsWithValue
operator|==
literal|null
operator|||
name|docsWithValue
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|array
index|[
name|docID
index|]
argument_list|)
return|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|verifySortedBinary
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedBinary
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testMultiValuedStrings
name|void
name|testMultiValuedStrings
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
index|[]
index|[]
name|array
init|=
operator|new
name|BytesRef
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
index|[]
name|values
init|=
operator|new
name|BytesRef
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedBinaryDocValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
operator|new
name|SortedBinaryDocValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
name|int
name|i
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|array
index|[
name|doc
index|]
index|[
name|i
operator|++
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|verifySortedBinary
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedBinary
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
DECL|method|verifySortedBinary
name|void
name|verifySortedBinary
parameter_list|(
name|Supplier
argument_list|<
name|SortedBinaryDocValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BytesRef
name|missingValue
range|:
operator|new
name|BytesRef
index|[]
block|{
operator|new
name|BytesRef
argument_list|()
block|,
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
name|SortedBinaryDocValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|BinaryDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|selected
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|actual
init|=
name|selected
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|BytesRef
name|expected
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|docValueCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesRef
name|value
init|=
name|values
operator|.
name|nextValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|expected
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<=
literal|0
condition|?
name|expected
else|:
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|expected
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>
literal|0
condition|?
name|expected
else|:
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|verifySortedBinary
specifier|private
name|void
name|verifySortedBinary
parameter_list|(
name|Supplier
argument_list|<
name|SortedBinaryDocValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BytesRef
name|missingValue
range|:
operator|new
name|BytesRef
index|[]
block|{
operator|new
name|BytesRef
argument_list|()
block|,
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
name|SortedBinaryDocValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|BinaryDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitSetIterator
argument_list|(
name|innerDocs
argument_list|,
literal|0L
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
name|assertTrue
argument_list|(
name|selected
operator|.
name|advanceExact
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|actual
init|=
name|selected
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|BytesRef
name|expected
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|child
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|docValueCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesRef
name|value
init|=
name|values
operator|.
name|nextValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|expected
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<=
literal|0
condition|?
name|expected
else|:
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|expected
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>
literal|0
condition|?
name|expected
else|:
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|testSingleValuedOrds
specifier|public
name|void
name|testSingleValuedOrds
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|array
init|=
operator|new
name|int
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedSetDocValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
name|DocValues
operator|.
name|singleton
argument_list|(
operator|new
name|AbstractSortedDocValues
argument_list|()
block|{
specifier|private
name|int
name|docID
operator|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|docID
operator|=
name|target
expr_stmt|;
return|return
name|array
index|[
name|docID
index|]
operator|!=
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|ordValue
parameter_list|()
block|{
return|return
name|array
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
literal|1
operator|<<
literal|20
return|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|verifySortedSet
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedSet
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testMultiValuedOrds
name|void
name|testMultiValuedOrds
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
index|[]
name|array
init|=
operator|new
name|long
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
name|j
operator|==
literal|0
condition|?
name|randomInt
argument_list|(
literal|1000
argument_list|)
else|:
name|values
index|[
name|j
operator|-
literal|1
index|]
operator|+
literal|1
operator|+
name|randomInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|Supplier
argument_list|<
name|SortedSetDocValues
argument_list|>
name|multiValues
init|=
parameter_list|()
lambda|->
operator|new
name|AbstractSortedSetDocValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
name|int
name|i
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
if|if
condition|(
name|i
operator|<
name|array
index|[
name|doc
index|]
operator|.
name|length
condition|)
block|{
return|return
name|array
index|[
name|doc
index|]
index|[
name|i
operator|++
index|]
return|;
block|}
else|else
block|{
return|return
name|NO_MORE_ORDS
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|docID
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
literal|1
operator|<<
literal|20
return|;
block|}
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|verifySortedSet
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|verifySortedSet
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
DECL|method|verifySortedSet
name|void
name|verifySortedSet
parameter_list|(
name|Supplier
argument_list|<
name|SortedSetDocValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
name|SortedSetDocValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|SortedDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|actual
init|=
name|selected
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
condition|?
name|selected
operator|.
name|ordValue
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|int
name|expected
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
condition|)
block|{
for|for
control|(
name|long
name|ord
init|=
name|values
operator|.
name|nextOrd
argument_list|()
init|;
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
control|)
block|{
if|if
condition|(
name|expected
operator|==
operator|-
literal|1
condition|)
block|{
name|expected
operator|=
operator|(
name|int
operator|)
name|ord
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
operator|(
name|int
operator|)
name|ord
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expected
argument_list|,
operator|(
name|int
operator|)
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|verifySortedSet
specifier|private
name|void
name|verifySortedSet
parameter_list|(
name|Supplier
argument_list|<
name|SortedSetDocValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
name|SortedSetDocValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|SortedDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitSetIterator
argument_list|(
name|innerDocs
argument_list|,
literal|0L
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
specifier|final
name|int
name|actual
init|=
name|selected
operator|.
name|advanceExact
argument_list|(
name|root
argument_list|)
condition|?
name|selected
operator|.
name|ordValue
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|int
name|expected
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|child
argument_list|)
condition|)
block|{
for|for
control|(
name|long
name|ord
init|=
name|values
operator|.
name|nextOrd
argument_list|()
init|;
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
control|)
block|{
if|if
condition|(
name|expected
operator|==
operator|-
literal|1
condition|)
block|{
name|expected
operator|=
operator|(
name|int
operator|)
name|ord
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
operator|(
name|int
operator|)
name|ord
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expected
argument_list|,
operator|(
name|int
operator|)
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testUnsortedSingleValuedDoubles
specifier|public
name|void
name|testUnsortedSingleValuedDoubles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithValue
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|NumericDoubleValues
name|singleValues
init|=
operator|new
name|NumericDoubleValues
argument_list|()
block|{
specifier|private
name|int
name|docID
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|docID
operator|=
name|doc
expr_stmt|;
return|return
name|docsWithValue
operator|==
literal|null
operator|||
name|docsWithValue
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
name|array
index|[
name|docID
index|]
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|SortedNumericDoubleValues
name|singletonValues
init|=
name|FieldData
operator|.
name|singleton
argument_list|(
name|singleValues
argument_list|)
decl_stmt|;
specifier|final
name|MultiValueMode
operator|.
name|UnsortedNumericDoubleValues
name|multiValues
init|=
operator|new
name|MultiValueMode
operator|.
name|UnsortedNumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|singletonValues
operator|.
name|docValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|singletonValues
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Math
operator|.
name|cos
argument_list|(
name|singletonValues
operator|.
name|nextValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|verifyUnsortedNumeric
argument_list|(
parameter_list|()
lambda|->
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testUnsortedMultiValuedDoubles
specifier|public
name|void
name|testUnsortedMultiValuedDoubles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
index|[]
name|array
init|=
operator|new
name|double
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|MultiValueMode
operator|.
name|UnsortedNumericDoubleValues
name|multiValues
init|=
operator|new
name|MultiValueMode
operator|.
name|UnsortedNumericDoubleValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
name|int
name|i
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|nextValue
parameter_list|()
block|{
return|return
name|Math
operator|.
name|sin
argument_list|(
name|array
index|[
name|doc
index|]
index|[
name|i
operator|++
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|verifyUnsortedNumeric
argument_list|(
parameter_list|()
lambda|->
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|verifyUnsortedNumeric
specifier|private
name|void
name|verifyUnsortedNumeric
parameter_list|(
name|Supplier
argument_list|<
name|MultiValueMode
operator|.
name|UnsortedNumericDoubleValues
argument_list|>
name|supplier
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|double
name|missingValue
range|:
operator|new
name|double
index|[]
block|{
literal|0
block|,
name|randomDouble
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|,
name|MultiValueMode
operator|.
name|SUM
block|,
name|MultiValueMode
operator|.
name|AVG
block|}
control|)
block|{
name|UnsortedNumericDoubleValues
name|values
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|NumericDoubleValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|selected
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|double
name|actual
init|=
name|selected
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|expected
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|docValueCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|SUM
operator|||
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|+=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MIN
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|MAX
condition|)
block|{
name|expected
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mode
operator|==
name|MultiValueMode
operator|.
name|AVG
condition|)
block|{
name|expected
operator|=
name|expected
operator|/
name|numValues
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
DECL|method|testValidOrdinals
specifier|public
name|void
name|testValidOrdinals
parameter_list|()
block|{
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|SUM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|AVG
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|MEDIAN
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|MIN
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|MAX
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWriteTo
specifier|public
name|void
name|testWriteTo
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|MultiValueMode
operator|.
name|SUM
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|MultiValueMode
operator|.
name|AVG
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|MultiValueMode
operator|.
name|MEDIAN
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|MultiValueMode
operator|.
name|MIN
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|MultiValueMode
operator|.
name|MAX
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testReadFrom
specifier|public
name|void
name|testReadFrom
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|readMultiValueModeFrom
argument_list|(
name|in
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|SUM
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|readMultiValueModeFrom
argument_list|(
name|in
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|AVG
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|readMultiValueModeFrom
argument_list|(
name|in
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|MEDIAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|readMultiValueModeFrom
argument_list|(
name|in
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|MIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|readMultiValueModeFrom
argument_list|(
name|in
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testFromString
specifier|public
name|void
name|testFromString
parameter_list|()
block|{
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|fromString
argument_list|(
literal|"sum"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|SUM
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|fromString
argument_list|(
literal|"avg"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|AVG
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|fromString
argument_list|(
literal|"median"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|MEDIAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|fromString
argument_list|(
literal|"min"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|MIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|MultiValueMode
operator|.
name|fromString
argument_list|(
literal|"max"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|MultiValueMode
operator|.
name|MAX
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

