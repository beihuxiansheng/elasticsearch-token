begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.slice
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|slice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|DocValuesSliceQueryTests
specifier|public
class|class
name|DocValuesSliceQueryTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|DocValuesSliceQuery
name|query1
init|=
operator|new
name|DocValuesSliceQuery
argument_list|(
literal|"field1"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DocValuesSliceQuery
name|query2
init|=
operator|new
name|DocValuesSliceQuery
argument_list|(
literal|"field1"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DocValuesSliceQuery
name|query3
init|=
operator|new
name|DocValuesSliceQuery
argument_list|(
literal|"field2"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DocValuesSliceQuery
name|query4
init|=
operator|new
name|DocValuesSliceQuery
argument_list|(
literal|"field1"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|query1
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|query1
argument_list|,
name|query3
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|query1
argument_list|,
name|query4
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearch
specifier|public
name|void
name|testSearch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
index|[]
name|sliceCounters1
init|=
operator|new
name|int
index|[
name|max
index|]
decl_stmt|;
name|int
index|[]
name|sliceCounters2
init|=
operator|new
name|int
index|[
name|max
index|]
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|UUIDs
operator|.
name|base64UUID
argument_list|()
decl_stmt|;
name|int
name|intValue
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|long
name|doubleValue
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"uuid"
argument_list|,
name|uuid
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"intField"
argument_list|,
name|intValue
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"doubleField"
argument_list|,
name|doubleValue
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|sliceCounters1
index|[
name|Math
operator|.
name|floorMod
argument_list|(
name|Long
operator|.
name|hashCode
argument_list|(
name|intValue
argument_list|)
argument_list|,
name|max
argument_list|)
index|]
operator|++
expr_stmt|;
name|sliceCounters2
index|[
name|Math
operator|.
name|floorMod
argument_list|(
name|Long
operator|.
name|hashCode
argument_list|(
name|doubleValue
argument_list|)
argument_list|,
name|max
argument_list|)
index|]
operator|++
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|max
condition|;
name|id
operator|++
control|)
block|{
name|DocValuesSliceQuery
name|query1
init|=
operator|new
name|DocValuesSliceQuery
argument_list|(
literal|"intField"
argument_list|,
name|id
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searcher
operator|.
name|count
argument_list|(
name|query1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|sliceCounters1
index|[
name|id
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|DocValuesSliceQuery
name|query2
init|=
operator|new
name|DocValuesSliceQuery
argument_list|(
literal|"doubleField"
argument_list|,
name|id
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searcher
operator|.
name|count
argument_list|(
name|query2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|sliceCounters2
index|[
name|id
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query1
argument_list|,
operator|new
name|Collector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LeafCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{                         }
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|d
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|document
argument_list|(
name|doc
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"uuid"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
name|d
operator|.
name|get
argument_list|(
literal|"uuid"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|remove
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

