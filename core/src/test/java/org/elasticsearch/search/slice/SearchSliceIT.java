begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.slice
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|slice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|Scroll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|SearchSliceIT
specifier|public
class|class
name|SearchSliceIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|NUM_DOCS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DOCS
init|=
literal|1000
decl_stmt|;
DECL|method|setupIndex
specifier|private
name|int
name|setupIndex
parameter_list|(
name|boolean
name|withDocs
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"invalid_random_kw"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"random_int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"invalid_random_int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_values"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|int
name|numberOfShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
literal|"number_of_shards"
argument_list|,
name|numberOfShards
argument_list|,
literal|"index.max_slices_per_scroll"
argument_list|,
literal|10000
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
if|if
condition|(
name|withDocs
operator|==
literal|false
condition|)
block|{
return|return
name|numberOfShards
return|;
block|}
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"invalid_random_kw"
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"random_int"
argument_list|,
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"static_int"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"invalid_random_int"
argument_list|,
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|requests
argument_list|)
expr_stmt|;
return|return
name|numberOfShards
return|;
block|}
DECL|method|testDocIdSort
specifier|public
name|void
name|testDocIdSort
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numShards
init|=
name|setupIndex
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
operator|(
name|int
operator|)
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|numDocs
argument_list|,
name|equalTo
argument_list|(
name|NUM_DOCS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
name|numShards
operator|*
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
operator|new
name|String
index|[]
block|{
literal|"_uid"
block|,
literal|"random_int"
block|,
literal|"static_int"
block|}
control|)
block|{
name|int
name|fetchSize
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setScroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|fetchSize
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"_doc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSearchSlicesWithScroll
argument_list|(
name|request
argument_list|,
name|field
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNumericSort
specifier|public
name|void
name|testNumericSort
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numShards
init|=
name|setupIndex
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
operator|(
name|int
operator|)
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|numDocs
argument_list|,
name|equalTo
argument_list|(
name|NUM_DOCS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
name|numShards
operator|*
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
operator|new
name|String
index|[]
block|{
literal|"_uid"
block|,
literal|"random_int"
block|,
literal|"static_int"
block|}
control|)
block|{
name|int
name|fetchSize
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setScroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"random_int"
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|fetchSize
argument_list|)
decl_stmt|;
name|assertSearchSlicesWithScroll
argument_list|(
name|request
argument_list|,
name|field
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvalidFields
specifier|public
name|void
name|testInvalidFields
parameter_list|()
throws|throws
name|Exception
block|{
name|setupIndex
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SearchPhaseExecutionException
name|exc
init|=
name|expectThrows
argument_list|(
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setScroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|slice
argument_list|(
operator|new
name|SliceBuilder
argument_list|(
literal|"invalid_random_int"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Throwable
name|rootCause
init|=
name|findRootCause
argument_list|(
name|exc
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getClass
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot load numeric doc values"
argument_list|)
argument_list|)
expr_stmt|;
name|exc
operator|=
name|expectThrows
argument_list|(
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setScroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|slice
argument_list|(
operator|new
name|SliceBuilder
argument_list|(
literal|"invalid_random_kw"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|rootCause
operator|=
name|findRootCause
argument_list|(
name|exc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getClass
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot load numeric doc values"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidQuery
specifier|public
name|void
name|testInvalidQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|setupIndex
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SearchPhaseExecutionException
name|exc
init|=
name|expectThrows
argument_list|(
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|slice
argument_list|(
operator|new
name|SliceBuilder
argument_list|(
literal|"invalid_random_int"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Throwable
name|rootCause
init|=
name|findRootCause
argument_list|(
name|exc
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getClass
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|SearchContextException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rootCause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"`slice` cannot be used outside of a scroll context"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSearchSlicesWithScroll
specifier|private
name|void
name|assertSearchSlicesWithScroll
parameter_list|(
name|SearchRequestBuilder
name|request
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|numSlice
parameter_list|)
block|{
name|int
name|totalResults
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|numSlice
condition|;
name|id
operator|++
control|)
block|{
name|SliceBuilder
name|sliceBuilder
init|=
operator|new
name|SliceBuilder
argument_list|(
name|field
argument_list|,
name|id
argument_list|,
name|numSlice
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|request
operator|.
name|slice
argument_list|(
name|sliceBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|totalResults
operator|+=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
expr_stmt|;
name|int
name|expectedSliceResults
init|=
operator|(
name|int
operator|)
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|int
name|numSliceResults
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
decl_stmt|;
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearchScroll
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setScrollId
argument_list|(
name|scrollId
argument_list|)
operator|.
name|setScroll
argument_list|(
operator|new
name|Scroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|scrollId
operator|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
expr_stmt|;
name|totalResults
operator|+=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
expr_stmt|;
name|numSliceResults
operator|+=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|numSliceResults
argument_list|,
name|equalTo
argument_list|(
name|expectedSliceResults
argument_list|)
argument_list|)
expr_stmt|;
name|clearScroll
argument_list|(
name|scrollId
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|totalResults
argument_list|,
name|equalTo
argument_list|(
name|NUM_DOCS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|NUM_DOCS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|HashSet
argument_list|(
name|keys
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|NUM_DOCS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|findRootCause
specifier|private
name|Throwable
name|findRootCause
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|ret
init|=
name|e
decl_stmt|;
while|while
condition|(
name|ret
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

