begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|repositories
operator|.
name|put
operator|.
name|PutRepositoryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|create
operator|.
name|CreateSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|IndexId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryDataTests
operator|.
name|generateRandomRepoData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link BlobStoreRepository} and its subclasses.  */
end_comment

begin_class
DECL|class|BlobStoreRepositoryTests
specifier|public
class|class
name|BlobStoreRepositoryTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|method|testRetrieveSnapshots
specifier|public
name|void
name|testRetrieveSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|location
init|=
name|ESIntegTestCase
operator|.
name|randomRepoPath
argument_list|(
name|node
argument_list|()
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|repositoryName
init|=
literal|"test-repo"
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  creating repository"
argument_list|)
expr_stmt|;
name|PutRepositoryResponse
name|putRepositoryResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
name|repositoryName
argument_list|)
operator|.
name|setType
argument_list|(
literal|"fs"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|node
argument_list|()
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|putRepositoryResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating an index and indexing documents"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|indexName
init|=
literal|"test-idx"
decl_stmt|;
name|createIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"type1"
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"sometext"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> create first snapshot"
argument_list|)
expr_stmt|;
name|CreateSnapshotResponse
name|createSnapshotResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repositoryName
argument_list|,
literal|"test-snap-1"
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setIndices
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|SnapshotId
name|snapshotId1
init|=
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|snapshotId
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> create second snapshot"
argument_list|)
expr_stmt|;
name|createSnapshotResponse
operator|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repositoryName
argument_list|,
literal|"test-snap-2"
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setIndices
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|SnapshotId
name|snapshotId2
init|=
name|createSnapshotResponse
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|snapshotId
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> make sure the node's repository can resolve the snapshots"
argument_list|)
expr_stmt|;
specifier|final
name|RepositoriesService
name|repositoriesService
init|=
name|getInstanceFromNode
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|BlobStoreRepository
name|repository
init|=
operator|(
name|BlobStoreRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repositoryName
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|originalSnapshots
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|snapshotId1
argument_list|,
name|snapshotId2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshotIds
init|=
name|repository
operator|.
name|getRepositoryData
argument_list|()
operator|.
name|getSnapshotIds
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|snapshotIds
argument_list|,
name|equalTo
argument_list|(
name|originalSnapshots
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadAndWriteSnapshotsThroughIndexFile
specifier|public
name|void
name|testReadAndWriteSnapshotsThroughIndexFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BlobStoreRepository
name|repository
init|=
name|setupRepo
argument_list|()
decl_stmt|;
comment|// write to and read from a index file with no entries
name|assertThat
argument_list|(
name|repository
operator|.
name|getRepositoryData
argument_list|()
operator|.
name|getSnapshotIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RepositoryData
name|emptyData
init|=
name|RepositoryData
operator|.
name|EMPTY
decl_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|emptyData
argument_list|,
name|emptyData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryData
name|repoData
init|=
name|repository
operator|.
name|getRepositoryData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|repoData
argument_list|,
name|emptyData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repoData
operator|.
name|getIndices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repoData
operator|.
name|getSnapshotIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|repoData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
comment|// write to and read from an index file with snapshots but no indices
name|repoData
operator|=
name|addRandomSnapshotsToRepoData
argument_list|(
name|repoData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|repoData
argument_list|,
name|repoData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repoData
argument_list|,
name|repository
operator|.
name|getRepositoryData
argument_list|()
argument_list|)
expr_stmt|;
comment|// write to and read from a index file with random repository data
name|repoData
operator|=
name|addRandomSnapshotsToRepoData
argument_list|(
name|repository
operator|.
name|getRepositoryData
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|repoData
argument_list|,
name|repoData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repoData
argument_list|,
name|repository
operator|.
name|getRepositoryData
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexGenerationalFiles
specifier|public
name|void
name|testIndexGenerationalFiles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BlobStoreRepository
name|repository
init|=
name|setupRepo
argument_list|()
decl_stmt|;
comment|// write to index generational file
name|RepositoryData
name|repositoryData
init|=
name|generateRandomRepoData
argument_list|()
decl_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|repositoryData
argument_list|,
name|repositoryData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repository
operator|.
name|getRepositoryData
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|repositoryData
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repository
operator|.
name|latestIndexBlobId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repository
operator|.
name|readSnapshotIndexLatestBlob
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// adding more and writing to a new index generational file
name|repositoryData
operator|=
name|addRandomSnapshotsToRepoData
argument_list|(
name|repository
operator|.
name|getRepositoryData
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|repositoryData
argument_list|,
name|repositoryData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repository
operator|.
name|getRepositoryData
argument_list|()
argument_list|,
name|repositoryData
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repository
operator|.
name|latestIndexBlobId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repository
operator|.
name|readSnapshotIndexLatestBlob
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// removing a snapshot and writing to a new index generational file
name|repositoryData
operator|=
name|repository
operator|.
name|getRepositoryData
argument_list|()
operator|.
name|removeSnapshot
argument_list|(
name|repositoryData
operator|.
name|getSnapshotIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|repositoryData
argument_list|,
name|repositoryData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|repository
operator|.
name|getRepositoryData
argument_list|()
argument_list|,
name|repositoryData
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repository
operator|.
name|latestIndexBlobId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|repository
operator|.
name|readSnapshotIndexLatestBlob
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRepositoryDataConcurrentModificationNotAllowed
specifier|public
name|void
name|testRepositoryDataConcurrentModificationNotAllowed
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|BlobStoreRepository
name|repository
init|=
name|setupRepo
argument_list|()
decl_stmt|;
comment|// write to index generational file
name|RepositoryData
name|repositoryData
init|=
name|generateRandomRepoData
argument_list|()
decl_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|repositoryData
argument_list|,
name|repositoryData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
comment|// write repo data again to index generational file, errors because we already wrote to the
comment|// N+1 generation from which this repository data instance was created
name|expectThrows
argument_list|(
name|RepositoryException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|repositoryData
argument_list|,
name|repositoryData
operator|.
name|getGenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadAndWriteIncompatibleSnapshots
specifier|public
name|void
name|testReadAndWriteIncompatibleSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BlobStoreRepository
name|repository
init|=
name|setupRepo
argument_list|()
decl_stmt|;
comment|// write to and read from incompatible snapshots file with no entries
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|repository
operator|.
name|getRepositoryData
argument_list|()
operator|.
name|getIncompatibleSnapshotIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryData
name|emptyData
init|=
name|RepositoryData
operator|.
name|EMPTY
decl_stmt|;
name|repository
operator|.
name|writeIndexGen
argument_list|(
name|emptyData
argument_list|,
name|emptyData
operator|.
name|getGenId
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|writeIncompatibleSnapshots
argument_list|(
name|emptyData
argument_list|)
expr_stmt|;
name|RepositoryData
name|readData
init|=
name|repository
operator|.
name|getRepositoryData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|emptyData
argument_list|,
name|readData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|readData
operator|.
name|getIndices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|readData
operator|.
name|getSnapshotIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write to and read from incompatible snapshots with some number of entries
specifier|final
name|int
name|numSnapshots
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshotIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numSnapshots
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSnapshots
condition|;
name|i
operator|++
control|)
block|{
name|snapshotIds
operator|.
name|add
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RepositoryData
name|repositoryData
init|=
operator|new
name|RepositoryData
argument_list|(
name|readData
operator|.
name|getGenId
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|snapshotIds
argument_list|)
decl_stmt|;
name|repository
operator|.
name|blobContainer
argument_list|()
operator|.
name|deleteBlob
argument_list|(
literal|"incompatible-snapshots"
argument_list|)
expr_stmt|;
name|repository
operator|.
name|writeIncompatibleSnapshots
argument_list|(
name|repositoryData
argument_list|)
expr_stmt|;
name|readData
operator|=
name|repository
operator|.
name|getRepositoryData
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|repositoryData
operator|.
name|getIncompatibleSnapshotIds
argument_list|()
argument_list|,
name|readData
operator|.
name|getIncompatibleSnapshotIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupRepo
specifier|private
name|BlobStoreRepository
name|setupRepo
parameter_list|()
block|{
specifier|final
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|location
init|=
name|ESIntegTestCase
operator|.
name|randomRepoPath
argument_list|(
name|node
argument_list|()
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|repositoryName
init|=
literal|"test-repo"
decl_stmt|;
name|PutRepositoryResponse
name|putRepositoryResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
name|repositoryName
argument_list|)
operator|.
name|setType
argument_list|(
literal|"fs"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|node
argument_list|()
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|putRepositoryResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RepositoriesService
name|repositoriesService
init|=
name|getInstanceFromNode
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|BlobStoreRepository
name|repository
init|=
operator|(
name|BlobStoreRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repositoryName
argument_list|)
decl_stmt|;
return|return
name|repository
return|;
block|}
DECL|method|addRandomSnapshotsToRepoData
specifier|private
name|RepositoryData
name|addRandomSnapshotsToRepoData
parameter_list|(
name|RepositoryData
name|repoData
parameter_list|,
name|boolean
name|inclIndices
parameter_list|)
block|{
name|int
name|numSnapshots
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSnapshots
condition|;
name|i
operator|++
control|)
block|{
name|SnapshotId
name|snapshotId
init|=
operator|new
name|SnapshotId
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numIndices
init|=
name|inclIndices
condition|?
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
else|:
literal|0
decl_stmt|;
name|List
argument_list|<
name|IndexId
argument_list|>
name|indexIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numIndices
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numIndices
condition|;
name|j
operator|++
control|)
block|{
name|indexIds
operator|.
name|add
argument_list|(
operator|new
name|IndexId
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|repoData
operator|=
name|repoData
operator|.
name|addSnapshot
argument_list|(
name|snapshotId
argument_list|,
name|indexIds
argument_list|)
expr_stmt|;
block|}
return|return
name|repoData
return|;
block|}
block|}
end_class

end_unit

