begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|put
operator|.
name|PutIndexedScriptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|indexedscripts
operator|.
name|put
operator|.
name|PutIndexedScriptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|FilterClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|PreProcessModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|AbstractPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustacheScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
operator|.
name|HTTP_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|SUITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|SUITE
argument_list|)
DECL|class|ContextAndHeaderTransportTests
specifier|public
class|class
name|ContextAndHeaderTransportTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|requests
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ActionRequest
argument_list|>
name|requests
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|randomHeaderKey
specifier|private
name|String
name|randomHeaderKey
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|randomHeaderValue
specifier|private
name|String
name|randomHeaderValue
init|=
name|randomAsciiOfLength
argument_list|(
literal|20
argument_list|)
decl_stmt|;
DECL|field|queryIndex
specifier|private
name|String
name|queryIndex
init|=
literal|"query-"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|lookupIndex
specifier|private
name|String
name|lookupIndex
init|=
literal|"lookup-"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"plugin.types"
argument_list|,
name|ActionLoggingPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.indexed"
argument_list|,
literal|"on"
argument_list|)
operator|.
name|put
argument_list|(
name|HTTP_ENABLED
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|createIndices
specifier|public
name|void
name|createIndices
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_shape"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
comment|// A single shard will help to keep the tests repeatable.
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|lookupIndex
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|queryIndex
argument_list|,
name|lookupIndex
argument_list|)
expr_stmt|;
name|requests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|checkAllRequestsContainHeaders
specifier|public
name|void
name|checkAllRequestsContainHeaders
parameter_list|()
block|{
name|assertRequestsContainHeader
argument_list|(
name|IndexRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertRequestsContainHeader
argument_list|(
name|RefreshRequest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatTermsLookupGetRequestContainsContextAndHeaders
specifier|public
name|void
name|testThatTermsLookupGetRequestContainsContextAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|lookupIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"followers"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|queryIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"username"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|queryIndex
argument_list|,
name|lookupIndex
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|TermsQueryBuilder
name|termsLookupFilterBuilder
init|=
name|QueryBuilders
operator|.
name|termsLookupQuery
argument_list|(
literal|"username"
argument_list|)
operator|.
name|lookupIndex
argument_list|(
name|lookupIndex
argument_list|)
operator|.
name|lookupType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|lookupId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|lookupPath
argument_list|(
literal|"followers"
argument_list|)
decl_stmt|;
name|BoolQueryBuilder
name|queryBuilder
init|=
name|QueryBuilders
operator|.
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|must
argument_list|(
name|termsLookupFilterBuilder
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|transportClient
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertGetRequestsContainHeaders
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatGeoShapeQueryGetRequestContainsContextAndHeaders
specifier|public
name|void
name|testThatGeoShapeQueryGetRequestContainsContextAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|lookupIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Munich Suburban Area"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"polygon"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
operator|.
name|startArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
literal|11.34
argument_list|)
operator|.
name|value
argument_list|(
literal|48.25
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
literal|11.68
argument_list|)
operator|.
name|value
argument_list|(
literal|48.25
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
literal|11.65
argument_list|)
operator|.
name|value
argument_list|(
literal|48.06
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
literal|11.37
argument_list|)
operator|.
name|value
argument_list|(
literal|48.13
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
literal|11.34
argument_list|)
operator|.
name|value
argument_list|(
literal|48.25
argument_list|)
operator|.
name|endArray
argument_list|()
comment|// close the polygon
operator|.
name|endArray
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// second document
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|queryIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Munich Center"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"point"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"coordinates"
argument_list|)
operator|.
name|value
argument_list|(
literal|11.57
argument_list|)
operator|.
name|value
argument_list|(
literal|48.13
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|lookupIndex
argument_list|,
name|queryIndex
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GeoShapeQueryBuilder
name|queryBuilder
init|=
name|QueryBuilders
operator|.
name|geoShapeQuery
argument_list|(
literal|"location"
argument_list|,
literal|"1"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|indexedShapeIndex
argument_list|(
name|lookupIndex
argument_list|)
operator|.
name|indexedShapePath
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|transportClient
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|setQuery
argument_list|(
name|queryBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requests
argument_list|,
name|hasSize
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertGetRequestsContainHeaders
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatMoreLikeThisQueryMultiTermVectorRequestContainsContextAndHeaders
specifier|public
name|void
name|testThatMoreLikeThisQueryMultiTermVectorRequestContainsContextAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|lookupIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Star Wars - The new republic"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|queryIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Jar Jar Binks - A horrible mistake"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|queryIndex
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Star Wars - Return of the jedi"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|lookupIndex
argument_list|,
name|queryIndex
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|MoreLikeThisQueryBuilder
name|moreLikeThisQueryBuilder
init|=
name|QueryBuilders
operator|.
name|moreLikeThisQuery
argument_list|(
literal|"name"
argument_list|)
operator|.
name|addItem
argument_list|(
operator|new
name|MoreLikeThisQueryBuilder
operator|.
name|Item
argument_list|(
name|lookupIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|minTermFreq
argument_list|(
literal|1
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|transportClient
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|setQuery
argument_list|(
name|moreLikeThisQueryBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRequestsContainHeader
argument_list|(
name|MultiTermVectorsRequest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatPercolatingExistingDocumentGetRequestContainsContextAndHeaders
specifier|public
name|void
name|testThatPercolatingExistingDocumentGetRequestContainsContextAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|lookupIndex
argument_list|,
literal|".percolator"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"match"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"star wars"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|lookupIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Star Wars - The new republic"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|lookupIndex
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetRequest
name|getRequest
init|=
name|transportClient
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|lookupIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|request
argument_list|()
decl_stmt|;
name|PercolateResponse
name|response
init|=
name|transportClient
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|getRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertGetRequestsContainHeaders
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatIndexedScriptGetRequestContainsContextAndHeaders
specifier|public
name|void
name|testThatIndexedScriptGetRequestContainsContextAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|PutIndexedScriptResponse
name|scriptResponse
init|=
name|transportClient
argument_list|()
operator|.
name|preparePutIndexedScript
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"my_script"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
literal|"_score * 10"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|scriptResponse
operator|.
name|isCreated
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|queryIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Star Wars - The new republic"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// custom content, not sure how to specify "script_id" otherwise in the API
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost_mode"
argument_list|,
literal|"replace"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"script_score"
argument_list|)
operator|.
name|field
argument_list|(
literal|"script_id"
argument_list|,
literal|"my_script"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"groovy"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|transportClient
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|setQuery
argument_list|(
name|builder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getMaxScore
argument_list|()
argument_list|,
name|is
argument_list|(
literal|10.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertGetRequestsContainHeaders
argument_list|(
literal|".scripts"
argument_list|)
expr_stmt|;
name|assertRequestsContainHeader
argument_list|(
name|PutIndexedScriptRequest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatSearchTemplatesWithIndexedTemplatesGetRequestContainsContextAndHeaders
specifier|public
name|void
name|testThatSearchTemplatesWithIndexedTemplatesGetRequestContainsContextAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|PutIndexedScriptResponse
name|scriptResponse
init|=
name|transportClient
argument_list|()
operator|.
name|preparePutIndexedScript
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"the_template"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"template"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"query"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"match"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"{{query_string}}"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|scriptResponse
operator|.
name|isCreated
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|queryIndex
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Star Wars - The new republic"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|transportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"query_string"
argument_list|,
literal|"star wars"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|transportClient
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|queryIndex
argument_list|)
operator|.
name|setTemplateName
argument_list|(
literal|"the_template"
argument_list|)
operator|.
name|setTemplateParams
argument_list|(
name|params
argument_list|)
operator|.
name|setTemplateType
argument_list|(
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INDEXED
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertGetRequestsContainHeaders
argument_list|(
literal|".scripts"
argument_list|)
expr_stmt|;
name|assertRequestsContainHeader
argument_list|(
name|PutIndexedScriptRequest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatRelevantHttpHeadersBecomeRequestHeaders
specifier|public
name|void
name|testThatRelevantHttpHeadersBecomeRequestHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|releventHeaderName
init|=
literal|"relevant_"
operator|+
name|randomHeaderKey
decl_stmt|;
for|for
control|(
name|RestController
name|restController
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
control|)
block|{
name|restController
operator|.
name|registerRelevantHeaders
argument_list|(
name|releventHeaderName
argument_list|)
expr_stmt|;
block|}
name|CloseableHttpClient
name|httpClient
init|=
name|HttpClients
operator|.
name|createDefault
argument_list|()
decl_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|HttpRequestBuilder
argument_list|(
name|httpClient
argument_list|)
operator|.
name|httpTransport
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstance
argument_list|(
name|HttpServerTransport
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addHeader
argument_list|(
name|randomHeaderKey
argument_list|,
name|randomHeaderValue
argument_list|)
operator|.
name|addHeader
argument_list|(
name|releventHeaderName
argument_list|,
name|randomHeaderValue
argument_list|)
operator|.
name|path
argument_list|(
literal|"/"
operator|+
name|queryIndex
operator|+
literal|"/_search"
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|hasStatus
argument_list|(
name|OK
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SearchRequest
argument_list|>
name|searchRequests
init|=
name|getRequests
argument_list|(
name|SearchRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searchRequests
argument_list|,
name|hasSize
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchRequest
name|searchRequest
range|:
name|searchRequests
control|)
block|{
name|assertThat
argument_list|(
name|searchRequest
operator|.
name|hasHeader
argument_list|(
name|releventHeaderName
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// was not specified, thus is not included
name|assertThat
argument_list|(
name|searchRequest
operator|.
name|hasHeader
argument_list|(
name|randomHeaderKey
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRequests
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getRequests
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActionRequest
name|request
range|:
name|requests
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|request
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
DECL|method|assertRequestsContainHeader
specifier|private
name|void
name|assertRequestsContainHeader
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ActionRequest
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|ActionRequest
argument_list|>
name|classRequests
init|=
name|getRequests
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|ActionRequest
name|request
range|:
name|classRequests
control|)
block|{
name|assertRequestContainsHeader
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertGetRequestsContainHeaders
specifier|private
name|void
name|assertGetRequestsContainHeaders
parameter_list|()
block|{
name|assertGetRequestsContainHeaders
argument_list|(
name|this
operator|.
name|lookupIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGetRequestsContainHeaders
specifier|private
name|void
name|assertGetRequestsContainHeaders
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|GetRequest
argument_list|>
name|getRequests
init|=
name|getRequests
argument_list|(
name|GetRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getRequests
argument_list|,
name|hasSize
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|GetRequest
name|request
range|:
name|getRequests
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertRequestContainsHeader
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRequestContainsHeader
specifier|private
name|void
name|assertRequestContainsHeader
parameter_list|(
name|ActionRequest
name|request
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected header %s to be in request %s"
argument_list|,
name|randomHeaderKey
argument_list|,
name|request
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|IndexRequest
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|request
decl_stmt|;
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected header %s to be in index request %s/%s/%s"
argument_list|,
name|randomHeaderKey
argument_list|,
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|msg
argument_list|,
name|request
operator|.
name|hasHeader
argument_list|(
name|randomHeaderKey
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|randomHeaderKey
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|randomHeaderValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * a transport client that adds our random header      */
DECL|method|transportClient
specifier|private
name|Client
name|transportClient
parameter_list|()
block|{
name|Client
name|transportClient
init|=
name|internalCluster
argument_list|()
operator|.
name|transportClient
argument_list|()
decl_stmt|;
name|FilterClient
name|filterClient
init|=
operator|new
name|FilterClient
argument_list|(
name|transportClient
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
parameter_list|<
name|Request
extends|extends
name|ActionRequest
parameter_list|,
name|Response
extends|extends
name|ActionResponse
parameter_list|,
name|RequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|,
name|RequestBuilder
argument_list|>
parameter_list|>
name|void
name|doExecute
parameter_list|(
name|Action
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|,
name|RequestBuilder
argument_list|>
name|action
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|request
operator|.
name|putHeader
argument_list|(
name|randomHeaderKey
argument_list|,
name|randomHeaderValue
argument_list|)
expr_stmt|;
name|super
operator|.
name|doExecute
argument_list|(
name|action
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|filterClient
return|;
block|}
DECL|class|ActionLoggingPlugin
specifier|public
specifier|static
class|class
name|ActionLoggingPlugin
extends|extends
name|AbstractPlugin
block|{
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"test-action-logging"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"Test action logging"
return|;
block|}
annotation|@
name|Override
DECL|method|modules
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|modules
parameter_list|()
block|{
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|ActionLoggingModule
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|classes
return|;
block|}
block|}
DECL|class|ActionLoggingModule
specifier|public
specifier|static
class|class
name|ActionLoggingModule
extends|extends
name|AbstractModule
implements|implements
name|PreProcessModule
block|{
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|LoggingFilter
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processModule
specifier|public
name|void
name|processModule
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
if|if
condition|(
name|module
operator|instanceof
name|ActionModule
condition|)
block|{
operator|(
operator|(
name|ActionModule
operator|)
name|module
operator|)
operator|.
name|registerFilter
argument_list|(
name|LoggingFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|LoggingFilter
specifier|public
specifier|static
class|class
name|LoggingFilter
extends|extends
name|ActionFilter
operator|.
name|Simple
block|{
annotation|@
name|Inject
DECL|method|LoggingFilter
specifier|public
name|LoggingFilter
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|order
specifier|public
name|int
name|order
parameter_list|()
block|{
return|return
literal|999
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|protected
name|boolean
name|apply
parameter_list|(
name|String
name|action
parameter_list|,
name|ActionRequest
name|request
parameter_list|,
name|ActionListener
name|listener
parameter_list|)
block|{
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|protected
name|boolean
name|apply
parameter_list|(
name|String
name|action
parameter_list|,
name|ActionResponse
name|response
parameter_list|,
name|ActionListener
name|listener
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

