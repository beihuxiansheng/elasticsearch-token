begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_class
DECL|class|ConnectionProfileTests
specifier|public
class|class
name|ConnectionProfileTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBuildConnectionProfile
specifier|public
name|void
name|testBuildConnectionProfile
parameter_list|()
block|{
name|ConnectionProfile
operator|.
name|Builder
name|builder
init|=
operator|new
name|ConnectionProfile
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|1
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|2
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|3
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
expr_stmt|;
name|IllegalStateException
name|illegalStateException
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
name|builder
operator|::
name|build
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"not all types are added for this connection profile - missing types: [REG]"
argument_list|,
name|illegalStateException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|illegalArgumentException
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|addConnections
argument_list|(
literal|4
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"type [PING] is already registered"
argument_list|,
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|4
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|)
expr_stmt|;
name|ConnectionProfile
name|build
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|build
operator|.
name|getNumConnections
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|array
init|=
operator|new
name|Integer
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
specifier|final
name|int
name|numIters
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
argument_list|)
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|channel
init|=
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChannel
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|channel
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|=
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChannel
argument_list|(
name|array
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|channel
argument_list|,
name|Matchers
operator|.
name|anyOf
argument_list|(
name|Matchers
operator|.
name|is
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Matchers
operator|.
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|=
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getChannel
argument_list|(
name|array
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|channel
argument_list|,
name|Matchers
operator|.
name|anyOf
argument_list|(
name|Matchers
operator|.
name|is
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Matchers
operator|.
name|is
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Matchers
operator|.
name|is
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|)
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|=
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getChannel
argument_list|(
name|array
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|channel
argument_list|,
name|Matchers
operator|.
name|anyOf
argument_list|(
name|Matchers
operator|.
name|is
argument_list|(
literal|6
argument_list|)
argument_list|,
name|Matchers
operator|.
name|is
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Matchers
operator|.
name|is
argument_list|(
literal|8
argument_list|)
argument_list|,
name|Matchers
operator|.
name|is
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|build
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|build
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|build
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|build
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|build
operator|.
name|getNumConnectionsPerType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoChannels
specifier|public
name|void
name|testNoChannels
parameter_list|()
block|{
name|ConnectionProfile
operator|.
name|Builder
name|builder
init|=
operator|new
name|ConnectionProfile
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|1
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|BULK
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|STATE
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|REG
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConnections
argument_list|(
literal|0
argument_list|,
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|PING
argument_list|)
expr_stmt|;
name|ConnectionProfile
name|build
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Integer
index|[]
name|array
init|=
operator|new
name|Integer
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChannel
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|build
operator|.
name|getHandles
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChannel
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

