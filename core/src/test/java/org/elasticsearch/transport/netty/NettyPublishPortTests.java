begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BindTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|InetAddress
operator|.
name|getByName
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
operator|.
name|NettyTransport
operator|.
name|resolvePublishPort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|NettyPublishPortTests
specifier|public
class|class
name|NettyPublishPortTests
extends|extends
name|ESTestCase
block|{
DECL|method|testPublishPort
specifier|public
name|void
name|testPublishPort
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|boundPort
init|=
name|randomIntBetween
argument_list|(
literal|9000
argument_list|,
literal|9100
argument_list|)
decl_stmt|;
name|int
name|otherBoundPort
init|=
name|randomIntBetween
argument_list|(
literal|9200
argument_list|,
literal|9300
argument_list|)
decl_stmt|;
name|boolean
name|useProfile
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|String
name|profile
decl_stmt|;
specifier|final
name|Settings
name|settings
decl_stmt|;
specifier|final
name|Settings
name|profileSettings
decl_stmt|;
if|if
condition|(
name|useProfile
condition|)
block|{
name|profile
operator|=
literal|"some_profile"
expr_stmt|;
name|settings
operator|=
name|randomBoolean
argument_list|()
condition|?
name|Settings
operator|.
name|EMPTY
else|:
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|TransportSettings
operator|.
name|PUBLISH_PORT
operator|.
name|getKey
argument_list|()
argument_list|,
literal|9081
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|profileSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"publish_port"
argument_list|,
literal|9080
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|profile
operator|=
name|TransportSettings
operator|.
name|DEFAULT_PROFILE
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|TransportSettings
operator|.
name|PUBLISH_PORT
operator|.
name|getKey
argument_list|()
argument_list|,
literal|9081
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|profileSettings
operator|=
name|randomBoolean
argument_list|()
condition|?
name|Settings
operator|.
name|EMPTY
else|:
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"publish_port"
argument_list|,
literal|9080
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
empty_stmt|;
block|}
name|int
name|publishPort
init|=
name|resolvePublishPort
argument_list|(
name|profile
argument_list|,
name|settings
argument_list|,
name|profileSettings
argument_list|,
name|randomAddresses
argument_list|()
argument_list|,
name|getByName
argument_list|(
literal|"127.0.0.2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Publish port should be explicitly set"
argument_list|,
name|publishPort
argument_list|,
name|equalTo
argument_list|(
name|useProfile
condition|?
literal|9080
else|:
literal|9081
argument_list|)
argument_list|)
expr_stmt|;
name|publishPort
operator|=
name|resolvePublishPort
argument_list|(
name|profile
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|asList
argument_list|(
name|address
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|boundPort
argument_list|)
argument_list|,
name|address
argument_list|(
literal|"127.0.0.2"
argument_list|,
name|otherBoundPort
argument_list|)
argument_list|)
argument_list|,
name|getByName
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Publish port should be derived from matched address"
argument_list|,
name|publishPort
argument_list|,
name|equalTo
argument_list|(
name|boundPort
argument_list|)
argument_list|)
expr_stmt|;
name|publishPort
operator|=
name|resolvePublishPort
argument_list|(
name|profile
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|asList
argument_list|(
name|address
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|boundPort
argument_list|)
argument_list|,
name|address
argument_list|(
literal|"127.0.0.2"
argument_list|,
name|boundPort
argument_list|)
argument_list|)
argument_list|,
name|getByName
argument_list|(
literal|"127.0.0.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Publish port should be derived from unique port of bound addresses"
argument_list|,
name|publishPort
argument_list|,
name|equalTo
argument_list|(
name|boundPort
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|resolvePublishPort
argument_list|(
name|profile
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|asList
argument_list|(
name|address
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|boundPort
argument_list|)
argument_list|,
name|address
argument_list|(
literal|"127.0.0.2"
argument_list|,
name|otherBoundPort
argument_list|)
argument_list|)
argument_list|,
name|getByName
argument_list|(
literal|"127.0.0.3"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected BindTransportException as publish_port not specified and non-unique port of bound addresses"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindTransportException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Failed to auto-resolve publish port"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|publishPort
operator|=
name|resolvePublishPort
argument_list|(
name|profile
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|asList
argument_list|(
name|address
argument_list|(
literal|"0.0.0.0"
argument_list|,
name|boundPort
argument_list|)
argument_list|,
name|address
argument_list|(
literal|"127.0.0.2"
argument_list|,
name|otherBoundPort
argument_list|)
argument_list|)
argument_list|,
name|getByName
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Publish port should be derived from matching wildcard address"
argument_list|,
name|publishPort
argument_list|,
name|equalTo
argument_list|(
name|boundPort
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|NetworkUtils
operator|.
name|SUPPORTS_V6
condition|)
block|{
name|publishPort
operator|=
name|resolvePublishPort
argument_list|(
name|profile
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|asList
argument_list|(
name|address
argument_list|(
literal|"0.0.0.0"
argument_list|,
name|boundPort
argument_list|)
argument_list|,
name|address
argument_list|(
literal|"127.0.0.2"
argument_list|,
name|otherBoundPort
argument_list|)
argument_list|)
argument_list|,
name|getByName
argument_list|(
literal|"::1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Publish port should be derived from matching wildcard address"
argument_list|,
name|publishPort
argument_list|,
name|equalTo
argument_list|(
name|boundPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|address
specifier|private
name|InetSocketAddress
name|address
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|UnknownHostException
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|getByName
argument_list|(
name|host
argument_list|)
argument_list|,
name|port
argument_list|)
return|;
block|}
DECL|method|randomAddress
specifier|private
name|InetSocketAddress
name|randomAddress
parameter_list|()
throws|throws
name|UnknownHostException
block|{
return|return
name|address
argument_list|(
literal|"127.0.0."
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|9200
argument_list|,
literal|9300
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomAddresses
specifier|private
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|randomAddresses
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|addresses
operator|.
name|add
argument_list|(
name|randomAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|addresses
return|;
block|}
block|}
end_class

end_unit

