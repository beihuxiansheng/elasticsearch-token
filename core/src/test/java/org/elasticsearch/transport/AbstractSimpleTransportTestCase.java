begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AbstractSimpleTransportTestCase
specifier|public
specifier|abstract
class|class
name|AbstractSimpleTransportTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|version0
specifier|protected
specifier|static
specifier|final
name|Version
name|version0
init|=
name|Version
operator|.
name|fromId
argument_list|(
comment|/*0*/
literal|99
argument_list|)
decl_stmt|;
DECL|field|nodeA
specifier|protected
name|DiscoveryNode
name|nodeA
decl_stmt|;
DECL|field|serviceA
specifier|protected
name|MockTransportService
name|serviceA
decl_stmt|;
DECL|field|version1
specifier|protected
specifier|static
specifier|final
name|Version
name|version1
init|=
name|Version
operator|.
name|fromId
argument_list|(
literal|199
argument_list|)
decl_stmt|;
DECL|field|nodeB
specifier|protected
name|DiscoveryNode
name|nodeB
decl_stmt|;
DECL|field|serviceB
specifier|protected
name|MockTransportService
name|serviceB
decl_stmt|;
DECL|method|build
specifier|protected
specifier|abstract
name|MockTransportService
name|build
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|)
function_decl|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serviceA
operator|=
name|build
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"TS_A"
argument_list|,
name|TransportService
operator|.
name|TRACE_LOG_INCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|""
argument_list|,
name|TransportService
operator|.
name|TRACE_LOG_EXCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"NOTHING"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|version0
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|nodeA
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"TS_A"
argument_list|,
literal|"TS_A"
argument_list|,
name|serviceA
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|version0
argument_list|)
expr_stmt|;
name|serviceB
operator|=
name|build
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"TS_B"
argument_list|,
name|TransportService
operator|.
name|TRACE_LOG_INCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|""
argument_list|,
name|TransportService
operator|.
name|TRACE_LOG_EXCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"NOTHING"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|version1
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|nodeB
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"TS_B"
argument_list|,
literal|"TS_B"
argument_list|,
name|serviceB
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|version1
argument_list|)
expr_stmt|;
comment|// wait till all nodes are properly connected and the event has been sent, so tests in this class
comment|// will not get this callback called on the connections done in this setup
specifier|final
name|boolean
name|useLocalNode
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|useLocalNode
condition|?
literal|2
else|:
literal|4
argument_list|)
decl_stmt|;
name|TransportConnectionListener
name|waitForConnection
init|=
operator|new
name|TransportConnectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"disconnect should not be called "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|serviceA
operator|.
name|addConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|addConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
if|if
condition|(
name|useLocalNode
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> using local node optimization"
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|setLocalNode
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|setLocalNode
argument_list|(
name|nodeB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> actively connecting to local node"
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|connectToNode
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|connectToNode
argument_list|(
name|nodeB
argument_list|)
expr_stmt|;
block|}
name|serviceA
operator|.
name|connectToNode
argument_list|(
name|nodeB
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|connectToNode
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"failed to wait for all nodes to connect"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|removeConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|removeConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|serviceA
operator|.
name|close
argument_list|()
expr_stmt|;
name|serviceB
operator|.
name|close
argument_list|()
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|testHelloWorld
specifier|public
name|void
name|testHelloWorld
parameter_list|()
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHello"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"moshe"
argument_list|,
name|equalTo
argument_list|(
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringMessageResponse
argument_list|(
literal|"hello "
operator|+
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHello"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"moshe"
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"hello moshe"
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"got exception instead of a response: "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|StringMessageResponse
name|message
init|=
name|res
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"hello moshe"
argument_list|,
name|equalTo
argument_list|(
name|message
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res
operator|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHello"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"moshe"
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withCompress
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"hello moshe"
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"got exception instead of a response: "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|StringMessageResponse
name|message
init|=
name|res
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"hello moshe"
argument_list|,
name|equalTo
argument_list|(
name|message
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHello"
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadContext
specifier|public
name|void
name|testThreadContext
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"ping_pong"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
parameter_list|(
name|request
parameter_list|,
name|channel
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"ping_user"
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"test.ping.user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getTransient
argument_list|(
literal|"my_private_context"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|StringMessageResponse
name|response
init|=
operator|new
name|StringMessageResponse
argument_list|(
literal|"pong"
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|putHeader
argument_list|(
literal|"test.pong.user"
argument_list|,
literal|"pong_user"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|context
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|String
name|executor
init|=
name|randomFrom
argument_list|(
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
name|baseTransportResponseHandler
init|=
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"pong"
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ping_user"
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"test.ping.user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"test.pong.user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|context
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getTransient
argument_list|(
literal|"my_private_context"
argument_list|)
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|putHeader
argument_list|(
literal|"some.temp.header"
argument_list|,
literal|"booooom"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"got exception instead of a response: "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|StringMessageRequest
name|ping
init|=
operator|new
name|StringMessageRequest
argument_list|(
literal|"ping"
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|putHeader
argument_list|(
literal|"test.ping.user"
argument_list|,
literal|"ping_user"
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|putTransient
argument_list|(
literal|"my_private_context"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"ping_pong"
argument_list|,
name|ping
argument_list|,
name|baseTransportResponseHandler
argument_list|)
decl_stmt|;
name|StringMessageResponse
name|message
init|=
name|res
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"pong"
argument_list|,
name|equalTo
argument_list|(
name|message
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ping_user"
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"test.ping.user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|context
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getTransient
argument_list|(
literal|"my_private_context"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"this header is only visible in the handler context"
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"some.temp.header"
argument_list|)
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHello"
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalNodeConnection
specifier|public
name|void
name|testLocalNodeConnection
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertTrue
argument_list|(
literal|"serviceA is not connected to nodeA"
argument_list|,
name|serviceA
operator|.
name|nodeConnected
argument_list|(
name|nodeA
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|TransportService
operator|)
name|serviceA
operator|)
operator|.
name|getLocalNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this should be a noop
name|serviceA
operator|.
name|disconnectFromNode
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"localNode"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringMessageResponse
argument_list|(
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|responseString
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|responseLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|serviceA
operator|.
name|sendRequest
argument_list|(
name|nodeA
argument_list|,
literal|"localNode"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|responseString
operator|.
name|set
argument_list|(
name|response
operator|.
name|message
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exception
operator|.
name|set
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|responseLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|responseString
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVoidMessageCompressed
specifier|public
name|void
name|testVoidMessageCompressed
parameter_list|()
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHello"
argument_list|,
name|TransportRequest
operator|.
name|Empty
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|TransportRequest
operator|.
name|Empty
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|TransportRequest
operator|.
name|Empty
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|,
name|TransportResponseOptions
operator|.
name|builder
argument_list|()
operator|.
name|withCompress
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHello"
argument_list|,
name|TransportRequest
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withCompress
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TransportResponse
operator|.
name|Empty
name|newInstance
parameter_list|()
block|{
return|return
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
operator|.
name|Empty
name|response
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"got exception instead of a response: "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|TransportResponse
operator|.
name|Empty
name|message
init|=
name|res
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|message
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHello"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHelloWorldCompressed
specifier|public
name|void
name|testHelloWorldCompressed
parameter_list|()
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHello"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"moshe"
argument_list|,
name|equalTo
argument_list|(
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringMessageResponse
argument_list|(
literal|"hello "
operator|+
name|request
operator|.
name|message
argument_list|)
argument_list|,
name|TransportResponseOptions
operator|.
name|builder
argument_list|()
operator|.
name|withCompress
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHello"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"moshe"
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withCompress
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"hello moshe"
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"got exception instead of a response: "
operator|+
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|StringMessageResponse
name|message
init|=
name|res
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"hello moshe"
argument_list|,
name|equalTo
argument_list|(
name|message
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHello"
argument_list|)
expr_stmt|;
block|}
DECL|method|testErrorMessage
specifier|public
name|void
name|testErrorMessage
parameter_list|()
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHelloException"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
literal|"moshe"
argument_list|,
name|equalTo
argument_list|(
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"bad message !!!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHelloException"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"moshe"
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got response instead of exception"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"bad message !!!"
argument_list|,
name|equalTo
argument_list|(
name|exp
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|res
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bad message !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHelloException"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisconnectListener
specifier|public
name|void
name|testDisconnectListener
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TransportConnectionListener
name|disconnectListener
init|=
operator|new
name|TransportConnectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"node connected should not be called, all connection have been done previously, node: "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|serviceA
operator|.
name|addConnectionListener
argument_list|(
name|disconnectListener
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotifyOnShutdown
specifier|public
name|void
name|testNotifyOnShutdown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch2
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"foobar"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
try|try
block|{
name|latch2
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Stop ServiceB now"
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|TransportResponse
operator|.
name|Empty
argument_list|>
name|foobar
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"foobar"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|""
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
decl_stmt|;
name|latch2
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|foobar
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"TransportException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportException
name|ex
parameter_list|)
block|{          }
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHelloTimeoutDelayedResponse"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeoutSendExceptionWithNeverSendingBackResponse
specifier|public
name|void
name|testTimeoutSendExceptionWithNeverSendingBackResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHelloTimeoutNoResponse"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"moshe"
argument_list|,
name|equalTo
argument_list|(
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't send back a response
comment|//                try {
comment|//                    channel.sendResponse(new StringMessage("hello " + request.message));
comment|//                } catch (IOException e) {
comment|//                    e.printStackTrace();
comment|//                    assertThat(e.getMessage(), false, equalTo(true));
comment|//                }
block|}
block|}
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHelloTimeoutNoResponse"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"moshe"
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got response instead of exception"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|assertThat
argument_list|(
name|exp
argument_list|,
name|instanceOf
argument_list|(
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|StringMessageResponse
name|message
init|=
name|res
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHelloTimeoutNoResponse"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeoutSendExceptionWithDelayedResponse
specifier|public
name|void
name|testTimeoutSendExceptionWithDelayedResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHelloTimeoutDelayedResponse"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
name|TimeValue
name|sleep
init|=
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|request
operator|.
name|message
argument_list|,
literal|null
argument_list|,
literal|"sleep"
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringMessageResponse
argument_list|(
literal|"hello "
operator|+
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHelloTimeoutDelayedResponse"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"300ms"
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"got response instead of exception"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|exp
argument_list|,
name|instanceOf
argument_list|(
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|StringMessageResponse
name|message
init|=
name|res
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|counter
init|=
name|i
decl_stmt|;
comment|// now, try and send another request, this times, with a short timeout
name|res
operator|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHelloTimeoutDelayedResponse"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
name|counter
operator|+
literal|"ms"
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
literal|3000
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"hello "
operator|+
name|counter
operator|+
literal|"ms"
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"got exception instead of a response for "
operator|+
name|counter
operator|+
literal|": "
operator|+
name|exp
operator|.
name|getDetailedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|StringMessageResponse
name|message
init|=
name|res
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|message
operator|.
name|message
argument_list|,
name|equalTo
argument_list|(
literal|"hello "
operator|+
name|counter
operator|+
literal|"ms"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHelloTimeoutDelayedResponse"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestLogging
argument_list|(
name|value
operator|=
literal|"test. transport.tracer:TRACE"
argument_list|)
DECL|method|testTracerLog
specifier|public
name|void
name|testTracerLog
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TransportRequestHandler
name|handler
init|=
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|StringMessageResponse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|TransportRequestHandler
name|handlerWithError
init|=
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|request
operator|.
name|timeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|request
operator|.
name|timeout
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|Semaphore
name|requestCompleted
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TransportResponseHandler
name|noopResponseHandler
init|=
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|requestCompleted
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|requestCompleted
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
decl_stmt|;
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"test"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"testError"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|handlerWithError
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|registerRequestHandler
argument_list|(
literal|"test"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|registerRequestHandler
argument_list|(
literal|"testError"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|handlerWithError
argument_list|)
expr_stmt|;
specifier|final
name|Tracer
name|tracer
init|=
operator|new
name|Tracer
argument_list|()
decl_stmt|;
name|serviceA
operator|.
name|addTracer
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|addTracer
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|reset
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|boolean
name|timeout
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|TransportRequestOptions
name|options
init|=
name|timeout
condition|?
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
else|:
name|TransportRequestOptions
operator|.
name|EMPTY
decl_stmt|;
name|serviceA
operator|.
name|sendRequest
argument_list|(
name|nodeB
argument_list|,
literal|"test"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|""
argument_list|,
literal|10
argument_list|)
argument_list|,
name|options
argument_list|,
name|noopResponseHandler
argument_list|)
expr_stmt|;
name|requestCompleted
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|tracer
operator|.
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see request sent"
argument_list|,
name|tracer
operator|.
name|sawRequestSent
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see request received"
argument_list|,
name|tracer
operator|.
name|sawRequestReceived
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see response sent"
argument_list|,
name|tracer
operator|.
name|sawResponseSent
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see response received"
argument_list|,
name|tracer
operator|.
name|sawResponseReceived
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"saw error sent"
argument_list|,
name|tracer
operator|.
name|sawErrorSent
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|reset
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|sendRequest
argument_list|(
name|nodeB
argument_list|,
literal|"testError"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|""
argument_list|)
argument_list|,
name|noopResponseHandler
argument_list|)
expr_stmt|;
name|requestCompleted
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|tracer
operator|.
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see request sent"
argument_list|,
name|tracer
operator|.
name|sawRequestSent
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see request received"
argument_list|,
name|tracer
operator|.
name|sawRequestReceived
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"saw response sent"
argument_list|,
name|tracer
operator|.
name|sawResponseSent
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see response received"
argument_list|,
name|tracer
operator|.
name|sawResponseReceived
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see error sent"
argument_list|,
name|tracer
operator|.
name|sawErrorSent
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|includeSettings
decl_stmt|;
name|String
name|excludeSettings
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// sometimes leave include empty (default)
name|includeSettings
operator|=
name|randomBoolean
argument_list|()
condition|?
literal|"*"
else|:
literal|""
expr_stmt|;
name|excludeSettings
operator|=
literal|"*Error"
expr_stmt|;
block|}
else|else
block|{
name|includeSettings
operator|=
literal|"test"
expr_stmt|;
name|excludeSettings
operator|=
literal|"DOESN'T_MATCH"
expr_stmt|;
block|}
name|ClusterSettings
name|service
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|serviceA
operator|.
name|setDynamicSettings
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|TransportService
operator|.
name|TRACE_LOG_INCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|includeSettings
argument_list|,
name|TransportService
operator|.
name|TRACE_LOG_EXCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|excludeSettings
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|reset
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|sendRequest
argument_list|(
name|nodeB
argument_list|,
literal|"test"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|""
argument_list|)
argument_list|,
name|noopResponseHandler
argument_list|)
expr_stmt|;
name|requestCompleted
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|tracer
operator|.
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see request sent"
argument_list|,
name|tracer
operator|.
name|sawRequestSent
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see request received"
argument_list|,
name|tracer
operator|.
name|sawRequestReceived
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see response sent"
argument_list|,
name|tracer
operator|.
name|sawResponseSent
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see response received"
argument_list|,
name|tracer
operator|.
name|sawResponseReceived
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"saw error sent"
argument_list|,
name|tracer
operator|.
name|sawErrorSent
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tracer
operator|.
name|reset
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|sendRequest
argument_list|(
name|nodeB
argument_list|,
literal|"testError"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|""
argument_list|)
argument_list|,
name|noopResponseHandler
argument_list|)
expr_stmt|;
name|requestCompleted
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|tracer
operator|.
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"saw request sent"
argument_list|,
name|tracer
operator|.
name|sawRequestSent
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see request received"
argument_list|,
name|tracer
operator|.
name|sawRequestReceived
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"saw response sent"
argument_list|,
name|tracer
operator|.
name|sawResponseSent
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"saw response received"
argument_list|,
name|tracer
operator|.
name|sawResponseReceived
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"didn't see error sent"
argument_list|,
name|tracer
operator|.
name|sawErrorSent
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|Tracer
specifier|private
specifier|static
class|class
name|Tracer
extends|extends
name|MockTransportService
operator|.
name|Tracer
block|{
DECL|field|sawRequestSent
specifier|public
specifier|volatile
name|boolean
name|sawRequestSent
decl_stmt|;
DECL|field|sawRequestReceived
specifier|public
specifier|volatile
name|boolean
name|sawRequestReceived
decl_stmt|;
DECL|field|sawResponseSent
specifier|public
specifier|volatile
name|boolean
name|sawResponseSent
decl_stmt|;
DECL|field|sawErrorSent
specifier|public
specifier|volatile
name|boolean
name|sawErrorSent
decl_stmt|;
DECL|field|sawResponseReceived
specifier|public
specifier|volatile
name|boolean
name|sawResponseReceived
decl_stmt|;
DECL|field|expectedEvents
specifier|public
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|expectedEvents
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|receivedRequest
specifier|public
name|void
name|receivedRequest
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|super
operator|.
name|receivedRequest
argument_list|(
name|requestId
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|sawRequestReceived
operator|=
literal|true
expr_stmt|;
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|requestSent
specifier|public
name|void
name|requestSent
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
block|{
name|super
operator|.
name|requestSent
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|sawRequestSent
operator|=
literal|true
expr_stmt|;
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|responseSent
specifier|public
name|void
name|responseSent
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|super
operator|.
name|responseSent
argument_list|(
name|requestId
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|sawResponseSent
operator|=
literal|true
expr_stmt|;
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|responseSent
specifier|public
name|void
name|responseSent
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|super
operator|.
name|responseSent
argument_list|(
name|requestId
argument_list|,
name|action
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sawErrorSent
operator|=
literal|true
expr_stmt|;
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|receivedResponse
specifier|public
name|void
name|receivedResponse
parameter_list|(
name|long
name|requestId
parameter_list|,
name|DiscoveryNode
name|sourceNode
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|super
operator|.
name|receivedResponse
argument_list|(
name|requestId
argument_list|,
name|sourceNode
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|sawResponseReceived
operator|=
literal|true
expr_stmt|;
name|expectedEvents
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|expectedCount
parameter_list|)
block|{
name|sawRequestSent
operator|=
literal|false
expr_stmt|;
name|sawRequestReceived
operator|=
literal|false
expr_stmt|;
name|sawResponseSent
operator|=
literal|false
expr_stmt|;
name|sawErrorSent
operator|=
literal|false
expr_stmt|;
name|sawResponseReceived
operator|=
literal|false
expr_stmt|;
name|expectedEvents
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
name|expectedCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StringMessageRequest
specifier|public
specifier|static
class|class
name|StringMessageRequest
extends|extends
name|TransportRequest
block|{
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|field|timeout
specifier|private
name|long
name|timeout
decl_stmt|;
DECL|method|StringMessageRequest
name|StringMessageRequest
parameter_list|(
name|String
name|message
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|StringMessageRequest
specifier|public
name|StringMessageRequest
parameter_list|()
block|{         }
DECL|method|StringMessageRequest
specifier|public
name|StringMessageRequest
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
argument_list|(
name|message
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|timeout
specifier|public
name|long
name|timeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|message
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|timeout
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StringMessageResponse
specifier|static
class|class
name|StringMessageResponse
extends|extends
name|TransportResponse
block|{
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|method|StringMessageResponse
name|StringMessageResponse
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
DECL|method|StringMessageResponse
name|StringMessageResponse
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|message
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Version0Request
specifier|public
specifier|static
class|class
name|Version0Request
extends|extends
name|TransportRequest
block|{
DECL|field|value1
name|int
name|value1
decl_stmt|;
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value1
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|value1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Version1Request
specifier|public
specifier|static
class|class
name|Version1Request
extends|extends
name|Version0Request
block|{
DECL|field|value2
name|int
name|value2
decl_stmt|;
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|version1
argument_list|)
condition|)
block|{
name|value2
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|version1
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|value2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Version0Response
specifier|static
class|class
name|Version0Response
extends|extends
name|TransportResponse
block|{
DECL|field|value1
name|int
name|value1
decl_stmt|;
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value1
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|value1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Version1Response
specifier|static
class|class
name|Version1Response
extends|extends
name|Version0Response
block|{
DECL|field|value2
name|int
name|value2
decl_stmt|;
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|version1
argument_list|)
condition|)
block|{
name|value2
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|version1
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|value2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testVersionFrom0to1
specifier|public
name|void
name|testVersionFrom0to1
parameter_list|()
throws|throws
name|Exception
block|{
name|serviceB
operator|.
name|registerRequestHandler
argument_list|(
literal|"/version"
argument_list|,
name|Version1Request
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|Version1Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Version1Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|request
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|value2
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// not set, coming from service A
name|Version1Response
name|response
init|=
operator|new
name|Version1Response
argument_list|()
decl_stmt|;
name|response
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|response
operator|.
name|value2
operator|=
literal|2
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Version0Request
name|version0Request
init|=
operator|new
name|Version0Request
argument_list|()
decl_stmt|;
name|version0Request
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|Version0Response
name|version0Response
init|=
name|serviceA
operator|.
name|submitRequest
argument_list|(
name|nodeB
argument_list|,
literal|"/version"
argument_list|,
name|version0Request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|Version0Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Version0Response
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Version0Response
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Version0Response
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|version0Response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersionFrom1to0
specifier|public
name|void
name|testVersionFrom1to0
parameter_list|()
throws|throws
name|Exception
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"/version"
argument_list|,
name|Version0Request
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|Version0Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Version0Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|request
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Version0Response
name|response
init|=
operator|new
name|Version0Response
argument_list|()
decl_stmt|;
name|response
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Version1Request
name|version1Request
init|=
operator|new
name|Version1Request
argument_list|()
decl_stmt|;
name|version1Request
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|version1Request
operator|.
name|value2
operator|=
literal|2
expr_stmt|;
name|Version1Response
name|version1Response
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"/version"
argument_list|,
name|version1Request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|Version1Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Version1Response
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Version1Response
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Version1Response
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|value2
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// initial values, cause its serialized from version 0
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|version1Response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|version1Response
operator|.
name|value2
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersionFrom1to1
specifier|public
name|void
name|testVersionFrom1to1
parameter_list|()
throws|throws
name|Exception
block|{
name|serviceB
operator|.
name|registerRequestHandler
argument_list|(
literal|"/version"
argument_list|,
name|Version1Request
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|Version1Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Version1Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|request
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|request
operator|.
name|value2
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Version1Response
name|response
init|=
operator|new
name|Version1Response
argument_list|()
decl_stmt|;
name|response
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|response
operator|.
name|value2
operator|=
literal|2
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Version1Request
name|version1Request
init|=
operator|new
name|Version1Request
argument_list|()
decl_stmt|;
name|version1Request
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|version1Request
operator|.
name|value2
operator|=
literal|2
expr_stmt|;
name|Version1Response
name|version1Response
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeB
argument_list|,
literal|"/version"
argument_list|,
name|version1Request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|Version1Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Version1Response
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Version1Response
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Version1Response
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|value2
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|version1Response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|version1Response
operator|.
name|value2
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersionFrom0to0
specifier|public
name|void
name|testVersionFrom0to0
parameter_list|()
throws|throws
name|Exception
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"/version"
argument_list|,
name|Version0Request
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|Version0Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|Version0Request
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|request
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Version0Response
name|response
init|=
operator|new
name|Version0Response
argument_list|()
decl_stmt|;
name|response
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Version0Request
name|version0Request
init|=
operator|new
name|Version0Request
argument_list|()
decl_stmt|;
name|version0Request
operator|.
name|value1
operator|=
literal|1
expr_stmt|;
name|Version0Response
name|version0Response
init|=
name|serviceA
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"/version"
argument_list|,
name|version0Request
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|Version0Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Version0Response
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Version0Response
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Version0Response
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|version0Response
operator|.
name|value1
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMockFailToSendNoConnectRule
specifier|public
name|void
name|testMockFailToSendNoConnectRule
parameter_list|()
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHello"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
literal|"moshe"
argument_list|,
name|equalTo
argument_list|(
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"bad message !!!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|serviceA
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHello"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"moshe"
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got response instead of exception"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|assertThat
argument_list|(
name|exp
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"DISCONNECT: simulated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|res
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"DISCONNECT: simulated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|serviceB
operator|.
name|connectToNode
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
try|try
block|{
name|serviceB
operator|.
name|connectToNodeLight
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHello"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMockUnresponsiveRule
specifier|public
name|void
name|testMockUnresponsiveRule
parameter_list|()
block|{
name|serviceA
operator|.
name|registerRequestHandler
argument_list|(
literal|"sayHello"
argument_list|,
name|StringMessageRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|StringMessageRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|StringMessageRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
literal|"moshe"
argument_list|,
name|equalTo
argument_list|(
name|request
operator|.
name|message
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"bad message !!!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serviceB
operator|.
name|addUnresponsiveRule
argument_list|(
name|serviceA
argument_list|)
expr_stmt|;
name|TransportFuture
argument_list|<
name|StringMessageResponse
argument_list|>
name|res
init|=
name|serviceB
operator|.
name|submitRequest
argument_list|(
name|nodeA
argument_list|,
literal|"sayHello"
argument_list|,
operator|new
name|StringMessageRequest
argument_list|(
literal|"moshe"
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|StringMessageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StringMessageResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StringMessageResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|StringMessageResponse
name|response
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got response instead of exception"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|assertThat
argument_list|(
name|exp
argument_list|,
name|instanceOf
argument_list|(
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|res
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|ReceiveTimeoutTransportException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|serviceB
operator|.
name|connectToNode
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
try|try
block|{
name|serviceB
operator|.
name|connectToNodeLight
argument_list|(
name|nodeA
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectTransportException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|serviceA
operator|.
name|removeHandler
argument_list|(
literal|"sayHello"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHostOnMessages
specifier|public
name|void
name|testHostOnMessages
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|TransportAddress
argument_list|>
name|addressA
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|TransportAddress
argument_list|>
name|addressB
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceB
operator|.
name|registerRequestHandler
argument_list|(
literal|"action1"
argument_list|,
name|TestRequest
operator|::
operator|new
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|TransportRequestHandler
argument_list|<
name|TestRequest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|TestRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|addressA
operator|.
name|set
argument_list|(
name|request
operator|.
name|remoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|TestResponse
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serviceA
operator|.
name|sendRequest
argument_list|(
name|nodeB
argument_list|,
literal|"action1"
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|TestResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TestResponse
name|response
parameter_list|)
block|{
name|addressB
operator|.
name|set
argument_list|(
name|response
operator|.
name|remoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"message round trip did not complete within a sensible time frame"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|nodeA
operator|.
name|address
argument_list|()
operator|.
name|sameHost
argument_list|(
name|addressA
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeB
operator|.
name|address
argument_list|()
operator|.
name|sameHost
argument_list|(
name|addressB
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestRequest
specifier|public
specifier|static
class|class
name|TestRequest
extends|extends
name|TransportRequest
block|{     }
DECL|class|TestResponse
specifier|private
specifier|static
class|class
name|TestResponse
extends|extends
name|TransportResponse
block|{     }
block|}
end_class

end_unit

