begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|CompressibleBytesOutputStreamTests
specifier|public
class|class
name|CompressibleBytesOutputStreamTests
extends|extends
name|ESTestCase
block|{
DECL|method|testStreamWithoutCompression
specifier|public
name|void
name|testStreamWithoutCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStream
name|bStream
init|=
operator|new
name|ZeroOutOnCloseStream
argument_list|()
decl_stmt|;
name|CompressibleBytesOutputStream
name|stream
init|=
operator|new
name|CompressibleBytesOutputStream
argument_list|(
name|bStream
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedBytes
init|=
name|randomBytes
argument_list|(
name|randomInt
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|expectedBytes
argument_list|)
expr_stmt|;
name|BytesReference
name|bytesRef
init|=
name|stream
operator|.
name|materializeBytes
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|CompressorFactory
operator|.
name|COMPRESSOR
operator|.
name|isCompressed
argument_list|(
name|bytesRef
argument_list|)
argument_list|)
expr_stmt|;
name|StreamInput
name|streamInput
init|=
name|bytesRef
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|byte
index|[]
name|actualBytes
init|=
operator|new
name|byte
index|[
name|expectedBytes
operator|.
name|length
index|]
decl_stmt|;
name|streamInput
operator|.
name|readBytes
argument_list|(
name|actualBytes
argument_list|,
literal|0
argument_list|,
name|expectedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|streamInput
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedBytes
argument_list|,
name|actualBytes
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The bytes should be zeroed out on close
for|for
control|(
name|byte
name|b
range|:
name|bytesRef
operator|.
name|toBytesRef
argument_list|()
operator|.
name|bytes
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStreamWithCompression
specifier|public
name|void
name|testStreamWithCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStream
name|bStream
init|=
operator|new
name|ZeroOutOnCloseStream
argument_list|()
decl_stmt|;
name|CompressibleBytesOutputStream
name|stream
init|=
operator|new
name|CompressibleBytesOutputStream
argument_list|(
name|bStream
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedBytes
init|=
name|randomBytes
argument_list|(
name|randomInt
argument_list|(
literal|30
argument_list|)
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|expectedBytes
argument_list|)
expr_stmt|;
name|BytesReference
name|bytesRef
init|=
name|stream
operator|.
name|materializeBytes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|CompressorFactory
operator|.
name|COMPRESSOR
operator|.
name|isCompressed
argument_list|(
name|bytesRef
argument_list|)
argument_list|)
expr_stmt|;
name|StreamInput
name|streamInput
init|=
name|CompressorFactory
operator|.
name|COMPRESSOR
operator|.
name|streamInput
argument_list|(
name|bytesRef
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actualBytes
init|=
operator|new
name|byte
index|[
name|expectedBytes
operator|.
name|length
index|]
decl_stmt|;
name|streamInput
operator|.
name|readBytes
argument_list|(
name|actualBytes
argument_list|,
literal|0
argument_list|,
name|expectedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|streamInput
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedBytes
argument_list|,
name|actualBytes
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The bytes should be zeroed out on close
for|for
control|(
name|byte
name|b
range|:
name|bytesRef
operator|.
name|toBytesRef
argument_list|()
operator|.
name|bytes
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCompressionWithCallingMaterializeFails
specifier|public
name|void
name|testCompressionWithCallingMaterializeFails
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStream
name|bStream
init|=
operator|new
name|ZeroOutOnCloseStream
argument_list|()
decl_stmt|;
name|CompressibleBytesOutputStream
name|stream
init|=
operator|new
name|CompressibleBytesOutputStream
argument_list|(
name|bStream
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedBytes
init|=
name|randomBytes
argument_list|(
name|between
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|expectedBytes
argument_list|)
expr_stmt|;
name|StreamInput
name|streamInput
init|=
name|CompressorFactory
operator|.
name|COMPRESSOR
operator|.
name|streamInput
argument_list|(
name|bStream
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actualBytes
init|=
operator|new
name|byte
index|[
name|expectedBytes
operator|.
name|length
index|]
decl_stmt|;
name|EOFException
name|e
init|=
name|expectThrows
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|streamInput
operator|.
name|readBytes
argument_list|(
name|actualBytes
argument_list|,
literal|0
argument_list|,
name|expectedBytes
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected end of ZLIB input stream"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|randomBytes
specifier|private
specifier|static
name|byte
index|[]
name|randomBytes
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
DECL|class|ZeroOutOnCloseStream
specifier|private
specifier|static
class|class
name|ZeroOutOnCloseStream
extends|extends
name|BytesStreamOutput
block|{
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|int
name|size
init|=
operator|(
name|int
operator|)
name|bytes
operator|.
name|size
argument_list|()
decl_stmt|;
name|bytes
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|byte
index|[
name|size
index|]
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

