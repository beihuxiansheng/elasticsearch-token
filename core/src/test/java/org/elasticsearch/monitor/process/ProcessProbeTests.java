begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.process
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
operator|.
name|BootstrapInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
operator|.
name|jvmInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|ProcessProbeTests
specifier|public
class|class
name|ProcessProbeTests
extends|extends
name|ESTestCase
block|{
DECL|field|probe
specifier|private
specifier|final
name|ProcessProbe
name|probe
init|=
name|ProcessProbe
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|method|testProcessInfo
specifier|public
name|void
name|testProcessInfo
parameter_list|()
block|{
name|long
name|refreshInterval
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|ProcessInfo
name|info
init|=
name|probe
operator|.
name|processInfo
argument_list|(
name|refreshInterval
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshInterval
argument_list|,
name|info
operator|.
name|getRefreshInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jvmInfo
argument_list|()
operator|.
name|pid
argument_list|()
argument_list|,
name|info
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BootstrapInfo
operator|.
name|isMemoryLocked
argument_list|()
argument_list|,
name|info
operator|.
name|isMlockall
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testProcessStats
specifier|public
name|void
name|testProcessStats
parameter_list|()
block|{
name|ProcessStats
name|stats
init|=
name|probe
operator|.
name|processStats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
comment|// Open/Max files descriptors are not supported on Windows platforms
name|assertThat
argument_list|(
name|stats
operator|.
name|getOpenFileDescriptors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMaxFileDescriptors
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|stats
operator|.
name|getOpenFileDescriptors
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMaxFileDescriptors
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ProcessStats
operator|.
name|Cpu
name|cpu
init|=
name|stats
operator|.
name|getCpu
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|cpu
argument_list|)
expr_stmt|;
comment|// CPU percent can be negative if the system recent cpu usage is not available
name|assertThat
argument_list|(
name|cpu
operator|.
name|getPercent
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|lessThan
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|allOf
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|100
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// CPU time can return -1 if the platform does not support this operation, let's see which platforms fail
name|assertThat
argument_list|(
name|cpu
operator|.
name|getTotal
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|ProcessStats
operator|.
name|Mem
name|mem
init|=
name|stats
operator|.
name|getMem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|mem
argument_list|)
expr_stmt|;
comment|// Commited total virtual memory can return -1 if not supported, let's see which platforms fail
name|assertThat
argument_list|(
name|mem
operator|.
name|getTotalVirtual
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

