begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|JvmGcMonitorServiceSettingsTests
specifier|public
class|class
name|JvmGcMonitorServiceSettingsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testEmptySettingsAreOkay
specifier|public
name|void
name|testEmptySettingsAreOkay
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|AtomicBoolean
name|scheduled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|execute
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
block|{
name|scheduled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
parameter_list|()
lambda|->
name|assertTrue
argument_list|(
name|scheduled
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisabledSetting
specifier|public
name|void
name|testDisabledSetting
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.enabled"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|scheduled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|execute
argument_list|(
name|settings
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
block|{
name|scheduled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
parameter_list|()
lambda|->
name|assertFalse
argument_list|(
name|scheduled
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNegativeSetting
specifier|public
name|void
name|testNegativeSetting
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|collector
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.collector."
operator|+
name|collector
operator|+
literal|".warn"
argument_list|,
literal|"-"
operator|+
name|randomTimeValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|execute
argument_list|(
name|settings
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
literal|null
argument_list|,
name|e
lambda|->
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"invalid gc_threshold"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"for [monitor.jvm.gc.collector."
operator|+
name|collector
operator|+
literal|"."
argument_list|)
argument_list|)
argument_list|)
argument_list|;
block|}
operator|,
literal|true
operator|,
literal|null
block|)
class|;
end_class

begin_function
unit|}      public
DECL|method|testMissingSetting
name|void
name|testMissingSetting
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|collector
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"monitor.jvm.gc.collector."
operator|+
name|collector
operator|+
literal|".warn"
argument_list|,
name|randomPositiveTimeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"monitor.jvm.gc.collector."
operator|+
name|collector
operator|+
literal|".info"
argument_list|,
name|randomPositiveTimeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
literal|"monitor.jvm.gc.collector."
operator|+
name|collector
operator|+
literal|".debug"
argument_list|,
name|randomPositiveTimeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// drop a random setting or two
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|randomSubsetOf
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
index|[
literal|0
index|]
argument_list|)
argument_list|)
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we should get an exception that a setting is missing
name|execute
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
literal|null
argument_list|,
name|e
lambda|->
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"missing gc_threshold for [monitor.jvm.gc.collector."
operator|+
name|collector
operator|+
literal|"."
argument_list|)
argument_list|)
argument_list|;
block|}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
literal|true
operator|,
literal|null
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
DECL|method|testIllegalOverheadSettings
name|void
name|testIllegalOverheadSettings
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
specifier|final
name|String
name|threshold
range|:
operator|new
name|String
index|[]
block|{
literal|"warn"
block|,
literal|"info"
block|,
literal|"debug"
block|}
control|)
block|{
specifier|final
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.overhead."
operator|+
name|threshold
argument_list|,
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
literal|null
argument_list|,
name|e
lambda|->
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"setting [monitor.jvm.gc.overhead."
operator|+
name|threshold
operator|+
literal|"] must be>= 0"
argument_list|)
argument_list|)
argument_list|;
block|}
operator|,
literal|true
operator|,
literal|null
block|)
function|;
end_function

begin_expr_stmt
unit|}          for
operator|(
name|final
name|String
name|threshold
operator|:
operator|new
name|String
index|[]
block|{
literal|"warn"
block|,
literal|"info"
block|,
literal|"debug"
block|}
operator|)
block|{
name|final
name|Settings
operator|.
name|Builder
name|builder
operator|=
name|Settings
operator|.
name|builder
argument_list|()
block|;
name|builder
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.overhead."
operator|+
name|threshold
argument_list|,
name|randomIntBetween
argument_list|(
literal|100
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|;
name|execute
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
literal|null
argument_list|,
name|e
lambda|->
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"setting [monitor.jvm.gc.overhead."
operator|+
name|threshold
operator|+
literal|"] must be<= 100"
argument_list|)
argument_list|)
argument_list|;             }
block|,
literal|true
block|,
literal|null
block|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|}          final
name|Settings
operator|.
name|Builder
name|infoWarnOutOfOrderBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|int
name|info
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|98
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|infoWarnOutOfOrderBuilder
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.overhead.info"
argument_list|,
name|info
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|int
name|warn
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|info
operator|-
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|infoWarnOutOfOrderBuilder
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.overhead.warn"
argument_list|,
name|warn
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|execute
argument_list|(
name|infoWarnOutOfOrderBuilder
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
literal|null
argument_list|,
name|e
lambda|->
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"[monitor.jvm.gc.overhead.warn] must be greater than [monitor.jvm.gc.overhead.info] ["
operator|+
name|info
operator|+
literal|"] but was ["
operator|+
name|warn
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|;
end_expr_stmt

begin_expr_stmt
unit|},
literal|true
operator|,
literal|null
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|final
name|Settings
operator|.
name|Builder
name|debugInfoOutOfOrderBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|debugInfoOutOfOrderBuilder
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.overhead.info"
argument_list|,
name|info
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|int
name|debug
init|=
name|randomIntBetween
argument_list|(
name|info
operator|+
literal|1
argument_list|,
literal|99
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|debugInfoOutOfOrderBuilder
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.overhead.debug"
argument_list|,
name|debug
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|debugInfoOutOfOrderBuilder
operator|.
name|put
argument_list|(
literal|"monitor.jvm.gc.overhead.warn"
argument_list|,
name|randomIntBetween
argument_list|(
name|debug
operator|+
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// or the test will fail for the wrong reason
end_comment

begin_expr_stmt
name|execute
argument_list|(
name|debugInfoOutOfOrderBuilder
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|command
parameter_list|,
name|interval
parameter_list|)
lambda|->
literal|null
argument_list|,
name|e
lambda|->
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"[monitor.jvm.gc.overhead.info] must be greater than [monitor.jvm.gc.overhead.debug] ["
operator|+
name|debug
operator|+
literal|"] but was ["
operator|+
name|info
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|;
end_expr_stmt

begin_expr_stmt
unit|},
literal|true
operator|,
literal|null
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      private
DECL|method|execute
specifier|static
name|void
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|BiFunction
argument_list|<
name|Runnable
argument_list|,
name|TimeValue
argument_list|,
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|scheduler
parameter_list|,
name|Runnable
name|asserts
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|execute
argument_list|(
name|settings
argument_list|,
name|scheduler
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|asserts
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|execute
specifier|private
specifier|static
name|void
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|BiFunction
argument_list|<
name|Runnable
argument_list|,
name|TimeValue
argument_list|,
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|scheduler
parameter_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|consumer
parameter_list|,
name|boolean
name|constructionShouldFail
parameter_list|,
name|Runnable
name|asserts
parameter_list|)
throws|throws
name|InterruptedException
block|{
assert|assert
name|constructionShouldFail
operator|==
operator|(
name|consumer
operator|!=
literal|null
operator|)
assert|;
assert|assert
name|constructionShouldFail
operator|==
operator|(
name|asserts
operator|==
literal|null
operator|)
assert|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|JvmGcMonitorServiceSettingsTests
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduleWithFixedDelay
parameter_list|(
name|Runnable
name|command
parameter_list|,
name|TimeValue
name|interval
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|apply
argument_list|(
name|command
argument_list|,
name|interval
argument_list|)
return|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|JvmGcMonitorService
name|service
init|=
operator|new
name|JvmGcMonitorService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructionShouldFail
condition|)
block|{
name|fail
argument_list|(
literal|"construction of jvm gc service should have failed"
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|asserts
operator|.
name|run
argument_list|()
expr_stmt|;
name|service
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

