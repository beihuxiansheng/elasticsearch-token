begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_class
DECL|class|JvmStatsTests
specifier|public
class|class
name|JvmStatsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testJvmStats
specifier|public
name|void
name|testJvmStats
parameter_list|()
throws|throws
name|IOException
block|{
name|JvmStats
name|stats
init|=
name|JvmStats
operator|.
name|jvmStats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stats
operator|.
name|getUptime
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getUptime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mem
name|JvmStats
operator|.
name|Mem
name|mem
init|=
name|stats
operator|.
name|getMem
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|mem
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteSizeValue
name|heap
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|mem
operator|.
name|getHeapCommitted
argument_list|()
argument_list|,
name|mem
operator|.
name|getHeapMax
argument_list|()
argument_list|,
name|mem
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|mem
operator|.
name|getNonHeapCommitted
argument_list|()
argument_list|)
control|)
block|{
name|assertNotNull
argument_list|(
name|heap
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heap
operator|.
name|bytes
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|mem
operator|.
name|getHeapUsedPercent
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mem
operator|.
name|getHeapUsedPercent
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Threads
name|JvmStats
operator|.
name|Threads
name|threads
init|=
name|stats
operator|.
name|getThreads
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|threads
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threads
operator|.
name|getCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threads
operator|.
name|getPeakCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// GC
name|JvmStats
operator|.
name|GarbageCollectors
name|gcs
init|=
name|stats
operator|.
name|getGc
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|gcs
argument_list|)
expr_stmt|;
name|JvmStats
operator|.
name|GarbageCollector
index|[]
name|collectors
init|=
name|gcs
operator|.
name|getCollectors
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|collectors
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collectors
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|JvmStats
operator|.
name|GarbageCollector
name|collector
range|:
name|collectors
control|)
block|{
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|collector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collector
operator|.
name|getCollectionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collector
operator|.
name|getCollectionTime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collector
operator|.
name|getCollectionCount
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Buffer Pools
name|List
argument_list|<
name|JvmStats
operator|.
name|BufferPool
argument_list|>
name|bufferPools
init|=
name|stats
operator|.
name|getBufferPools
argument_list|()
decl_stmt|;
if|if
condition|(
name|bufferPools
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JvmStats
operator|.
name|BufferPool
name|bufferPool
range|:
name|bufferPools
control|)
block|{
name|assertNotNull
argument_list|(
name|bufferPool
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|bufferPool
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bufferPool
operator|.
name|getCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bufferPool
operator|.
name|getTotalCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bufferPool
operator|.
name|getTotalCapacity
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bufferPool
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bufferPool
operator|.
name|getUsed
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Classes
name|JvmStats
operator|.
name|Classes
name|classes
init|=
name|stats
operator|.
name|getClasses
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getLoadedClassCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getTotalLoadedClassCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|classes
operator|.
name|getUnloadedClassCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

