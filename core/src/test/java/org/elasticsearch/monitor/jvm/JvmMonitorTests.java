begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.jvm
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|JvmMonitorTests
specifier|public
class|class
name|JvmMonitorTests
extends|extends
name|ESTestCase
block|{
DECL|field|IGNORE
specifier|private
specifier|static
specifier|final
name|JvmGcMonitorService
operator|.
name|GcOverheadThreshold
name|IGNORE
init|=
operator|new
name|JvmGcMonitorService
operator|.
name|GcOverheadThreshold
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|method|testMonitorFailure
specifier|public
name|void
name|testMonitorFailure
parameter_list|()
block|{
name|AtomicBoolean
name|shouldFail
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|invoked
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|JvmGcMonitorService
operator|.
name|JvmMonitor
name|monitor
init|=
operator|new
name|JvmGcMonitorService
operator|.
name|JvmMonitor
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|IGNORE
argument_list|)
block|{
annotation|@
name|Override
name|void
name|onMonitorFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|invoked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"simulated"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|synchronized
name|void
name|monitorGc
parameter_list|()
block|{
if|if
condition|(
name|shouldFail
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"simulated"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|onSlowGc
parameter_list|(
specifier|final
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|,
specifier|final
name|SlowGcEvent
name|slowGcEvent
parameter_list|)
block|{             }
annotation|@
name|Override
name|void
name|onGcOverhead
parameter_list|(
name|Threshold
name|threshold
parameter_list|,
name|long
name|total
parameter_list|,
name|long
name|elapsed
parameter_list|,
name|long
name|seq
parameter_list|)
block|{             }
block|}
decl_stmt|;
name|monitor
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|invoked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|shouldFail
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|invoked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSlowGc
specifier|public
name|void
name|testSlowGc
parameter_list|()
block|{
specifier|final
name|int
name|initialYoungCollectionCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|int
name|initialYoungCollectionTime
init|=
name|randomIntBetween
argument_list|(
name|initialYoungCollectionCount
operator|*
literal|100
argument_list|,
name|initialYoungCollectionCount
operator|*
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|int
name|initialOldCollectionCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|int
name|initialOldCollectionTime
init|=
name|randomIntBetween
argument_list|(
name|initialYoungCollectionCount
operator|*
literal|1000
argument_list|,
name|initialYoungCollectionCount
operator|*
literal|2000
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|initialYoungCollector
init|=
name|mock
argument_list|(
name|JvmStats
operator|.
name|GarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|initialYoungCollector
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"young"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|initialYoungCollector
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
name|initialYoungCollectionCount
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|initialYoungCollector
operator|.
name|getCollectionTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|initialYoungCollectionTime
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|initialOldCollector
init|=
name|mock
argument_list|(
name|JvmStats
operator|.
name|GarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|initialOldCollector
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"old"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|initialOldCollector
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
name|initialOldCollectionCount
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|initialOldCollector
operator|.
name|getCollectionTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|initialOldCollectionTime
argument_list|)
argument_list|)
expr_stmt|;
name|JvmStats
name|initialJvmStats
init|=
name|jvmStats
argument_list|(
name|initialYoungCollector
argument_list|,
name|initialOldCollector
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JvmGcMonitorService
operator|.
name|GcThreshold
argument_list|>
name|gcThresholds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// fake debug threshold, info will be double this and warn will
comment|// be triple
specifier|final
name|int
name|youngDebugThreshold
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|*
literal|100
decl_stmt|;
name|gcThresholds
operator|.
name|put
argument_list|(
literal|"young"
argument_list|,
operator|new
name|JvmGcMonitorService
operator|.
name|GcThreshold
argument_list|(
literal|"young"
argument_list|,
name|youngDebugThreshold
operator|*
literal|3
argument_list|,
name|youngDebugThreshold
operator|*
literal|2
argument_list|,
name|youngDebugThreshold
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|youngGcThreshold
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
name|youngThresholdLevel
init|=
name|randomFrom
argument_list|(
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|youngMultiplier
init|=
literal|1
operator|+
name|youngThresholdLevel
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|final
name|int
name|youngCollections
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|youngCollector
decl_stmt|;
name|youngCollector
operator|=
name|mock
argument_list|(
name|JvmStats
operator|.
name|GarbageCollector
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|youngCollector
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"young"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|youngCollector
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
call|(
name|long
call|)
argument_list|(
name|initialYoungCollectionCount
operator|+
name|youngCollections
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|youngIncrement
decl_stmt|;
if|if
condition|(
name|youngGcThreshold
condition|)
block|{
comment|// we are faking that youngCollections collections occurred
comment|// this number is chosen so that we squeak over the
comment|// random threshold when computing the average collection
comment|// time: note that average collection time will just be
comment|// youngMultiplier * youngDebugThreshold + 1 which ensures
comment|// that we are over the right threshold but below the next
comment|// threshold
name|youngIncrement
operator|=
name|youngCollections
operator|*
name|youngMultiplier
operator|*
name|youngDebugThreshold
operator|+
name|youngCollections
expr_stmt|;
block|}
else|else
block|{
comment|// fake that we did not exceed the threshold
name|youngIncrement
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|youngDebugThreshold
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|youngCollector
operator|.
name|getCollectionTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|initialYoungCollectionTime
operator|+
name|youngIncrement
argument_list|)
argument_list|)
expr_stmt|;
comment|// fake debug threshold, info will be double this and warn will
comment|// be triple
specifier|final
name|int
name|oldDebugThreshold
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|*
literal|100
decl_stmt|;
name|gcThresholds
operator|.
name|put
argument_list|(
literal|"old"
argument_list|,
operator|new
name|JvmGcMonitorService
operator|.
name|GcThreshold
argument_list|(
literal|"old"
argument_list|,
name|oldDebugThreshold
operator|*
literal|3
argument_list|,
name|oldDebugThreshold
operator|*
literal|2
argument_list|,
name|oldDebugThreshold
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|oldGcThreshold
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
name|oldThresholdLevel
init|=
name|randomFrom
argument_list|(
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldMultiplier
init|=
literal|1
operator|+
name|oldThresholdLevel
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|final
name|int
name|oldCollections
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|oldCollector
init|=
name|mock
argument_list|(
name|JvmStats
operator|.
name|GarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|oldCollector
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"old"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|oldCollector
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
call|(
name|long
call|)
argument_list|(
name|initialOldCollectionCount
operator|+
name|oldCollections
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|oldIncrement
decl_stmt|;
if|if
condition|(
name|oldGcThreshold
condition|)
block|{
comment|// we are faking that oldCollections collections occurred
comment|// this number is chosen so that we squeak over the
comment|// random threshold when computing the average collection
comment|// time: note that average collection time will just be
comment|// oldMultiplier * oldDebugThreshold + 1 which ensures
comment|// that we are over the right threshold but below the next
comment|// threshold
name|oldIncrement
operator|=
name|oldCollections
operator|*
name|oldMultiplier
operator|*
name|oldDebugThreshold
operator|+
name|oldCollections
expr_stmt|;
block|}
else|else
block|{
comment|// fake that we did not exceed the threshold
name|oldIncrement
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|oldDebugThreshold
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|oldCollector
operator|.
name|getCollectionTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|initialOldCollectionTime
operator|+
name|oldIncrement
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1
operator|<<
literal|30
argument_list|)
decl_stmt|;
specifier|final
name|long
name|expectedElapsed
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|now
init|=
operator|new
name|AtomicLong
argument_list|(
name|start
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|JvmStats
argument_list|>
name|jvmStats
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|jvmStats
operator|.
name|set
argument_list|(
name|initialJvmStats
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|JvmGcMonitorService
operator|.
name|JvmMonitor
name|monitor
init|=
operator|new
name|JvmGcMonitorService
operator|.
name|JvmMonitor
argument_list|(
name|gcThresholds
argument_list|,
name|IGNORE
argument_list|)
block|{
annotation|@
name|Override
name|void
name|onMonitorFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
annotation|@
name|Override
name|void
name|onSlowGc
parameter_list|(
specifier|final
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|,
specifier|final
name|SlowGcEvent
name|slowGcEvent
parameter_list|)
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|seq
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slowGcEvent
operator|.
name|elapsed
argument_list|,
name|equalTo
argument_list|(
name|expectedElapsed
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getName
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"young"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"old"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"young"
operator|.
name|equals
argument_list|(
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertCollection
argument_list|(
name|threshold
argument_list|,
name|youngThresholdLevel
argument_list|,
name|slowGcEvent
argument_list|,
name|initialYoungCollectionCount
argument_list|,
name|youngCollections
argument_list|,
name|initialYoungCollectionTime
argument_list|,
name|youngIncrement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"old"
operator|.
name|equals
argument_list|(
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertCollection
argument_list|(
name|threshold
argument_list|,
name|oldThresholdLevel
argument_list|,
name|slowGcEvent
argument_list|,
name|initialOldCollectionCount
argument_list|,
name|oldCollections
argument_list|,
name|initialOldCollectionTime
argument_list|,
name|oldIncrement
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|onGcOverhead
parameter_list|(
name|Threshold
name|threshold
parameter_list|,
name|long
name|total
parameter_list|,
name|long
name|elapsed
parameter_list|,
name|long
name|seq
parameter_list|)
block|{             }
annotation|@
name|Override
name|long
name|now
parameter_list|()
block|{
return|return
name|now
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
name|JvmStats
name|jvmStats
parameter_list|()
block|{
return|return
name|jvmStats
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|JvmStats
name|monitorJvmStats
init|=
name|jvmStats
argument_list|(
name|youngCollector
argument_list|,
name|oldCollector
argument_list|)
decl_stmt|;
name|now
operator|.
name|set
argument_list|(
name|start
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|expectedElapsed
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|jvmStats
operator|.
name|set
argument_list|(
name|monitorJvmStats
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|monitorGc
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|youngGcThreshold
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|oldGcThreshold
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCollection
specifier|private
name|void
name|assertCollection
parameter_list|(
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
name|actualThreshold
parameter_list|,
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
name|expectedThreshold
parameter_list|,
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|SlowGcEvent
name|slowGcEvent
parameter_list|,
specifier|final
name|int
name|initialCollectionCount
parameter_list|,
specifier|final
name|int
name|collections
parameter_list|,
specifier|final
name|int
name|initialCollectionTime
parameter_list|,
specifier|final
name|int
name|increment
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actualThreshold
argument_list|,
name|equalTo
argument_list|(
name|expectedThreshold
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getCollectionCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
call|(
name|long
call|)
argument_list|(
name|initialCollectionCount
operator|+
name|collections
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slowGcEvent
operator|.
name|collectionCount
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|collections
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slowGcEvent
operator|.
name|collectionTime
argument_list|,
name|equalTo
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|increment
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slowGcEvent
operator|.
name|currentGc
operator|.
name|getCollectionTime
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|initialCollectionTime
operator|+
name|increment
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|jvmStats
specifier|private
name|JvmStats
name|jvmStats
parameter_list|(
name|JvmStats
operator|.
name|GarbageCollector
name|youngCollector
parameter_list|,
name|JvmStats
operator|.
name|GarbageCollector
name|oldCollector
parameter_list|)
block|{
specifier|final
name|JvmStats
name|jvmStats
init|=
name|mock
argument_list|(
name|JvmStats
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollectors
name|gcs
init|=
name|mock
argument_list|(
name|JvmStats
operator|.
name|GarbageCollectors
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
index|[]
name|collectors
init|=
operator|new
name|JvmStats
operator|.
name|GarbageCollector
index|[
literal|2
index|]
decl_stmt|;
name|collectors
index|[
literal|0
index|]
operator|=
name|youngCollector
expr_stmt|;
name|collectors
index|[
literal|1
index|]
operator|=
name|oldCollector
expr_stmt|;
name|when
argument_list|(
name|gcs
operator|.
name|getCollectors
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|collectors
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jvmStats
operator|.
name|getGc
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|gcs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|jvmStats
operator|.
name|getMem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|JvmStats
operator|.
name|jvmStats
argument_list|()
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jvmStats
return|;
block|}
DECL|method|testMonitorGc
specifier|public
name|void
name|testMonitorGc
parameter_list|()
block|{
specifier|final
name|int
name|youngCollectionCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|int
name|youngCollectionIncrement
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|int
name|youngCollectionTime
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1
operator|<<
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|youngCollectionTimeIncrement
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1
operator|<<
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldCollectionCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldCollectionIncrement
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldCollectionTime
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1
operator|<<
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldCollectionTimeIncrement
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1
operator|<<
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|lastYoungCollector
init|=
name|collector
argument_list|(
literal|"young"
argument_list|,
name|youngCollectionCount
argument_list|,
name|youngCollectionTime
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|lastOldCollector
init|=
name|collector
argument_list|(
literal|"old"
argument_list|,
name|oldCollectionCount
argument_list|,
name|oldCollectionTime
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
name|lastjvmStats
init|=
name|jvmStats
argument_list|(
name|lastYoungCollector
argument_list|,
name|lastOldCollector
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|currentYoungCollector
init|=
name|collector
argument_list|(
literal|"young"
argument_list|,
name|youngCollectionCount
operator|+
name|youngCollectionIncrement
argument_list|,
name|youngCollectionTime
operator|+
name|youngCollectionTimeIncrement
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|currentOldCollector
init|=
name|collector
argument_list|(
literal|"old"
argument_list|,
name|oldCollectionCount
operator|+
name|oldCollectionIncrement
argument_list|,
name|oldCollectionTime
operator|+
name|oldCollectionTimeIncrement
argument_list|)
decl_stmt|;
specifier|final
name|JvmStats
name|currentJvmStats
init|=
name|jvmStats
argument_list|(
name|currentYoungCollector
argument_list|,
name|currentOldCollector
argument_list|)
decl_stmt|;
specifier|final
name|long
name|expectedElapsed
init|=
name|randomIntBetween
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|youngCollectionTime
operator|+
name|youngCollectionTimeIncrement
argument_list|,
name|oldCollectionTime
operator|+
name|oldCollectionTimeIncrement
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|invoked
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
name|monitor
init|=
operator|new
name|JvmGcMonitorService
operator|.
name|JvmMonitor
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|IGNORE
argument_list|)
block|{
annotation|@
name|Override
name|void
name|onMonitorFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
annotation|@
name|Override
name|void
name|onSlowGc
parameter_list|(
name|Threshold
name|threshold
parameter_list|,
name|long
name|seq
parameter_list|,
name|SlowGcEvent
name|slowGcEvent
parameter_list|)
block|{             }
annotation|@
name|Override
name|void
name|onGcOverhead
parameter_list|(
name|Threshold
name|threshold
parameter_list|,
name|long
name|total
parameter_list|,
name|long
name|elapsed
parameter_list|,
name|long
name|seq
parameter_list|)
block|{             }
annotation|@
name|Override
name|void
name|checkGcOverhead
parameter_list|(
name|long
name|current
parameter_list|,
name|long
name|elapsed
parameter_list|,
name|long
name|seq
parameter_list|)
block|{
name|invoked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|,
name|equalTo
argument_list|(
call|(
name|long
call|)
argument_list|(
name|youngCollectionTimeIncrement
operator|+
name|oldCollectionTimeIncrement
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elapsed
argument_list|,
name|equalTo
argument_list|(
name|expectedElapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|JvmStats
name|jvmStats
parameter_list|()
block|{
return|return
name|lastjvmStats
return|;
block|}
block|}
decl_stmt|;
name|monitor
operator|.
name|monitorGcOverhead
argument_list|(
name|currentJvmStats
argument_list|,
name|expectedElapsed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|collector
specifier|private
name|JvmStats
operator|.
name|GarbageCollector
name|collector
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|collectionCount
parameter_list|,
specifier|final
name|int
name|collectionTime
parameter_list|)
block|{
specifier|final
name|JvmStats
operator|.
name|GarbageCollector
name|gc
init|=
name|mock
argument_list|(
name|JvmStats
operator|.
name|GarbageCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|gc
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|gc
operator|.
name|getCollectionCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
name|collectionCount
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|gc
operator|.
name|getCollectionTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|collectionTime
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|gc
return|;
block|}
DECL|method|testCheckGcOverhead
specifier|public
name|void
name|testCheckGcOverhead
parameter_list|()
block|{
specifier|final
name|int
name|debugThreshold
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|98
argument_list|)
decl_stmt|;
specifier|final
name|int
name|infoThreshold
init|=
name|randomIntBetween
argument_list|(
name|debugThreshold
operator|+
literal|1
argument_list|,
literal|99
argument_list|)
decl_stmt|;
specifier|final
name|int
name|warnThreshold
init|=
name|randomIntBetween
argument_list|(
name|infoThreshold
operator|+
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|JvmGcMonitorService
operator|.
name|GcOverheadThreshold
name|gcOverheadThreshold
init|=
operator|new
name|JvmGcMonitorService
operator|.
name|GcOverheadThreshold
argument_list|(
name|warnThreshold
argument_list|,
name|infoThreshold
argument_list|,
name|debugThreshold
argument_list|)
decl_stmt|;
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
name|expectedThreshold
decl_stmt|;
name|int
name|fraction
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|expectedCurrent
decl_stmt|;
specifier|final
name|long
name|expectedElapsed
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|expectedThreshold
operator|=
name|randomFrom
argument_list|(
name|JvmGcMonitorService
operator|.
name|JvmMonitor
operator|.
name|Threshold
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|expectedThreshold
condition|)
block|{
case|case
name|WARN
case|:
name|fraction
operator|=
name|randomIntBetween
argument_list|(
name|warnThreshold
argument_list|,
literal|100
argument_list|)
expr_stmt|;
break|break;
case|case
name|INFO
case|:
name|fraction
operator|=
name|randomIntBetween
argument_list|(
name|infoThreshold
argument_list|,
name|warnThreshold
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEBUG
case|:
name|fraction
operator|=
name|randomIntBetween
argument_list|(
name|debugThreshold
argument_list|,
name|infoThreshold
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|expectedThreshold
operator|=
literal|null
expr_stmt|;
name|fraction
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|debugThreshold
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|expectedElapsed
operator|=
literal|100
operator|*
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|expectedCurrent
operator|=
name|fraction
operator|*
name|expectedElapsed
operator|/
literal|100
expr_stmt|;
specifier|final
name|AtomicBoolean
name|invoked
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|long
name|expectedSeq
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|JvmGcMonitorService
operator|.
name|JvmMonitor
name|monitor
init|=
operator|new
name|JvmGcMonitorService
operator|.
name|JvmMonitor
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|gcOverheadThreshold
argument_list|)
block|{
annotation|@
name|Override
name|void
name|onMonitorFailure
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{             }
annotation|@
name|Override
name|void
name|onSlowGc
parameter_list|(
name|Threshold
name|threshold
parameter_list|,
name|long
name|seq
parameter_list|,
name|SlowGcEvent
name|slowGcEvent
parameter_list|)
block|{             }
annotation|@
name|Override
name|void
name|onGcOverhead
parameter_list|(
specifier|final
name|Threshold
name|threshold
parameter_list|,
specifier|final
name|long
name|current
parameter_list|,
specifier|final
name|long
name|elapsed
parameter_list|,
specifier|final
name|long
name|seq
parameter_list|)
block|{
name|invoked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threshold
argument_list|,
name|equalTo
argument_list|(
name|expectedThreshold
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|,
name|equalTo
argument_list|(
name|expectedCurrent
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elapsed
argument_list|,
name|equalTo
argument_list|(
name|expectedElapsed
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|seq
argument_list|,
name|equalTo
argument_list|(
name|expectedSeq
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|monitor
operator|.
name|checkGcOverhead
argument_list|(
name|expectedCurrent
argument_list|,
name|expectedElapsed
argument_list|,
name|expectedSeq
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|invoked
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedThreshold
operator|!=
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

