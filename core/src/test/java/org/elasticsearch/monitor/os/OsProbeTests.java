begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.os
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|both
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|OsProbeTests
specifier|public
class|class
name|OsProbeTests
extends|extends
name|ESTestCase
block|{
DECL|field|probe
specifier|private
specifier|final
name|OsProbe
name|probe
init|=
name|OsProbe
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|method|testOsInfo
specifier|public
name|void
name|testOsInfo
parameter_list|()
block|{
name|int
name|allocatedProcessors
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|refreshInterval
init|=
name|randomBoolean
argument_list|()
condition|?
operator|-
literal|1
else|:
name|randomPositiveLong
argument_list|()
decl_stmt|;
name|OsInfo
name|info
init|=
name|probe
operator|.
name|osInfo
argument_list|(
name|refreshInterval
argument_list|,
name|allocatedProcessors
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|refreshInterval
argument_list|,
name|info
operator|.
name|getRefreshInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|OS_NAME
argument_list|,
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|OS_ARCH
argument_list|,
name|info
operator|.
name|getArch
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|OS_VERSION
argument_list|,
name|info
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocatedProcessors
argument_list|,
name|info
operator|.
name|getAllocatedProcessors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|,
name|info
operator|.
name|getAvailableProcessors
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOsStats
specifier|public
name|void
name|testOsStats
parameter_list|()
block|{
name|OsStats
name|stats
init|=
name|probe
operator|.
name|osStats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCpu
argument_list|()
operator|.
name|getPercent
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|both
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|lessThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|100
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|loadAverage
init|=
name|stats
operator|.
name|getCpu
argument_list|()
operator|.
name|getLoadAverage
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadAverage
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|loadAverage
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
comment|// load average is unavailable on Windows
name|assertNull
argument_list|(
name|loadAverage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|LINUX
condition|)
block|{
comment|// we should be able to get the load average
name|assertNotNull
argument_list|(
name|loadAverage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|0
index|]
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|1
index|]
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|2
index|]
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|MAC_OS_X
condition|)
block|{
comment|// one minute load average is available, but 10-minute and 15-minute load averages are not
name|assertNotNull
argument_list|(
name|loadAverage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|0
index|]
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|2
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// unknown system, but the best case is that we have the one-minute load average
if|if
condition|(
name|loadAverage
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|0
index|]
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|loadAverage
index|[
literal|2
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|stats
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMem
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMem
argument_list|()
operator|.
name|getFree
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMem
argument_list|()
operator|.
name|getFreePercent
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMem
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getMem
argument_list|()
operator|.
name|getUsedPercent
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
operator|(
name|short
operator|)
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|total
init|=
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getFree
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// On platforms with no swap
name|assertThat
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getFree
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getSwap
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Constants
operator|.
name|LINUX
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|.
name|getCpuAcctControlGroup
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|.
name|getCpuAcctUsageNanos
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|.
name|getCpuCfsQuotaMicros
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|.
name|getCpuCfsPeriodMicros
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|.
name|getCpuStat
argument_list|()
operator|.
name|getNumberOfElapsedPeriods
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|.
name|getCpuStat
argument_list|()
operator|.
name|getNumberOfTimesThrottled
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
operator|.
name|getCpuStat
argument_list|()
operator|.
name|getTimeThrottledNanos
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertNull
argument_list|(
name|stats
operator|.
name|getCgroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetSystemLoadAverage
specifier|public
name|void
name|testGetSystemLoadAverage
parameter_list|()
block|{
name|assumeTrue
argument_list|(
literal|"test runs on Linux only"
argument_list|,
name|Constants
operator|.
name|LINUX
argument_list|)
expr_stmt|;
specifier|final
name|OsProbe
name|probe
init|=
operator|new
name|OsProbe
argument_list|()
block|{
annotation|@
name|Override
name|String
name|readProcLoadavg
parameter_list|()
block|{
return|return
literal|"1.51 1.69 1.99 3/417 23251"
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|double
index|[]
name|systemLoadAverage
init|=
name|probe
operator|.
name|getSystemLoadAverage
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|systemLoadAverage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|systemLoadAverage
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// avoid silliness with representing doubles
name|assertThat
argument_list|(
name|systemLoadAverage
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
literal|"1.51"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|systemLoadAverage
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
literal|"1.69"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|systemLoadAverage
index|[
literal|2
index|]
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
literal|"1.99"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCgroupProbe
specifier|public
name|void
name|testCgroupProbe
parameter_list|()
block|{
name|assumeTrue
argument_list|(
literal|"test runs on Linux only"
argument_list|,
name|Constants
operator|.
name|LINUX
argument_list|)
expr_stmt|;
specifier|final
name|String
name|hierarchy
init|=
name|randomAsciiOfLength
argument_list|(
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|OsProbe
name|probe
init|=
operator|new
name|OsProbe
argument_list|()
block|{
annotation|@
name|Override
name|List
argument_list|<
name|String
argument_list|>
name|readProcSelfCgroup
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"11:freezer:/"
argument_list|,
literal|"10:net_cls,net_prio:/"
argument_list|,
literal|"9:pids:/"
argument_list|,
literal|"8:cpuset:/"
argument_list|,
literal|"7:blkio:/"
argument_list|,
literal|"6:memory:/"
argument_list|,
literal|"5:devices:/user.slice"
argument_list|,
literal|"4:hugetlb:/"
argument_list|,
literal|"3:perf_event:/"
argument_list|,
literal|"2:cpu,cpuacct:/"
operator|+
name|hierarchy
argument_list|,
literal|"1:name=systemd:/user.slice/user-1000.slice/session-2359.scope"
argument_list|)
return|;
block|}
annotation|@
name|Override
name|String
name|readSysFsCgroupCpuAcctCpuAcctUsage
parameter_list|(
name|String
name|controlGroup
parameter_list|)
block|{
name|assertThat
argument_list|(
name|controlGroup
argument_list|,
name|equalTo
argument_list|(
literal|"/"
operator|+
name|hierarchy
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"364869866063112"
return|;
block|}
annotation|@
name|Override
name|String
name|readSysFsCgroupCpuAcctCpuCfsPeriod
parameter_list|(
name|String
name|controlGroup
parameter_list|)
block|{
name|assertThat
argument_list|(
name|controlGroup
argument_list|,
name|equalTo
argument_list|(
literal|"/"
operator|+
name|hierarchy
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"100000"
return|;
block|}
annotation|@
name|Override
name|String
name|readSysFsCgroupCpuAcctCpuAcctCfsQuota
parameter_list|(
name|String
name|controlGroup
parameter_list|)
block|{
name|assertThat
argument_list|(
name|controlGroup
argument_list|,
name|equalTo
argument_list|(
literal|"/"
operator|+
name|hierarchy
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"50000"
return|;
block|}
annotation|@
name|Override
name|List
argument_list|<
name|String
argument_list|>
name|readSysFsCgroupCpuAcctCpuStat
parameter_list|(
name|String
name|controlGroup
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"nr_periods 17992"
argument_list|,
literal|"nr_throttled 1311"
argument_list|,
literal|"throttled_time 139298645489"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|OsStats
operator|.
name|Cgroup
name|cgroup
init|=
name|probe
operator|.
name|osStats
argument_list|()
operator|.
name|getCgroup
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuAcctControlGroup
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"/"
operator|+
name|hierarchy
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuAcctUsageNanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|364869866063112L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuControlGroup
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"/"
operator|+
name|hierarchy
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuCfsPeriodMicros
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuCfsQuotaMicros
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuStat
argument_list|()
operator|.
name|getNumberOfElapsedPeriods
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|17992L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuStat
argument_list|()
operator|.
name|getNumberOfTimesThrottled
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1311L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cgroup
operator|.
name|getCpuStat
argument_list|()
operator|.
name|getTimeThrottledNanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|139298645489L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

