begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|FsProbeTests
specifier|public
class|class
name|FsProbeTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|testFsInfo
specifier|public
name|void
name|testFsInfo
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|NodeEnvironment
name|env
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|FsProbe
name|probe
init|=
operator|new
name|FsProbe
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|FsInfo
name|stats
init|=
name|probe
operator|.
name|stats
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|FsInfo
operator|.
name|Path
name|total
init|=
name|stats
operator|.
name|getTotal
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|total
operator|.
name|total
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|total
operator|.
name|free
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|total
operator|.
name|available
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FsInfo
operator|.
name|Path
name|path
range|:
name|stats
control|)
block|{
name|assertNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|path
operator|.
name|getPath
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|path
operator|.
name|getMount
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|path
operator|.
name|getType
argument_list|()
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|path
operator|.
name|total
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|path
operator|.
name|free
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|path
operator|.
name|available
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

