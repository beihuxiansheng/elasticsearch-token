begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Random geo generation utilities for randomized {@code geo_point} type testing  * does not depend on jts or spatial4j. Use {@link org.elasticsearch.test.geo.RandomShapeGenerator}  * to create random OGC compliant shapes.  */
end_comment

begin_class
DECL|class|RandomGeoGenerator
specifier|public
class|class
name|RandomGeoGenerator
block|{
DECL|method|randomPoint
specifier|public
specifier|static
name|void
name|randomPoint
parameter_list|(
name|Random
name|r
parameter_list|,
name|double
index|[]
name|pt
parameter_list|)
block|{
specifier|final
name|double
index|[]
name|min
init|=
block|{
operator|-
literal|180
block|,
operator|-
literal|90
block|}
decl_stmt|;
specifier|final
name|double
index|[]
name|max
init|=
block|{
literal|180
block|,
literal|90
block|}
decl_stmt|;
name|randomPointIn
argument_list|(
name|r
argument_list|,
name|min
index|[
literal|0
index|]
argument_list|,
name|min
index|[
literal|1
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|,
name|pt
argument_list|)
expr_stmt|;
block|}
DECL|method|randomPointIn
specifier|public
specifier|static
name|void
name|randomPointIn
parameter_list|(
name|Random
name|r
parameter_list|,
specifier|final
name|double
name|minLon
parameter_list|,
specifier|final
name|double
name|minLat
parameter_list|,
specifier|final
name|double
name|maxLon
parameter_list|,
specifier|final
name|double
name|maxLat
parameter_list|,
name|double
index|[]
name|pt
parameter_list|)
block|{
assert|assert
name|pt
operator|!=
literal|null
operator|&&
name|pt
operator|.
name|length
operator|==
literal|2
assert|;
comment|// normalize min and max
name|double
index|[]
name|min
init|=
block|{
name|normalizeLongitude
argument_list|(
name|minLon
argument_list|)
block|,
name|normalizeLatitude
argument_list|(
name|minLat
argument_list|)
block|}
decl_stmt|;
name|double
index|[]
name|max
init|=
block|{
name|normalizeLongitude
argument_list|(
name|maxLon
argument_list|)
block|,
name|normalizeLatitude
argument_list|(
name|maxLat
argument_list|)
block|}
decl_stmt|;
specifier|final
name|double
index|[]
name|tMin
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|double
index|[]
name|tMax
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|tMin
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
index|[
literal|0
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tMax
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|min
index|[
literal|0
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tMin
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
index|[
literal|1
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|tMax
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|min
index|[
literal|1
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|pt
index|[
literal|0
index|]
operator|=
name|tMin
index|[
literal|0
index|]
operator|+
name|r
operator|.
name|nextDouble
argument_list|()
operator|*
operator|(
name|tMax
index|[
literal|0
index|]
operator|-
name|tMin
index|[
literal|0
index|]
operator|)
expr_stmt|;
name|pt
index|[
literal|1
index|]
operator|=
name|tMin
index|[
literal|1
index|]
operator|+
name|r
operator|.
name|nextDouble
argument_list|()
operator|*
operator|(
name|tMax
index|[
literal|1
index|]
operator|-
name|tMin
index|[
literal|1
index|]
operator|)
expr_stmt|;
block|}
DECL|method|randomPoint
specifier|public
specifier|static
name|GeoPoint
name|randomPoint
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|randomPointIn
argument_list|(
name|r
argument_list|,
operator|-
literal|180
argument_list|,
operator|-
literal|90
argument_list|,
literal|180
argument_list|,
literal|90
argument_list|)
return|;
block|}
DECL|method|randomPointIn
specifier|public
specifier|static
name|GeoPoint
name|randomPointIn
parameter_list|(
name|Random
name|r
parameter_list|,
specifier|final
name|double
name|minLon
parameter_list|,
specifier|final
name|double
name|minLat
parameter_list|,
specifier|final
name|double
name|maxLon
parameter_list|,
specifier|final
name|double
name|maxLat
parameter_list|)
block|{
name|double
index|[]
name|pt
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|randomPointIn
argument_list|(
name|r
argument_list|,
name|minLon
argument_list|,
name|minLat
argument_list|,
name|maxLon
argument_list|,
name|maxLat
argument_list|,
name|pt
argument_list|)
expr_stmt|;
return|return
operator|new
name|GeoPoint
argument_list|(
name|pt
index|[
literal|1
index|]
argument_list|,
name|pt
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/** Puts latitude in range of -90 to 90. */
DECL|method|normalizeLatitude
specifier|private
specifier|static
name|double
name|normalizeLatitude
parameter_list|(
name|double
name|latitude
parameter_list|)
block|{
if|if
condition|(
name|latitude
operator|>=
operator|-
literal|90
operator|&&
name|latitude
operator|<=
literal|90
condition|)
block|{
return|return
name|latitude
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|latitude
operator|+
literal|90
operator|)
operator|%
literal|360
argument_list|)
decl_stmt|;
return|return
operator|(
name|off
operator|<=
literal|180
condition|?
name|off
else|:
literal|360
operator|-
name|off
operator|)
operator|-
literal|90
return|;
block|}
comment|/** Puts longitude in range of -180 to +180. */
DECL|method|normalizeLongitude
specifier|private
specifier|static
name|double
name|normalizeLongitude
parameter_list|(
name|double
name|longitude
parameter_list|)
block|{
if|if
condition|(
name|longitude
operator|>=
operator|-
literal|180
operator|&&
name|longitude
operator|<=
literal|180
condition|)
block|{
return|return
name|longitude
return|;
comment|//common case, and avoids slight double precision shifting
block|}
name|double
name|off
init|=
operator|(
name|longitude
operator|+
literal|180
operator|)
operator|%
literal|360
decl_stmt|;
if|if
condition|(
name|off
operator|<
literal|0
condition|)
block|{
return|return
literal|180
operator|+
name|off
return|;
block|}
elseif|else
if|if
condition|(
name|off
operator|==
literal|0
operator|&&
name|longitude
operator|>
literal|0
condition|)
block|{
return|return
literal|180
return|;
block|}
else|else
block|{
return|return
operator|-
literal|180
operator|+
name|off
return|;
block|}
block|}
block|}
end_class

end_unit

