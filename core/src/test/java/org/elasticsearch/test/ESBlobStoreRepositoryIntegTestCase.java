begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|create
operator|.
name|CreateSnapshotRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|create
operator|.
name|CreateSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|restore
operator|.
name|RestoreSnapshotRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|restore
operator|.
name|RestoreSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_comment
comment|/**  * Basic integration tests for blob-based repository validation.  */
end_comment

begin_class
DECL|class|ESBlobStoreRepositoryIntegTestCase
specifier|public
specifier|abstract
class|class
name|ESBlobStoreRepositoryIntegTestCase
extends|extends
name|ESIntegTestCase
block|{
DECL|method|createTestRepository
specifier|protected
specifier|abstract
name|void
name|createTestRepository
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
DECL|method|testSnapshotAndRestore
specifier|public
name|void
name|testSnapshotAndRestore
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|repoName
init|=
name|randomAsciiName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  creating repository {}"
argument_list|,
name|repoName
argument_list|)
expr_stmt|;
name|createTestRepository
argument_list|(
name|repoName
argument_list|)
expr_stmt|;
name|int
name|indexCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
index|[]
name|docCounts
init|=
operator|new
name|int
index|[
name|indexCount
index|]
decl_stmt|;
name|String
index|[]
name|indexNames
init|=
name|generateRandomNames
argument_list|(
name|indexCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexCount
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"-->  create random index {} with {} records"
argument_list|,
name|indexNames
index|[
name|i
index|]
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|docCounts
index|[
name|i
index|]
operator|=
name|iterations
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|addRandomDocuments
argument_list|(
name|indexNames
index|[
name|i
index|]
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexNames
index|[
name|i
index|]
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|String
name|snapshotName
init|=
name|randomAsciiName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  create snapshot {}:{}"
argument_list|,
name|repoName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|assertSuccessfulSnapshot
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repoName
argument_list|,
name|snapshotName
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setIndices
argument_list|(
name|indexNames
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deleteIndices
init|=
name|randomSubsetOf
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|indexCount
argument_list|)
argument_list|,
name|indexNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteIndices
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"-->  delete indices {}"
argument_list|,
name|deleteIndices
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|deleteIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|deleteIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|closeIndices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|indexNames
argument_list|)
argument_list|)
decl_stmt|;
name|closeIndices
operator|.
name|removeAll
argument_list|(
name|deleteIndices
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeIndices
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|index
range|:
name|closeIndices
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> add random documents to {}"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|addRandomDocuments
argument_list|(
name|index
argument_list|,
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|docCount
init|=
operator|(
name|int
operator|)
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|index
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
name|int
name|deleteCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|docCount
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> delete {} random documents from {}"
argument_list|,
name|deleteCount
argument_list|,
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|docCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|index
argument_list|,
name|index
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|doc
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|index
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"-->  close indices {}"
argument_list|,
name|closeIndices
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|closeIndices
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|closeIndices
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> restore all indices from the snapshot"
argument_list|)
expr_stmt|;
name|assertSuccessfulRestore
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareRestoreSnapshot
argument_list|(
name|repoName
argument_list|,
name|snapshotName
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexCount
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexNames
index|[
name|i
index|]
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMultipleSnapshotAndRollback
specifier|public
name|void
name|testMultipleSnapshotAndRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|repoName
init|=
name|randomAsciiName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  creating repository {}"
argument_list|,
name|repoName
argument_list|)
expr_stmt|;
name|createTestRepository
argument_list|(
name|repoName
argument_list|)
expr_stmt|;
name|int
name|iterationCount
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
index|[]
name|docCounts
init|=
operator|new
name|int
index|[
name|iterationCount
index|]
decl_stmt|;
name|String
name|indexName
init|=
name|randomAsciiName
argument_list|()
decl_stmt|;
name|String
name|snapshotName
init|=
name|randomAsciiName
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterationCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|// don't delete on the first iteration
name|int
name|docCount
init|=
name|docCounts
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|docCount
operator|>
literal|0
condition|)
block|{
name|int
name|deleteCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|docCount
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> delete {} random documents from {}"
argument_list|,
name|deleteCount
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|deleteCount
condition|;
name|j
operator|++
control|)
block|{
name|int
name|doc
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|docCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|indexName
argument_list|,
name|indexName
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|doc
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|docCount
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> add {} random documents to {}"
argument_list|,
name|docCount
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|addRandomDocuments
argument_list|(
name|indexName
argument_list|,
name|docCount
argument_list|)
expr_stmt|;
block|}
comment|// Check number of documents in this iteration
name|docCounts
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  create snapshot {}:{} with {} documents"
argument_list|,
name|repoName
argument_list|,
name|snapshotName
operator|+
literal|"-"
operator|+
name|i
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertSuccessfulSnapshot
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repoName
argument_list|,
name|snapshotName
operator|+
literal|"-"
operator|+
name|i
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|setIndices
argument_list|(
name|indexName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|restoreOperations
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|restoreOperations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|iterationToRestore
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|iterationCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  performing restore of the iteration {}"
argument_list|,
name|iterationToRestore
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  close index"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|indexName
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restore index from the snapshot"
argument_list|)
expr_stmt|;
name|assertSuccessfulRestore
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareRestoreSnapshot
argument_list|(
name|repoName
argument_list|,
name|snapshotName
operator|+
literal|"-"
operator|+
name|iterationToRestore
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|docCounts
index|[
name|iterationToRestore
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRandomDocuments
specifier|protected
name|void
name|addRandomDocuments
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|IndexRequestBuilder
index|[]
name|indexRequestBuilders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setRouting
argument_list|(
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilders
argument_list|)
expr_stmt|;
block|}
DECL|method|generateRandomNames
specifier|protected
name|String
index|[]
name|generateRandomNames
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
decl_stmt|;
do|do
block|{
name|name
operator|=
name|randomAsciiName
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
do|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|num
index|]
argument_list|)
return|;
block|}
DECL|method|assertSuccessfulSnapshot
specifier|public
specifier|static
name|CreateSnapshotResponse
name|assertSuccessfulSnapshot
parameter_list|(
name|CreateSnapshotRequestBuilder
name|requestBuilder
parameter_list|)
block|{
name|CreateSnapshotResponse
name|response
init|=
name|requestBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuccessfulSnapshot
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|assertSuccessfulSnapshot
specifier|public
specifier|static
name|void
name|assertSuccessfulSnapshot
parameter_list|(
name|CreateSnapshotResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getSnapshotInfo
argument_list|()
operator|.
name|totalShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuccessfulRestore
specifier|public
specifier|static
name|RestoreSnapshotResponse
name|assertSuccessfulRestore
parameter_list|(
name|RestoreSnapshotRequestBuilder
name|requestBuilder
parameter_list|)
block|{
name|RestoreSnapshotResponse
name|response
init|=
name|requestBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuccessfulRestore
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|assertSuccessfulRestore
specifier|public
specifier|static
name|void
name|assertSuccessfulRestore
parameter_list|(
name|RestoreSnapshotResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getRestoreInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getRestoreInfo
argument_list|()
operator|.
name|successfulShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getRestoreInfo
argument_list|()
operator|.
name|totalShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomAsciiName
specifier|public
specifier|static
name|String
name|randomAsciiName
parameter_list|()
block|{
return|return
name|randomAsciiOfLength
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

