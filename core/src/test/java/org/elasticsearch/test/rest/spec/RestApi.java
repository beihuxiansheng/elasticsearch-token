begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.spec
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|spec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|RestPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Represents an elasticsearch REST endpoint (api)  */
end_comment

begin_class
DECL|class|RestApi
specifier|public
class|class
name|RestApi
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|methods
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|paths
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pathParts
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|pathParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|params
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|body
specifier|private
name|BODY
name|body
init|=
name|BODY
operator|.
name|NOT_SUPPORTED
decl_stmt|;
DECL|enum|BODY
specifier|public
enum|enum
name|BODY
block|{
DECL|enum constant|NOT_SUPPORTED
DECL|enum constant|OPTIONAL
DECL|enum constant|REQUIRED
name|NOT_SUPPORTED
block|,
name|OPTIONAL
block|,
name|REQUIRED
block|}
DECL|method|RestApi
name|RestApi
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getMethods
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMethods
parameter_list|()
block|{
return|return
name|methods
return|;
block|}
comment|/**      * Returns the supported http methods given the rest parameters provided      */
DECL|method|getSupportedMethods
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSupportedMethods
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|restParams
parameter_list|)
block|{
comment|//we try to avoid hardcoded mappings but the index api is the exception
if|if
condition|(
literal|"index"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"create"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexMethods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|restParams
operator|.
name|contains
argument_list|(
literal|"id"
argument_list|)
condition|)
block|{
comment|//PUT when the id is provided
if|if
condition|(
name|HttpPut
operator|.
name|METHOD_NAME
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|indexMethods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//POST without id
if|if
condition|(
name|HttpPost
operator|.
name|METHOD_NAME
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|indexMethods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|indexMethods
return|;
block|}
return|return
name|methods
return|;
block|}
DECL|method|addMethod
name|void
name|addMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|methods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
DECL|method|getPaths
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPaths
parameter_list|()
block|{
return|return
name|paths
return|;
block|}
DECL|method|addPath
name|void
name|addPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|getPathParts
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPathParts
parameter_list|()
block|{
return|return
name|pathParts
return|;
block|}
DECL|method|addPathPart
name|void
name|addPathPart
parameter_list|(
name|String
name|pathPart
parameter_list|)
block|{
name|this
operator|.
name|pathParts
operator|.
name|add
argument_list|(
name|pathPart
argument_list|)
expr_stmt|;
block|}
DECL|method|getParams
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
DECL|method|addParam
name|void
name|addParam
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|this
operator|.
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
DECL|method|setBodyOptional
name|void
name|setBodyOptional
parameter_list|()
block|{
name|this
operator|.
name|body
operator|=
name|BODY
operator|.
name|OPTIONAL
expr_stmt|;
block|}
DECL|method|setBodyRequired
name|void
name|setBodyRequired
parameter_list|()
block|{
name|this
operator|.
name|body
operator|=
name|BODY
operator|.
name|REQUIRED
expr_stmt|;
block|}
DECL|method|isBodySupported
specifier|public
name|boolean
name|isBodySupported
parameter_list|()
block|{
return|return
name|body
operator|!=
name|BODY
operator|.
name|NOT_SUPPORTED
return|;
block|}
DECL|method|isBodyRequired
specifier|public
name|boolean
name|isBodyRequired
parameter_list|()
block|{
return|return
name|body
operator|==
name|BODY
operator|.
name|REQUIRED
return|;
block|}
comment|/**      * Finds the best matching rest path given the current parameters and replaces      * placeholders with their corresponding values received as arguments      */
DECL|method|getFinalPaths
specifier|public
name|RestPath
index|[]
name|getFinalPaths
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pathParams
parameter_list|)
block|{
name|List
argument_list|<
name|RestPath
argument_list|>
name|matchingRestPaths
init|=
name|findMatchingRestPaths
argument_list|(
name|pathParams
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingRestPaths
operator|==
literal|null
operator|||
name|matchingRestPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unable to find matching rest path for api ["
operator|+
name|name
operator|+
literal|"] and path params "
operator|+
name|pathParams
argument_list|)
throw|;
block|}
name|RestPath
index|[]
name|restPaths
init|=
operator|new
name|RestPath
index|[
name|matchingRestPaths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matchingRestPaths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RestPath
name|restPath
init|=
name|matchingRestPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|restPaths
index|[
name|i
index|]
operator|=
name|restPath
operator|.
name|replacePlaceholders
argument_list|(
name|pathParams
argument_list|)
expr_stmt|;
block|}
return|return
name|restPaths
return|;
block|}
comment|/**      * Finds the matching rest paths out of the available ones with the current api (based on REST spec).      *      * The best path is the one that has exactly the same number of placeholders to replace      * (e.g. /{index}/{type}/{id} when the path params are exactly index, type and id).      */
DECL|method|findMatchingRestPaths
specifier|private
name|List
argument_list|<
name|RestPath
argument_list|>
name|findMatchingRestPaths
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|restParams
parameter_list|)
block|{
name|List
argument_list|<
name|RestPath
argument_list|>
name|matchingRestPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RestPath
index|[]
name|restPaths
init|=
name|buildRestPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPath
name|restPath
range|:
name|restPaths
control|)
block|{
if|if
condition|(
name|restPath
operator|.
name|matches
argument_list|(
name|restParams
argument_list|)
condition|)
block|{
name|matchingRestPaths
operator|.
name|add
argument_list|(
name|restPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matchingRestPaths
return|;
block|}
DECL|method|buildRestPaths
specifier|private
name|RestPath
index|[]
name|buildRestPaths
parameter_list|()
block|{
name|RestPath
index|[]
name|restPaths
init|=
operator|new
name|RestPath
index|[
name|paths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|restPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|restPaths
index|[
name|i
index|]
operator|=
operator|new
name|RestPath
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|restPaths
return|;
block|}
block|}
end_class

end_unit

