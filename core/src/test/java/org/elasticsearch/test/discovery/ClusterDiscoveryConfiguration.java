begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|SettingsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|local
operator|.
name|LocalTransport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ClusterDiscoveryConfiguration
specifier|public
class|class
name|ClusterDiscoveryConfiguration
extends|extends
name|SettingsSource
block|{
DECL|field|DEFAULT_NODE_SETTINGS
specifier|static
name|Settings
name|DEFAULT_NODE_SETTINGS
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.type"
argument_list|,
literal|"zen"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|numOfNodes
specifier|final
name|int
name|numOfNodes
decl_stmt|;
DECL|field|nodeSettings
specifier|final
name|Settings
name|nodeSettings
decl_stmt|;
DECL|field|transportClientSettings
specifier|final
name|Settings
name|transportClientSettings
decl_stmt|;
DECL|method|ClusterDiscoveryConfiguration
specifier|public
name|ClusterDiscoveryConfiguration
parameter_list|(
name|int
name|numOfNodes
parameter_list|,
name|Settings
name|extraSettings
parameter_list|)
block|{
name|this
operator|.
name|numOfNodes
operator|=
name|numOfNodes
expr_stmt|;
name|this
operator|.
name|nodeSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DEFAULT_NODE_SETTINGS
argument_list|)
operator|.
name|put
argument_list|(
name|extraSettings
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|transportClientSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|extraSettings
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|node
specifier|public
name|Settings
name|node
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|nodeSettings
return|;
block|}
annotation|@
name|Override
DECL|method|transportClient
specifier|public
name|Settings
name|transportClient
parameter_list|()
block|{
return|return
name|transportClientSettings
return|;
block|}
DECL|class|UnicastZen
specifier|public
specifier|static
class|class
name|UnicastZen
extends|extends
name|ClusterDiscoveryConfiguration
block|{
comment|// this variable is incremented on each bind attempt and will maintain the next port that should be tried
DECL|field|nextPort
specifier|private
specifier|static
name|int
name|nextPort
init|=
name|calcBasePort
argument_list|()
decl_stmt|;
comment|// since we run multiple test iterations, we need some flexibility in the choice of ports a node can have (port may
comment|// stay in use by previous iterations on some OSes - read CentOs). This controls the amount of ports each node
comment|// is assigned. All ports in range will be added to the unicast hosts, which is OK because we know only one will be used.
DECL|field|NUM_PORTS_PER_NODE
specifier|private
specifier|static
specifier|final
name|int
name|NUM_PORTS_PER_NODE
init|=
literal|3
decl_stmt|;
DECL|field|unicastHosts
specifier|private
specifier|final
name|String
index|[]
name|unicastHosts
decl_stmt|;
DECL|field|localMode
specifier|private
specifier|final
name|boolean
name|localMode
decl_stmt|;
DECL|method|UnicastZen
specifier|public
name|UnicastZen
parameter_list|(
name|int
name|numOfNodes
parameter_list|)
block|{
name|this
argument_list|(
name|numOfNodes
argument_list|,
name|numOfNodes
argument_list|)
expr_stmt|;
block|}
DECL|method|UnicastZen
specifier|public
name|UnicastZen
parameter_list|(
name|int
name|numOfNodes
parameter_list|,
name|Settings
name|extraSettings
parameter_list|)
block|{
name|this
argument_list|(
name|numOfNodes
argument_list|,
name|numOfNodes
argument_list|,
name|extraSettings
argument_list|)
expr_stmt|;
block|}
DECL|method|UnicastZen
specifier|public
name|UnicastZen
parameter_list|(
name|int
name|numOfNodes
parameter_list|,
name|int
name|numOfUnicastHosts
parameter_list|)
block|{
name|this
argument_list|(
name|numOfNodes
argument_list|,
name|numOfUnicastHosts
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|UnicastZen
specifier|public
name|UnicastZen
parameter_list|(
name|int
name|numOfNodes
parameter_list|,
name|int
name|numOfUnicastHosts
parameter_list|,
name|Settings
name|extraSettings
parameter_list|)
block|{
name|super
argument_list|(
name|numOfNodes
argument_list|,
name|extraSettings
argument_list|)
expr_stmt|;
name|int
index|[]
name|unicastHostOrdinals
decl_stmt|;
if|if
condition|(
name|numOfUnicastHosts
operator|==
name|numOfNodes
condition|)
block|{
name|unicastHostOrdinals
operator|=
operator|new
name|int
index|[
name|numOfNodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfNodes
condition|;
name|i
operator|++
control|)
block|{
name|unicastHostOrdinals
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|ordinals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|numOfUnicastHosts
argument_list|)
decl_stmt|;
while|while
condition|(
name|ordinals
operator|.
name|size
argument_list|()
operator|!=
name|numOfUnicastHosts
condition|)
block|{
name|ordinals
operator|.
name|add
argument_list|(
name|RandomizedTest
operator|.
name|randomInt
argument_list|(
name|numOfNodes
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unicastHostOrdinals
operator|=
name|Ints
operator|.
name|toArray
argument_list|(
name|ordinals
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|localMode
operator|=
name|nodeSettings
operator|.
name|get
argument_list|(
literal|"node.mode"
argument_list|,
name|InternalTestCluster
operator|.
name|NODE_MODE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
expr_stmt|;
name|this
operator|.
name|unicastHosts
operator|=
name|buildUnicastHostSetting
argument_list|(
name|unicastHostOrdinals
argument_list|,
name|localMode
argument_list|)
expr_stmt|;
block|}
DECL|method|UnicastZen
specifier|public
name|UnicastZen
parameter_list|(
name|int
name|numOfNodes
parameter_list|,
name|int
index|[]
name|unicastHostOrdinals
parameter_list|)
block|{
name|this
argument_list|(
name|numOfNodes
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|unicastHostOrdinals
argument_list|)
expr_stmt|;
block|}
DECL|method|UnicastZen
specifier|public
name|UnicastZen
parameter_list|(
name|int
name|numOfNodes
parameter_list|,
name|Settings
name|extraSettings
parameter_list|,
name|int
index|[]
name|unicastHostOrdinals
parameter_list|)
block|{
name|super
argument_list|(
name|numOfNodes
argument_list|,
name|extraSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|localMode
operator|=
name|nodeSettings
operator|.
name|get
argument_list|(
literal|"node.mode"
argument_list|,
name|InternalTestCluster
operator|.
name|NODE_MODE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
expr_stmt|;
name|this
operator|.
name|unicastHosts
operator|=
name|buildUnicastHostSetting
argument_list|(
name|unicastHostOrdinals
argument_list|,
name|localMode
argument_list|)
expr_stmt|;
block|}
DECL|method|calcBasePort
specifier|private
specifier|static
name|int
name|calcBasePort
parameter_list|()
block|{
return|return
literal|30000
operator|+
name|InternalTestCluster
operator|.
name|BASE_PORT
return|;
block|}
DECL|method|buildUnicastHostSetting
specifier|private
specifier|static
name|String
index|[]
name|buildUnicastHostSetting
parameter_list|(
name|int
index|[]
name|unicastHostOrdinals
parameter_list|,
name|boolean
name|localMode
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|unicastHosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unicastHostOrdinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|hostOrdinal
init|=
name|unicastHostOrdinals
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|localMode
condition|)
block|{
name|unicastHosts
operator|.
name|add
argument_list|(
literal|"node_"
operator|+
name|hostOrdinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we need to pin the node port& host so we'd know where to point things
specifier|final
name|int
index|[]
name|ports
init|=
name|nodePorts
argument_list|(
name|hostOrdinal
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|port
range|:
name|ports
control|)
block|{
name|unicastHosts
operator|.
name|add
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|unicastHosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|unicastHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|node
specifier|public
name|Settings
name|node
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.zen.ping.multicast.enabled"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|localMode
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|LocalTransport
operator|.
name|TRANSPORT_LOCAL_ADDRESS
argument_list|,
literal|"node_"
operator|+
name|nodeOrdinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we need to pin the node port& host so we'd know where to point things
name|String
name|ports
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|port
range|:
name|nodePorts
argument_list|(
name|nodeOrdinal
argument_list|)
control|)
block|{
name|ports
operator|+=
literal|","
operator|+
name|port
expr_stmt|;
block|}
name|builder
operator|.
name|put
argument_list|(
literal|"transport.tcp.port"
argument_list|,
name|ports
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"transport.host"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|putArray
argument_list|(
literal|"discovery.zen.ping.unicast.hosts"
argument_list|,
name|unicastHosts
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|put
argument_list|(
name|super
operator|.
name|node
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|nodePorts
specifier|protected
specifier|static
name|int
index|[]
name|nodePorts
parameter_list|(
name|int
name|nodeOridnal
parameter_list|)
block|{
name|int
index|[]
name|unicastHostPorts
init|=
operator|new
name|int
index|[
name|NUM_PORTS_PER_NODE
index|]
decl_stmt|;
specifier|final
name|int
name|basePort
init|=
name|calcBasePort
argument_list|()
operator|+
name|nodeOridnal
operator|*
name|NUM_PORTS_PER_NODE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unicastHostPorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|unicastHostPorts
index|[
name|i
index|]
operator|=
name|basePort
operator|+
name|i
expr_stmt|;
block|}
return|return
name|unicastHostPorts
return|;
block|}
block|}
block|}
end_class

end_unit

