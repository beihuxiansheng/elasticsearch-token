begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Test appender that can be used to verify that certain events were logged correctly  */
end_comment

begin_class
DECL|class|MockLogAppender
specifier|public
class|class
name|MockLogAppender
extends|extends
name|AppenderSkeleton
block|{
DECL|field|COMMON_PREFIX
specifier|private
specifier|final
specifier|static
name|String
name|COMMON_PREFIX
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.logger.prefix"
argument_list|,
literal|"org.elasticsearch."
argument_list|)
decl_stmt|;
DECL|field|expectations
specifier|private
name|List
argument_list|<
name|LoggingExpectation
argument_list|>
name|expectations
decl_stmt|;
DECL|method|MockLogAppender
specifier|public
name|MockLogAppender
parameter_list|()
block|{
name|expectations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|addExpectation
specifier|public
name|void
name|addExpectation
parameter_list|(
name|LoggingExpectation
name|expectation
parameter_list|)
block|{
name|expectations
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|protected
name|void
name|append
parameter_list|(
name|LoggingEvent
name|loggingEvent
parameter_list|)
block|{
for|for
control|(
name|LoggingExpectation
name|expectation
range|:
name|expectations
control|)
block|{
name|expectation
operator|.
name|match
argument_list|(
name|loggingEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|requiresLayout
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|assertAllExpectationsMatched
specifier|public
name|void
name|assertAllExpectationsMatched
parameter_list|()
block|{
for|for
control|(
name|LoggingExpectation
name|expectation
range|:
name|expectations
control|)
block|{
name|expectation
operator|.
name|assertMatched
argument_list|()
expr_stmt|;
block|}
block|}
DECL|interface|LoggingExpectation
specifier|public
interface|interface
name|LoggingExpectation
block|{
DECL|method|match
name|void
name|match
parameter_list|(
name|LoggingEvent
name|loggingEvent
parameter_list|)
function_decl|;
DECL|method|assertMatched
name|void
name|assertMatched
parameter_list|()
function_decl|;
block|}
DECL|class|AbstractEventExpectation
specifier|public
specifier|static
specifier|abstract
class|class
name|AbstractEventExpectation
implements|implements
name|LoggingExpectation
block|{
DECL|field|name
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|logger
specifier|protected
specifier|final
name|String
name|logger
decl_stmt|;
DECL|field|level
specifier|protected
specifier|final
name|Level
name|level
decl_stmt|;
DECL|field|message
specifier|protected
specifier|final
name|String
name|message
decl_stmt|;
DECL|field|saw
specifier|volatile
name|boolean
name|saw
decl_stmt|;
DECL|method|AbstractEventExpectation
specifier|public
name|AbstractEventExpectation
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|logger
parameter_list|,
name|Level
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|getLoggerName
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|saw
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|public
name|void
name|match
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|level
operator|&&
name|event
operator|.
name|getLoggerName
argument_list|()
operator|.
name|equals
argument_list|(
name|logger
argument_list|)
condition|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|message
argument_list|)
condition|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|message
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|saw
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|saw
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|UnseenEventExpectation
specifier|public
specifier|static
class|class
name|UnseenEventExpectation
extends|extends
name|AbstractEventExpectation
block|{
DECL|method|UnseenEventExpectation
specifier|public
name|UnseenEventExpectation
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|logger
parameter_list|,
name|Level
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|logger
argument_list|,
name|level
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertMatched
specifier|public
name|void
name|assertMatched
parameter_list|()
block|{
name|assertThat
argument_list|(
name|name
argument_list|,
name|saw
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SeenEventExpectation
specifier|public
specifier|static
class|class
name|SeenEventExpectation
extends|extends
name|AbstractEventExpectation
block|{
DECL|method|SeenEventExpectation
specifier|public
name|SeenEventExpectation
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|logger
parameter_list|,
name|Level
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|logger
argument_list|,
name|level
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertMatched
specifier|public
name|void
name|assertMatched
parameter_list|()
block|{
name|assertThat
argument_list|(
name|name
argument_list|,
name|saw
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLoggerName
specifier|private
specifier|static
name|String
name|getLoggerName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"org.elasticsearch."
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|"org.elasticsearch."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|COMMON_PREFIX
operator|+
name|name
return|;
block|}
block|}
end_class

end_unit

