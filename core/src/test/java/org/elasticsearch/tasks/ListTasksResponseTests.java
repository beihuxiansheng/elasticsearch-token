begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.tasks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|tasks
operator|.
name|list
operator|.
name|ListTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
DECL|class|ListTasksResponseTests
specifier|public
class|class
name|ListTasksResponseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testToStringNoTask
specifier|public
name|void
name|testToStringNoTask
parameter_list|()
block|{
name|ListTasksResponse
name|tasksResponse
init|=
operator|new
name|ListTasksResponse
argument_list|()
decl_stmt|;
name|String
name|string
init|=
name|tasksResponse
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|string
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"nodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|TaskInfo
name|info
init|=
operator|new
name|TaskInfo
argument_list|(
operator|new
name|TaskId
argument_list|(
literal|"node1"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"dummy-type"
argument_list|,
literal|"dummy-action"
argument_list|,
literal|"dummy-description"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
operator|new
name|TaskId
argument_list|(
literal|"node1"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListTasksResponse
name|tasksResponse
init|=
operator|new
name|ListTasksResponse
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|info
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
name|String
name|string
init|=
name|tasksResponse
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|string
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"\"type\":\"dummy-type\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

