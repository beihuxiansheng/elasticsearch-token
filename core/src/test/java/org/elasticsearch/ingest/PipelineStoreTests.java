begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|PipelineStoreTests
specifier|public
class|class
name|PipelineStoreTests
extends|extends
name|ESTestCase
block|{
DECL|field|store
specifier|private
name|PipelineStore
name|store
decl_stmt|;
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
name|ClusterService
name|clusterService
init|=
name|mock
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
name|TransportService
name|transportService
init|=
name|mock
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
name|client
operator|=
name|mock
argument_list|(
name|Client
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|search
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedSearchReponse
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|searchScroll
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedSearchReponse
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PipelineStore
argument_list|(
name|settings
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|)
expr_stmt|;
name|store
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|testUpdatePipeline
specifier|public
name|void
name|testUpdatePipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|InternalSearchHit
argument_list|>
name|hits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|hits
operator|.
name|add
argument_list|(
operator|new
name|InternalSearchHit
argument_list|(
literal|0
argument_list|,
literal|"1"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|sourceRef
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"description\": \"_description1\"}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|search
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedSearchReponse
argument_list|(
name|hits
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|get
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedGetResponse
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePipelines
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_description1"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|get
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedGetResponse
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|.
name|add
argument_list|(
operator|new
name|InternalSearchHit
argument_list|(
literal|0
argument_list|,
literal|"2"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|sourceRef
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"description\": \"_description2\"}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePipelines
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_description1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_description2"
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|get
argument_list|(
name|eqGetRequest
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|,
name|PipelineStore
operator|.
name|TYPE
argument_list|,
literal|"2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedGetResponse
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePipelines
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_description1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetReference
specifier|public
name|void
name|testGetReference
parameter_list|()
throws|throws
name|Exception
block|{
comment|// fill the store up for the test:
name|List
argument_list|<
name|InternalSearchHit
argument_list|>
name|hits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|hits
operator|.
name|add
argument_list|(
operator|new
name|InternalSearchHit
argument_list|(
literal|0
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|sourceRef
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"description\": \"_description\"}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|.
name|add
argument_list|(
operator|new
name|InternalSearchHit
argument_list|(
literal|0
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|sourceRef
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"description\": \"_description\"}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hits
operator|.
name|add
argument_list|(
operator|new
name|InternalSearchHit
argument_list|(
literal|0
argument_list|,
literal|"foobar"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|sourceRef
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"{\"description\": \"_description\"}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|search
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedSearchReponse
argument_list|(
name|hits
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePipelines
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PipelineDefinition
argument_list|>
name|result
init|=
name|store
operator|.
name|getReference
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getReference
argument_list|(
literal|"foo*"
argument_list|)
expr_stmt|;
comment|// to make sure the order is consistent in the test:
name|result
operator|.
name|sort
argument_list|(
parameter_list|(
name|first
parameter_list|,
name|second
parameter_list|)
lambda|->
block|{
return|return
name|first
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|second
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getReference
argument_list|(
literal|"bar*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getReference
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
comment|// to make sure the order is consistent in the test:
name|result
operator|.
name|sort
argument_list|(
parameter_list|(
name|first
parameter_list|,
name|second
parameter_list|)
lambda|->
block|{
return|return
name|first
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|second
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getReference
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidateIngestIndex
specifier|public
name|void
name|testValidateIngestIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ingest index doesn't exist:
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// ingest index does exist and is valid:
name|IndexMetaData
operator|.
name|Builder
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|PipelineStore
operator|.
name|PIPELINE_MAPPING
argument_list|)
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// fails, has dynamic mapping
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.mapper.dynamic"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|PipelineStore
operator|.
name|PIPELINE_MAPPING
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest index setting, [index.mapper.dynamic] setting is [true] while [false] is expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fails, incorrect number of primary shards
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|PipelineStore
operator|.
name|PIPELINE_MAPPING
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest index setting, [index.number_of_shards] setting is [2] while [1] is expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fails, incorrect number of replica shards
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|PipelineStore
operator|.
name|PIPELINE_MAPPING
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest index setting, [index.number_of_replicas] setting is [2] while [1] is expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fails not a strict mapping:
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"processors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"on_failure"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"description"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest mapping, pipeline mapping must be strict"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fails _all field is enabled:
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"strict"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"processors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"on_failure"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"description"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest mapping, _all field is enabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fails processor field not of type object:
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"strict"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"processors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"nested"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"on_failure"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"description"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest mapping, processors field's type is [nested] while [object] is expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fails processor field enabled option is true:
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"strict"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"processors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"on_failure"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"description"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest mapping, processors field enabled option is [true] while [false] is expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fails processor field dynamic option is false:
name|mapping
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"strict"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"processors"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"on_failure"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"description"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|PipelineStore
operator|.
name|INDEX
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|PipelineStore
operator|.
name|INGEST_INDEX_SETTING
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|putMapping
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|isIngestIndexPresent
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"illegal ingest mapping, processors field dynamic option is [false] while [true] is expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|expectedSearchReponse
specifier|static
name|ActionFuture
argument_list|<
name|SearchResponse
argument_list|>
name|expectedSearchReponse
parameter_list|(
name|List
argument_list|<
name|InternalSearchHit
argument_list|>
name|hits
parameter_list|)
block|{
return|return
operator|new
name|PlainActionFuture
argument_list|<
name|SearchResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SearchResponse
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|InternalSearchHits
name|hits1
init|=
operator|new
name|InternalSearchHits
argument_list|(
name|hits
operator|.
name|toArray
argument_list|(
operator|new
name|InternalSearchHit
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|hits
operator|.
name|size
argument_list|()
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
return|return
operator|new
name|SearchResponse
argument_list|(
operator|new
name|InternalSearchResponse
argument_list|(
name|hits1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"_scrollId"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|expectedGetResponse
specifier|static
name|ActionFuture
argument_list|<
name|GetResponse
argument_list|>
name|expectedGetResponse
parameter_list|(
name|boolean
name|exists
parameter_list|)
block|{
return|return
operator|new
name|PlainActionFuture
argument_list|<
name|GetResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetResponse
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
operator|new
name|GetResponse
argument_list|(
operator|new
name|GetResult
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
literal|1
argument_list|,
name|exists
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|eqGetRequest
specifier|static
name|GetRequest
name|eqGetRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|argThat
argument_list|(
operator|new
name|GetRequestMatcher
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|class|GetRequestMatcher
specifier|static
class|class
name|GetRequestMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|GetRequest
argument_list|>
block|{
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|GetRequestMatcher
specifier|public
name|GetRequestMatcher
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|GetRequest
name|getRequest
init|=
operator|(
name|GetRequest
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|getRequest
operator|.
name|index
argument_list|()
argument_list|,
name|index
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|getRequest
operator|.
name|type
argument_list|()
argument_list|,
name|type
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|getRequest
operator|.
name|id
argument_list|()
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

