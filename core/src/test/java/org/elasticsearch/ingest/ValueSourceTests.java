begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|ValueSourceTests
specifier|public
class|class
name|ValueSourceTests
extends|extends
name|ESTestCase
block|{
DECL|method|testDeepCopy
specifier|public
name|void
name|testDeepCopy
parameter_list|()
block|{
name|int
name|iterations
init|=
name|scaledRandomIntBetween
argument_list|(
literal|8
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|RandomDocumentPicks
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|ValueSource
name|valueSource
init|=
name|ValueSource
operator|.
name|wrap
argument_list|(
name|map
argument_list|,
name|TestTemplateService
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|copy
init|=
name|valueSource
operator|.
name|copyAndResolve
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"iteration: "
operator|+
name|i
argument_list|,
name|copy
argument_list|,
name|equalTo
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"iteration: "
operator|+
name|i
argument_list|,
name|copy
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|map
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopyDoesNotChangeProvidedMap
specifier|public
name|void
name|testCopyDoesNotChangeProvidedMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|myPreciousMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|myPreciousMap
operator|.
name|put
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
operator|new
name|TestTemplateService
operator|.
name|MockTemplateScript
operator|.
name|Factory
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
name|myPreciousMap
argument_list|,
name|TestTemplateService
operator|.
name|instance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"field1.field2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|myPreciousMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|myPreciousMap
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyDoesNotChangeProvidedList
specifier|public
name|void
name|testCopyDoesNotChangeProvidedList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|myPreciousList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|myPreciousList
operator|.
name|add
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
operator|new
name|TestTemplateService
operator|.
name|MockTemplateScript
operator|.
name|Factory
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
name|myPreciousList
argument_list|,
name|TestTemplateService
operator|.
name|instance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"field1.0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|myPreciousList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|myPreciousList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

