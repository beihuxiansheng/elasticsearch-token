begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ingest
operator|.
name|WriteableIngestDocumentTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|RandomDocumentPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|both
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|IngestDocumentTests
specifier|public
class|class
name|IngestDocumentTests
extends|extends
name|ESTestCase
block|{
DECL|field|ingestDocument
specifier|private
name|IngestDocument
name|ingestDocument
decl_stmt|;
annotation|@
name|Before
DECL|method|setIngestDocument
specifier|public
name|void
name|setIngestDocument
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ingestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ingestMap
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
literal|"bogus_timestamp"
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"_ingest"
argument_list|,
name|ingestMap
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerObject
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"buzz"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"foo_null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|innerInnerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|innerInnerList
operator|.
name|add
argument_list|(
literal|"item1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|innerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|innerList
operator|.
name|add
argument_list|(
name|innerInnerList
argument_list|)
expr_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"list"
argument_list|,
name|innerList
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"fizz"
argument_list|,
name|innerObject
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"list"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|ingestDocument
operator|=
operator|new
name|IngestDocument
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleGetFieldValue
specifier|public
name|void
name|testSimpleGetFieldValue
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"foo"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_source.foo"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_source.int"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_index"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_type"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_id"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_ingest.timestamp"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|both
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
operator|.
name|and
argument_list|(
name|not
argument_list|(
name|equalTo
argument_list|(
literal|"bogus_timestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_source._ingest.timestamp"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bogus_timestamp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetSourceObject
specifier|public
name|void
name|testGetSourceObject
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_source"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [_source] not present as part of path [_source]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetIngestObject
specifier|public
name|void
name|testGetIngestObject
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_ingest"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetEmptyPathAfterStrippingOutPrefix
specifier|public
name|void
name|testGetEmptyPathAfterStrippingOutPrefix
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_source."
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_source.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"_ingest."
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_ingest.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetFieldValueNullValue
specifier|public
name|void
name|testGetFieldValueNullValue
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"fizz.foo_null"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleGetFieldValueTypeMismatch
specifier|public
name|void
name|testSimpleGetFieldValueTypeMismatch
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"int"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getFieldValue should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [int] of type [java.lang.Integer] cannot be cast to [java.lang.String]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"foo"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getFieldValue should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [foo] of type [java.lang.String] cannot be cast to [java.lang.Integer]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedGetFieldValue
specifier|public
name|void
name|testNestedGetFieldValue
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"fizz.buzz"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"fizz.1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedGetFieldValueTypeMismatch
specifier|public
name|void
name|testNestedGetFieldValueTypeMismatch
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"foo.foo.bar"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot resolve [foo] from object of type [java.lang.String] as part of path [foo.foo.bar]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListGetFieldValue
specifier|public
name|void
name|testListGetFieldValue
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"list.0.field"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListGetFieldValueNull
specifier|public
name|void
name|testListGetFieldValueNull
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"list.1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListGetFieldValueIndexNotNumeric
specifier|public
name|void
name|testListGetFieldValueIndexNotNumeric
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"list.test.field"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[test] is not an integer, cannot be used as an index as part of path [list.test.field]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListGetFieldValueIndexOutOfBounds
specifier|public
name|void
name|testListGetFieldValueIndexOutOfBounds
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"list.10.field"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[10] is out of bounds for array with length [2] as part of path [list.10.field]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetFieldValueNotFound
specifier|public
name|void
name|testGetFieldValueNotFound
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"not.here"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [not] not present as part of path [not.here]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetFieldValueNotFoundNullParent
specifier|public
name|void
name|testGetFieldValueNotFoundNullParent
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"fizz.foo_null.not_there"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot resolve [not_there] from null as part of path [fizz.foo_null.not_there]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetFieldValueNull
specifier|public
name|void
name|testGetFieldValueNull
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGetFieldValueEmpty
specifier|public
name|void
name|testGetFieldValueEmpty
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|""
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHasField
specifier|public
name|void
name|testHasField
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"fizz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_source.fizz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_ingest.timestamp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldNested
specifier|public
name|void
name|testHasFieldNested
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"fizz.buzz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_source._ingest.timestamp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListHasField
specifier|public
name|void
name|testListHasField
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"list.0.field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListHasFieldNull
specifier|public
name|void
name|testListHasFieldNull
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"list.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListHasFieldIndexOutOfBounds
specifier|public
name|void
name|testListHasFieldIndexOutOfBounds
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"list.10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListHasFieldIndexNotNumeric
specifier|public
name|void
name|testListHasFieldIndexNotNumeric
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"list.test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedHasFieldTypeMismatch
specifier|public
name|void
name|testNestedHasFieldTypeMismatch
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"foo.foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldNotFound
specifier|public
name|void
name|testHasFieldNotFound
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"not.here"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldNotFoundNullParent
specifier|public
name|void
name|testHasFieldNotFoundNullParent
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"fizz.foo_null.not_there"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldNestedNotFound
specifier|public
name|void
name|testHasFieldNestedNotFound
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"fizz.doesnotexist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldNull
specifier|public
name|void
name|testHasFieldNull
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|hasField
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"has field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHasFieldNullValue
specifier|public
name|void
name|testHasFieldNullValue
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"fizz.foo_null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldEmpty
specifier|public
name|void
name|testHasFieldEmpty
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"has field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHasFieldSourceObject
specifier|public
name|void
name|testHasFieldSourceObject
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_source"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldIngestObject
specifier|public
name|void
name|testHasFieldIngestObject
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_ingest"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasFieldEmptyPathAfterStrippingOutPrefix
specifier|public
name|void
name|testHasFieldEmptyPathAfterStrippingOutPrefix
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_source."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"has field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_source.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ingestDocument
operator|.
name|hasField
argument_list|(
literal|"_ingest."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"has field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_ingest.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimpleSetFieldValue
specifier|public
name|void
name|testSimpleSetFieldValue
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"new_field"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"new_field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_ttl"
argument_list|,
literal|"ttl"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_ttl"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"ttl"
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_source.another_field"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"another_field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_ingest.new_field"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"new_field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"new_value"
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_ingest.timestamp"
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFieldValueNullValue
specifier|public
name|void
name|testSetFieldValueNullValue
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"new_field"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"new_field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"new_field"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNestedSetFieldValue
specifier|public
name|void
name|testNestedSetFieldValue
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"a.b.c.d"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|a
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|b
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|a
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|b
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|d
init|=
operator|(
name|String
operator|)
name|c
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|d
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFieldValueOnExistingField
specifier|public
name|void
name|testSetFieldValueOnExistingField
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"foo"
argument_list|,
literal|"newbar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"newbar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSetFieldValueOnExistingParent
specifier|public
name|void
name|testSetFieldValueOnExistingParent
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"fizz.new"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|innerMap
operator|.
name|get
argument_list|(
literal|"new"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|innerMap
operator|.
name|get
argument_list|(
literal|"new"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFieldValueOnExistingParentTypeMismatch
specifier|public
name|void
name|testSetFieldValueOnExistingParentTypeMismatch
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"fizz.buzz.new"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot set [new] with parent object of type [java.lang.String] as part of path [fizz.buzz.new]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetFieldValueOnExistingNullParent
specifier|public
name|void
name|testSetFieldValueOnExistingNullParent
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"fizz.foo_null.test"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot set [test] with null parent as part of path [fizz.foo_null.test]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetFieldValueNullName
specifier|public
name|void
name|testSetFieldValueNullName
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|null
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetSourceObject
specifier|public
name|void
name|testSetSourceObject
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_source"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_source"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetIngestObject
specifier|public
name|void
name|testSetIngestObject
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_ingest"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_ingest"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetIngestSourceObject
specifier|public
name|void
name|testSetIngestSourceObject
parameter_list|()
block|{
comment|//test that we don't strip out the _source prefix when _ingest is used
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_ingest._source"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"_source"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetEmptyPathAfterStrippingOutPrefix
specifier|public
name|void
name|testSetEmptyPathAfterStrippingOutPrefix
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_source."
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_source.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"_ingest."
argument_list|,
literal|"_value"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_ingest.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListSetFieldValueNoIndexProvided
specifier|public
name|void
name|testListSetFieldValueNoIndexProvided
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"list"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListAppendFieldValue
specifier|public
name|void
name|testListAppendFieldValue
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"list"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"new_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListAppendFieldValues
specifier|public
name|void
name|testListAppendFieldValues
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"item1"
argument_list|,
literal|"item2"
argument_list|,
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueToNonExistingList
specifier|public
name|void
name|testAppendFieldValueToNonExistingList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"non_existing_list"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"non_existing_list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"new_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValuesToNonExistingList
specifier|public
name|void
name|testAppendFieldValuesToNonExistingList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"non_existing_list"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"item1"
argument_list|,
literal|"item2"
argument_list|,
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"non_existing_list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueConvertStringToList
specifier|public
name|void
name|testAppendFieldValueConvertStringToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz.buzz"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"buzz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"new_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValuesConvertStringToList
specifier|public
name|void
name|testAppendFieldValuesConvertStringToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz.buzz"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"item1"
argument_list|,
literal|"item2"
argument_list|,
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"buzz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueConvertIntegerToList
specifier|public
name|void
name|testAppendFieldValueConvertIntegerToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"int"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"int"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|456
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValuesConvertIntegerToList
specifier|public
name|void
name|testAppendFieldValuesConvertIntegerToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"int"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|456
argument_list|,
literal|789
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"int"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|456
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|789
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueConvertMapToList
specifier|public
name|void
name|testAppendFieldValueConvertMapToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueToNull
specifier|public
name|void
name|testAppendFieldValueToNull
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz.foo_null"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"foo_null"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"new_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueToListElement
specifier|public
name|void
name|testAppendFieldValueToListElement
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz.list.0"
argument_list|,
literal|"item2"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|innerList
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValuesToListElement
specifier|public
name|void
name|testAppendFieldValuesToListElement
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz.list.0"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"item2"
argument_list|,
literal|"item3"
argument_list|,
literal|"item4"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|innerList
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueConvertStringListElementToList
specifier|public
name|void
name|testAppendFieldValueConvertStringListElementToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz.list.0.0"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|innerList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|innerList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|innerInnerList
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"new_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValuesConvertStringListElementToList
specifier|public
name|void
name|testAppendFieldValuesConvertStringListElementToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"fizz.list.0.0"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"item2"
argument_list|,
literal|"item3"
argument_list|,
literal|"item4"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|innerList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|object
operator|=
name|innerList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|innerInnerList
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|innerInnerList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"item4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueListElementConvertMapToList
specifier|public
name|void
name|testAppendFieldValueListElementConvertMapToList
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"list.0"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"item2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"item2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueToNullListElement
specifier|public
name|void
name|testAppendFieldValueToNullListElement
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"list.1"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"new_value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendFieldValueToListOfMaps
specifier|public
name|void
name|testAppendFieldValueToListOfMaps
parameter_list|()
block|{
name|ingestDocument
operator|.
name|appendFieldValue
argument_list|(
literal|"list"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"item2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"item2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListSetFieldValueIndexProvided
specifier|public
name|void
name|testListSetFieldValueIndexProvided
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"list.1"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetFieldValueListAsPartOfPath
specifier|public
name|void
name|testSetFieldValueListAsPartOfPath
parameter_list|()
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"list.0.field"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"new_value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListSetFieldValueIndexNotNumeric
specifier|public
name|void
name|testListSetFieldValueIndexNotNumeric
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"list.test"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[test] is not an integer, cannot be used as an index as part of path [list.test]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"list.test.field"
argument_list|,
literal|"new_value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[test] is not an integer, cannot be used as an index as part of path [list.test.field]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListSetFieldValueIndexOutOfBounds
specifier|public
name|void
name|testListSetFieldValueIndexOutOfBounds
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"list.10"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[10] is out of bounds for array with length [2] as part of path [list.10]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|"list.10.field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[10] is out of bounds for array with length [2] as part of path [list.10.field]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetFieldValueEmptyName
specifier|public
name|void
name|testSetFieldValueEmptyName
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
literal|""
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveField
specifier|public
name|void
name|testRemoveField
parameter_list|()
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"_index"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"_index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"_source.fizz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"fizz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"_ingest.timestamp"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveInnerField
specifier|public
name|void
name|testRemoveInnerField
parameter_list|()
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"fizz.buzz"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"buzz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"fizz.foo_null"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"fizz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"fizz.1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"fizz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"fizz.list"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"fizz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveNonExistingField
specifier|public
name|void
name|testRemoveNonExistingField
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"does_not_exist"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"remove field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [does_not_exist] not present as part of path [does_not_exist]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveExistingParentTypeMismatch
specifier|public
name|void
name|testRemoveExistingParentTypeMismatch
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"foo.foo.bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"remove field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot resolve [foo] from object of type [java.lang.String] as part of path [foo.foo.bar]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveSourceObject
specifier|public
name|void
name|testRemoveSourceObject
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"_source"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"remove field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [_source] not present as part of path [_source]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveIngestObject
specifier|public
name|void
name|testRemoveIngestObject
parameter_list|()
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"_ingest"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"_ingest"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveEmptyPathAfterStrippingOutPrefix
specifier|public
name|void
name|testRemoveEmptyPathAfterStrippingOutPrefix
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"_source."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_source.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"_ingest."
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path [_ingest.] is not valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListRemoveField
specifier|public
name|void
name|testListRemoveField
parameter_list|()
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"list.0.field"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"list"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|object
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"list.0"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveFieldValueNotFoundNullParent
specifier|public
name|void
name|testRemoveFieldValueNotFoundNullParent
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"fizz.foo_null.not_there"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get field value should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot remove [not_there] from null as part of path [fizz.foo_null.not_there]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedRemoveFieldTypeMismatch
specifier|public
name|void
name|testNestedRemoveFieldTypeMismatch
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"fizz.1.bar"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot remove [bar] from object of type [java.lang.String] as part of path [fizz.1.bar]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListRemoveFieldIndexNotNumeric
specifier|public
name|void
name|testListRemoveFieldIndexNotNumeric
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"list.test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[test] is not an integer, cannot be used as an index as part of path [list.test]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testListRemoveFieldIndexOutOfBounds
specifier|public
name|void
name|testListRemoveFieldIndexOutOfBounds
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|"list.10"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[10] is out of bounds for array with length [2] as part of path [list.10]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveNullField
specifier|public
name|void
name|testRemoveNullField
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"remove field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveEmptyField
specifier|public
name|void
name|testRemoveEmptyField
parameter_list|()
block|{
try|try
block|{
name|ingestDocument
operator|.
name|removeField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"remove field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAndMetadata
init|=
name|RandomDocumentPicks
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numFields
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|IngestDocument
operator|.
name|MetaData
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|sourceAndMetadata
operator|.
name|put
argument_list|(
name|randomFrom
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ingestMetadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|numFields
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|ingestMetadata
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|sourceAndMetadata
argument_list|,
name|ingestMetadata
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|otherSourceAndMetadata
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|otherSourceAndMetadata
operator|=
name|RandomDocumentPicks
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|otherSourceAndMetadata
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|sourceAndMetadata
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|numFields
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|IngestDocument
operator|.
name|MetaData
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|otherSourceAndMetadata
operator|.
name|put
argument_list|(
name|randomFrom
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherIngestMetadata
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|otherIngestMetadata
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|numFields
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|otherIngestMetadata
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|otherIngestMetadata
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|ingestMetadata
argument_list|)
expr_stmt|;
block|}
name|IngestDocument
name|otherIngestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|otherSourceAndMetadata
argument_list|,
name|otherIngestMetadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|assertThat
argument_list|(
name|ingestDocument
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|otherIngestDocument
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|otherIngestDocument
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|ingestDocument
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|ingestDocument
argument_list|,
name|equalTo
argument_list|(
name|otherIngestDocument
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|otherIngestDocument
argument_list|,
name|equalTo
argument_list|(
name|ingestDocument
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|otherIngestDocument
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IngestDocument
name|thirdIngestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|sourceAndMetadata
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|ingestMetadata
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thirdIngestDocument
argument_list|,
name|equalTo
argument_list|(
name|ingestDocument
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
argument_list|,
name|equalTo
argument_list|(
name|thirdIngestDocument
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdIngestDocument
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIngestMetadataTimestamp
specifier|public
name|void
name|testIngestMetadataTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IngestDocument
name|ingestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|after
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|timestampString
init|=
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"timestamp"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timestampString
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timestampString
argument_list|,
name|endsWith
argument_list|(
literal|"+0000"
argument_list|)
argument_list|)
expr_stmt|;
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZZ"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Date
name|timestamp
init|=
name|df
operator|.
name|parse
argument_list|(
name|timestampString
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyConstructor
specifier|public
name|void
name|testCopyConstructor
parameter_list|()
block|{
name|IngestDocument
name|ingestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|IngestDocument
name|copy
init|=
operator|new
name|IngestDocument
argument_list|(
name|ingestDocument
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|copy
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertIngestDocument
argument_list|(
name|ingestDocument
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetInvalidSourceField
specifier|public
name|void
name|testSetInvalidSourceField
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|randomObject
init|=
name|randomFrom
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
literal|12
argument_list|,
literal|12.34
argument_list|)
decl_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"source_field"
argument_list|,
name|randomObject
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
try|try
block|{
name|ingestDocument
operator|.
name|getFieldValueAsBytes
argument_list|(
literal|"source_field"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception due to invalid source field, but did not happen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|expectedClassName
init|=
name|randomObject
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"field [source_field] of unknown type ["
operator|+
name|expectedClassName
operator|+
literal|"], must be string or byte array"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertIngestDocument
specifier|public
specifier|static
name|void
name|assertIngestDocument
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapA
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|a
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapB
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|b
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|mapA
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
name|assertIngestDocument
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapB
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|listA
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|a
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|listB
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|b
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listA
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|listA
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|List
operator|||
name|value
operator|instanceof
name|Map
condition|)
block|{
name|assertIngestDocument
argument_list|(
name|value
argument_list|,
name|listB
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|assertArrayEquals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|IngestDocument
condition|)
block|{
name|IngestDocument
name|docA
init|=
operator|(
name|IngestDocument
operator|)
name|a
decl_stmt|;
name|IngestDocument
name|docB
init|=
operator|(
name|IngestDocument
operator|)
name|b
decl_stmt|;
name|assertIngestDocument
argument_list|(
name|docA
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|,
name|docB
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|assertIngestDocument
argument_list|(
name|docA
operator|.
name|getIngestMetadata
argument_list|()
argument_list|,
name|docB
operator|.
name|getIngestMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected %s class to be equal to %s"
argument_list|,
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|a
argument_list|,
name|equalTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

