begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|IngestMetadataTests
specifier|public
class|class
name|IngestMetadataTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|PipelineConfiguration
name|pipeline
init|=
operator|new
name|PipelineConfiguration
argument_list|(
literal|"1"
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{\"processors\": [{\"set\" : {\"field\": \"_field\", \"value\": \"_value\"}}]}"
argument_list|)
argument_list|)
decl_stmt|;
name|PipelineConfiguration
name|pipeline2
init|=
operator|new
name|PipelineConfiguration
argument_list|(
literal|"2"
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{\"processors\": [{\"set\" : {\"field\": \"_field1\", \"value\": \"_value1\"}}]}"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PipelineConfiguration
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|pipeline2
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline2
argument_list|)
expr_stmt|;
name|IngestMetadata
name|ingestMetadata
init|=
operator|new
name|IngestMetadata
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|ingestMetadata
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|string
init|=
name|builder
operator|.
name|string
argument_list|()
decl_stmt|;
specifier|final
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Custom
name|custom
init|=
name|ingestMetadata
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|custom
operator|instanceof
name|IngestMetadata
argument_list|)
expr_stmt|;
name|IngestMetadata
name|m
init|=
operator|(
name|IngestMetadata
operator|)
name|custom
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|m
operator|.
name|getPipelines
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|m
operator|.
name|getPipelines
argument_list|()
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|m
operator|.
name|getPipelines
argument_list|()
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pipeline
operator|.
name|getConfigAsMap
argument_list|()
argument_list|,
name|m
operator|.
name|getPipelines
argument_list|()
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getConfigAsMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pipeline2
operator|.
name|getConfigAsMap
argument_list|()
argument_list|,
name|m
operator|.
name|getPipelines
argument_list|()
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|getConfigAsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

