begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.document
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ReplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ShardInfoIT
specifier|public
class|class
name|ShardInfoIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|numCopies
specifier|private
name|int
name|numCopies
decl_stmt|;
DECL|field|numNodes
specifier|private
name|int
name|numNodes
decl_stmt|;
DECL|method|testIndexAndDelete
specifier|public
name|void
name|testIndexAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexResponse
name|indexResponse
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertShardInfo
argument_list|(
name|indexResponse
argument_list|)
expr_stmt|;
name|DeleteResponse
name|deleteResponse
init|=
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertShardInfo
argument_list|(
name|deleteResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdate
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setDoc
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setDocAsUpsert
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertShardInfo
argument_list|(
name|updateResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkWithIndexAndDeleteItems
specifier|public
name|void
name|testBulkWithIndexAndDeleteItems
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BulkRequestBuilder
name|bulkRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BulkResponse
name|bulkResponse
init|=
name|bulkRequestBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|bulkRequestBuilder
operator|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
expr_stmt|;
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|bulkResponse
control|)
block|{
name|assertThat
argument_list|(
name|item
operator|.
name|isFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertShardInfo
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
name|item
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bulkResponse
operator|=
name|bulkRequestBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|bulkResponse
control|)
block|{
name|assertThat
argument_list|(
name|item
operator|.
name|isFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertShardInfo
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBulkWithUpdateItems
specifier|public
name|void
name|testBulkWithUpdateItems
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|BulkRequestBuilder
name|bulkRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setDoc
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setDocAsUpsert
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BulkResponse
name|bulkResponse
init|=
name|bulkRequestBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|bulkResponse
control|)
block|{
name|assertThat
argument_list|(
name|item
operator|.
name|isFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertShardInfo
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareIndex
specifier|private
name|void
name|prepareIndex
parameter_list|(
name|int
name|numberOfPrimaryShards
parameter_list|)
throws|throws
name|Exception
block|{
name|prepareIndex
argument_list|(
name|numberOfPrimaryShards
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareIndex
specifier|private
name|void
name|prepareIndex
parameter_list|(
name|int
name|numberOfPrimaryShards
parameter_list|,
name|boolean
name|routingRequired
parameter_list|)
throws|throws
name|Exception
block|{
name|numNodes
operator|=
name|cluster
argument_list|()
operator|.
name|numDataNodes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Number of nodes: {}"
argument_list|,
name|numNodes
argument_list|)
expr_stmt|;
name|int
name|maxNumberOfCopies
init|=
operator|(
name|numNodes
operator|*
literal|2
operator|)
operator|-
literal|1
decl_stmt|;
name|numCopies
operator|=
name|randomIntBetween
argument_list|(
name|numNodes
argument_list|,
name|maxNumberOfCopies
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Number of copies: {}"
argument_list|,
name|numCopies
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfPrimaryShards
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|numCopies
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"_routing"
argument_list|,
literal|"required="
operator|+
name|routingRequired
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfPrimaryShards
condition|;
name|i
operator|++
control|)
block|{
name|ensureActiveShardCopies
argument_list|(
name|i
argument_list|,
name|numNodes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertShardInfo
specifier|private
name|void
name|assertShardInfo
parameter_list|(
name|ReplicationResponse
name|response
parameter_list|)
block|{
name|assertShardInfo
argument_list|(
name|response
argument_list|,
name|numCopies
argument_list|,
name|numNodes
argument_list|)
expr_stmt|;
block|}
DECL|method|assertShardInfo
specifier|private
name|void
name|assertShardInfo
parameter_list|(
name|ReplicationResponse
name|response
parameter_list|,
name|int
name|expectedTotal
parameter_list|,
name|int
name|expectedSuccessful
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|expectedTotal
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getSuccessful
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|expectedSuccessful
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureActiveShardCopies
specifier|private
name|void
name|ensureActiveShardCopies
parameter_list|(
specifier|final
name|int
name|shardId
parameter_list|,
specifier|final
name|int
name|copyCount
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
argument_list|,
name|not
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|not
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
argument_list|)
operator|.
name|activeShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|copyCount
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|healthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|healthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|recoveryResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setActiveOnly
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|recoveryResponse
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|get
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

