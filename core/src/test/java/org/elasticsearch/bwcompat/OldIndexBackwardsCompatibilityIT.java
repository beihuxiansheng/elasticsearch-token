begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bwcompat
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bwcompat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|VersionTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|get
operator|.
name|GetIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndexSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndexShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndicesSegmentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|ShardSegments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|settings
operator|.
name|get
operator|.
name|GetSettingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
operator|.
name|RefreshPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|MetaDataStateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHitField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalSettingsPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|OldIndexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchPhraseQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|OldIndexUtils
operator|.
name|assertUpgradeWorks
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|OldIndexUtils
operator|.
name|getIndexDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_comment
comment|// needs at least 2 nodes since it bumps replicas to 1
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
DECL|class|OldIndexBackwardsCompatibilityIT
specifier|public
class|class
name|OldIndexBackwardsCompatibilityIT
extends|extends
name|ESIntegTestCase
block|{
comment|// TODO: test for proper exception on unsupported indexes (maybe via separate test?)
comment|// We have a 0.20.6.zip etc for this.
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|InternalSettingsPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|field|indexes
name|List
argument_list|<
name|String
argument_list|>
name|indexes
decl_stmt|;
DECL|field|unsupportedIndexes
name|List
argument_list|<
name|String
argument_list|>
name|unsupportedIndexes
decl_stmt|;
DECL|field|singleDataPathNodeName
specifier|static
name|String
name|singleDataPathNodeName
decl_stmt|;
DECL|field|multiDataPathNodeName
specifier|static
name|String
name|multiDataPathNodeName
decl_stmt|;
DECL|field|singleDataPath
specifier|static
name|Path
name|singleDataPath
decl_stmt|;
DECL|field|multiDataPath
specifier|static
name|Path
index|[]
name|multiDataPath
decl_stmt|;
annotation|@
name|Before
DECL|method|initIndexesList
specifier|public
name|void
name|initIndexesList
parameter_list|()
throws|throws
name|Exception
block|{
name|indexes
operator|=
name|OldIndexUtils
operator|.
name|loadDataFilesList
argument_list|(
literal|"index"
argument_list|,
name|getBwcIndicesPath
argument_list|()
argument_list|)
expr_stmt|;
name|unsupportedIndexes
operator|=
name|OldIndexUtils
operator|.
name|loadDataFilesList
argument_list|(
literal|"unsupported"
argument_list|,
name|getBwcIndicesPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownStatics
specifier|public
specifier|static
name|void
name|tearDownStatics
parameter_list|()
block|{
name|singleDataPathNodeName
operator|=
literal|null
expr_stmt|;
name|multiDataPathNodeName
operator|=
literal|null
expr_stmt|;
name|singleDataPath
operator|=
literal|null
expr_stmt|;
name|multiDataPath
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodeSettings
specifier|public
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|OldIndexUtils
operator|.
name|getSettings
argument_list|()
return|;
block|}
DECL|method|setupCluster
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|replicas
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// for replicas
name|Path
name|baseTempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
comment|// start single data path node
name|Settings
operator|.
name|Builder
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|baseTempDir
operator|.
name|resolve
argument_list|(
literal|"single-path"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_MASTER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// workaround for dangling index loading issue when node is master
name|singleDataPathNodeName
operator|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
comment|// start multi data path node
name|nodeSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|baseTempDir
operator|.
name|resolve
argument_list|(
literal|"multi-path1"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|baseTempDir
operator|.
name|resolve
argument_list|(
literal|"multi-path2"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_MASTER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// workaround for dangling index loading issue when node is master
name|multiDataPathNodeName
operator|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
comment|// find single data path dir
name|Path
index|[]
name|nodePaths
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|singleDataPathNodeName
argument_list|)
operator|.
name|nodeDataPaths
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodePaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|singleDataPath
operator|=
name|nodePaths
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|singleDataPath
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|singleDataPath
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Single data path: {}"
argument_list|,
name|singleDataPath
argument_list|)
expr_stmt|;
comment|// find multi data path dirs
name|nodePaths
operator|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|multiDataPathNodeName
argument_list|)
operator|.
name|nodeDataPaths
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodePaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|multiDataPath
operator|=
operator|new
name|Path
index|[]
block|{
name|nodePaths
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
block|,
name|nodePaths
index|[
literal|1
index|]
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|multiDataPath
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|multiDataPath
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|multiDataPath
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|multiDataPath
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Multi data paths: {}, {}"
argument_list|,
name|multiDataPath
index|[
literal|0
index|]
argument_list|,
name|multiDataPath
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeIndexFolder
name|void
name|upgradeIndexFolder
parameter_list|()
throws|throws
name|Exception
block|{
name|OldIndexUtils
operator|.
name|upgradeIndexFolder
argument_list|(
name|internalCluster
argument_list|()
argument_list|,
name|singleDataPathNodeName
argument_list|)
expr_stmt|;
name|OldIndexUtils
operator|.
name|upgradeIndexFolder
argument_list|(
name|internalCluster
argument_list|()
argument_list|,
name|multiDataPathNodeName
argument_list|)
expr_stmt|;
block|}
DECL|method|importIndex
name|void
name|importIndex
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// force reloading dangling indices with a cluster state republish
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
DECL|method|unloadIndex
name|void
name|unloadIndex
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllVersionsTested
specifier|public
name|void
name|testAllVersionsTested
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|expectedVersions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Version
name|v
range|:
name|VersionUtils
operator|.
name|allReleasedVersions
argument_list|()
control|)
block|{
if|if
condition|(
name|VersionUtils
operator|.
name|isSnapshot
argument_list|(
name|v
argument_list|)
condition|)
continue|continue;
comment|// snapshots are unreleased, so there is no backcompat yet
if|if
condition|(
name|v
operator|.
name|isRelease
argument_list|()
operator|==
literal|false
condition|)
continue|continue;
comment|// no guarantees for prereleases
if|if
condition|(
name|v
operator|.
name|before
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|minimumIndexCompatibilityVersion
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// we can only support one major version backward
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
condition|)
continue|continue;
comment|// the current version is always compatible with itself
name|expectedVersions
operator|.
name|add
argument_list|(
literal|"index-"
operator|+
name|v
operator|.
name|toString
argument_list|()
operator|+
literal|".zip"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|expectedVersions
operator|.
name|remove
argument_list|(
name|index
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Old indexes tests contain extra index: {}"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectedVersions
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Old index tests are missing indexes:"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|expectedVersions
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOldIndexes
specifier|public
name|void
name|testOldIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indexes
control|)
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Testing old index {}"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|assertOldIndexWorks
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Done testing {}, took {} seconds"
argument_list|,
name|index
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertOldIndexWorks
name|void
name|assertOldIndexWorks
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Version
name|version
init|=
name|OldIndexUtils
operator|.
name|extractVersion
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> injecting index [{}] into single data path"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|Path
index|[]
block|{
name|singleDataPath
block|}
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> injecting index [{}] into multi data path"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|paths
operator|=
name|multiDataPath
expr_stmt|;
block|}
name|String
name|indexName
init|=
name|index
operator|.
name|replace
argument_list|(
literal|".zip"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|replace
argument_list|(
literal|"unsupported-"
argument_list|,
literal|"index-"
argument_list|)
decl_stmt|;
name|OldIndexUtils
operator|.
name|loadIndex
argument_list|(
name|indexName
argument_list|,
name|index
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|getBwcIndicesPath
argument_list|()
argument_list|,
name|logger
argument_list|,
name|paths
argument_list|)
expr_stmt|;
comment|// we explicitly upgrade the index folders as these indices
comment|// are imported as dangling indices and not available on
comment|// node startup
name|upgradeIndexFolder
argument_list|()
expr_stmt|;
name|importIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertIndexSanity
argument_list|(
name|indexName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertBasicSearchWorks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertAllSearchWorks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertBasicAggregationWorks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertRealtimeGetWorks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertNewReplicasWork
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertUpgradeWorks
argument_list|(
name|client
argument_list|()
argument_list|,
name|indexName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertPositionIncrementGapDefaults
argument_list|(
name|indexName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertAliasWithBadName
argument_list|(
name|indexName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertStoredBinaryFields
argument_list|(
name|indexName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|unloadIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIndexSanity
name|void
name|assertIndexSanity
parameter_list|(
name|String
name|indexName
parameter_list|,
name|Version
name|indexCreated
parameter_list|)
block|{
name|GetIndexResponse
name|getIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getIndexResponse
operator|.
name|indices
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|indexName
argument_list|,
name|getIndexResponse
operator|.
name|indices
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Version
name|actualVersionCreated
init|=
name|Version
operator|.
name|indexCreated
argument_list|(
name|getIndexResponse
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|indexCreated
argument_list|,
name|actualVersionCreated
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|recoveryResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|indexName
argument_list|)
operator|.
name|setDetailed
argument_list|(
literal|true
argument_list|)
operator|.
name|setActiveOnly
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|foundTranslog
init|=
literal|false
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RecoveryState
argument_list|>
name|states
range|:
name|recoveryResponse
operator|.
name|shardRecoveryStates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|RecoveryState
name|state
range|:
name|states
control|)
block|{
if|if
condition|(
name|state
operator|.
name|getStage
argument_list|()
operator|==
name|RecoveryState
operator|.
name|Stage
operator|.
name|DONE
operator|&&
name|state
operator|.
name|getPrimary
argument_list|()
operator|&&
name|state
operator|.
name|getRecoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|EXISTING_STORE
condition|)
block|{
name|assertFalse
argument_list|(
literal|"more than one primary recoverd?"
argument_list|,
name|foundTranslog
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|state
operator|.
name|getTranslog
argument_list|()
operator|.
name|recoveredOperations
argument_list|()
argument_list|)
expr_stmt|;
name|foundTranslog
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"expected translog but nothing was recovered"
argument_list|,
name|foundTranslog
argument_list|)
expr_stmt|;
name|IndicesSegmentResponse
name|segmentsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareSegments
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|IndexSegments
name|segments
init|=
name|segmentsResponse
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|int
name|numCurrent
init|=
literal|0
decl_stmt|;
name|int
name|numBWC
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexShardSegments
name|indexShardSegments
range|:
name|segments
control|)
block|{
for|for
control|(
name|ShardSegments
name|shardSegments
range|:
name|indexShardSegments
control|)
block|{
for|for
control|(
name|Segment
name|segment
range|:
name|shardSegments
control|)
block|{
if|if
condition|(
name|indexCreated
operator|.
name|luceneVersion
operator|.
name|equals
argument_list|(
name|segment
operator|.
name|version
argument_list|)
condition|)
block|{
name|numBWC
operator|++
expr_stmt|;
if|if
condition|(
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|equals
argument_list|(
name|segment
operator|.
name|version
argument_list|)
condition|)
block|{
name|numCurrent
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|equals
argument_list|(
name|segment
operator|.
name|version
argument_list|)
condition|)
block|{
name|numCurrent
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected version "
operator|+
name|segment
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertNotEquals
argument_list|(
literal|"expected at least 1 current segment after translog recovery"
argument_list|,
literal|0
argument_list|,
name|numCurrent
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"expected at least 1 old segment"
argument_list|,
literal|0
argument_list|,
name|numBWC
argument_list|)
expr_stmt|;
name|SearchResponse
name|test
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|test
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBasicSearchWorks
name|void
name|assertBasicSearchWorks
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing basic search"
argument_list|)
expr_stmt|;
name|SearchRequestBuilder
name|searchReq
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchRsp
init|=
name|searchReq
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|long
name|numDocs
init|=
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Found {} in old index"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing basic search with sort"
argument_list|)
expr_stmt|;
name|searchReq
operator|.
name|addSort
argument_list|(
literal|"long_sort"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchReq
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing exists filter"
argument_list|)
expr_stmt|;
name|searchReq
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|searchRsp
operator|=
name|searchReq
operator|.
name|get
argument_list|()
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|GetSettingsResponse
name|getSettingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Version
name|versionCreated
init|=
name|Version
operator|.
name|fromId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|getSettingsResponse
operator|.
name|getSetting
argument_list|(
name|indexName
argument_list|,
literal|"index.version.created"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionCreated
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_4_0
argument_list|)
condition|)
block|{
name|searchReq
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
literal|"field.with.dots"
argument_list|)
argument_list|)
expr_stmt|;
name|searchRsp
operator|=
name|searchReq
operator|.
name|get
argument_list|()
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findPayloadBoostInExplanation
name|boolean
name|findPayloadBoostInExplanation
parameter_list|(
name|Explanation
name|expl
parameter_list|)
block|{
if|if
condition|(
name|expl
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"payloadBoost="
argument_list|)
operator|&&
name|expl
operator|.
name|getValue
argument_list|()
operator|!=
literal|1f
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Explanation
name|sub
range|:
name|expl
operator|.
name|getDetails
argument_list|()
control|)
block|{
name|found
operator||=
name|findPayloadBoostInExplanation
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
block|}
DECL|method|assertAllSearchWorks
name|void
name|assertAllSearchWorks
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing _all search"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchRsp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHit
name|bestHit
init|=
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Make sure there are payloads and they are taken into account for the score
comment|// the 'string' field has a boost of 4 in the mappings so it should get a payload boost
name|String
name|stringValue
init|=
operator|(
name|String
operator|)
name|bestHit
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stringValue
argument_list|)
expr_stmt|;
name|Explanation
name|explanation
init|=
name|client
argument_list|()
operator|.
name|prepareExplain
argument_list|(
name|indexName
argument_list|,
name|bestHit
operator|.
name|getType
argument_list|()
argument_list|,
name|bestHit
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"_all"
argument_list|,
name|stringValue
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getExplanation
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find payload boost in explanation\n"
operator|+
name|explanation
argument_list|,
name|findPayloadBoostInExplanation
argument_list|(
name|explanation
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the query can run on the whole index
name|searchRsp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"_all"
argument_list|,
name|stringValue
argument_list|)
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBasicAggregationWorks
name|void
name|assertBasicAggregationWorks
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
comment|// histogram on a long
name|SearchResponse
name|searchRsp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"long_sort"
argument_list|)
operator|.
name|interval
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|searchRsp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|histo
argument_list|)
expr_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Histogram
operator|.
name|Bucket
name|bucket
range|:
name|histo
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|totalCount
operator|+=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|totalCount
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
comment|// terms on a boolean
name|searchRsp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|terms
argument_list|(
literal|"bool_terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bool"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Terms
name|terms
init|=
name|searchRsp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"bool_terms"
argument_list|)
decl_stmt|;
name|totalCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|totalCount
operator|+=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|totalCount
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRealtimeGetWorks
name|void
name|assertRealtimeGetWorks
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequestBuilder
name|searchReq
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
decl_stmt|;
name|SearchHit
name|hit
init|=
name|searchReq
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|docId
init|=
name|hit
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// foo is new, it is not a field in the generated index
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexName
argument_list|,
literal|"doc"
argument_list|,
name|docId
argument_list|)
operator|.
name|setDoc
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetResponse
name|getRsp
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|indexName
argument_list|,
literal|"doc"
argument_list|,
name|docId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
name|getRsp
operator|.
name|getSourceAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|source
argument_list|,
name|Matchers
operator|.
name|hasKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"refresh_interval"
argument_list|,
name|IndexSettings
operator|.
name|DEFAULT_REFRESH_INTERVAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNewReplicasWork
name|void
name|assertNewReplicasWork
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numReplicas
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> creating [{}] replicas for index [{}]"
argument_list|,
name|numReplicas
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
name|numReplicas
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|2
argument_list|)
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> index [{}] is green, took [{}]"
argument_list|,
name|indexName
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> recovery status:\n{}"
argument_list|,
name|XContentHelper
operator|.
name|toString
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: do something with the replicas! query? index?
block|}
DECL|method|assertPositionIncrementGapDefaults
name|void
name|assertPositionIncrementGapDefaults
parameter_list|(
name|String
name|indexName
parameter_list|,
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"doc"
argument_list|,
literal|"position_gap_test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"string"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two three"
argument_list|)
argument_list|)
operator|.
name|setRefreshPolicy
argument_list|(
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Baseline - phrase query finds matches in the same field value
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"two three"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// No match across gaps when slop< position gap
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|99
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Match across gaps when slop>= position gap
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|101
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// No match across gap using default slop with default positionIncrementGap
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Nor with small-ish values
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// But huge-ish values still match
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"string"
argument_list|,
literal|"one two"
argument_list|)
operator|.
name|slop
argument_list|(
literal|500
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|field|VERSION_5_1_0_UNRELEASED
specifier|private
specifier|static
specifier|final
name|Version
name|VERSION_5_1_0_UNRELEASED
init|=
name|Version
operator|.
name|fromString
argument_list|(
literal|"5.1.0"
argument_list|)
decl_stmt|;
DECL|method|testUnreleasedVersion
specifier|public
name|void
name|testUnreleasedVersion
parameter_list|()
block|{
name|VersionTests
operator|.
name|assertUnknownVersion
argument_list|(
name|VERSION_5_1_0_UNRELEASED
argument_list|)
expr_stmt|;
block|}
comment|/**      * Search on an alias that contains illegal characters that would prevent it from being created after 5.1.0. It should still be      * search-able though.      */
DECL|method|assertAliasWithBadName
name|void
name|assertAliasWithBadName
parameter_list|(
name|String
name|indexName
parameter_list|,
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|VERSION_5_1_0_UNRELEASED
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// We can read from the alias just like we can read from the index.
name|String
name|aliasName
init|=
literal|"#"
operator|+
name|indexName
decl_stmt|;
name|long
name|totalDocs
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|aliasName
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|totalDocs
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|totalDocs
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|2000L
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can remove the alias.
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAliases
argument_list|()
operator|.
name|removeAlias
argument_list|(
name|indexName
argument_list|,
name|aliasName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAliasesExist
argument_list|(
name|aliasName
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure we can load stored binary fields.      */
DECL|method|assertStoredBinaryFields
name|void
name|assertStoredBinaryFields
parameter_list|(
name|String
name|indexName
parameter_list|,
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|SearchRequestBuilder
name|builder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addStoredField
argument_list|(
literal|"binary"
argument_list|)
expr_stmt|;
name|SearchHits
name|hits
init|=
name|builder
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|hits
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|hits
control|)
block|{
name|SearchHitField
name|field
init|=
name|hit
operator|.
name|field
argument_list|(
literal|"binary"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|field
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|BytesArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
operator|(
operator|(
name|BytesArray
operator|)
name|value
operator|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNodeDir
specifier|private
name|Path
name|getNodeDir
parameter_list|(
name|String
name|indexFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|unzipDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|unzipDataDir
init|=
name|unzipDir
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
comment|// decompress the index
name|Path
name|backwardsIndex
init|=
name|getBwcIndicesPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|indexFile
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|backwardsIndex
argument_list|)
init|)
block|{
name|TestUtil
operator|.
name|unzip
argument_list|(
name|stream
argument_list|,
name|unzipDir
argument_list|)
expr_stmt|;
block|}
comment|// check it is unique
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|unzipDataDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|list
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|unzipDataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Backwards index must contain exactly one cluster"
argument_list|)
throw|;
block|}
name|int
name|zipIndex
init|=
name|indexFile
operator|.
name|indexOf
argument_list|(
literal|".zip"
argument_list|)
decl_stmt|;
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|fromString
argument_list|(
name|indexFile
operator|.
name|substring
argument_list|(
literal|"index-"
operator|.
name|length
argument_list|()
argument_list|,
name|zipIndex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
condition|)
block|{
comment|// the bwc scripts packs the indices under this path
return|return
name|list
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
literal|"nodes/0/"
argument_list|)
return|;
block|}
else|else
block|{
comment|// after 5.0.0, data folders do not include the cluster name
return|return
name|list
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
return|;
block|}
block|}
DECL|method|testOldClusterStates
specifier|public
name|void
name|testOldClusterStates
parameter_list|()
throws|throws
name|Exception
block|{
comment|// dangling indices do not load the global state, only the per-index states
comment|// so we make sure we can read them separately
name|MetaDataStateFormat
argument_list|<
name|MetaData
argument_list|>
name|globalFormat
init|=
operator|new
name|MetaDataStateFormat
argument_list|<
name|MetaData
argument_list|>
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
literal|"global-"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|MetaData
name|state
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|MetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|MetaDataStateFormat
argument_list|<
name|IndexMetaData
argument_list|>
name|indexFormat
init|=
operator|new
name|MetaDataStateFormat
argument_list|<
name|IndexMetaData
argument_list|>
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
literal|"state-"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|IndexMetaData
name|state
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|IndexMetaData
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IndexMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|indexFile
range|:
name|indexes
control|)
block|{
name|String
name|indexName
init|=
name|indexFile
operator|.
name|replace
argument_list|(
literal|".zip"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|replace
argument_list|(
literal|"unsupported-"
argument_list|,
literal|"index-"
argument_list|)
decl_stmt|;
name|Path
name|nodeDir
init|=
name|getNodeDir
argument_list|(
name|indexFile
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Parsing cluster state files from index [{}]"
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|globalFormat
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|nodeDir
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|fromString
argument_list|(
name|indexName
operator|.
name|substring
argument_list|(
literal|"index-"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dataDir
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha1
argument_list|)
condition|)
block|{
name|dataDir
operator|=
name|nodeDir
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dataDir
operator|=
name|nodeDir
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Path
name|indexDir
init|=
name|getIndexDir
argument_list|(
name|logger
argument_list|,
name|indexName
argument_list|,
name|indexFile
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexFormat
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|indexDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

