begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|procedures
operator|.
name|IntProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|MoveAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|EnableAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryFileChunkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryTargetService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|BackgroundIndexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|MockIndexEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
annotation|@
name|TestLogging
argument_list|(
literal|"_root:DEBUG,indices.recovery:TRACE,index.shard.service:TRACE"
argument_list|)
DECL|class|RelocationIT
specifier|public
class|class
name|RelocationIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|ACCEPTABLE_RELOCATION_TIME
specifier|private
specifier|final
name|TimeValue
name|ACCEPTABLE_RELOCATION_TIME
init|=
operator|new
name|TimeValue
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|,
name|MockIndexEventListener
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testSimpleRelocationNoIndexing
specifier|public
name|void
name|testSimpleRelocationNoIndexing
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting [node1] ..."
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node_1
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating test index ..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index 10 docs"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> flush so we have an actual index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> index more docs so we have something in the translog"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> verifying count"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start another node"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node_2
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> relocate the shard from node1 to node2"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
name|node_1
argument_list|,
name|node_2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|clusterHealthResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|ACCEPTABLE_RELOCATION_TIME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|clusterHealthResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|ACCEPTABLE_RELOCATION_TIME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verifying count again..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestLogging
argument_list|(
literal|"action.index:TRACE,action.bulk:TRACE,action.search:TRACE"
argument_list|)
DECL|method|testRelocationWhileIndexingRandom
specifier|public
name|void
name|testRelocationWhileIndexingRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfRelocations
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|rarely
argument_list|()
condition|?
literal|10
else|:
literal|4
argument_list|)
decl_stmt|;
name|int
name|numberOfReplicas
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|int
name|numberOfNodes
init|=
name|numberOfReplicas
operator|==
literal|0
condition|?
literal|2
else|:
literal|3
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"testRelocationWhileIndexingRandom(numRelocations={}, numberOfReplicas={}, numberOfNodes={})"
argument_list|,
name|numberOfRelocations
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfNodes
argument_list|)
expr_stmt|;
name|String
index|[]
name|nodes
init|=
operator|new
name|String
index|[
name|numberOfNodes
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting [node1] ..."
argument_list|)
expr_stmt|;
name|nodes
index|[
literal|0
index|]
operator|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating test index ..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
name|numberOfReplicas
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numberOfNodes
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting [node{}] ..."
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|nodes
index|[
name|i
index|]
operator|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|numberOfNodes
operator|-
literal|1
condition|)
block|{
name|ClusterHealthResponse
name|healthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|healthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|200
argument_list|,
literal|2500
argument_list|)
decl_stmt|;
try|try
init|(
name|BackgroundIndexer
name|indexer
init|=
operator|new
name|BackgroundIndexer
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|client
argument_list|()
argument_list|,
name|numDocs
argument_list|)
init|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for {} docs to be indexed ..."
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
name|numDocs
argument_list|,
name|indexer
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> {} docs indexed"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting relocations..."
argument_list|)
expr_stmt|;
name|int
name|nodeShiftBased
init|=
name|numberOfReplicas
decl_stmt|;
comment|// if we have replicas shift those
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRelocations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fromNode
init|=
operator|(
name|i
operator|%
literal|2
operator|)
decl_stmt|;
name|int
name|toNode
init|=
name|fromNode
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|fromNode
operator|+=
name|nodeShiftBased
expr_stmt|;
name|toNode
operator|+=
name|nodeShiftBased
expr_stmt|;
name|numDocs
operator|=
name|scaledRandomIntBetween
argument_list|(
literal|200
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> Allow indexer to index [{}] documents"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|continueIndexing
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> START relocate the shard from {} to {}"
argument_list|,
name|nodes
index|[
name|fromNode
index|]
argument_list|,
name|nodes
index|[
name|toNode
index|]
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
name|nodes
index|[
name|fromNode
index|]
argument_list|,
name|nodes
index|[
name|toNode
index|]
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"--> flushing"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|ACCEPTABLE_RELOCATION_TIME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|clusterHealthResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|ACCEPTABLE_RELOCATION_TIME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|pauseIndexing
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> DONE relocate the shard from {} to {}"
argument_list|,
name|fromNode
argument_list|,
name|toNode
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> done relocations"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for indexing threads to stop ..."
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing threads stopped"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> refreshing the index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching the index"
argument_list|)
expr_stmt|;
name|boolean
name|ranOnce
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> START search test round {}"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|SearchHits
name|hits
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
operator|(
name|int
operator|)
name|indexer
operator|.
name|totalIndexedDocs
argument_list|()
argument_list|)
operator|.
name|setNoFields
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|ranOnce
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|hits
operator|.
name|totalHits
argument_list|()
operator|!=
name|indexer
operator|.
name|totalIndexedDocs
argument_list|()
condition|)
block|{
name|int
index|[]
name|hitIds
init|=
operator|new
name|int
index|[
operator|(
name|int
operator|)
name|indexer
operator|.
name|totalIndexedDocs
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|hit
init|=
literal|0
init|;
name|hit
operator|<
name|indexer
operator|.
name|totalIndexedDocs
argument_list|()
condition|;
name|hit
operator|++
control|)
block|{
name|hitIds
index|[
name|hit
index|]
operator|=
name|hit
operator|+
literal|1
expr_stmt|;
block|}
name|IntHashSet
name|set
init|=
name|IntHashSet
operator|.
name|from
argument_list|(
name|hitIds
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|hits
operator|.
name|hits
argument_list|()
control|)
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hit
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|set
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Extra id [{}]"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|set
operator|.
name|forEach
argument_list|(
operator|new
name|IntProcedure
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Missing id [{}]"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexer
operator|.
name|totalIndexedDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> DONE search test round {}"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|ex
parameter_list|)
block|{
comment|// TODO: the first run fails with this failure, waiting for relocating nodes set to 0 is not enough?
name|logger
operator|.
name|warn
argument_list|(
literal|"Got exception while searching."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ranOnce
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRelocationWhileRefreshing
specifier|public
name|void
name|testRelocationWhileRefreshing
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfRelocations
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|rarely
argument_list|()
condition|?
literal|10
else|:
literal|4
argument_list|)
decl_stmt|;
name|int
name|numberOfReplicas
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|int
name|numberOfNodes
init|=
name|numberOfReplicas
operator|==
literal|0
condition|?
literal|2
else|:
literal|3
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"testRelocationWhileIndexingRandom(numRelocations={}, numberOfReplicas={}, numberOfNodes={})"
argument_list|,
name|numberOfRelocations
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfNodes
argument_list|)
expr_stmt|;
name|String
index|[]
name|nodes
init|=
operator|new
name|String
index|[
name|numberOfNodes
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting [node_0] ..."
argument_list|)
expr_stmt|;
name|nodes
index|[
literal|0
index|]
operator|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating test index ..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
name|numberOfReplicas
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
comment|// we want to control refreshes c
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// make sure the first shard is started.
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numberOfNodes
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting [node_{}] ..."
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|nodes
index|[
name|i
index|]
operator|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|numberOfNodes
operator|-
literal|1
condition|)
block|{
name|ClusterHealthResponse
name|healthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|healthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Semaphore
name|postRecoveryShards
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexEventListener
name|listener
init|=
operator|new
name|IndexEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|indexShardStateChanged
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
annotation|@
name|Nullable
name|IndexShardState
name|previousState
parameter_list|,
name|IndexShardState
name|currentState
parameter_list|,
annotation|@
name|Nullable
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|currentState
operator|==
name|IndexShardState
operator|.
name|POST_RECOVERY
condition|)
block|{
name|postRecoveryShards
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
for|for
control|(
name|MockIndexEventListener
operator|.
name|TestEventListener
name|eventListener
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|MockIndexEventListener
operator|.
name|TestEventListener
operator|.
name|class
argument_list|)
control|)
block|{
name|eventListener
operator|.
name|setNewDelegate
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting relocations..."
argument_list|)
expr_stmt|;
name|int
name|nodeShiftBased
init|=
name|numberOfReplicas
decl_stmt|;
comment|// if we have replicas shift those
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRelocations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fromNode
init|=
operator|(
name|i
operator|%
literal|2
operator|)
decl_stmt|;
name|int
name|toNode
init|=
name|fromNode
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|fromNode
operator|+=
name|nodeShiftBased
expr_stmt|;
name|toNode
operator|+=
name|nodeShiftBased
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|)
init|;
name|numDocs
operator|>
literal|0
condition|;
name|numDocs
operator|--
control|)
block|{
name|builders1
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|)
init|;
name|numDocs
operator|>
literal|0
condition|;
name|numDocs
operator|--
control|)
block|{
name|builders2
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> START relocate the shard from {} to {}"
argument_list|,
name|nodes
index|[
name|fromNode
index|]
argument_list|,
name|nodes
index|[
name|toNode
index|]
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MoveAllocationCommand
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
name|nodes
index|[
name|fromNode
index|]
argument_list|,
name|nodes
index|[
name|toNode
index|]
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> index [{}] documents"
argument_list|,
name|builders1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|builders1
argument_list|)
expr_stmt|;
comment|// wait for shard to reach post recovery
name|postRecoveryShards
operator|.
name|acquire
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> index [{}] documents"
argument_list|,
name|builders2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|builders2
argument_list|)
expr_stmt|;
comment|// verify cluster was finished.
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"30s"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> DONE relocate the shard from {} to {}"
argument_list|,
name|fromNode
argument_list|,
name|toNode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> verifying all searches return the same number of docs"
argument_list|)
expr_stmt|;
name|long
name|expectedCount
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Client
name|client
range|:
name|clients
argument_list|()
control|)
block|{
name|SearchResponse
name|response
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedCount
operator|<
literal|0
condition|)
block|{
name|expectedCount
operator|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testCancellationCleansTempFiles
specifier|public
name|void
name|testCancellationCleansTempFiles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test"
decl_stmt|;
specifier|final
name|String
name|p_node
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|250
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|requests
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setCreate
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|requests
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|int
name|allowedFailures
init|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> blocking recoveries from primary (allowed failures: [{}])"
argument_list|,
name|allowedFailures
argument_list|)
expr_stmt|;
name|CountDownLatch
name|corruptionCount
init|=
operator|new
name|CountDownLatch
argument_list|(
name|allowedFailures
argument_list|)
decl_stmt|;
name|ClusterService
name|clusterService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|p_node
argument_list|)
decl_stmt|;
name|MockTransportService
name|mockTransportService
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|p_node
argument_list|)
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
condition|)
block|{
name|mockTransportService
operator|.
name|addDelegate
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|RecoveryCorruption
argument_list|(
name|mockTransportService
operator|.
name|original
argument_list|()
argument_list|,
name|corruptionCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|corruptionCount
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping replica assignment"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"none"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> wait for all replica shards to be removed, on all nodes"
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|String
name|node
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|p_node
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ClusterState
name|state
init|=
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|node
operator|+
literal|" indicates assigned replicas"
argument_list|,
name|state
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verifying no temporary recoveries are left"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
name|NodeEnvironment
name|nodeEnvironment
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|node
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|shardLoc
range|:
name|nodeEnvironment
operator|.
name|availableShardPaths
argument_list|(
operator|new
name|ShardId
argument_list|(
name|indexName
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|shardLoc
argument_list|)
condition|)
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|shardLoc
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
literal|"found a temporary recovery file: "
operator|+
name|file
argument_list|,
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|not
argument_list|(
name|startsWith
argument_list|(
literal|"recovery."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to walk file tree starting at ["
operator|+
name|shardLoc
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|RecoveryCorruption
class|class
name|RecoveryCorruption
extends|extends
name|MockTransportService
operator|.
name|DelegateTransport
block|{
DECL|field|corruptionCount
specifier|private
specifier|final
name|CountDownLatch
name|corruptionCount
decl_stmt|;
DECL|method|RecoveryCorruption
specifier|public
name|RecoveryCorruption
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|CountDownLatch
name|corruptionCount
parameter_list|)
block|{
name|super
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|this
operator|.
name|corruptionCount
operator|=
name|corruptionCount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendRequest
specifier|public
name|void
name|sendRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|RecoveryTargetService
operator|.
name|Actions
operator|.
name|FILE_CHUNK
argument_list|)
condition|)
block|{
name|RecoveryFileChunkRequest
name|chunkRequest
init|=
operator|(
name|RecoveryFileChunkRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|chunkRequest
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
condition|)
block|{
comment|// corrupting the segments_N files in order to make sure future recovery re-send files
name|logger
operator|.
name|debug
argument_list|(
literal|"corrupting [{}] to {}. file name: [{}]"
argument_list|,
name|action
argument_list|,
name|node
argument_list|,
name|chunkRequest
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|array
init|=
name|chunkRequest
operator|.
name|content
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
name|array
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|~
name|array
index|[
literal|0
index|]
expr_stmt|;
comment|// flip one byte in the content
name|corruptionCount
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|transport
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transport
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

