begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.hashing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hashing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
operator|.
name|MurmurHash3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_class
DECL|class|MurmurHash3Tests
specifier|public
class|class
name|MurmurHash3Tests
extends|extends
name|ESTestCase
block|{
DECL|method|testKnownValues
specifier|public
name|void
name|testKnownValues
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|assertHash
argument_list|(
literal|0x629942693e10f867L
argument_list|,
literal|0x92db0b82baeb5347L
argument_list|,
literal|"hell"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertHash
argument_list|(
literal|0xa78ddff5adae8d10L
argument_list|,
literal|0x128900ef20900135L
argument_list|,
literal|"hello"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertHash
argument_list|(
literal|0x8a486b23f422e826L
argument_list|,
literal|0xf962a2c58947765fL
argument_list|,
literal|"hello "
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertHash
argument_list|(
literal|0x2ea59f466f6bed8cL
argument_list|,
literal|0xc610990acc428a17L
argument_list|,
literal|"hello w"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertHash
argument_list|(
literal|0x79f6305a386c572cL
argument_list|,
literal|0x46305aed3483b94eL
argument_list|,
literal|"hello wo"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertHash
argument_list|(
literal|0xc2219d213ec1f1b5L
argument_list|,
literal|0xa1d8e2e0a52785bdL
argument_list|,
literal|"hello wor"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertHash
argument_list|(
literal|0xe34bbc7bbc071b6cL
argument_list|,
literal|0x7a433ca9c49a9347L
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertHash
argument_list|(
literal|0x658ca970ff85269aL
argument_list|,
literal|0x43fee3eaa68e5c3eL
argument_list|,
literal|"The quick brown fox jumps over the lazy cog"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHash
specifier|private
specifier|static
name|void
name|assertHash
parameter_list|(
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|,
name|String
name|inputString
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|inputString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|MurmurHash3
operator|.
name|Hash128
name|expected
init|=
operator|new
name|MurmurHash3
operator|.
name|Hash128
argument_list|()
decl_stmt|;
name|expected
operator|.
name|h1
operator|=
name|lower
expr_stmt|;
name|expected
operator|.
name|h2
operator|=
name|upper
expr_stmt|;
name|assertHash
argument_list|(
name|expected
argument_list|,
name|MurmurHash3
operator|.
name|hash128
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|seed
argument_list|,
operator|new
name|MurmurHash3
operator|.
name|Hash128
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHash
specifier|private
specifier|static
name|void
name|assertHash
parameter_list|(
name|MurmurHash3
operator|.
name|Hash128
name|expected
parameter_list|,
name|MurmurHash3
operator|.
name|Hash128
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|h1
argument_list|,
name|actual
operator|.
name|h1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|h2
argument_list|,
name|actual
operator|.
name|h2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

