begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.cache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|CacheTests
specifier|public
class|class
name|CacheTests
extends|extends
name|ESTestCase
block|{
DECL|field|numberOfEntries
specifier|private
name|int
name|numberOfEntries
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|numberOfEntries
operator|=
name|randomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"numberOfEntries: "
operator|+
name|numberOfEntries
argument_list|)
expr_stmt|;
block|}
comment|// cache some entries, then randomly lookup keys that do not exist, then check the stats
DECL|method|testCacheStats
specifier|public
name|void
name|testCacheStats
parameter_list|()
block|{
name|AtomicLong
name|evictions
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|setMaximumWeight
argument_list|(
name|numberOfEntries
operator|/
literal|2
argument_list|)
decl|.
name|removalListener
argument_list|(
name|notification
lambda|->
block|{
name|keys
operator|.
name|remove
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|evictions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
comment|// track the keys, which will be removed upon eviction (see the RemovalListener)
name|keys
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|hits
init|=
literal|0
decl_stmt|;
name|long
name|misses
init|=
literal|0
decl_stmt|;
name|Integer
name|missingKey
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keys
control|)
block|{
operator|--
name|missingKey
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|misses
operator|++
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|missingKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hits
operator|++
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|hits
argument_list|,
name|cache
operator|.
name|stats
argument_list|()
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|misses
argument_list|,
name|cache
operator|.
name|stats
argument_list|()
operator|.
name|getMisses
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|numberOfEntries
operator|/
literal|2.0
argument_list|)
argument_list|,
name|evictions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|evictions
operator|.
name|get
argument_list|()
argument_list|,
name|cache
operator|.
name|stats
argument_list|()
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cache some entries in batches of size maximumWeight; for each batch, touch the even entries to affect the
comment|// ordering; upon the next caching of entries, the entries from the previous batch will be evicted; we can then
comment|// check that the evicted entries were evicted in LRU order (first the odds in a batch, then the evens in a batch)
comment|// for each batch
DECL|method|testCacheEvictions
specifier|public
name|void
name|testCacheEvictions
parameter_list|()
block|{
name|int
name|maximumWeight
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numberOfEntries
argument_list|)
decl_stmt|;
name|AtomicLong
name|evictions
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|evictedKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|setMaximumWeight
argument_list|(
name|maximumWeight
argument_list|)
decl|.
name|removalListener
argument_list|(
name|notification
lambda|->
block|{
name|evictions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|evictedKeys
operator|.
name|add
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
comment|// cache entries up to numberOfEntries - maximumWeight; all of these entries will ultimately be evicted in
comment|// batches of size maximumWeight, first the odds in the batch, then the evens in the batch
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedEvictions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|iterations
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|numberOfEntries
operator|-
name|maximumWeight
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|maximumWeight
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|*
name|maximumWeight
init|;
name|j
operator|<
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|maximumWeight
operator|&&
name|j
operator|<
name|numberOfEntries
operator|-
name|maximumWeight
condition|;
name|j
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|j
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|expectedEvictions
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
name|i
operator|*
name|maximumWeight
init|;
name|j
operator|<
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|maximumWeight
operator|&&
name|j
operator|<
name|numberOfEntries
operator|-
name|maximumWeight
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|cache
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|expectedEvictions
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// finish filling the cache
for|for
control|(
name|int
name|i
init|=
name|numberOfEntries
operator|-
name|maximumWeight
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numberOfEntries
operator|-
name|maximumWeight
argument_list|,
name|evictions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|evictions
operator|.
name|get
argument_list|()
argument_list|,
name|cache
operator|.
name|stats
argument_list|()
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert that the keys were evicted in LRU order
name|Set
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|remainingKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|cache
operator|.
name|keys
argument_list|()
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|remainingKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedEvictions
operator|.
name|size
argument_list|()
argument_list|,
name|evictedKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedEvictions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
name|expectedEvictions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEvictions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|evictedKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|numberOfEntries
operator|-
name|maximumWeight
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfEntries
operator|-
name|i
operator|+
operator|(
name|numberOfEntries
operator|-
name|maximumWeight
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|remainingKeys
operator|.
name|get
argument_list|(
name|i
operator|-
operator|(
name|numberOfEntries
operator|-
name|maximumWeight
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// cache some entries and exceed the maximum weight, then check that the cache has the expected weight and the
comment|// expected evictions occurred
DECL|method|testWeigher
specifier|public
name|void
name|testWeigher
parameter_list|()
block|{
name|int
name|maximumWeight
init|=
literal|2
operator|*
name|numberOfEntries
decl_stmt|;
name|int
name|weight
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|AtomicLong
name|evictions
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|setMaximumWeight
argument_list|(
name|maximumWeight
argument_list|)
decl|.
name|weigher
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|weight
argument_list|)
operator|.
name|removalListener
argument_list|(
name|notification
lambda|->
name|evictions
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// cache weight should be the largest multiple of weight less than maximumWeight
name|assertEquals
argument_list|(
name|weight
operator|*
operator|(
name|maximumWeight
operator|/
name|weight
operator|)
argument_list|,
name|cache
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
comment|// the number of evicted entries should be the number of entries that fit in the excess weight
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|weight
operator|-
literal|2
operator|)
operator|*
name|numberOfEntries
operator|/
operator|(
literal|1.0
operator|*
name|weight
operator|)
argument_list|)
argument_list|,
name|evictions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|evictions
operator|.
name|get
argument_list|()
argument_list|,
name|cache
operator|.
name|stats
argument_list|()
operator|.
name|getEvictions
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cache some entries, randomly invalidate some of them, then check that the weight of the cache is correct
DECL|method|testWeight
specifier|public
name|void
name|testWeight
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|weigher
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|k
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|weight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|weight
operator|+=
name|i
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|weight
operator|-=
name|i
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|weight
argument_list|,
name|cache
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cache some entries, randomly invalidate some of them, then check that the number of cached entries is correct
DECL|method|testCount
specifier|public
name|void
name|testCount
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|count
operator|++
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|count
operator|--
expr_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// cache some entries, step the clock forward, cache some more entries, step the clock forward and then check that
comment|// the first batch of cached entries expired and were removed
DECL|method|testExpirationAfterAccess
specifier|public
name|void
name|testExpirationAfterAccess
parameter_list|()
block|{
name|AtomicLong
name|now
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|long
name|now
parameter_list|()
block|{
return|return
name|now
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|cache
operator|.
name|setExpireAfterAccess
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|evictedKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cache
operator|.
name|setRemovalListener
argument_list|(
name|notification
lambda|->
block|{
name|assertEquals
argument_list|(
name|RemovalNotification
operator|.
name|RemovalReason
operator|.
name|EVICTED
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
argument_list|)
expr_stmt|;
name|evictedKeys
operator|.
name|add
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|now
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|now
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numberOfEntries
init|;
name|i
operator|<
literal|2
operator|*
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|now
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfEntries
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|evictedKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
operator|(
name|int
operator|)
name|evictedKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|remainingKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|cache
operator|.
name|keys
argument_list|()
control|)
block|{
name|remainingKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|numberOfEntries
init|;
name|i
operator|<
literal|2
operator|*
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|remainingKeys
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExpirationAfterWrite
specifier|public
name|void
name|testExpirationAfterWrite
parameter_list|()
block|{
name|AtomicLong
name|now
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|long
name|now
parameter_list|()
block|{
return|return
name|now
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|cache
operator|.
name|setExpireAfterWrite
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|evictedKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cache
operator|.
name|setRemovalListener
argument_list|(
name|notification
lambda|->
block|{
name|assertEquals
argument_list|(
name|RemovalNotification
operator|.
name|RemovalReason
operator|.
name|EVICTED
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
argument_list|)
expr_stmt|;
name|evictedKeys
operator|.
name|add
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|now
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|now
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numberOfEntries
init|;
name|i
operator|<
literal|2
operator|*
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|now
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfEntries
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|evictedKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
operator|(
name|int
operator|)
name|evictedKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|remainingKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|cache
operator|.
name|keys
argument_list|()
control|)
block|{
name|remainingKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|numberOfEntries
init|;
name|i
operator|<
literal|2
operator|*
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|remainingKeys
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// randomly promote some entries, step the clock forward, then check that the promoted entries remain and the
comment|// non-promoted entries were removed
DECL|method|testPromotion
specifier|public
name|void
name|testPromotion
parameter_list|()
block|{
name|AtomicLong
name|now
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|long
name|now
parameter_list|()
block|{
return|return
name|now
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|cache
operator|.
name|setExpireAfterAccess
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|now
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|now
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|promotedKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|promotedKeys
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|now
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|promotedKeys
operator|.
name|size
argument_list|()
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|promotedKeys
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// randomly invalidate some cached entries, then check that a lookup for each of those and only those keys is null
DECL|method|testInvalidate
specifier|public
name|void
name|testInvalidate
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|cache
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// randomly invalidate some cached entries, then check that we receive invalidate notifications for those and only
comment|// those entries
DECL|method|testNotificationOnInvalidate
specifier|public
name|void
name|testNotificationOnInvalidate
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|notifications
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|removalListener
argument_list|(
name|notification
lambda|->
block|{
name|assertEquals
argument_list|(
name|RemovalNotification
operator|.
name|RemovalReason
operator|.
name|INVALIDATED
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
argument_list|)
expr_stmt|;
name|notifications
operator|.
name|add
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|invalidated
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|invalidated
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|notifications
argument_list|,
name|invalidated
argument_list|)
expr_stmt|;
block|}
comment|// invalidate all cached entries, then check that the cache is empty
DECL|method|testInvalidateAll
specifier|public
name|void
name|testInvalidateAll
parameter_list|()
block|{
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// invalidate all cached entries, then check that we receive invalidate notifications for all entries
DECL|method|testNotificationOnInvalidateAll
specifier|public
name|void
name|testNotificationOnInvalidateAll
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|notifications
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|removalListener
argument_list|(
name|notification
lambda|->
block|{
name|assertEquals
argument_list|(
name|RemovalNotification
operator|.
name|RemovalReason
operator|.
name|INVALIDATED
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
argument_list|)
expr_stmt|;
name|notifications
operator|.
name|add
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|invalidated
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|invalidated
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|invalidated
argument_list|,
name|notifications
argument_list|)
expr_stmt|;
block|}
comment|// randomly replace some entries, increasing the weight by 1 for each replacement, then count that the cache size
comment|// is correct
DECL|method|testReplaceRecomputesSize
specifier|public
name|void
name|testReplaceRecomputesSize
parameter_list|()
block|{
class|class
name|Value
block|{
specifier|private
name|String
name|value
decl_stmt|;
specifier|private
name|long
name|weight
decl_stmt|;
specifier|public
name|Value
parameter_list|(
name|String
name|value
parameter_list|,
name|long
name|weight
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Value
name|that
init|=
operator|(
name|Value
operator|)
name|o
decl_stmt|;
return|return
name|value
operator|.
name|equals
argument_list|(
name|that
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Value
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|Value
decl|>
name|builder
argument_list|()
decl|.
name|weigher
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|weight
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
operator|new
name|Value
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numberOfEntries
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfEntries
argument_list|,
name|cache
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|replaced
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|replaced
operator|++
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
operator|new
name|Value
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numberOfEntries
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfEntries
operator|+
name|replaced
argument_list|,
name|cache
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// randomly replace some entries, then check that we received replacement notifications for those and only those
comment|// entries
DECL|method|testNotificationOnReplace
specifier|public
name|void
name|testNotificationOnReplace
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|notifications
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|removalListener
argument_list|(
name|notification
lambda|->
block|{
name|assertEquals
argument_list|(
name|RemovalNotification
operator|.
name|RemovalReason
operator|.
name|REPLACED
argument_list|,
name|notification
operator|.
name|getRemovalReason
argument_list|()
argument_list|)
expr_stmt|;
name|notifications
operator|.
name|add
argument_list|(
name|notification
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|replacements
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|replacements
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|replacements
argument_list|,
name|notifications
argument_list|)
expr_stmt|;
block|}
DECL|method|testComputeIfAbsentLoadsSuccessfully
specifier|public
name|void
name|testComputeIfAbsentLoadsSuccessfully
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|Integer
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|cache
operator|.
name|computeIfAbsent
argument_list|(
name|i
argument_list|,
name|k
lambda|->
block|{
name|int
name|value
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testComputeIfAbsentCallsOnce
specifier|public
name|void
name|testComputeIfAbsentCallsOnce
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|numberOfThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
name|flags
init|=
operator|new
name|AtomicReferenceArray
argument_list|(
name|numberOfEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfEntries
condition|;
name|j
operator|++
control|)
block|{
name|flags
operator|.
name|set
argument_list|(
name|j
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
operator|+
name|numberOfThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfEntries
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|cache
operator|.
name|computeIfAbsent
argument_list|(
name|j
argument_list|,
name|key
lambda|->
block|{
name|assertTrue
argument_list|(
name|flags
operator|.
name|compareAndSet
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|key
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testComputeIfAbsentThrowsExceptionIfLoaderReturnsANullValue
specifier|public
name|void
name|testComputeIfAbsentThrowsExceptionIfLoaderReturnsANullValue
parameter_list|()
block|{
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|computeIfAbsent
argument_list|(
literal|1
argument_list|,
name|k
lambda|->
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected ExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDependentKeyDeadlock
specifier|public
name|void
name|testDependentKeyDeadlock
parameter_list|()
throws|throws
name|InterruptedException
block|{
class|class
name|Key
block|{
specifier|private
specifier|final
name|int
name|key
decl_stmt|;
specifier|public
name|Key
parameter_list|(
name|int
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Key
name|key1
init|=
operator|(
name|Key
operator|)
name|o
decl_stmt|;
return|return
name|key
operator|==
name|key1
operator|.
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|key
operator|%
literal|2
return|;
block|}
block|}
name|int
name|numberOfThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|256
argument_list|)
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|Key
argument_list|,
name|Integer
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Key
decl_stmt|,
name|Integer
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
operator|+
name|numberOfThreads
argument_list|)
decl_stmt|;
name|CountDownLatch
name|deadlockLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfEntries
condition|;
name|j
operator|++
control|)
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|numberOfEntries
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|cache
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|k
lambda|->
block|{
if|if
condition|(
name|k
operator|.
name|key
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
name|Integer
name|value
init|=
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Key
argument_list|(
name|k
operator|.
name|key
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// successfully avoided deadlock, release the main thread
name|deadlockLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|AtomicBoolean
name|deadlock
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|deadlock
operator|.
name|get
argument_list|()
assert|;
comment|// start a watchdog service
name|ScheduledExecutorService
name|scheduler
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
parameter_list|()
lambda|->
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
name|threads
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|t
lambda|->
name|t
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|ThreadMXBean
name|mxBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|long
index|[]
name|deadlockedThreads
init|=
name|mxBean
operator|.
name|findDeadlockedThreads
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deadlock
operator|.
name|get
argument_list|()
operator|&&
name|deadlockedThreads
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|long
name|deadlockedThread
range|:
name|deadlockedThreads
control|)
block|{
comment|// ensure that we detected deadlock on our threads
if|if
condition|(
name|ids
operator|.
name|contains
argument_list|(
name|deadlockedThread
argument_list|)
condition|)
block|{
name|deadlock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// release the main test thread to fail the test
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|deadlockLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// everything is setup, release the hounds
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// wait for either deadlock to be detected or the threads to terminate
name|deadlockLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// shutdown the watchdog service
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"deadlock"
argument_list|,
name|deadlock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCachePollution
specifier|public
name|void
name|testCachePollution
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|numberOfThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
operator|+
name|numberOfThreads
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfEntries
condition|;
name|j
operator|++
control|)
block|{
name|Integer
name|key
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numberOfEntries
argument_list|)
decl_stmt|;
name|boolean
name|first
decl_stmt|;
name|boolean
name|second
decl_stmt|;
do|do
block|{
name|first
operator|=
name|random
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|second
operator|=
name|random
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|first
operator|&&
name|second
condition|)
do|;
if|if
condition|(
name|first
operator|&&
operator|!
name|second
condition|)
block|{
try|try
block|{
name|cache
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|k
lambda|->
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|k
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"testCachePollution"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"testCachePollution"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|first
operator|&&
name|second
condition|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|first
operator|&&
operator|!
name|second
condition|)
block|{
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test that the cache is not corrupted under lots of concurrent modifications, even hitting the same key
comment|// here be dragons: this test did catch one subtle bug during development; do not remove lightly
DECL|method|testTorture
specifier|public
name|void
name|testTorture
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|numberOfThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|cache
init|=
name|CacheBuilder
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|setMaximumWeight
argument_list|(
literal|1000
argument_list|)
decl|.
name|weigher
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
operator|+
name|numberOfThreads
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfEntries
condition|;
name|j
operator|++
control|)
block|{
name|Integer
name|key
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numberOfEntries
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|cache
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

