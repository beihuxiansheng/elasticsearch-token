begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/**  * Tests for network address formatting. Please avoid using any methods that cause DNS lookups!  */
end_comment

begin_class
DECL|class|NetworkAddressTests
specifier|public
class|class
name|NetworkAddressTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFormatV4
specifier|public
name|void
name|testFormatV4
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"localhost/127.0.0.1"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatV6
specifier|public
name|void
name|testFormatV6
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"localhost/::1"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatAddressV4
specifier|public
name|void
name|testFormatAddressV4
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatAddressV6
specifier|public
name|void
name|testFormatAddressV6
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatPortV4
specifier|public
name|void
name|testFormatPortV4
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"localhost/127.0.0.1:1234"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatPortV6
specifier|public
name|void
name|testFormatPortV6
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"localhost/[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatAddressPortV4
specifier|public
name|void
name|testFormatAddressPortV4
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"127.0.0.1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatAddressPortV6
specifier|public
name|void
name|testFormatAddressPortV6
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forge
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoScopeID
specifier|public
name|void
name|testNoScopeID
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|forgeScoped
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost/::1"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
name|forgeScoped
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|forgeScoped
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
name|forgeScoped
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forgeScoped
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost/[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forgeScoped
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forgeScoped
argument_list|(
literal|null
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[::1]:1234"
argument_list|,
name|NetworkAddress
operator|.
name|formatAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|forgeScoped
argument_list|(
literal|"localhost"
argument_list|,
literal|"::1"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** creates address without any lookups. hostname can be null, for missing */
DECL|method|forge
specifier|private
name|InetAddress
name|forge
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|address
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hostname
operator|==
literal|null
condition|)
block|{
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|address
argument_list|)
return|;
block|}
else|else
block|{
name|byte
name|bytes
index|[]
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|address
argument_list|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
return|return
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|hostname
argument_list|,
name|bytes
argument_list|)
return|;
block|}
block|}
comment|/** creates scoped ipv6 address without any lookups. hostname can be null, for missing */
DECL|method|forgeScoped
specifier|private
name|InetAddress
name|forgeScoped
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|address
parameter_list|,
name|int
name|scopeid
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|bytes
index|[]
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|address
argument_list|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostname
operator|==
literal|null
condition|)
block|{
return|return
name|Inet6Address
operator|.
name|getByAddress
argument_list|(
name|hostname
argument_list|,
name|bytes
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Inet6Address
operator|.
name|getByAddress
argument_list|(
name|hostname
argument_list|,
name|bytes
argument_list|,
name|scopeid
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

