begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  * Tests for network utils. Please avoid using any methods that cause DNS lookups!  */
end_comment

begin_class
DECL|class|NetworkUtilsTests
specifier|public
class|class
name|NetworkUtilsTests
extends|extends
name|ESTestCase
block|{
comment|/**      * test sort key order respects PREFER_IPV4      */
DECL|method|testSortKey
specifier|public
name|void
name|testSortKey
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|localhostv4
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|InetAddress
name|localhostv6
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"::1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|localhostv4
argument_list|,
literal|false
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|localhostv6
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|localhostv6
argument_list|,
literal|true
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|localhostv4
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test ordinary addresses sort before private addresses      */
DECL|method|testSortKeySiteLocal
specifier|public
name|void
name|testSortKeySiteLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|siteLocal
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"172.16.0.1"
argument_list|)
decl_stmt|;
assert|assert
name|siteLocal
operator|.
name|isSiteLocalAddress
argument_list|()
assert|;
name|InetAddress
name|ordinary
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"192.192.192.192"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|ordinary
argument_list|,
literal|true
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|siteLocal
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|ordinary
argument_list|,
literal|false
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|siteLocal
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|InetAddress
name|siteLocal6
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"fec0::1"
argument_list|)
decl_stmt|;
assert|assert
name|siteLocal6
operator|.
name|isSiteLocalAddress
argument_list|()
assert|;
name|InetAddress
name|ordinary6
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"fddd::1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|ordinary6
argument_list|,
literal|true
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|siteLocal6
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|ordinary6
argument_list|,
literal|false
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|siteLocal6
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test private addresses sort before link local addresses      */
DECL|method|testSortKeyLinkLocal
specifier|public
name|void
name|testSortKeyLinkLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|linkLocal
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"fe80::1"
argument_list|)
decl_stmt|;
assert|assert
name|linkLocal
operator|.
name|isLinkLocalAddress
argument_list|()
assert|;
name|InetAddress
name|ordinary
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"fddd::1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|ordinary
argument_list|,
literal|true
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|linkLocal
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|ordinary
argument_list|,
literal|false
argument_list|)
operator|<
name|NetworkUtils
operator|.
name|sortKey
argument_list|(
name|linkLocal
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test filtering out ipv4/ipv6 addresses      */
DECL|method|testFilter
specifier|public
name|void
name|testFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|addresses
index|[]
init|=
block|{
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"::1"
argument_list|)
block|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"127.0.0.1"
argument_list|)
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|InetAddress
index|[]
block|{
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"127.0.0.1"
argument_list|)
block|}
argument_list|,
name|NetworkUtils
operator|.
name|filterIPV4
argument_list|(
name|addresses
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|InetAddress
index|[]
block|{
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"::1"
argument_list|)
block|}
argument_list|,
name|NetworkUtils
operator|.
name|filterIPV6
argument_list|(
name|addresses
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that selecting by name is possible and properly matches the addresses on all interfaces and virtual      * interfaces.      *      * Note that to avoid that this test fails when interfaces are down or they do not have addresses assigned to them,      * they are ignored.      */
DECL|method|testAddressInterfaceLookup
specifier|public
name|void
name|testAddressInterfaceLookup
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|NetworkInterface
name|netIf
range|:
name|NetworkUtils
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|netIf
operator|.
name|isUp
argument_list|()
operator|||
name|Collections
operator|.
name|list
argument_list|(
name|netIf
operator|.
name|getInetAddresses
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|netIf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|InetAddress
index|[]
name|expectedAddresses
init|=
name|Collections
operator|.
name|list
argument_list|(
name|netIf
operator|.
name|getInetAddresses
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|InetAddress
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|InetAddress
index|[]
name|foundAddresses
init|=
name|NetworkUtils
operator|.
name|getAddressesForInterface
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedAddresses
argument_list|,
name|foundAddresses
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonExistingInterface
specifier|public
name|void
name|testNonExistingInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|IllegalArgumentException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NetworkUtils
operator|.
name|getAddressesForInterface
argument_list|(
literal|"non-existing"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"No interface named 'non-existing' found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

