begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_class
DECL|class|InetAddressesTests
specifier|public
class|class
name|InetAddressesTests
extends|extends
name|ESTestCase
block|{
DECL|method|testForStringBogusInput
specifier|public
name|void
name|testForStringBogusInput
parameter_list|()
block|{
name|String
index|[]
name|bogusInputs
init|=
block|{
literal|""
block|,
literal|"016.016.016.016"
block|,
literal|"016.016.016"
block|,
literal|"016.016"
block|,
literal|"016"
block|,
literal|"000.000.000.000"
block|,
literal|"000"
block|,
literal|"0x0a.0x0a.0x0a.0x0a"
block|,
literal|"0x0a.0x0a.0x0a"
block|,
literal|"0x0a.0x0a"
block|,
literal|"0x0a"
block|,
literal|"42.42.42.42.42"
block|,
literal|"42.42.42"
block|,
literal|"42.42"
block|,
literal|"42"
block|,
literal|"42..42.42"
block|,
literal|"42..42.42.42"
block|,
literal|"42.42.42.42."
block|,
literal|"42.42.42.42..."
block|,
literal|".42.42.42.42"
block|,
literal|"...42.42.42.42"
block|,
literal|"42.42.42.-0"
block|,
literal|"42.42.42.+0"
block|,
literal|"."
block|,
literal|"..."
block|,
literal|"bogus"
block|,
literal|"bogus.com"
block|,
literal|"192.168.0.1.com"
block|,
literal|"12345.67899.-54321.-98765"
block|,
literal|"257.0.0.0"
block|,
literal|"42.42.42.-42"
block|,
literal|"3ffe::1.net"
block|,
literal|"3ffe::1::1"
block|,
literal|"1::2::3::4:5"
block|,
literal|"::7:6:5:4:3:2:"
block|,
comment|// should end with ":0"
literal|":6:5:4:3:2:1::"
block|,
comment|// should begin with "0:"
literal|"2001::db:::1"
block|,
literal|"FEDC:9878"
block|,
literal|"+1.+2.+3.4"
block|,
literal|"1.2.3.4e0"
block|,
literal|"::7:6:5:4:3:2:1:0"
block|,
comment|// too many parts
literal|"7:6:5:4:3:2:1:0::"
block|,
comment|// too many parts
literal|"9:8:7:6:5:4:3::2:1"
block|,
comment|// too many parts
literal|"0:1:2:3::4:5:6:7"
block|,
comment|// :: must remove at least one 0.
literal|"3ffe:0:0:0:0:0:0:0:1"
block|,
comment|// too many parts (9 instead of 8)
literal|"3ffe::10000"
block|,
comment|// hextet exceeds 16 bits
literal|"3ffe::goog"
block|,
literal|"3ffe::-0"
block|,
literal|"3ffe::+0"
block|,
literal|"3ffe::-1"
block|,
literal|":"
block|,
literal|":::"
block|,
literal|"::1.2.3"
block|,
literal|"::1.2.3.4.5"
block|,
literal|"::1.2.3.4:"
block|,
literal|"1.2.3.4::"
block|,
literal|"2001:db8::1:"
block|,
literal|":2001:db8::1"
block|,
literal|":1:2:3:4:5:6:7"
block|,
literal|"1:2:3:4:5:6:7:"
block|,
literal|":1:2:3:4:5:6:"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bogusInputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|InetAddresses
operator|.
name|forString
argument_list|(
name|bogusInputs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected for '"
operator|+
name|bogusInputs
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected behavior
block|}
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|bogusInputs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|test3ff31
specifier|public
name|void
name|test3ff31
parameter_list|()
block|{
try|try
block|{
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"3ffe:::1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// expected behavior
block|}
name|assertFalse
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
literal|"016.016.016.016"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringIPv4Input
specifier|public
name|void
name|testForStringIPv4Input
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
name|ipStr
init|=
literal|"192.168.0.1"
decl_stmt|;
name|InetAddress
name|ipv4Addr
init|=
literal|null
decl_stmt|;
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|ipv4Addr
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipStr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ipv4Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringIPv6Input
specifier|public
name|void
name|testForStringIPv6Input
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
name|ipStr
init|=
literal|"3ffe::1"
decl_stmt|;
name|InetAddress
name|ipv6Addr
init|=
literal|null
decl_stmt|;
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|ipv6Addr
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipStr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ipv6Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|ipStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForStringIPv6EightColons
specifier|public
name|void
name|testForStringIPv6EightColons
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
index|[]
name|eightColons
init|=
block|{
literal|"::7:6:5:4:3:2:1"
block|,
literal|"::7:6:5:4:3:2:0"
block|,
literal|"7:6:5:4:3:2:1::"
block|,
literal|"0:6:5:4:3:2:1::"
block|,         }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|eightColons
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|InetAddress
name|ipv6Addr
init|=
literal|null
decl_stmt|;
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|ipv6Addr
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|eightColons
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ipv6Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|eightColons
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|eightColons
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConvertDottedQuadToHex
specifier|public
name|void
name|testConvertDottedQuadToHex
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
index|[]
name|ipStrings
init|=
block|{
literal|"7::0.128.0.127"
block|,
literal|"7::0.128.0.128"
block|,
literal|"7::128.128.0.127"
block|,
literal|"7::0.128.128.127"
block|}
decl_stmt|;
for|for
control|(
name|String
name|ipString
range|:
name|ipStrings
control|)
block|{
comment|// Shouldn't hit DNS, because it's an IP string literal.
name|InetAddress
name|ipv6Addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ipString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ipv6Addr
argument_list|,
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipString
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|ipString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToAddrStringIPv4
specifier|public
name|void
name|testToAddrStringIPv4
parameter_list|()
block|{
comment|// Don't need to test IPv4 much; it just calls getHostAddress().
name|assertEquals
argument_list|(
literal|"1.2.3.4"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToAddrStringIPv6
specifier|public
name|void
name|testToAddrStringIPv6
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1:2:3:4:5:6:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1:2:3:4:5:6:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001:0:0:4::8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0:0:4:0:0:0:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001::4:5:6:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0:0:4:5:6:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001:0:3:4:5:6:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0:3:4:5:6:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0:0:3::ffff"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:3:0:0:0:0:ffff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::4:0:0:0:ffff"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:4:0:0:0:ffff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::5:0:0:ffff"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:0:5:0:0:ffff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1::4:0:0:7:8"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"1:0:0:4:0:0:7:8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:0:0:0:0:0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::1"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"0:0:0:0:0:0:0:1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2001:658:22a:cafe::"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"2001:0658:022a:cafe::"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"::102:304"
argument_list|,
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|InetAddresses
operator|.
name|forString
argument_list|(
literal|"::1.2.3.4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToUriStringIPv4
specifier|public
name|void
name|testToUriStringIPv4
parameter_list|()
block|{
name|String
name|ipStr
init|=
literal|"1.2.3.4"
decl_stmt|;
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1.2.3.4"
argument_list|,
name|InetAddresses
operator|.
name|toUriString
argument_list|(
name|ip
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToUriStringIPv6
specifier|public
name|void
name|testToUriStringIPv6
parameter_list|()
block|{
comment|// Unfortunately the InetAddress.toString() method for IPv6 addresses
comment|// does not collapse contiguous shorts of zeroes with the :: abbreviation.
name|String
name|ipStr
init|=
literal|"3ffe::1"
decl_stmt|;
name|InetAddress
name|ip
init|=
name|InetAddresses
operator|.
name|forString
argument_list|(
name|ipStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[3ffe::1]"
argument_list|,
name|InetAddresses
operator|.
name|toUriString
argument_list|(
name|ip
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

