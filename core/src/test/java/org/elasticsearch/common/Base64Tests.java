begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|Base64Tests
specifier|public
class|class
name|Base64Tests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
comment|// issue #6334
DECL|method|testBase64DecodeWithExtraCharactersAfterPadding
specifier|public
name|void
name|testBase64DecodeWithExtraCharactersAfterPadding
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|plain
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
operator|+
literal|":"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|String
name|encoded
init|=
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|plain
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|assertValidBase64
argument_list|(
name|encoded
argument_list|,
name|plain
argument_list|)
expr_stmt|;
comment|// lets append some trash here, if the encoded string has been padded
name|char
name|lastChar
init|=
name|encoded
operator|.
name|charAt
argument_list|(
name|encoded
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastChar
operator|==
literal|'='
condition|)
block|{
name|assertInvalidBase64
argument_list|(
name|encoded
operator|+
name|randomAsciiOfLength
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertValidBase64
specifier|private
name|void
name|assertValidBase64
parameter_list|(
name|String
name|base64
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|decoded
init|=
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|base64
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|decoded
argument_list|,
name|is
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvalidBase64
specifier|private
name|void
name|assertInvalidBase64
parameter_list|(
name|String
name|base64
parameter_list|)
block|{
try|try
block|{
name|Base64
operator|.
name|decode
argument_list|(
name|base64
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected IOException to be thrown for string %s (len %d)"
argument_list|,
name|base64
argument_list|,
name|base64
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

