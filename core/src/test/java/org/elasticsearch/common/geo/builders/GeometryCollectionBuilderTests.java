begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo.builders
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomShapeGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|GeometryCollectionBuilderTests
specifier|public
class|class
name|GeometryCollectionBuilderTests
extends|extends
name|AbstractShapeBuilderTestCase
argument_list|<
name|GeometryCollectionBuilder
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestShapeBuilder
specifier|protected
name|GeometryCollectionBuilder
name|createTestShapeBuilder
parameter_list|()
block|{
name|GeometryCollectionBuilder
name|geometryCollection
init|=
operator|new
name|GeometryCollectionBuilder
argument_list|()
decl_stmt|;
name|int
name|shapes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shapes
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|PointBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|CircleBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|EnvelopeBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|LineStringBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|MultiLineStringBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|MultiPolygonBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|MultiPointBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|geometryCollection
operator|.
name|shape
argument_list|(
name|PolygonBuilderTests
operator|.
name|createRandomShape
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|geometryCollection
return|;
block|}
annotation|@
name|Override
DECL|method|createMutation
specifier|protected
name|GeometryCollectionBuilder
name|createMutation
parameter_list|(
name|GeometryCollectionBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mutate
argument_list|(
name|original
argument_list|)
return|;
block|}
DECL|method|mutate
specifier|static
name|GeometryCollectionBuilder
name|mutate
parameter_list|(
name|GeometryCollectionBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
name|GeometryCollectionBuilder
name|mutation
init|=
operator|(
name|GeometryCollectionBuilder
operator|)
name|copyShape
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|mutation
operator|.
name|shapes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|shapePosition
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|mutation
operator|.
name|shapes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ShapeBuilder
name|shapeToChange
init|=
name|mutation
operator|.
name|shapes
operator|.
name|get
argument_list|(
name|shapePosition
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|shapeToChange
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|POINT
case|:
name|shapeToChange
operator|=
name|PointBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|PointBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|CIRCLE
case|:
name|shapeToChange
operator|=
name|CircleBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|CircleBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENVELOPE
case|:
name|shapeToChange
operator|=
name|EnvelopeBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|EnvelopeBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINESTRING
case|:
name|shapeToChange
operator|=
name|LineStringBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|LineStringBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|MULTILINESTRING
case|:
name|shapeToChange
operator|=
name|MultiLineStringBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|MultiLineStringBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|MULTIPOLYGON
case|:
name|shapeToChange
operator|=
name|MultiPolygonBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|MultiPolygonBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|MULTIPOINT
case|:
name|shapeToChange
operator|=
name|MultiPointBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|MultiPointBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|POLYGON
case|:
name|shapeToChange
operator|=
name|PolygonBuilderTests
operator|.
name|mutate
argument_list|(
operator|(
name|PolygonBuilder
operator|)
name|shapeToChange
argument_list|)
expr_stmt|;
break|break;
case|case
name|GEOMETRYCOLLECTION
case|:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"GeometryCollection should not be nested inside each other"
argument_list|)
throw|;
block|}
name|mutation
operator|.
name|shapes
operator|.
name|set
argument_list|(
name|shapePosition
argument_list|,
name|shapeToChange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mutation
operator|.
name|shape
argument_list|(
name|RandomShapeGenerator
operator|.
name|createShape
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mutation
return|;
block|}
block|}
end_class

end_unit

