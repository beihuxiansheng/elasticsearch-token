begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo.builders
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|builders
operator|.
name|ShapeBuilder
operator|.
name|Orientation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomShapeGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|geo
operator|.
name|RandomShapeGenerator
operator|.
name|ShapeType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|MultiPolygonBuilderTests
specifier|public
class|class
name|MultiPolygonBuilderTests
extends|extends
name|AbstractShapeBuilderTestCase
argument_list|<
name|MultiPolygonBuilder
argument_list|>
block|{
DECL|field|PROTOTYPE
specifier|static
specifier|final
name|MultiPolygonBuilderTests
name|PROTOTYPE
init|=
operator|new
name|MultiPolygonBuilderTests
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createTestShapeBuilder
specifier|protected
name|MultiPolygonBuilder
name|createTestShapeBuilder
parameter_list|()
block|{
name|MultiPolygonBuilder
name|mpb
init|=
operator|new
name|MultiPolygonBuilder
argument_list|(
name|randomFrom
argument_list|(
name|Orientation
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|polys
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polys
condition|;
name|i
operator|++
control|)
block|{
name|PolygonBuilder
name|pgb
init|=
operator|(
name|PolygonBuilder
operator|)
name|RandomShapeGenerator
operator|.
name|createShape
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|ShapeType
operator|.
name|POLYGON
argument_list|)
decl_stmt|;
name|pgb
operator|.
name|orientation
operator|=
name|mpb
operator|.
name|orientation
expr_stmt|;
comment|// NORELEASE translated might have been changed by createShape, but won't survive xContent->Parse roundtrip
name|pgb
operator|.
name|shell
argument_list|()
operator|.
name|translated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mpb
operator|.
name|polygon
argument_list|(
name|pgb
argument_list|)
expr_stmt|;
block|}
return|return
name|mpb
return|;
block|}
annotation|@
name|Override
DECL|method|mutate
specifier|protected
name|MultiPolygonBuilder
name|mutate
parameter_list|(
name|MultiPolygonBuilder
name|original
parameter_list|)
throws|throws
name|IOException
block|{
name|MultiPolygonBuilder
name|mutation
init|=
name|copyShape
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// toggle orientation
name|mutation
operator|.
name|orientation
operator|=
operator|(
name|original
operator|.
name|orientation
operator|==
name|Orientation
operator|.
name|LEFT
condition|?
name|Orientation
operator|.
name|RIGHT
else|:
name|Orientation
operator|.
name|LEFT
operator|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|polyToChange
init|=
name|randomInt
argument_list|(
name|mutation
operator|.
name|polygons
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|PolygonBuilderTests
operator|.
name|mutatePolygonBuilder
argument_list|(
name|mutation
operator|.
name|polygons
argument_list|()
operator|.
name|get
argument_list|(
name|polyToChange
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mutation
return|;
block|}
block|}
end_class

end_unit

