begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link org.elasticsearch.common.geo.GeoHashUtils}  */
end_comment

begin_class
DECL|class|GeoHashTests
specifier|public
class|class
name|GeoHashTests
extends|extends
name|ESTestCase
block|{
DECL|method|testGeohashAsLongRoutines
specifier|public
name|void
name|testGeohashAsLongRoutines
parameter_list|()
block|{
specifier|final
name|GeoPoint
name|expected
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
specifier|final
name|GeoPoint
name|actual
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
comment|//Ensure that for all points at all supported levels of precision
comment|// that the long encoding of a geohash is compatible with its
comment|// String based counterpart
for|for
control|(
name|double
name|lat
init|=
operator|-
literal|90
init|;
name|lat
operator|<
literal|90
condition|;
name|lat
operator|++
control|)
block|{
for|for
control|(
name|double
name|lng
init|=
operator|-
literal|180
init|;
name|lng
operator|<
literal|180
condition|;
name|lng
operator|++
control|)
block|{
for|for
control|(
name|int
name|p
init|=
literal|1
init|;
name|p
operator|<=
literal|12
condition|;
name|p
operator|++
control|)
block|{
name|long
name|geoAsLong
init|=
name|GeoHashUtils
operator|.
name|longEncode
argument_list|(
name|lng
argument_list|,
name|lat
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// string encode from geohashlong encoded location
name|String
name|geohashFromLong
init|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|geoAsLong
argument_list|)
decl_stmt|;
comment|// string encode from full res lat lon
name|String
name|geohash
init|=
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|lng
argument_list|,
name|lat
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// ensure both strings are the same
name|assertEquals
argument_list|(
name|geohash
argument_list|,
name|geohashFromLong
argument_list|)
expr_stmt|;
comment|// decode from the full-res geohash string
name|expected
operator|.
name|resetFromGeoHash
argument_list|(
name|geohash
argument_list|)
expr_stmt|;
comment|// decode from the geohash encoded long
name|actual
operator|.
name|resetFromGeoHash
argument_list|(
name|geoAsLong
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testBboxFromHash
specifier|public
name|void
name|testBboxFromHash
parameter_list|()
block|{
name|String
name|hash
init|=
name|randomGeohash
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|int
name|level
init|=
name|hash
operator|.
name|length
argument_list|()
decl_stmt|;
name|Rectangle
name|bbox
init|=
name|GeoHashUtils
operator|.
name|bbox
argument_list|(
name|hash
argument_list|)
decl_stmt|;
comment|// check that the length is as expected
name|double
name|expectedLonDiff
init|=
literal|360.0
operator|/
operator|(
name|Math
operator|.
name|pow
argument_list|(
literal|8.0
argument_list|,
operator|(
name|level
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|)
operator|*
name|Math
operator|.
name|pow
argument_list|(
literal|4.0
argument_list|,
name|level
operator|/
literal|2
argument_list|)
operator|)
decl_stmt|;
name|double
name|expectedLatDiff
init|=
literal|180.0
operator|/
operator|(
name|Math
operator|.
name|pow
argument_list|(
literal|4.0
argument_list|,
operator|(
name|level
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|)
operator|*
name|Math
operator|.
name|pow
argument_list|(
literal|8.0
argument_list|,
name|level
operator|/
literal|2
argument_list|)
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLonDiff
argument_list|,
name|bbox
operator|.
name|maxLon
operator|-
name|bbox
operator|.
name|minLon
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLatDiff
argument_list|,
name|bbox
operator|.
name|maxLat
operator|-
name|bbox
operator|.
name|minLat
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hash
argument_list|,
name|GeoHashUtils
operator|.
name|stringEncode
argument_list|(
name|bbox
operator|.
name|minLon
argument_list|,
name|bbox
operator|.
name|minLat
argument_list|,
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

