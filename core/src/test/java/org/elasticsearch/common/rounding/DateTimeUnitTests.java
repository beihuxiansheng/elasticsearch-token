begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.rounding
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|WEEK_OF_WEEKYEAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|YEAR_OF_CENTURY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|QUARTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|MONTH_OF_YEAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|MINUTES_OF_HOUR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|DateTimeUnit
operator|.
name|SECOND_OF_MINUTE
import|;
end_import

begin_class
DECL|class|DateTimeUnitTests
specifier|public
class|class
name|DateTimeUnitTests
extends|extends
name|ESTestCase
block|{
comment|/**      * test that we don't accidentally change enum ids      */
DECL|method|testEnumIds
specifier|public
name|void
name|testEnumIds
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|WEEK_OF_WEEKYEAR
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WEEK_OF_WEEKYEAR
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|YEAR_OF_CENTURY
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YEAR_OF_CENTURY
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|QUARTER
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QUARTER
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|MONTH_OF_YEAR
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MONTH_OF_YEAR
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|DAY_OF_MONTH
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DAY_OF_MONTH
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|HOUR_OF_DAY
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HOUR_OF_DAY
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|MINUTES_OF_HOUR
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MINUTES_OF_HOUR
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|SECOND_OF_MINUTE
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SECOND_OF_MINUTE
argument_list|,
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsDayOrLonger
specifier|public
name|void
name|testIsDayOrLonger
parameter_list|()
block|{
for|for
control|(
name|DateTimeUnit
name|unit
range|:
name|DateTimeUnit
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|DateTimeUnit
operator|.
name|isDayOrLonger
argument_list|(
name|unit
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|unit
operator|==
name|DAY_OF_MONTH
operator|||
name|unit
operator|==
name|MONTH_OF_YEAR
operator|||
name|unit
operator|==
name|QUARTER
operator|||
name|unit
operator|==
name|YEAR_OF_CENTURY
operator|||
name|unit
operator|==
name|WEEK_OF_WEEKYEAR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

