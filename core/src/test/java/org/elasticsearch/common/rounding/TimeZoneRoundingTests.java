begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.rounding
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|Rounding
operator|.
name|TimeIntervalRounding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
operator|.
name|Rounding
operator|.
name|TimeUnitRounding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|TypeSafeMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TimeZoneRoundingTests
specifier|public
class|class
name|TimeZoneRoundingTests
extends|extends
name|ESTestCase
block|{
DECL|method|testUTCTimeUnitRounding
specifier|public
name|void
name|testUTCTimeUnitRounding
parameter_list|()
block|{
name|Rounding
name|tzRounding
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|MONTH_OF_YEAR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|UTC
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-01T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-01T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-03-01T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|WEEK_OF_WEEKYEAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2012-01-10T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2012-01-09T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2012-01-09T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2012-01-16T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUTCIntervalRounding
specifier|public
name|void
name|testUTCIntervalRounding
parameter_list|()
block|{
name|Rounding
name|tzRounding
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|UTC
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T12:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T12:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T12:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-04T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|48
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-05T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-05T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-05T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-05T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-07T00:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test TimeIntervalRounding, (interval&lt; 12h) with time zone shift      */
DECL|method|testTimeIntervalRounding
specifier|public
name|void
name|testTimeIntervalRounding
parameter_list|()
block|{
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Rounding
name|tzRounding
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T00:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-02T19:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-02T19:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T13:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T13:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T19:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test DayIntervalRounding, (interval&gt;= 12h) with time zone shift      */
DECL|method|testDayIntervalRounding
specifier|public
name|void
name|testDayIntervalRounding
parameter_list|()
block|{
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|8
argument_list|)
decl_stmt|;
name|Rounding
name|tzRounding
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T00:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-02T20:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-02T20:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T08:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T08:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T08:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T20:00:00.000Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDayRounding
specifier|public
name|void
name|testDayRounding
parameter_list|()
block|{
name|int
name|timezoneOffset
init|=
operator|-
literal|2
decl_stmt|;
name|Rounding
name|tzRounding
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
name|timezoneOffset
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0L
operator|-
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
operator|+
name|timezoneOffset
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
literal|0L
operator|-
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
operator|+
name|timezoneOffset
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0L
operator|-
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
name|timezoneOffset
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"-08:00"
argument_list|)
decl_stmt|;
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2012-04-01T04:15:30Z"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2012-03-31T08:00:00Z"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|MONTH_OF_YEAR
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2012-04-01T04:15:30Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2012-03-01T08:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// date in Feb-3rd, but still in Feb-2nd in -02:00 timezone
name|tz
operator|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"-02:00"
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-02T02:00:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-02T02:00:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// date in Feb-3rd, also in -02:00 timezone
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T02:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-04T02:00:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeRounding
specifier|public
name|void
name|testTimeRounding
parameter_list|()
block|{
comment|// hour unit
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|2
argument_list|)
decl_stmt|;
name|Rounding
name|tzRounding
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|1L
argument_list|)
operator|.
name|getMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:00:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T01:00:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeUnitRoundingDST
specifier|public
name|void
name|testTimeUnitRoundingDST
parameter_list|()
block|{
name|Rounding
name|tzRounding
decl_stmt|;
comment|// testing savings to non savings switch
name|DateTimeZone
name|cet
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|cet
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:01:01"
argument_list|,
name|cet
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:00:00+02:00"
argument_list|)
argument_list|,
name|cet
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:00:00"
argument_list|,
name|cet
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T02:00:00+02:00"
argument_list|)
argument_list|,
name|cet
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T02:00:00"
argument_list|,
name|cet
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T02:00:00+01:00"
argument_list|)
argument_list|,
name|cet
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing non savings to savings switch
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|cet
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T01:01:01"
argument_list|,
name|cet
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T01:00:00+01:00"
argument_list|)
argument_list|,
name|cet
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T01:00:00"
argument_list|,
name|cet
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T03:00:00"
argument_list|,
name|cet
argument_list|)
argument_list|,
name|cet
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T03:00:00"
argument_list|,
name|cet
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T04:00:00"
argument_list|,
name|cet
argument_list|)
argument_list|,
name|cet
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing non savings to savings switch (America/Chicago)
name|DateTimeZone
name|chg
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
decl_stmt|;
name|Rounding
name|tzRounding_utc
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:01:01"
argument_list|,
name|chg
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:00:00"
argument_list|,
name|chg
argument_list|)
argument_list|,
name|chg
argument_list|)
argument_list|)
expr_stmt|;
name|Rounding
name|tzRounding_chg
init|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|chg
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding_chg
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:01:01"
argument_list|,
name|chg
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:00:00"
argument_list|,
name|chg
argument_list|)
argument_list|,
name|chg
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing savings to non savings switch 2013 (America/Chicago)
name|assertThat
argument_list|(
name|tzRounding_utc
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:01:01"
argument_list|,
name|chg
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:00:00"
argument_list|,
name|chg
argument_list|)
argument_list|,
name|chg
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding_chg
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:01:01"
argument_list|,
name|chg
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:00:00"
argument_list|,
name|chg
argument_list|)
argument_list|,
name|chg
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing savings to non savings switch 2014 (America/Chicago)
name|assertThat
argument_list|(
name|tzRounding_utc
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:01:01"
argument_list|,
name|chg
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:00:00"
argument_list|,
name|chg
argument_list|)
argument_list|,
name|chg
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding_chg
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:01:01"
argument_list|,
name|chg
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:00:00"
argument_list|,
name|chg
argument_list|)
argument_list|,
name|chg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Randomized test on TimeUnitRounding. Test uses random      * {@link DateTimeUnit} and {@link DateTimeZone} and often (50% of the time)      * chooses test dates that are exactly on or close to offset changes (e.g.      * DST) in the chosen time zone.      *      * It rounds the test date down and up and performs various checks on the      * rounding unit interval that is defined by this. Assumptions tested are      * described in      * {@link #assertInterval(long, long, long, Rounding, DateTimeZone)}      */
DECL|method|testRoundingRandom
specifier|public
name|void
name|testRoundingRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|DateTimeUnit
name|timeUnit
init|=
name|randomTimeUnit
argument_list|()
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|randomDateTimeZone
argument_list|()
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeUnitRounding
argument_list|(
name|timeUnit
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|long
name|date
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
operator|%
operator|(
literal|2
operator|*
operator|(
name|long
operator|)
literal|10e11
operator|)
argument_list|)
decl_stmt|;
comment|// 1970-01-01T00:00:00Z - 2033-05-18T05:33:20.000+02:00
name|long
name|unitMillis
init|=
name|timeUnit
operator|.
name|field
argument_list|(
name|tz
argument_list|)
operator|.
name|getDurationField
argument_list|()
operator|.
name|getUnitMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|nastyDate
argument_list|(
name|date
argument_list|,
name|tz
argument_list|,
name|unitMillis
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|roundedDate
init|=
name|rounding
operator|.
name|round
argument_list|(
name|date
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nextRoundingValue
init|=
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|roundedDate
argument_list|)
decl_stmt|;
name|assertInterval
argument_list|(
name|roundedDate
argument_list|,
name|date
argument_list|,
name|nextRoundingValue
argument_list|,
name|rounding
argument_list|,
name|tz
argument_list|)
expr_stmt|;
comment|// check correct unit interval width for units smaller than a day, they should be fixed size except for transitions
if|if
condition|(
name|unitMillis
operator|<=
name|DateTimeConstants
operator|.
name|MILLIS_PER_DAY
condition|)
block|{
comment|// if the interval defined didn't cross timezone offset transition, it should cover unitMillis width
if|if
condition|(
name|tz
operator|.
name|getOffset
argument_list|(
name|roundedDate
operator|-
literal|1
argument_list|)
operator|==
name|tz
operator|.
name|getOffset
argument_list|(
name|nextRoundingValue
operator|+
literal|1
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"unit interval width not as expected for ["
operator|+
name|timeUnit
operator|+
literal|"], ["
operator|+
name|tz
operator|+
literal|"] at "
operator|+
operator|new
name|DateTime
argument_list|(
name|roundedDate
argument_list|)
argument_list|,
name|nextRoundingValue
operator|-
name|roundedDate
argument_list|,
name|equalTo
argument_list|(
name|unitMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * To be even more nasty, go to a transition in the selected time zone.      * In one third of the cases stay there, otherwise go half a unit back or forth      */
DECL|method|nastyDate
specifier|private
specifier|static
name|long
name|nastyDate
parameter_list|(
name|long
name|initialDate
parameter_list|,
name|DateTimeZone
name|timezone
parameter_list|,
name|long
name|unitMillis
parameter_list|)
block|{
name|long
name|date
init|=
name|timezone
operator|.
name|nextTransition
argument_list|(
name|initialDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|date
operator|+
operator|(
name|randomLong
argument_list|()
operator|%
name|unitMillis
operator|)
return|;
comment|// positive and negative offset possible
block|}
else|else
block|{
return|return
name|date
return|;
block|}
block|}
comment|/**      * test DST end with interval rounding      * CET: 25 October 2015, 03:00:00 clocks were turned backward 1 hour to 25 October 2015, 02:00:00 local standard time      */
DECL|method|testTimeIntervalCET_DST_End
specifier|public
name|void
name|testTimeIntervalCET_DST_End
parameter_list|()
block|{
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T01:55:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T01:40:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:15:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:35:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:20:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:55:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:40:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// after DST shift
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:15:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:00:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:35:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:20:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:55:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:40:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T03:15:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T03:00:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test DST start with interval rounding      * CET: 27 March 2016, 02:00:00 clocks were turned forward 1 hour to 27 March 2016, 03:00:00 local daylight time      */
DECL|method|testTimeIntervalCET_DST_Start
specifier|public
name|void
name|testTimeIntervalCET_DST_Start
parameter_list|()
block|{
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|tz
argument_list|)
decl_stmt|;
comment|// test DST start
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:55:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:40:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T02:00:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:15:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:35:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:20:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test DST start with offset not fitting interval, e.g. Asia/Kathmandu      * adding 15min on 1986-01-01T00:00:00 the interval from      * 1986-01-01T00:15:00+05:45 to 1986-01-01T00:20:00+05:45 to only be 5min      * long      */
DECL|method|testTimeInterval_Kathmandu_DST_Start
specifier|public
name|void
name|testTimeInterval_Kathmandu_DST_Start
parameter_list|()
block|{
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Asia/Kathmandu"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"1985-12-31T23:55:00+05:30"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"1985-12-31T23:40:00+05:30"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:16:00+05:45"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:15:00+05:45"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:15:00+05:45"
argument_list|)
operator|-
name|time
argument_list|(
literal|"1985-12-31T23:40:00+05:30"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:26:00+05:45"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:20:00+05:45"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:20:00+05:45"
argument_list|)
operator|-
name|time
argument_list|(
literal|"1986-01-01T00:15:00+05:45"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:46:00+05:45"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:40:00+05:45"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T00:40:00+05:45"
argument_list|)
operator|-
name|time
argument_list|(
literal|"1986-01-01T00:20:00+05:45"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Special test for intervals that don't fit evenly into rounding interval.      * In this case, when interval crosses DST transition point, rounding in local      * time can land in a DST gap which results in wrong UTC rounding values.      */
DECL|method|testIntervalRounding_NotDivisibleInteval
specifier|public
name|void
name|testIntervalRounding_NotDivisibleInteval
parameter_list|()
block|{
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|14
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:41:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:30:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:51:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:44:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:59:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:58:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:05:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:12:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:08:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:25:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:22:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:39:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T03:36:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for half day rounding intervals scrossing DST.      */
DECL|method|testIntervalRounding_HalfDay_DST
specifier|public
name|void
name|testIntervalRounding_HalfDay_DST
parameter_list|()
block|{
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-26T01:00:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-26T00:00:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-26T13:00:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-26T12:00:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T01:00:00+01:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T00:00:00+01:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T13:00:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-27T12:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-28T01:00:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-28T00:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2016-03-28T13:00:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2016-03-28T12:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * randomized test on {@link TimeIntervalRounding} with random interval and time zone offsets      */
DECL|method|testIntervalRoundingRandom
specifier|public
name|void
name|testIntervalRoundingRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|TimeUnit
name|unit
init|=
name|randomFrom
argument_list|(
operator|new
name|TimeUnit
index|[]
block|{
name|TimeUnit
operator|.
name|MINUTES
block|,
name|TimeUnit
operator|.
name|HOURS
block|,
name|TimeUnit
operator|.
name|DAYS
block|}
argument_list|)
decl_stmt|;
name|long
name|interval
init|=
name|unit
operator|.
name|toMillis
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|365
argument_list|)
argument_list|)
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|randomDateTimeZone
argument_list|()
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|long
name|mainDate
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
operator|%
operator|(
literal|2
operator|*
operator|(
name|long
operator|)
literal|10e11
operator|)
argument_list|)
decl_stmt|;
comment|// 1970-01-01T00:00:00Z - 2033-05-18T05:33:20.000+02:00
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mainDate
operator|=
name|nastyDate
argument_list|(
name|mainDate
argument_list|,
name|tz
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
comment|// check two intervals around date
name|long
name|previousRoundedValue
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|long
name|date
init|=
name|mainDate
operator|-
literal|2
operator|*
name|interval
init|;
name|date
operator|<
name|mainDate
operator|+
literal|2
operator|*
name|interval
condition|;
name|date
operator|+=
name|interval
operator|/
literal|2
control|)
block|{
try|try
block|{
specifier|final
name|long
name|roundedDate
init|=
name|rounding
operator|.
name|round
argument_list|(
name|date
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nextRoundingValue
init|=
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|roundedDate
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Rounding should be idempotent"
argument_list|,
name|roundedDate
argument_list|,
name|equalTo
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|roundedDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Rounded value smaller or equal than unrounded"
argument_list|,
name|roundedDate
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Values smaller than rounded value should round further down"
argument_list|,
name|rounding
operator|.
name|round
argument_list|(
name|roundedDate
operator|-
literal|1
argument_list|)
argument_list|,
name|lessThan
argument_list|(
name|roundedDate
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Rounding should be>= previous rounding value"
argument_list|,
name|roundedDate
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|previousRoundedValue
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tz
operator|.
name|isFixed
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
literal|"NextRounding value should be greater than date"
argument_list|,
name|nextRoundingValue
argument_list|,
name|greaterThan
argument_list|(
name|roundedDate
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NextRounding value should be interval from rounded value"
argument_list|,
name|nextRoundingValue
operator|-
name|roundedDate
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NextRounding value should be a rounded date"
argument_list|,
name|nextRoundingValue
argument_list|,
name|equalTo
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|nextRoundingValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previousRoundedValue
operator|=
name|roundedDate
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Rounding error at {}, timezone {}, interval: {},"
argument_list|,
operator|new
name|DateTime
argument_list|(
name|date
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|,
name|interval
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Test that rounded values are always greater or equal to last rounded value if date is increasing.      * The example covers an interval around 2011-10-30T02:10:00+01:00, time zone CET, interval: 2700000ms      */
DECL|method|testIntervalRoundingMonotonic_CET
specifier|public
name|void
name|testIntervalRoundingMonotonic_CET
parameter_list|()
block|{
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|45
argument_list|)
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|expectedDates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first date is the date to be rounded, second the expected result
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T01:40:00.000+02:00"
argument_list|,
literal|"2011-10-30T01:30:00.000+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T02:02:30.000+02:00"
argument_list|,
literal|"2011-10-30T01:30:00.000+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T02:25:00.000+02:00"
argument_list|,
literal|"2011-10-30T02:15:00.000+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T02:47:30.000+02:00"
argument_list|,
literal|"2011-10-30T02:15:00.000+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T02:10:00.000+01:00"
argument_list|,
literal|"2011-10-30T02:15:00.000+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T02:32:30.000+01:00"
argument_list|,
literal|"2011-10-30T02:15:00.000+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T02:55:00.000+01:00"
argument_list|,
literal|"2011-10-30T02:15:00.000+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedDates
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|"2011-10-30T03:17:30.000+01:00"
argument_list|,
literal|"2011-10-30T03:00:00.000+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|previousDate
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dates
range|:
name|expectedDates
control|)
block|{
specifier|final
name|long
name|roundedDate
init|=
name|rounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
name|dates
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|roundedDate
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
name|dates
operator|.
name|v2
argument_list|()
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|roundedDate
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|previousDate
argument_list|)
argument_list|)
expr_stmt|;
name|previousDate
operator|=
name|roundedDate
expr_stmt|;
block|}
comment|// here's what this means for interval widths
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|45
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2011-10-30T02:15:00.000+02:00"
argument_list|)
operator|-
name|time
argument_list|(
literal|"2011-10-30T01:30:00.000+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|60
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2011-10-30T02:15:00.000+01:00"
argument_list|)
operator|-
name|time
argument_list|(
literal|"2011-10-30T02:15:00.000+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|45
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2011-10-30T03:00:00.000+01:00"
argument_list|)
operator|-
name|time
argument_list|(
literal|"2011-10-30T02:15:00.000+01:00"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * special test for DST switch from #9491      */
DECL|method|testAmbiguousHoursAfterDSTSwitch
specifier|public
name|void
name|testAmbiguousHoursAfterDSTSwitch
parameter_list|()
block|{
name|Rounding
name|tzRounding
decl_stmt|;
specifier|final
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Asia/Jerusalem"
argument_list|)
decl_stmt|;
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T00:30:00+03:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T00:00:00+03:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:30:00+03:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:00:00+03:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// the utc date for "2014-10-25T03:00:00+03:00" and "2014-10-25T03:00:00+02:00" is the same, local time turns back 1h here
name|assertThat
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T03:00:00+03:00"
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T02:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:30:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T02:30:00+02:00"
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T02:00:00+02:00"
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// Day interval
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T00:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// DST on
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-08-11T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-08-11T00:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// Day of switching DST on -> off
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T00:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// Day of switching DST off -> on
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-03-27T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2015-03-27T00:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// Month interval
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|MONTH_OF_YEAR
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-11-01T00:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// DST on
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-10T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-10-01T00:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// Year interval
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|YEAR_OF_CENTURY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|time
argument_list|(
literal|"2014-01-01T00:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two timestamps in same year and different timezone offset ("Double buckets" issue - #9491)
name|tzRounding
operator|=
name|Rounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|YEAR_OF_CENTURY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|tz
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-08-11T17:00:00"
argument_list|,
name|tz
argument_list|)
argument_list|)
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test for #10025, strict local to UTC conversion can cause joda exceptions      * on DST start      */
DECL|method|testLenientConversionDST
specifier|public
name|void
name|testLenientConversionDST
parameter_list|()
block|{
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Sao_Paulo"
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|time
argument_list|(
literal|"2014-10-18T20:50:00.000"
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|time
argument_list|(
literal|"2014-10-19T01:00:00.000"
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|Rounding
name|tzRounding
init|=
operator|new
name|Rounding
operator|.
name|TimeUnitRounding
argument_list|(
name|DateTimeUnit
operator|.
name|MINUTES_OF_HOUR
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|Rounding
name|dayTzRounding
init|=
operator|new
name|Rounding
operator|.
name|TimeIntervalRounding
argument_list|(
literal|60000
argument_list|,
name|tz
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|time
init|=
name|start
init|;
name|time
operator|<
name|end
condition|;
name|time
operator|=
name|time
operator|+
literal|60000
control|)
block|{
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dayTzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEdgeCasesTransition
specifier|public
name|void
name|testEdgeCasesTransition
parameter_list|()
block|{
block|{
comment|// standard +/-1 hour DST transition, CET
name|DateTimeUnit
name|timeUnit
init|=
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeUnitRounding
argument_list|(
name|timeUnit
argument_list|,
name|tz
argument_list|)
decl_stmt|;
comment|// 29 Mar 2015 - Daylight Saving Time Started
comment|// at 02:00:00 clocks were turned forward 1 hour to 03:00:00
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-03-29T00:00:00.000+01:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-03-29T01:00:00.000+01:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-03-29T01:00:00.000+01:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-03-29T03:00:00.000+02:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-03-29T03:00:00.000+02:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-03-29T04:00:00.000+02:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
comment|// 25 Oct 2015 - Daylight Saving Time Ended
comment|// at 03:00:00 clocks were turned backward 1 hour to 02:00:00
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T01:00:00.000+02:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-10-25T02:00:00.000+02:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:00:00.000+02:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-10-25T02:00:00.000+01:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-10-25T02:00:00.000+01:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-10-25T03:00:00.000+01:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
block|{
comment|// time zone "Asia/Kathmandu"
comment|// 1 Jan 1986 - Time Zone Change (IST â NPT), at 00:00:00 clocks were turned forward 00:15 minutes
comment|//
comment|// hour rounding is stable before 1985-12-31T23:00:00.000 and after 1986-01-01T01:00:00.000+05:45
comment|// the interval between is 105 minutes long because the hour after transition starts at 00:15
comment|// which is not a round value for hourly rounding
name|DateTimeUnit
name|timeUnit
init|=
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Asia/Kathmandu"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeUnitRounding
argument_list|(
name|timeUnit
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1985-12-31T22:00:00.000+05:30"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1985-12-31T23:00:00.000+05:30"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1985-12-31T23:00:00.000+05:30"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1986-01-01T01:00:00.000+05:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|105
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1986-01-01T01:00:00.000+05:45"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1986-01-01T02:00:00.000+05:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
block|{
comment|// time zone "Australia/Lord_Howe"
comment|// 3 Mar 1991 - Daylight Saving Time Ended
comment|// at 02:00:00 clocks were turned backward 0:30 hours to Sunday, 3 March 1991, 01:30:00
name|DateTimeUnit
name|timeUnit
init|=
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Australia/Lord_Howe"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeUnitRounding
argument_list|(
name|timeUnit
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1991-03-03T00:00:00.000+11:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1991-03-03T01:00:00.000+11:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1991-03-03T01:00:00.000+11:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1991-03-03T02:00:00.000+10:30"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|90
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1991-03-03T02:00:00.000+10:30"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1991-03-03T03:00:00.000+10:30"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
comment|// 27 Oct 1991 - Daylight Saving Time Started
comment|// at 02:00:00 clocks were turned forward 0:30 hours to 02:30:00
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1991-10-27T00:00:00.000+10:30"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1991-10-27T01:00:00.000+10:30"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
comment|// the interval containing the switch time is 90 minutes long
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1991-10-27T01:00:00.000+10:30"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1991-10-27T03:00:00.000+11:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|90
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"1991-10-27T03:00:00.000+11:00"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"1991-10-27T04:00:00.000+11:00"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
block|{
comment|// time zone "Pacific/Chatham"
comment|// 5 Apr 2015 - Daylight Saving Time Ended
comment|// at 03:45:00 clocks were turned backward 1 hour to 02:45:00
name|DateTimeUnit
name|timeUnit
init|=
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
decl_stmt|;
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Pacific/Chatham"
argument_list|)
decl_stmt|;
name|Rounding
name|rounding
init|=
operator|new
name|Rounding
operator|.
name|TimeUnitRounding
argument_list|(
name|timeUnit
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-04-05T02:00:00.000+13:45"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-04-05T03:00:00.000+13:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-04-05T03:00:00.000+13:45"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-04-05T03:00:00.000+12:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-04-05T03:00:00.000+12:45"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-04-05T04:00:00.000+12:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
comment|// 27 Sep 2015 - Daylight Saving Time Started
comment|// at 02:45:00 clocks were turned forward 1 hour to 03:45:00
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-09-27T01:00:00.000+12:45"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-09-27T02:00:00.000+12:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-09-27T02:00:00.000+12:45"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-09-27T04:00:00.000+13:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertInterval
argument_list|(
name|time
argument_list|(
literal|"2015-09-27T04:00:00.000+13:45"
argument_list|)
argument_list|,
name|time
argument_list|(
literal|"2015-09-27T05:00:00.000+13:45"
argument_list|)
argument_list|,
name|rounding
argument_list|,
literal|60
argument_list|,
name|tz
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertInterval
specifier|private
specifier|static
name|void
name|assertInterval
parameter_list|(
name|long
name|rounded
parameter_list|,
name|long
name|nextRoundingValue
parameter_list|,
name|Rounding
name|rounding
parameter_list|,
name|int
name|minutes
parameter_list|,
name|DateTimeZone
name|tz
parameter_list|)
block|{
name|assertInterval
argument_list|(
name|rounded
argument_list|,
name|dateBetween
argument_list|(
name|rounded
argument_list|,
name|nextRoundingValue
argument_list|)
argument_list|,
name|nextRoundingValue
argument_list|,
name|rounding
argument_list|,
name|tz
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DateTimeConstants
operator|.
name|MILLIS_PER_MINUTE
operator|*
name|minutes
argument_list|,
name|nextRoundingValue
operator|-
name|rounded
argument_list|)
expr_stmt|;
block|}
comment|/**      * perform a number on assertions and checks on {@link TimeUnitRounding} intervals      * @param rounded the expected low end of the rounding interval      * @param unrounded a date in the interval to be checked for rounding      * @param nextRoundingValue the expected upper end of the rounding interval      * @param rounding the rounding instance      */
DECL|method|assertInterval
specifier|private
specifier|static
name|void
name|assertInterval
parameter_list|(
name|long
name|rounded
parameter_list|,
name|long
name|unrounded
parameter_list|,
name|long
name|nextRoundingValue
parameter_list|,
name|Rounding
name|rounding
parameter_list|,
name|DateTimeZone
name|tz
parameter_list|)
block|{
assert|assert
name|rounded
operator|<=
name|unrounded
operator|&&
name|unrounded
operator|<=
name|nextRoundingValue
assert|;
name|assertThat
argument_list|(
literal|"rounding should be idempotent "
argument_list|,
name|rounding
operator|.
name|round
argument_list|(
name|rounded
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|rounded
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"rounded value smaller or equal than unrounded"
operator|+
name|rounding
argument_list|,
name|rounded
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|unrounded
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"values less than rounded should round further down"
operator|+
name|rounding
argument_list|,
name|rounding
operator|.
name|round
argument_list|(
name|rounded
operator|-
literal|1
argument_list|)
argument_list|,
name|lessThan
argument_list|(
name|rounded
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"nextRounding value should be greater than date"
operator|+
name|rounding
argument_list|,
name|nextRoundingValue
argument_list|,
name|greaterThan
argument_list|(
name|unrounded
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"nextRounding value should be a rounded date"
argument_list|,
name|rounding
operator|.
name|round
argument_list|(
name|nextRoundingValue
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|nextRoundingValue
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"values above nextRounding should round down there"
argument_list|,
name|rounding
operator|.
name|round
argument_list|(
name|nextRoundingValue
operator|+
literal|1
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|nextRoundingValue
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|dateBetween
init|=
name|dateBetween
argument_list|(
name|rounded
argument_list|,
name|nextRoundingValue
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"dateBetween should round down to roundedDate"
argument_list|,
name|rounding
operator|.
name|round
argument_list|(
name|dateBetween
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|rounded
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"dateBetween should round up to nextRoundingValue"
argument_list|,
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|dateBetween
argument_list|)
argument_list|,
name|isDate
argument_list|(
name|nextRoundingValue
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|dateBetween
specifier|private
specifier|static
name|long
name|dateBetween
parameter_list|(
name|long
name|lower
parameter_list|,
name|long
name|upper
parameter_list|)
block|{
name|long
name|dateBetween
init|=
name|lower
operator|+
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|randomLong
argument_list|()
operator|%
operator|(
name|upper
operator|-
name|lower
operator|)
operator|)
argument_list|)
decl_stmt|;
assert|assert
name|lower
operator|<=
name|dateBetween
operator|&&
name|dateBetween
operator|<=
name|upper
assert|;
return|return
name|dateBetween
return|;
block|}
DECL|method|randomTimeUnit
specifier|private
specifier|static
name|DateTimeUnit
name|randomTimeUnit
parameter_list|()
block|{
name|byte
name|id
init|=
operator|(
name|byte
operator|)
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
decl_stmt|;
return|return
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|time
specifier|private
specifier|static
name|long
name|time
parameter_list|(
name|String
name|time
parameter_list|)
block|{
return|return
name|time
argument_list|(
name|time
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
DECL|method|time
specifier|private
specifier|static
name|long
name|time
parameter_list|(
name|String
name|time
parameter_list|,
name|DateTimeZone
name|zone
parameter_list|)
block|{
return|return
name|ISODateTimeFormat
operator|.
name|dateOptionalTimeParser
argument_list|()
operator|.
name|withZone
argument_list|(
name|zone
argument_list|)
operator|.
name|parseMillis
argument_list|(
name|time
argument_list|)
return|;
block|}
DECL|method|isDate
specifier|private
specifier|static
name|Matcher
argument_list|<
name|Long
argument_list|>
name|isDate
parameter_list|(
specifier|final
name|long
name|expected
parameter_list|,
name|DateTimeZone
name|tz
parameter_list|)
block|{
return|return
operator|new
name|TypeSafeMatcher
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matchesSafely
parameter_list|(
specifier|final
name|Long
name|item
parameter_list|)
block|{
return|return
name|expected
operator|==
name|item
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"Expected: "
operator|+
operator|new
name|DateTime
argument_list|(
name|expected
argument_list|,
name|tz
argument_list|)
operator|+
literal|"Â ["
operator|+
name|expected
operator|+
literal|"] "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|describeMismatchSafely
parameter_list|(
specifier|final
name|Long
name|actual
parameter_list|,
specifier|final
name|Description
name|mismatchDescription
parameter_list|)
block|{
name|mismatchDescription
operator|.
name|appendText
argument_list|(
literal|" was "
argument_list|)
operator|.
name|appendValue
argument_list|(
operator|new
name|DateTime
argument_list|(
name|actual
argument_list|,
name|tz
argument_list|)
operator|+
literal|"Â ["
operator|+
name|actual
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

