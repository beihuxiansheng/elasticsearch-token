begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.rounding
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|rounding
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TimeZoneRoundingTests
specifier|public
class|class
name|TimeZoneRoundingTests
extends|extends
name|ESTestCase
block|{
DECL|field|JERUSALEM_TIMEZONE
specifier|final
specifier|static
name|DateTimeZone
name|JERUSALEM_TIMEZONE
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"Asia/Jerusalem"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testUTCTimeUnitRounding
specifier|public
name|void
name|testUTCTimeUnitRounding
parameter_list|()
block|{
name|Rounding
name|tzRounding
init|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|MONTH_OF_YEAR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-01T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-01T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-03-01T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|WEEK_OF_WEEKYEAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2012-01-10T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2012-01-09T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2012-01-09T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2012-01-16T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|WEEK_OF_WEEKYEAR
argument_list|)
operator|.
name|offset
argument_list|(
operator|-
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2012-01-10T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2012-01-08T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2012-01-08T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2012-01-15T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUTCIntervalRounding
specifier|public
name|void
name|testUTCIntervalRounding
parameter_list|()
block|{
name|Rounding
name|tzRounding
init|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|roundKey
init|=
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|roundKey
argument_list|,
name|equalTo
argument_list|(
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|valueForKey
argument_list|(
name|roundKey
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T12:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T12:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T12:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-04T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|48
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-05T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-05T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-05T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-05T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-07T00:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test TimeIntervalTimeZoneRounding, (interval&lt; 12h) with time zone shift      */
annotation|@
name|Test
DECL|method|testTimeIntervalTimeZoneRounding
specifier|public
name|void
name|testTimeIntervalTimeZoneRounding
parameter_list|()
block|{
name|Rounding
name|tzRounding
init|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T19:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|roundKey
init|=
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:01:01"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|roundKey
argument_list|,
name|equalTo
argument_list|(
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T19:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|valueForKey
argument_list|(
name|roundKey
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T19:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T19:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T13:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T13:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T19:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test DayIntervalTimeZoneRounding, (interval&gt;= 12h) with time zone shift      */
annotation|@
name|Test
DECL|method|testDayIntervalTimeZoneRounding
specifier|public
name|void
name|testDayIntervalTimeZoneRounding
parameter_list|()
block|{
name|Rounding
name|tzRounding
init|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|8
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T20:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|roundKey
init|=
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T00:01:01"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|roundKey
argument_list|,
name|equalTo
argument_list|(
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T20:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|valueForKey
argument_list|(
name|roundKey
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T20:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T20:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T08:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T13:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T08:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T08:00:00.000Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T20:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDayTimeZoneRounding
specifier|public
name|void
name|testDayTimeZoneRounding
parameter_list|()
block|{
name|int
name|timezoneOffset
init|=
operator|-
literal|2
decl_stmt|;
name|Rounding
name|tzRounding
init|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
name|timezoneOffset
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0l
operator|-
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
operator|+
name|timezoneOffset
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
literal|0l
operator|-
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
operator|+
name|timezoneOffset
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0l
operator|-
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
name|timezoneOffset
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"-08:00"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2012-04-01T04:15:30Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2012-03-31T08:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toUTCDateString
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2012-03-31T08:00:00Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|toUTCDateString
argument_list|(
name|utc
argument_list|(
literal|"2012-04-01T08:0:00Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|MONTH_OF_YEAR
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"-08:00"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2012-04-01T04:15:30Z"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2012-03-01T08:00:00Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toUTCDateString
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2012-03-01T08:00:00Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|toUTCDateString
argument_list|(
name|utc
argument_list|(
literal|"2012-04-01T08:0:00Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// date in Feb-3rd, but still in Feb-2nd in -02:00 timezone
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"-02:00"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T02:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|roundKey
init|=
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|roundKey
argument_list|,
name|equalTo
argument_list|(
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T02:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|valueForKey
argument_list|(
name|roundKey
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T02:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-02T02:00:00"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// date in Feb-3rd, also in -02:00 timezone
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"-02:00"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|roundKey
operator|=
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:01:01"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|roundKey
argument_list|,
name|equalTo
argument_list|(
name|tzRounding
operator|.
name|roundKey
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|valueForKey
argument_list|(
name|roundKey
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:00:00.000Z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-04T02:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeTimeZoneRounding
specifier|public
name|void
name|testTimeTimeZoneRounding
parameter_list|()
block|{
comment|// hour unit
name|Rounding
name|tzRounding
init|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
literal|0l
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|1l
argument_list|)
operator|.
name|getMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:01:01"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T01:00:00"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|utc
argument_list|(
literal|"2009-02-03T02:00:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeUnitRoundingDST
specifier|public
name|void
name|testTimeUnitRoundingDST
parameter_list|()
block|{
name|Rounding
name|tzRounding
decl_stmt|;
comment|// testing savings to non savings switch
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T01:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing non savings to savings switch
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T01:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T01:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T01:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-03-30T01:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing non savings to savings switch (America/Chicago)
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-03-09T03:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing savings to non savings switch 2013 (America/Chicago)
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2013-11-03T06:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing savings to non savings switch 2014 (America/Chicago)
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:01:01"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-11-02T06:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * randomized test on TimeUnitRounding with random time units and time zone offsets      */
annotation|@
name|Test
DECL|method|testTimeZoneRoundingRandom
specifier|public
name|void
name|testTimeZoneRoundingRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|DateTimeUnit
name|timeUnit
init|=
name|randomTimeUnit
argument_list|()
decl_stmt|;
name|TimeZoneRounding
name|rounding
decl_stmt|;
name|int
name|timezoneOffset
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|23
argument_list|,
literal|23
argument_list|)
decl_stmt|;
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeUnitRounding
argument_list|(
name|timeUnit
argument_list|,
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
name|timezoneOffset
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|date
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
operator|%
operator|(
operator|(
name|long
operator|)
literal|10e11
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|roundedDate
init|=
name|rounding
operator|.
name|round
argument_list|(
name|date
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nextRoundingValue
init|=
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|roundedDate
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Rounding should be idempotent"
argument_list|,
name|roundedDate
argument_list|,
name|equalTo
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|roundedDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Rounded value smaller or equal than unrounded, regardless of timezone"
argument_list|,
name|roundedDate
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NextRounding value should be greater than date"
argument_list|,
name|nextRoundingValue
argument_list|,
name|greaterThan
argument_list|(
name|roundedDate
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NextRounding value should be a rounded date"
argument_list|,
name|nextRoundingValue
argument_list|,
name|equalTo
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|nextRoundingValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * randomized test on TimeIntervalRounding with random interval and time zone offsets      */
annotation|@
name|Test
DECL|method|testIntervalRoundingRandom
specifier|public
name|void
name|testIntervalRoundingRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
comment|// max random interval is a year, can be negative
name|long
name|interval
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
operator|%
operator|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|365
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|TimeZoneRounding
name|rounding
decl_stmt|;
name|int
name|timezoneOffset
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|23
argument_list|,
literal|23
argument_list|)
decl_stmt|;
name|rounding
operator|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeIntervalRounding
argument_list|(
name|interval
argument_list|,
name|DateTimeZone
operator|.
name|forOffsetHours
argument_list|(
name|timezoneOffset
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|date
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
operator|%
operator|(
operator|(
name|long
operator|)
literal|10e11
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|roundedDate
init|=
name|rounding
operator|.
name|round
argument_list|(
name|date
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nextRoundingValue
init|=
name|rounding
operator|.
name|nextRoundingValue
argument_list|(
name|roundedDate
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Rounding should be idempotent"
argument_list|,
name|roundedDate
argument_list|,
name|equalTo
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|roundedDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Rounded value smaller or equal than unrounded, regardless of timezone"
argument_list|,
name|roundedDate
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NextRounding value should be greater than date"
argument_list|,
name|nextRoundingValue
argument_list|,
name|greaterThan
argument_list|(
name|roundedDate
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NextRounding value should be interval from rounded value"
argument_list|,
name|nextRoundingValue
operator|-
name|roundedDate
argument_list|,
name|equalTo
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NextRounding value should be a rounded date"
argument_list|,
name|nextRoundingValue
argument_list|,
name|equalTo
argument_list|(
name|rounding
operator|.
name|round
argument_list|(
name|nextRoundingValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * special test for DST switch from #9491      */
annotation|@
name|Test
DECL|method|testAmbiguousHoursAfterDSTSwitch
specifier|public
name|void
name|testAmbiguousHoursAfterDSTSwitch
parameter_list|()
block|{
name|Rounding
name|tzRounding
decl_stmt|;
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|JERUSALEM_TIMEZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Both timestamps "2014-10-25T22:30:00Z" and "2014-10-25T23:30:00Z" are "2014-10-26T01:30:00" in local time because
comment|// of DST switch between them. This test checks that they are both returned to their correct UTC time after rounding.
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-25T22:30:00"
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-10-25T22:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-25T23:30:00"
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-10-25T23:00:00"
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Day interval
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|.
name|timeZone
argument_list|(
name|JERUSALEM_TIMEZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T00:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// DST on
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-08-11T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-08-11T00:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Day of switching DST on -> off
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-10-26T00:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Day of switching DST off -> on
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2015-03-27T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2015-03-27T00:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Month interval
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|MONTH_OF_YEAR
argument_list|)
operator|.
name|timeZone
argument_list|(
name|JERUSALEM_TIMEZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-11-01T00:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// DST on
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-10-10T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-10-01T00:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Year interval
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|YEAR_OF_CENTURY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|JERUSALEM_TIMEZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|time
argument_list|(
literal|"2014-01-01T00:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two timestamps in same year and different timezone offset ("Double buckets" issue - #9491)
name|tzRounding
operator|=
name|TimeZoneRounding
operator|.
name|builder
argument_list|(
name|DateTimeUnit
operator|.
name|YEAR_OF_CENTURY
argument_list|)
operator|.
name|timeZone
argument_list|(
name|JERUSALEM_TIMEZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-11-11T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|tzRounding
operator|.
name|round
argument_list|(
name|time
argument_list|(
literal|"2014-08-11T17:00:00"
argument_list|,
name|JERUSALEM_TIMEZONE
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test for #10025, strict local to UTC conversion can cause joda exceptions      * on DST start      */
annotation|@
name|Test
DECL|method|testLenientConversionDST
specifier|public
name|void
name|testLenientConversionDST
parameter_list|()
block|{
name|DateTimeZone
name|tz
init|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"America/Sao_Paulo"
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|time
argument_list|(
literal|"2014-10-18T20:50:00.000"
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|time
argument_list|(
literal|"2014-10-19T01:00:00.000"
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|Rounding
name|tzRounding
init|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeUnitRounding
argument_list|(
name|DateTimeUnit
operator|.
name|MINUTES_OF_HOUR
argument_list|,
name|tz
argument_list|)
decl_stmt|;
name|Rounding
name|dayTzRounding
init|=
operator|new
name|TimeZoneRounding
operator|.
name|TimeIntervalRounding
argument_list|(
literal|60000
argument_list|,
name|tz
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|time
init|=
name|start
init|;
name|time
operator|<
name|end
condition|;
name|time
operator|=
name|time
operator|+
literal|60000
control|)
block|{
name|assertThat
argument_list|(
name|tzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dayTzRounding
operator|.
name|nextRoundingValue
argument_list|(
name|time
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomTimeUnit
specifier|private
name|DateTimeUnit
name|randomTimeUnit
parameter_list|()
block|{
name|byte
name|id
init|=
operator|(
name|byte
operator|)
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
decl_stmt|;
return|return
name|DateTimeUnit
operator|.
name|resolve
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|toUTCDateString
specifier|private
name|String
name|toUTCDateString
parameter_list|(
name|long
name|time
parameter_list|)
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|time
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|utc
specifier|private
name|long
name|utc
parameter_list|(
name|String
name|time
parameter_list|)
block|{
return|return
name|time
argument_list|(
name|time
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
DECL|method|time
specifier|private
name|long
name|time
parameter_list|(
name|String
name|time
parameter_list|,
name|DateTimeZone
name|zone
parameter_list|)
block|{
return|return
name|ISODateTimeFormat
operator|.
name|dateOptionalTimeParser
argument_list|()
operator|.
name|withZone
argument_list|(
name|zone
argument_list|)
operator|.
name|parseMillis
argument_list|(
name|time
argument_list|)
return|;
block|}
block|}
end_class

end_unit

