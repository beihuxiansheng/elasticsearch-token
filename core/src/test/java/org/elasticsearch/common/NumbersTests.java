begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
DECL|class|NumbersTests
specifier|public
class|class
name|NumbersTests
extends|extends
name|ESTestCase
block|{
DECL|method|testToLongExact
specifier|public
name|void
name|testToLongExact
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
literal|3d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
literal|3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
literal|3.1d
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Infinity is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
literal|3.1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
operator|new
name|AtomicInteger
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not supported
name|assertEquals
argument_list|(
literal|"Cannot check whether [3] of class [java.util.concurrent.atomic.AtomicInteger] is actually a long"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToIntExact
specifier|public
name|void
name|testToIntExact
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
literal|3d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
literal|3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toIntExact
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toIntExact
argument_list|(
literal|3.1d
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Infinity is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toIntExact
argument_list|(
literal|3.1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ArithmeticException
name|ae
init|=
name|expectThrows
argument_list|(
name|ArithmeticException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toIntExact
argument_list|(
literal|1L
operator|<<
literal|40
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"integer overflow"
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toIntExact
argument_list|(
operator|new
name|AtomicInteger
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not supported
name|assertEquals
argument_list|(
literal|"Cannot check whether [3] of class [java.util.concurrent.atomic.AtomicInteger] is actually a long"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToShortExact
specifier|public
name|void
name|testToShortExact
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
literal|3d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
literal|3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toShortExact
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toShortExact
argument_list|(
literal|3.1d
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Infinity is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toShortExact
argument_list|(
literal|3.1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ArithmeticException
name|ae
init|=
name|expectThrows
argument_list|(
name|ArithmeticException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toShortExact
argument_list|(
literal|100000
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"short overflow: "
operator|+
literal|100000
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toShortExact
argument_list|(
operator|new
name|AtomicInteger
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not supported
name|assertEquals
argument_list|(
literal|"Cannot check whether [3] of class [java.util.concurrent.atomic.AtomicInteger] is actually a long"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToByteExact
specifier|public
name|void
name|testToByteExact
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
literal|3d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
literal|3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|Numbers
operator|.
name|toByteExact
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toByteExact
argument_list|(
literal|3.1d
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toLongExact
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Infinity is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toByteExact
argument_list|(
literal|3.1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3.1 is not an integer value"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ArithmeticException
name|ae
init|=
name|expectThrows
argument_list|(
name|ArithmeticException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toByteExact
argument_list|(
literal|300
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"byte overflow: "
operator|+
literal|300
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Numbers
operator|.
name|toByteExact
argument_list|(
operator|new
name|AtomicInteger
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// not supported
name|assertEquals
argument_list|(
literal|"Cannot check whether [3] of class [java.util.concurrent.atomic.AtomicInteger] is actually a long"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

