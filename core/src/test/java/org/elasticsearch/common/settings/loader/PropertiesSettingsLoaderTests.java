begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings.loader
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_class
DECL|class|PropertiesSettingsLoaderTests
specifier|public
class|class
name|PropertiesSettingsLoaderTests
extends|extends
name|ESTestCase
block|{
DECL|field|loader
specifier|private
name|PropertiesSettingsLoader
name|loader
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|loader
operator|=
operator|new
name|PropertiesSettingsLoader
argument_list|()
expr_stmt|;
block|}
DECL|method|testDuplicateKeyFromStringThrowsException
specifier|public
name|void
name|testDuplicateKeyFromStringThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|loader
operator|.
name|load
argument_list|(
literal|"foo=bar\nfoo=baz"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"duplicate settings key [foo] found, previous value [bar], current value [baz]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateKeysFromBytesThrowsException
specifier|public
name|void
name|testDuplicateKeysFromBytesThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|loader
operator|.
name|load
argument_list|(
literal|"foo=bar\nfoo=baz"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"duplicate settings key [foo] found, previous value [bar], current value [baz]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatNoDuplicatesPropertiesDoesNotAcceptNullValues
specifier|public
name|void
name|testThatNoDuplicatesPropertiesDoesNotAcceptNullValues
parameter_list|()
block|{
name|PropertiesSettingsLoader
operator|.
name|NoDuplicatesProperties
name|properties
init|=
name|loader
operator|.
expr|new
name|NoDuplicatesProperties
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|properties
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

