begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|ExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|UserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|AddFileKeyStoreCommandTests
specifier|public
class|class
name|AddFileKeyStoreCommandTests
extends|extends
name|KeyStoreCommandTestCase
block|{
annotation|@
name|Override
DECL|method|newCommand
specifier|protected
name|Command
name|newCommand
parameter_list|()
block|{
return|return
operator|new
name|AddFileKeyStoreCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Environment
name|createEnv
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|)
block|{
return|return
name|env
return|;
block|}
block|}
return|;
block|}
DECL|method|createRandomFile
specifier|private
name|Path
name|createRandomFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
block|}
name|Path
name|file
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"randomfile"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|file
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|addFile
specifier|private
name|void
name|addFile
parameter_list|(
name|KeyStoreWrapper
name|keystore
parameter_list|,
name|String
name|setting
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|keystore
operator|.
name|setFile
argument_list|(
name|setting
argument_list|,
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|keystore
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissing
specifier|public
name|void
name|testMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
name|this
operator|::
name|execute
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitCodes
operator|.
name|DATA_ERROR
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"keystore not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwritePromptDefault
specifier|public
name|void
name|testOverwritePromptDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|KeyStoreWrapper
name|keystore
init|=
name|createKeystore
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|addFile
argument_list|(
name|keystore
argument_list|,
literal|"foo"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addTextInput
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"foo"
argument_list|,
literal|"path/dne"
argument_list|)
expr_stmt|;
name|assertSecureFile
argument_list|(
literal|"foo"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwritePromptExplicitNo
specifier|public
name|void
name|testOverwritePromptExplicitNo
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|KeyStoreWrapper
name|keystore
init|=
name|createKeystore
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|addFile
argument_list|(
name|keystore
argument_list|,
literal|"foo"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addTextInput
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
comment|// explicit no
name|execute
argument_list|(
literal|"foo"
argument_list|,
literal|"path/dne"
argument_list|)
expr_stmt|;
name|assertSecureFile
argument_list|(
literal|"foo"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwritePromptExplicitYes
specifier|public
name|void
name|testOverwritePromptExplicitYes
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|KeyStoreWrapper
name|keystore
init|=
name|createKeystore
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|addFile
argument_list|(
name|keystore
argument_list|,
literal|"foo"
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addTextInput
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|execute
argument_list|(
literal|"foo"
argument_list|,
name|file2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSecureFile
argument_list|(
literal|"foo"
argument_list|,
name|file2
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwriteForceShort
specifier|public
name|void
name|testOverwriteForceShort
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|KeyStoreWrapper
name|keystore
init|=
name|createKeystore
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|addFile
argument_list|(
name|keystore
argument_list|,
literal|"foo"
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|execute
argument_list|(
literal|"-f"
argument_list|,
literal|"foo"
argument_list|,
name|file2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSecureFile
argument_list|(
literal|"foo"
argument_list|,
name|file2
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwriteForceLong
specifier|public
name|void
name|testOverwriteForceLong
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|KeyStoreWrapper
name|keystore
init|=
name|createKeystore
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|addFile
argument_list|(
name|keystore
argument_list|,
literal|"foo"
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|execute
argument_list|(
literal|"--force"
argument_list|,
literal|"foo"
argument_list|,
name|file2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSecureFile
argument_list|(
literal|"foo"
argument_list|,
name|file2
argument_list|)
expr_stmt|;
block|}
DECL|method|testForceNonExistent
specifier|public
name|void
name|testForceNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|execute
argument_list|(
literal|"--force"
argument_list|,
literal|"foo"
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSecureFile
argument_list|(
literal|"foo"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingSettingName
specifier|public
name|void
name|testMissingSettingName
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
name|this
operator|::
name|execute
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Missing setting name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingFileName
specifier|public
name|void
name|testMissingFileName
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|execute
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Missing file name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileDNE
specifier|public
name|void
name|testFileDNE
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|execute
argument_list|(
literal|"foo"
argument_list|,
literal|"path/dne"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitCodes
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"File [path/dne] does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtraArguments
specifier|public
name|void
name|testExtraArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|createRandomFile
argument_list|()
decl_stmt|;
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|execute
argument_list|(
literal|"foo"
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ExitCodes
operator|.
name|USAGE
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unrecognized extra arguments [bar]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

