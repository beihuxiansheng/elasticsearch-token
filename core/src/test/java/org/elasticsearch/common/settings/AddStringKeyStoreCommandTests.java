begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|ExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|UserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|AddStringKeyStoreCommandTests
specifier|public
class|class
name|AddStringKeyStoreCommandTests
extends|extends
name|KeyStoreCommandTestCase
block|{
DECL|field|input
name|InputStream
name|input
decl_stmt|;
annotation|@
name|Override
DECL|method|newCommand
specifier|protected
name|Command
name|newCommand
parameter_list|()
block|{
return|return
operator|new
name|AddStringKeyStoreCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Environment
name|createEnv
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|settings
parameter_list|)
block|{
return|return
name|env
return|;
block|}
annotation|@
name|Override
name|InputStream
name|getStdin
parameter_list|()
block|{
return|return
name|input
return|;
block|}
block|}
return|;
block|}
DECL|method|testMissing
specifier|public
name|void
name|testMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
name|this
operator|::
name|execute
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitCodes
operator|.
name|DATA_ERROR
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"keystore not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwritePromptDefault
specifier|public
name|void
name|testOverwritePromptDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addTextInput
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwritePromptExplicitNo
specifier|public
name|void
name|testOverwritePromptExplicitNo
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addTextInput
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
comment|// explicit no
name|execute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwritePromptExplicitYes
specifier|public
name|void
name|testOverwritePromptExplicitYes
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addTextInput
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addSecretInput
argument_list|(
literal|"newvalue"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"newvalue"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwriteForceShort
specifier|public
name|void
name|testOverwriteForceShort
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addSecretInput
argument_list|(
literal|"newvalue"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"-f"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// force
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"newvalue"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverwriteForceLong
specifier|public
name|void
name|testOverwriteForceLong
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addSecretInput
argument_list|(
literal|"and yet another secret value"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"--force"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// force
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"and yet another secret value"
argument_list|)
expr_stmt|;
block|}
DECL|method|testForceNonExistent
specifier|public
name|void
name|testForceNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|createKeystore
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addSecretInput
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"--force"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// force
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPromptForValue
specifier|public
name|void
name|testPromptForValue
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
operator|.
name|create
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addSecretInput
argument_list|(
literal|"secret value"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"secret value"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStdinShort
specifier|public
name|void
name|testStdinShort
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
operator|.
name|create
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
name|setInput
argument_list|(
literal|"secret value 1"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"-x"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"secret value 1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStdinLong
specifier|public
name|void
name|testStdinLong
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
operator|.
name|create
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
name|setInput
argument_list|(
literal|"secret value 2"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"--stdin"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertSecureString
argument_list|(
literal|"foo"
argument_list|,
literal|"secret value 2"
argument_list|)
expr_stmt|;
block|}
DECL|method|setInput
name|void
name|setInput
parameter_list|(
name|String
name|inputStr
parameter_list|)
block|{
name|input
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|inputStr
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

