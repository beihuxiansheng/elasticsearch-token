begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Jimfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|CommandTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtilsForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Base test case for manipulating the ES keystore.  */
end_comment

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"*"
argument_list|)
comment|// we do our own mocking
DECL|class|KeyStoreCommandTestCase
specifier|public
specifier|abstract
class|class
name|KeyStoreCommandTestCase
extends|extends
name|CommandTestCase
block|{
DECL|field|env
name|Environment
name|env
decl_stmt|;
DECL|field|fileSystems
name|List
argument_list|<
name|FileSystem
argument_list|>
name|fileSystems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|closeMockFileSystems
specifier|public
name|void
name|closeMockFileSystems
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|fileSystems
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupEnv
specifier|public
name|void
name|setupEnv
parameter_list|()
throws|throws
name|IOException
block|{
name|setupEnv
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// default to posix, but tests may call setupEnv(false) to overwrite
block|}
DECL|method|setupEnv
name|void
name|setupEnv
parameter_list|(
name|boolean
name|posix
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|configuration
decl_stmt|;
if|if
condition|(
name|posix
condition|)
block|{
name|configuration
operator|=
name|Configuration
operator|.
name|unix
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setAttributeViews
argument_list|(
literal|"basic"
argument_list|,
literal|"owner"
argument_list|,
literal|"posix"
argument_list|,
literal|"unix"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|configuration
operator|=
name|Configuration
operator|.
name|unix
argument_list|()
expr_stmt|;
block|}
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|fileSystems
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|PathUtilsForTesting
operator|.
name|installMock
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// restored by restoreFileSystem in ESTestCase
name|Path
name|home
init|=
name|fs
operator|.
name|getPath
argument_list|(
literal|"/"
argument_list|,
literal|"test-home"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|=
operator|new
name|Environment
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|home
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createKeystore
name|KeyStoreWrapper
name|createKeystore
parameter_list|(
name|String
name|password
parameter_list|,
name|String
modifier|...
name|settings
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
name|keystore
init|=
name|KeyStoreWrapper
operator|.
name|create
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|settings
operator|.
name|length
operator|%
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|settings
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|keystore
operator|.
name|setStringSetting
argument_list|(
name|settings
index|[
name|i
index|]
argument_list|,
name|settings
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keystore
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keystore
return|;
block|}
DECL|method|loadKeystore
name|KeyStoreWrapper
name|loadKeystore
parameter_list|(
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
name|keystore
init|=
name|KeyStoreWrapper
operator|.
name|load
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|decrypt
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keystore
return|;
block|}
DECL|method|assertSecureString
name|void
name|assertSecureString
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertSecureString
argument_list|(
name|loadKeystore
argument_list|(
literal|""
argument_list|)
argument_list|,
name|setting
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSecureString
name|void
name|assertSecureString
parameter_list|(
name|KeyStoreWrapper
name|keystore
parameter_list|,
name|String
name|setting
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|value
argument_list|,
name|keystore
operator|.
name|getStringSetting
argument_list|(
name|setting
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

