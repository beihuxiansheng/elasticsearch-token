begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|SettingTests
specifier|public
class|class
name|SettingTests
extends|extends
name|ESTestCase
block|{
DECL|method|testGet
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|booleanSetting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|booleanSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|booleanSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|booleanSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testByteSize
specifier|public
name|void
name|testByteSize
parameter_list|()
block|{
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|byteSizeValueSetting
init|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"a.byte.size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|1024
argument_list|)
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|byteSizeValueSetting
operator|.
name|isGroupSetting
argument_list|()
argument_list|)
expr_stmt|;
name|ByteSizeValue
name|byteSizeValue
init|=
name|byteSizeValueSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|byteSizeValue
operator|.
name|bytes
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|byteSizeValueSetting
operator|=
name|Setting
operator|.
name|byteSizeSetting
argument_list|(
literal|"a.byte.size"
argument_list|,
name|s
lambda|->
literal|"2048b"
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
name|byteSizeValue
operator|=
name|byteSizeValueSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byteSizeValue
operator|.
name|bytes
argument_list|()
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|ByteSizeValue
argument_list|>
name|value
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ClusterSettings
operator|.
name|SettingUpdater
argument_list|<
name|ByteSizeValue
argument_list|>
name|settingUpdater
init|=
name|byteSizeValueSetting
operator|.
name|newUpdater
argument_list|(
name|value
operator|::
name|set
argument_list|,
name|logger
argument_list|)
decl_stmt|;
try|try
block|{
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"a.byte.size"
argument_list|,
literal|12
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no unit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"failed to parse setting [a.byte.size] with value [12] as a size in bytes: unit is missing or unrecognized"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"a.byte.size"
argument_list|,
literal|"12b"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|12
argument_list|)
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleUpdate
specifier|public
name|void
name|testSimpleUpdate
parameter_list|()
block|{
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|booleanSetting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|atomicBoolean
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ClusterSettings
operator|.
name|SettingUpdater
argument_list|<
name|Boolean
argument_list|>
name|settingUpdater
init|=
name|booleanSetting
operator|.
name|newUpdater
argument_list|(
name|atomicBoolean
operator|::
name|set
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|settingUpdater
operator|.
name|apply
argument_list|(
name|build
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|atomicBoolean
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|build
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|settingUpdater
operator|.
name|apply
argument_list|(
name|build
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|atomicBoolean
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// try update bogus value
name|build
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"I am not a boolean"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|settingUpdater
operator|.
name|apply
argument_list|(
name|build
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"not a boolean"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to parse value [I am not a boolean] cannot be parsed to boolean [ true/1/on/yes OR false/0/off/no ]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpdateNotDynamic
specifier|public
name|void
name|testUpdateNotDynamic
parameter_list|()
block|{
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|booleanSetting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|booleanSetting
operator|.
name|isGroupSetting
argument_list|()
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|atomicBoolean
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|booleanSetting
operator|.
name|newUpdater
argument_list|(
name|atomicBoolean
operator|::
name|set
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"not dynamic"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"setting [foo.bar] is not dynamic"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpdaterIsIsolated
specifier|public
name|void
name|testUpdaterIsIsolated
parameter_list|()
block|{
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|booleanSetting
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|ab1
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|ab2
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ClusterSettings
operator|.
name|SettingUpdater
argument_list|<
name|Boolean
argument_list|>
name|settingUpdater
init|=
name|booleanSetting
operator|.
name|newUpdater
argument_list|(
name|ab1
operator|::
name|set
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ab1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ab2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefault
specifier|public
name|void
name|testDefault
parameter_list|()
block|{
name|TimeValue
name|defaultValue
init|=
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1000000
argument_list|)
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|setting
init|=
name|Setting
operator|.
name|positiveTimeSetting
argument_list|(
literal|"my.time.value"
argument_list|,
name|defaultValue
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|setting
operator|.
name|isGroupSetting
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|aDefault
init|=
name|setting
operator|.
name|getDefaultRaw
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|defaultValue
operator|.
name|millis
argument_list|()
operator|+
literal|"ms"
argument_list|,
name|aDefault
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultValue
operator|.
name|millis
argument_list|()
argument_list|,
name|setting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultValue
argument_list|,
name|setting
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|Setting
argument_list|<
name|String
argument_list|>
name|secondaryDefault
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"foo.bar"
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|get
argument_list|(
literal|"old.foo.bar"
argument_list|,
literal|"some_default"
argument_list|)
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"some_default"
argument_list|,
name|secondaryDefault
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"42"
argument_list|,
name|secondaryDefault
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"old.foo.bar"
argument_list|,
literal|42
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Setting
argument_list|<
name|String
argument_list|>
name|secondaryDefaultViaSettings
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"foo.bar"
argument_list|,
name|secondaryDefault
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"some_default"
argument_list|,
name|secondaryDefaultViaSettings
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"42"
argument_list|,
name|secondaryDefaultViaSettings
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"old.foo.bar"
argument_list|,
literal|42
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// It gets more complicated when there are two settings objects....
name|Settings
name|hasFallback
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"o"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Setting
argument_list|<
name|String
argument_list|>
name|fallsback
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"foo.baz"
argument_list|,
name|secondaryDefault
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"o"
argument_list|,
name|fallsback
operator|.
name|get
argument_list|(
name|hasFallback
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some_default"
argument_list|,
name|fallsback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some_default"
argument_list|,
name|fallsback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"o"
argument_list|,
name|fallsback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|hasFallback
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"o"
argument_list|,
name|fallsback
operator|.
name|get
argument_list|(
name|hasFallback
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|fallsback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplexType
specifier|public
name|void
name|testComplexType
parameter_list|()
block|{
name|AtomicReference
argument_list|<
name|ComplexType
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|ComplexType
argument_list|>
name|setting
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"foo.bar"
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
literal|""
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
operator|new
name|ComplexType
argument_list|(
name|s
argument_list|)
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|setting
operator|.
name|isGroupSetting
argument_list|()
argument_list|)
expr_stmt|;
name|ref
operator|.
name|set
argument_list|(
name|setting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|ComplexType
name|type
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
name|ClusterSettings
operator|.
name|SettingUpdater
argument_list|<
name|ComplexType
argument_list|>
name|settingUpdater
init|=
name|setting
operator|.
name|newUpdater
argument_list|(
name|ref
operator|::
name|set
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"no update - type has not changed"
argument_list|,
name|type
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// change from default
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"update - type has changed"
argument_list|,
name|type
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|ref
operator|.
name|get
argument_list|()
operator|.
name|foo
argument_list|)
expr_stmt|;
comment|// change back to default...
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"update - type has changed"
argument_list|,
name|type
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ref
operator|.
name|get
argument_list|()
operator|.
name|foo
argument_list|)
expr_stmt|;
block|}
DECL|method|testType
specifier|public
name|void
name|testType
parameter_list|()
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|integerSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.int.bar"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|integerSetting
operator|.
name|hasNodeScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerSetting
operator|.
name|hasIndexScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|integerSetting
operator|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.int.bar"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerSetting
operator|.
name|hasIndexScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerSetting
operator|.
name|hasNodeScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGroups
specifier|public
name|void
name|testGroups
parameter_list|()
block|{
name|AtomicReference
argument_list|<
name|Settings
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Settings
argument_list|>
name|setting
init|=
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"foo.bar."
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|isGroupSetting
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterSettings
operator|.
name|SettingUpdater
argument_list|<
name|Settings
argument_list|>
name|settingUpdater
init|=
name|setting
operator|.
name|newUpdater
argument_list|(
name|ref
operator|::
name|set
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|Settings
name|currentInput
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.1.value"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.2.value"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.3.value"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|previousInput
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|currentInput
argument_list|,
name|previousInput
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|asMap
init|=
name|settings
operator|.
name|getAsGroups
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|asMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|previousInput
operator|=
name|currentInput
expr_stmt|;
name|currentInput
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.1.value"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.2.value"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.3.value"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Settings
name|current
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|currentInput
argument_list|,
name|previousInput
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|current
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|previousInput
operator|=
name|currentInput
expr_stmt|;
name|currentInput
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.1.value"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.2.value"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// now update and check that we got it
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|currentInput
argument_list|,
name|previousInput
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|current
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|asMap
operator|=
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getAsGroups
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|asMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|previousInput
operator|=
name|currentInput
expr_stmt|;
name|currentInput
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.1.value"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.2.value"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// now update and check that we got it
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|currentInput
argument_list|,
name|previousInput
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|current
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|asMap
operator|=
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getAsGroups
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|asMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asMap
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.bar.baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.baz.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterSettings
operator|.
name|SettingUpdater
argument_list|<
name|Settings
argument_list|>
name|predicateSettingUpdater
init|=
name|setting
operator|.
name|newUpdater
argument_list|(
name|ref
operator|::
name|set
argument_list|,
name|logger
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|assertFalse
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|predicateSettingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.1.value"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.2.value"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"not accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"illegal value can't update [foo.bar.] from [{}] to [{1.value=1, 2.value=2}]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ComplexType
specifier|public
specifier|static
class|class
name|ComplexType
block|{
DECL|field|foo
specifier|final
name|String
name|foo
decl_stmt|;
DECL|method|ComplexType
specifier|public
name|ComplexType
parameter_list|(
name|String
name|foo
parameter_list|)
block|{
name|this
operator|.
name|foo
operator|=
name|foo
expr_stmt|;
block|}
block|}
DECL|class|Composite
specifier|public
specifier|static
class|class
name|Composite
block|{
DECL|field|b
specifier|private
name|Integer
name|b
decl_stmt|;
DECL|field|a
specifier|private
name|Integer
name|a
decl_stmt|;
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
block|}
DECL|method|testComposite
specifier|public
name|void
name|testComposite
parameter_list|()
block|{
name|Composite
name|c
init|=
operator|new
name|Composite
argument_list|()
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|a
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.int.bar.a"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|b
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.int.bar.b"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|ClusterSettings
operator|.
name|SettingUpdater
argument_list|<
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|settingUpdater
init|=
name|Setting
operator|.
name|compoundUpdater
argument_list|(
name|c
operator|::
name|set
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|a
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|b
argument_list|)
expr_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.int.bar.a"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|build
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c
operator|.
name|a
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|b
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|aValue
init|=
name|c
operator|.
name|a
decl_stmt|;
name|assertFalse
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|build
argument_list|,
name|build
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|aValue
argument_list|,
name|c
operator|.
name|a
argument_list|)
expr_stmt|;
name|Settings
name|previous
init|=
name|build
decl_stmt|;
name|build
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.int.bar.a"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.int.bar.b"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|build
argument_list|,
name|previous
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c
operator|.
name|a
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|c
operator|.
name|b
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset to default
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|build
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|a
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|b
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testListSettings
specifier|public
name|void
name|testListSettings
parameter_list|()
block|{
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|listSetting
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"foo.bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo,bar"
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|value
init|=
name|listSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo,bar"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|input
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"test1, test2"
argument_list|,
literal|"test"
argument_list|,
literal|",,,,"
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"foo.bar"
argument_list|,
name|input
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|listSetting
operator|.
name|get
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|input
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// try to parse this really annoying format
name|builder
operator|=
name|Settings
operator|.
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"foo.bar."
operator|+
name|i
argument_list|,
name|input
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|listSetting
operator|.
name|get
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|input
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AbstractScopedSettings
operator|.
name|SettingUpdater
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|settingUpdater
init|=
name|listSetting
operator|.
name|newUpdater
argument_list|(
name|ref
operator|::
name|set
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|settingUpdater
operator|.
name|hasChanged
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|settingUpdater
operator|.
name|apply
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|ref
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|input
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"123"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ref
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"123"
block|}
argument_list|)
expr_stmt|;
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"1,2,3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"123"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ref
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
expr_stmt|;
name|settingUpdater
operator|.
name|apply
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"1,2,3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ref
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo,bar"
argument_list|,
name|ref
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Setting
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|otherSettings
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"foo.bar"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Integer
operator|::
name|parseInt
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|defaultValue
init|=
name|otherSettings
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|intValues
init|=
name|otherSettings
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"0,1,2,3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|intValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|intValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|settingWithFallback
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"foo.baz"
argument_list|,
name|listSetting
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|value
operator|=
name|settingWithFallback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo,bar"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|settingWithFallback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|settingWithFallback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|settingWithFallback
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testListSettingAcceptsNumberSyntax
specifier|public
name|void
name|testListSettingAcceptsNumberSyntax
parameter_list|()
block|{
name|Setting
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|listSetting
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"foo.bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo,bar"
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|input
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"test1, test2"
argument_list|,
literal|"test"
argument_list|,
literal|",,,,"
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"foo.bar"
argument_list|,
name|input
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// try to parse this really annoying format
for|for
control|(
name|String
name|key
range|:
name|builder
operator|.
name|internalMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"key: "
operator|+
name|key
operator|+
literal|" doesn't match"
argument_list|,
name|listSetting
operator|.
name|match
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"1,2,3"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|builder
operator|.
name|internalMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"key: "
operator|+
name|key
operator|+
literal|" doesn't match"
argument_list|,
name|listSetting
operator|.
name|match
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|listSetting
operator|.
name|match
argument_list|(
literal|"foo_bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listSetting
operator|.
name|match
argument_list|(
literal|"foo_bar.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listSetting
operator|.
name|match
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listSetting
operator|.
name|match
argument_list|(
literal|"foo.bar."
operator|+
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDynamicKeySetting
specifier|public
name|void
name|testDynamicKeySetting
parameter_list|()
block|{
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|setting
init|=
name|Setting
operator|.
name|prefixKeySetting
argument_list|(
literal|"foo."
argument_list|,
literal|"false"
argument_list|,
name|Boolean
operator|::
name|parseBoolean
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|hasComplexMatcher
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|concreteSetting
init|=
name|setting
operator|.
name|getConcreteSetting
argument_list|(
literal|"foo.bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|concreteSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|concreteSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|setting
operator|.
name|getConcreteSetting
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"key [foo] must match [foo.] but didn't."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAdfixKeySetting
specifier|public
name|void
name|testAdfixKeySetting
parameter_list|()
block|{
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|setting
init|=
name|Setting
operator|.
name|adfixKeySetting
argument_list|(
literal|"foo"
argument_list|,
literal|"enable"
argument_list|,
literal|"false"
argument_list|,
name|Boolean
operator|::
name|parseBoolean
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|hasComplexMatcher
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.bar.enable"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.baz.enable"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.bar.baz.enable"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo.bar.baz.enabled"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|setting
operator|.
name|match
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|concreteSetting
init|=
name|setting
operator|.
name|getConcreteSetting
argument_list|(
literal|"foo.bar.enable"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|concreteSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.enable"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|concreteSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.baz.enable"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|setting
operator|.
name|getConcreteSetting
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"key [foo] must match [foo*enable.] but didn't."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMinMaxInt
specifier|public
name|void
name|testMinMaxInt
parameter_list|()
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|integerSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
try|try
block|{
name|integerSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|11
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to parse value [11] for setting [foo.bar] must be =< 10"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|integerSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to parse value [-1] for setting [foo.bar] must be>= 0"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|integerSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|integerSetting
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Only one single scope can be added to any setting      */
DECL|method|testMutuallyExclusiveScopes
specifier|public
name|void
name|testMutuallyExclusiveScopes
parameter_list|()
block|{
comment|// Those should pass
name|Setting
argument_list|<
name|String
argument_list|>
name|setting
init|=
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"foo.bar"
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasNodeScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasIndexScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|setting
operator|=
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"foo.bar"
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasIndexScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasNodeScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// We accept settings with no scope but they will be rejected when we register with SettingsModule.registerSetting
name|setting
operator|=
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"foo.bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasIndexScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasNodeScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// We accept settings with multiple scopes but they will be rejected when we register with SettingsModule.registerSetting
name|setting
operator|=
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"foo.bar"
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasIndexScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|setting
operator|.
name|hasNodeScope
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * We can't have Null properties      */
DECL|method|testRejectNullProperties
specifier|public
name|void
name|testRejectNullProperties
parameter_list|()
block|{
try|try
block|{
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"foo.bar"
argument_list|,
operator|(
name|Property
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"properties can not be null for setting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

