begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|SecureStringTests
specifier|public
class|class
name|SecureStringTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCloseableCharsDoesNotModifySecureString
specifier|public
name|void
name|testCloseableCharsDoesNotModifySecureString
parameter_list|()
block|{
specifier|final
name|char
index|[]
name|password
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|32
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|SecureString
name|secureString
init|=
operator|new
name|SecureString
argument_list|(
name|password
argument_list|)
decl_stmt|;
name|assertSecureStringEqualToChars
argument_list|(
name|password
argument_list|,
name|secureString
argument_list|)
expr_stmt|;
try|try
init|(
name|SecureString
name|copy
init|=
name|secureString
operator|.
name|clone
argument_list|()
init|)
block|{
name|assertArrayEquals
argument_list|(
name|password
argument_list|,
name|copy
operator|.
name|getChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|getChars
argument_list|()
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|password
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertSecureStringEqualToChars
argument_list|(
name|password
argument_list|,
name|secureString
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosingSecureStringDoesNotModifyCloseableChars
specifier|public
name|void
name|testClosingSecureStringDoesNotModifyCloseableChars
parameter_list|()
block|{
specifier|final
name|char
index|[]
name|password
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|32
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|SecureString
name|secureString
init|=
operator|new
name|SecureString
argument_list|(
name|password
argument_list|)
decl_stmt|;
name|assertSecureStringEqualToChars
argument_list|(
name|password
argument_list|,
name|secureString
argument_list|)
expr_stmt|;
name|SecureString
name|copy
init|=
name|secureString
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|password
argument_list|,
name|copy
operator|.
name|getChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|getChars
argument_list|()
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|password
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|char
index|[]
name|passwordCopy
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|password
argument_list|,
name|password
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|password
argument_list|,
name|passwordCopy
argument_list|)
expr_stmt|;
name|secureString
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
name|password
index|[
literal|0
index|]
argument_list|,
name|passwordCopy
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|passwordCopy
argument_list|,
name|copy
operator|.
name|getChars
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosingChars
specifier|public
name|void
name|testClosingChars
parameter_list|()
block|{
specifier|final
name|char
index|[]
name|password
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|32
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|SecureString
name|secureString
init|=
operator|new
name|SecureString
argument_list|(
name|password
argument_list|)
decl_stmt|;
name|assertSecureStringEqualToChars
argument_list|(
name|password
argument_list|,
name|secureString
argument_list|)
expr_stmt|;
name|SecureString
name|copy
init|=
name|secureString
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|password
argument_list|,
name|copy
operator|.
name|getChars
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|getChars
argument_list|()
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|password
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// close another time and no exception is thrown
name|copy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
name|copy
operator|::
name|getChars
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"already been closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetCloseableCharsAfterSecureStringClosed
specifier|public
name|void
name|testGetCloseableCharsAfterSecureStringClosed
parameter_list|()
block|{
specifier|final
name|char
index|[]
name|password
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|32
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|SecureString
name|secureString
init|=
operator|new
name|SecureString
argument_list|(
name|password
argument_list|)
decl_stmt|;
name|assertSecureStringEqualToChars
argument_list|(
name|password
argument_list|,
name|secureString
argument_list|)
expr_stmt|;
name|secureString
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// close another time and no exception is thrown
name|secureString
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
name|secureString
operator|::
name|clone
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"already been closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSecureStringEqualToChars
specifier|private
name|void
name|assertSecureStringEqualToChars
parameter_list|(
name|char
index|[]
name|expected
parameter_list|,
name|SecureString
name|secureString
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|secureString
operator|.
name|chars
argument_list|()
operator|.
name|toArray
argument_list|()
control|)
block|{
if|if
condition|(
name|pos
operator|>=
name|expected
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
literal|"Index "
operator|+
name|i
operator|+
literal|" greated than or equal to array length "
operator|+
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|pos
operator|++
index|]
argument_list|,
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

