begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|FilterAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ShardsLimitAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|ScopedSettingsTests
specifier|public
class|class
name|ScopedSettingsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testAddConsumer
specifier|public
name|void
name|testAddConsumer
parameter_list|()
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting2
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|AbstractScopedSettings
name|service
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testSetting
argument_list|)
argument_list|)
decl_stmt|;
name|AtomicInteger
name|consumer
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|consumer
operator|::
name|set
argument_list|)
expr_stmt|;
name|AtomicInteger
name|consumer2
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting2
argument_list|,
name|consumer2
operator|::
name|set
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setting not registered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Setting is not registered for key [foo.bar.baz]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|testSetting2
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
name|consumer
operator|.
name|set
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|consumer2
operator|.
name|set
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setting not registered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Setting is not registered for key [foo.bar.baz]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testApply
specifier|public
name|void
name|testApply
parameter_list|()
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting2
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|AbstractScopedSettings
name|service
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testSetting
argument_list|,
name|testSetting2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AtomicInteger
name|consumer
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|consumer
operator|::
name|set
argument_list|)
expr_stmt|;
name|AtomicInteger
name|consumer2
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting2
argument_list|,
name|consumer2
operator|::
name|set
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|assertTrue
argument_list|(
name|s
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|AtomicInteger
name|aC
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|bC
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|testSetting2
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
name|aC
operator|.
name|set
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|bC
operator|.
name|set
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
operator|-
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal value can't update [foo.bar.baz] from [1] to [-15]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|dryRun
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
operator|-
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal value can't update [foo.bar.baz] from [1] to [-15]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|dryRun
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
comment|// group setting - complex matcher
name|Setting
name|setting
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"cluster.routing.allocation.require.value"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|setting
argument_list|,
name|FilterAllocationDecider
operator|.
name|CLUSTER_ROUTING_REQUIRE_GROUP_SETTING
argument_list|)
expr_stmt|;
name|setting
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"cluster.routing.allocation.total_shards_per_node"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|setting
argument_list|,
name|ShardsLimitAllocationDecider
operator|.
name|CLUSTER_TOTAL_SHARDS_PER_NODE_SETTING
argument_list|)
expr_stmt|;
comment|// array settings - complex matcher
name|assertNotNull
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"transport.tracer.include."
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|TransportService
operator|.
name|TRACE_LOG_INCLUDE_SETTING
argument_list|,
name|settings
operator|.
name|get
argument_list|(
literal|"transport.tracer.include."
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// array settings - complex matcher - only accepts numbers
name|assertNull
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"transport.tracer.include.FOO"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsDynamic
specifier|public
name|void
name|testIsDynamic
parameter_list|()
block|{
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
argument_list|,
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|hasDynamicSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|hasDynamicSetting
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"foo.bar.baz"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|hasDynamicSetting
argument_list|(
literal|"transport.tracer.include."
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|hasDynamicSetting
argument_list|(
literal|"transport.tracer.include.BOOM"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|hasDynamicSetting
argument_list|(
literal|"cluster.routing.allocation.require.value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDiff
specifier|public
name|void
name|testDiff
parameter_list|()
throws|throws
name|IOException
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|foobarbaz
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|foobar
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|foobar
argument_list|,
name|foobarbaz
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
name|diff
init|=
name|settings
operator|.
name|diff
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsInt
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|settings
operator|.
name|diff
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|17
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsInt
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateTracer
specifier|public
name|void
name|testUpdateTracer
parameter_list|()
block|{
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|settings
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|TransportService
operator|.
name|TRACE_LOG_INCLUDE_SETTING
argument_list|,
name|ref
operator|::
name|set
argument_list|)
expr_stmt|;
name|settings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"transport.tracer.include"
argument_list|,
literal|"internal:index/shard/recovery/*"
argument_list|,
literal|"internal:gateway/local*"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"internal:index/shard/recovery/*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|contains
argument_list|(
literal|"internal:gateway/local*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetSetting
specifier|public
name|void
name|testGetSetting
parameter_list|()
block|{
name|IndexScopedSettings
name|settings
init|=
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|IndexScopedSettings
operator|.
name|BUILT_IN_INDEX_SETTINGS
argument_list|)
decl_stmt|;
name|IndexScopedSettings
name|copy
init|=
name|settings
operator|.
name|copy
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
literal|"boom"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|newIndexMeta
argument_list|(
literal|"foo"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_REPLICAS_SETTING
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_SHARDS_SETTING
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boom"
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|IndexModule
operator|.
name|INDEX_STORE_TYPE_SETTING
argument_list|)
argument_list|)
expr_stmt|;
comment|// test fallback to node settings
block|}
DECL|method|testValidateWithSuggestion
specifier|public
name|void
name|testValidateWithSuggestion
parameter_list|()
block|{
name|IndexScopedSettings
name|settings
init|=
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|IndexScopedSettings
operator|.
name|BUILT_IN_INDEX_SETTINGS
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|settings
operator|.
name|validate
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.numbe_of_replica"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"unknown setting [index.numbe_of_replica] did you mean [index.number_of_replicas]?"
argument_list|)
expr_stmt|;
block|}
DECL|method|testValidate
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
name|IndexScopedSettings
name|settings
init|=
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|IndexScopedSettings
operator|.
name|BUILT_IN_INDEX_SETTINGS
argument_list|)
decl_stmt|;
name|String
name|unknownMsgSuffix
init|=
literal|" please check that any required plugins are installed, or check the breaking changes documentation for"
operator|+
literal|" removed settings"
decl_stmt|;
name|settings
operator|.
name|validate
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
literal|"boom"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|validate
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
literal|"boom"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|settings
operator|.
name|validate
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
literal|"boom"
argument_list|,
literal|"i.am.not.a.setting"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"unknown setting [i.am.not.a.setting]"
operator|+
name|unknownMsgSuffix
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|settings
operator|.
name|validate
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
literal|"boom"
argument_list|,
literal|"i.am.not.a.setting"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"unknown setting [i.am.not.a.setting]"
operator|+
name|unknownMsgSuffix
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|settings
operator|.
name|validate
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
literal|"boom"
argument_list|,
literal|"index.number_of_replicas"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to parse value [true] for setting [index.number_of_replicas]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|settings
operator|.
name|validate
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to parse value [true] for setting [index.number_of_replicas]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|settings
operator|.
name|validate
argument_list|(
literal|"index.similarity.classic.type"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.similarity.classic.type"
argument_list|,
literal|"mine"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal value for [index.similarity.classic] cannot redefine built-in similarity"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newIndexMeta
specifier|public
specifier|static
name|IndexMetaData
name|newIndexMeta
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|indexSettings
parameter_list|)
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|name
argument_list|)
operator|.
name|settings
argument_list|(
name|build
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|metaData
return|;
block|}
DECL|method|testKeyPattern
specifier|public
name|void
name|testKeyPattern
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|AbstractScopedSettings
operator|.
name|isValidKey
argument_list|(
literal|"a.b.c-b.d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AbstractScopedSettings
operator|.
name|isValidKey
argument_list|(
literal|"a.b.c.d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AbstractScopedSettings
operator|.
name|isValidKey
argument_list|(
literal|"a.b_012.c_b.d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AbstractScopedSettings
operator|.
name|isValidKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AbstractScopedSettings
operator|.
name|isValidKey
argument_list|(
literal|"a b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AbstractScopedSettings
operator|.
name|isValidKey
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AbstractScopedSettings
operator|.
name|isValidKey
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"foo.bar."
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal settings key: [foo.bar.] must start with [index.]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|Setting
operator|.
name|simpleString
argument_list|(
literal|"foo.bar"
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal settings key: [foo.bar] must start with [index.]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"index. foo."
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal settings key: [index. foo.]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"index."
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"index."
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal settings key: [index.]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|new
name|IndexScopedSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"index.boo"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"index.boo"
argument_list|,
literal|true
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoggingUpdates
specifier|public
name|void
name|testLoggingUpdates
parameter_list|()
block|{
specifier|final
name|String
name|level
init|=
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testLevel
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|String
name|property
init|=
name|randomFrom
argument_list|(
name|ESLoggerFactory
operator|.
name|LogLevel
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"logger.level"
argument_list|,
name|property
argument_list|)
decl_stmt|;
try|try
block|{
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
try|try
block|{
name|settings
operator|.
name|validate
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"logger._root"
argument_list|,
literal|"boom"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No enum constant org.elasticsearch.common.logging.ESLoggerFactory.LogLevel.BOOM"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|level
argument_list|,
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"logger._root"
argument_list|,
literal|"TRACE"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TRACE"
argument_list|,
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|property
argument_list|,
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"logger.test"
argument_list|,
literal|"TRACE"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TRACE"
argument_list|,
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testLevel
argument_list|,
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|testLevel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFallbackToLoggerLevel
specifier|public
name|void
name|testFallbackToLoggerLevel
parameter_list|()
block|{
specifier|final
name|String
name|level
init|=
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
decl_stmt|;
try|try
block|{
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"logger.level"
argument_list|,
literal|"ERROR"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|level
argument_list|,
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"logger._root"
argument_list|,
literal|"TRACE"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TRACE"
argument_list|,
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// here we fall back to 'logger.level' which is our default.
name|assertEquals
argument_list|(
literal|"ERROR"
argument_list|,
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOverlappingComplexMatchSettings
specifier|public
name|void
name|testOverlappingComplexMatchSettings
parameter_list|()
block|{
name|Set
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|settings
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|groupFirst
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Setting
argument_list|<
name|?
argument_list|>
name|groupSetting
init|=
name|Setting
operator|.
name|groupSetting
argument_list|(
literal|"foo."
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
specifier|final
name|Setting
argument_list|<
name|?
argument_list|>
name|listSetting
init|=
name|Setting
operator|.
name|listSetting
argument_list|(
literal|"foo.bar"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|)
decl_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|groupFirst
condition|?
name|groupSetting
else|:
name|listSetting
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|groupFirst
condition|?
name|listSetting
else|:
name|groupSetting
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"an exception should have been thrown because settings overlap"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|groupFirst
condition|)
block|{
name|assertEquals
argument_list|(
literal|"complex setting key: [foo.bar] overlaps existing setting key: [foo.]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"complex setting key: [foo.] overlaps existing setting key: [foo.bar]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

