begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|FilterAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ShardsLimitAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
DECL|class|ScopedSettingsTests
specifier|public
class|class
name|ScopedSettingsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testAddConsumer
specifier|public
name|void
name|testAddConsumer
parameter_list|()
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting2
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
decl_stmt|;
name|AbstractScopedSettings
name|service
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testSetting
argument_list|)
argument_list|)
decl_stmt|;
name|AtomicInteger
name|consumer
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|consumer
operator|::
name|set
argument_list|)
expr_stmt|;
name|AtomicInteger
name|consumer2
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
try|try
block|{
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting2
argument_list|,
name|consumer2
operator|::
name|set
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setting not registered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Setting is not registered for key [foo.bar.baz]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|testSetting2
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
name|consumer
operator|.
name|set
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|consumer2
operator|.
name|set
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setting not registered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Setting is not registered for key [foo.bar.baz]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testApply
specifier|public
name|void
name|testApply
parameter_list|()
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|testSetting2
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
decl_stmt|;
name|AbstractScopedSettings
name|service
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testSetting
argument_list|,
name|testSetting2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AtomicInteger
name|consumer
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|consumer
operator|::
name|set
argument_list|)
expr_stmt|;
name|AtomicInteger
name|consumer2
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting2
argument_list|,
name|consumer2
operator|::
name|set
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
name|assertTrue
argument_list|(
name|s
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|AtomicInteger
name|aC
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|AtomicInteger
name|bC
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|service
operator|.
name|addSettingsUpdateConsumer
argument_list|(
name|testSetting
argument_list|,
name|testSetting2
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{
name|aC
operator|.
name|set
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|bC
operator|.
name|set
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
operator|-
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal value can't update [foo.bar.baz] from [1] to [-15]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|dryRun
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
operator|-
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal value can't update [foo.bar.baz] from [1] to [-15]"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|dryRun
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|15
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|consumer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|consumer2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|bC
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|Setting
name|setting
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"cluster.routing.allocation.require.value"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|setting
argument_list|,
name|FilterAllocationDecider
operator|.
name|CLUSTER_ROUTING_REQUIRE_GROUP_SETTING
argument_list|)
expr_stmt|;
name|setting
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"cluster.routing.allocation.total_shards_per_node"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|setting
argument_list|,
name|ShardsLimitAllocationDecider
operator|.
name|CLUSTER_TOTAL_SHARDS_PER_NODE_SETTING
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsDynamic
specifier|public
name|void
name|testIsDynamic
parameter_list|()
block|{
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
argument_list|,
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|hasDynamicSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|hasDynamicSetting
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"foo.bar.baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDiff
specifier|public
name|void
name|testDiff
parameter_list|()
throws|throws
name|IOException
block|{
name|Setting
argument_list|<
name|Integer
argument_list|>
name|foobarbaz
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
decl_stmt|;
name|Setting
argument_list|<
name|Integer
argument_list|>
name|foobar
init|=
name|Setting
operator|.
name|intSetting
argument_list|(
literal|"foo.bar"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Scope
operator|.
name|Cluster
argument_list|)
decl_stmt|;
name|ClusterSettings
name|settings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|foobar
argument_list|,
name|foobarbaz
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
name|diff
init|=
name|settings
operator|.
name|diff
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsInt
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|settings
operator|.
name|diff
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|17
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diff
operator|.
name|getAsInt
argument_list|(
literal|"foo.bar.baz"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

