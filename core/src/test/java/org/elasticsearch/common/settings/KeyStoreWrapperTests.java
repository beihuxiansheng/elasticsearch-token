begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|KeyStoreWrapperTests
specifier|public
class|class
name|KeyStoreWrapperTests
extends|extends
name|ESTestCase
block|{
DECL|field|env
name|Environment
name|env
decl_stmt|;
DECL|field|fileSystems
name|List
argument_list|<
name|FileSystem
argument_list|>
name|fileSystems
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|closeMockFileSystems
specifier|public
name|void
name|closeMockFileSystems
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|fileSystems
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupEnv
specifier|public
name|void
name|setupEnv
parameter_list|()
throws|throws
name|IOException
block|{
name|env
operator|=
name|KeyStoreCommandTestCase
operator|.
name|setupEnv
argument_list|(
literal|true
argument_list|,
name|fileSystems
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileSettingExhaustiveBytes
specifier|public
name|void
name|testFileSettingExhaustiveBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreWrapper
name|keystore
init|=
name|KeyStoreWrapper
operator|.
name|create
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|keystore
operator|.
name|setFile
argument_list|(
literal|"foo"
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|keystore
operator|.
name|save
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
name|keystore
operator|=
name|KeyStoreWrapper
operator|.
name|load
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
name|keystore
operator|.
name|decrypt
argument_list|(
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|keystore
operator|.
name|getFile
argument_list|(
literal|"foo"
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
name|int
name|got
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|got
operator|<
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Expected 256 bytes but read "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing left
block|}
block|}
block|}
end_class

end_unit

