begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
operator|.
name|YamlSettingsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayContaining
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|SettingsTests
specifier|public
class|class
name|SettingsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testReplacePropertiesPlaceholderSystemProperty
specifier|public
name|void
name|testReplacePropertiesPlaceholderSystemProperty
parameter_list|()
block|{
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|value
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"property.placeholder"
argument_list|,
name|value
argument_list|)
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${property.placeholder}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"setting1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplacePropertiesPlaceholderSystemVariablesHaveNoEffect
specifier|public
name|void
name|testReplacePropertiesPlaceholderSystemVariablesHaveNoEffect
parameter_list|()
block|{
specifier|final
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
specifier|final
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${java.home}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"Could not resolve placeholder 'java.home'"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplacePropertiesPlaceholderByEnvironmentVariables
specifier|public
name|void
name|testReplacePropertiesPlaceholderByEnvironmentVariables
parameter_list|()
block|{
specifier|final
name|String
name|hostname
init|=
name|randomAlphaOfLength
argument_list|(
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|implicitEnvSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${HOSTNAME}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|(
name|name
lambda|->
literal|"HOSTNAME"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
name|hostname
else|:
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|implicitEnvSettings
operator|.
name|get
argument_list|(
literal|"setting1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|hostname
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplacePropertiesPlaceholderIgnoresPrompt
specifier|public
name|void
name|testReplacePropertiesPlaceholderIgnoresPrompt
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${prompt.text}"
argument_list|)
operator|.
name|put
argument_list|(
literal|"setting2"
argument_list|,
literal|"${prompt.secret}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"setting1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"${prompt.text}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"setting2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"${prompt.secret}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnFlattenedSettings
specifier|public
name|void
name|testUnFlattenedSettings
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"def"
argument_list|)
operator|.
name|put
argument_list|(
literal|"baz.foo"
argument_list|,
literal|"ghi"
argument_list|)
operator|.
name|put
argument_list|(
literal|"baz.bar"
argument_list|,
literal|"jkl"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"baz.arr"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|settings
operator|.
name|getAsStructuredMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|String
operator|>
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|,
name|allOf
argument_list|(
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|bazMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"baz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bazMap
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|String
operator|>
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bazMap
argument_list|,
name|allOf
argument_list|(
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"jkl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|bazArr
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|bazMap
operator|.
name|get
argument_list|(
literal|"arr"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bazArr
argument_list|,
name|contains
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFallbackToFlattenedSettings
specifier|public
name|void
name|testFallbackToFlattenedSettings
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"def"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"ghi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|settings
operator|.
name|getAsStructuredMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|String
operator|>
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|,
name|allOf
argument_list|(
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"def"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"ghi"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|map
operator|=
name|settings
operator|.
name|getAsStructuredMap
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|,
name|Matchers
operator|.
expr|<
name|String
operator|>
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|,
name|allOf
argument_list|(
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"def"
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|hasEntry
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetAsSettings
specifier|public
name|void
name|testGetAsSettings
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"hello world"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"def"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"ghi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|fooSettings
init|=
name|settings
operator|.
name|getAsSettings
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fooSettings
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fooSettings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooSettings
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fooSettings
operator|.
name|get
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|//#getAsBooleanLenientForPreEs6Indices is the test subject
DECL|method|testLenientBooleanForPreEs6Index
specifier|public
name|void
name|testLenientBooleanForPreEs6Index
parameter_list|()
throws|throws
name|IOException
block|{
comment|// time to say goodbye?
name|assertTrue
argument_list|(
literal|"It's time to implement #22298. Please delete this test and Settings#getAsBooleanLenientForPreEs6Indices()."
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|falsy
init|=
name|randomFrom
argument_list|(
literal|"false"
argument_list|,
literal|"off"
argument_list|,
literal|"no"
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
name|String
name|truthy
init|=
name|randomFrom
argument_list|(
literal|"true"
argument_list|,
literal|"on"
argument_list|,
literal|"yes"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|falsy
argument_list|)
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
name|truthy
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|DeprecationLogger
name|deprecationLogger
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"testLenientBooleanForPreEs6Index"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|V_5_0_0
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|V_5_0_0
argument_list|,
literal|"bar"
argument_list|,
literal|null
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|V_5_0_0
argument_list|,
literal|"baz"
argument_list|,
literal|true
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedDeprecationWarnings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Booleans
operator|.
name|isBoolean
argument_list|(
name|falsy
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expectedDeprecationWarnings
operator|.
name|add
argument_list|(
literal|"The value ["
operator|+
name|falsy
operator|+
literal|"] of setting [foo] is not coerced into boolean anymore. Please change this value to [false]."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Booleans
operator|.
name|isBoolean
argument_list|(
name|truthy
argument_list|)
operator|==
literal|false
condition|)
block|{
name|expectedDeprecationWarnings
operator|.
name|add
argument_list|(
literal|"The value ["
operator|+
name|truthy
operator|+
literal|"] of setting [bar] is not coerced into boolean anymore. Please change this value to [true]."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedDeprecationWarnings
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|assertWarnings
argument_list|(
name|expectedDeprecationWarnings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|//#getAsBooleanLenientForPreEs6Indices is the test subject
DECL|method|testInvalidLenientBooleanForCurrentIndexVersion
specifier|public
name|void
name|testInvalidLenientBooleanForCurrentIndexVersion
parameter_list|()
block|{
name|String
name|falsy
init|=
name|randomFrom
argument_list|(
literal|"off"
argument_list|,
literal|"no"
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
name|String
name|truthy
init|=
name|randomFrom
argument_list|(
literal|"on"
argument_list|,
literal|"yes"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|falsy
argument_list|)
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
name|truthy
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|DeprecationLogger
name|deprecationLogger
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"testInvalidLenientBooleanForCurrentIndexVersion"
argument_list|)
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"bar"
argument_list|,
literal|null
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|//#getAsBooleanLenientForPreEs6Indices is the test subject
DECL|method|testValidLenientBooleanForCurrentIndexVersion
specifier|public
name|void
name|testValidLenientBooleanForCurrentIndexVersion
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|DeprecationLogger
name|deprecationLogger
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"testValidLenientBooleanForCurrentIndexVersion"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"bar"
argument_list|,
literal|null
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|getAsBooleanLenientForPreEs6Indices
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
literal|"baz"
argument_list|,
literal|true
argument_list|,
name|deprecationLogger
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultLevelGetPrefix
specifier|public
name|void
name|testMultLevelGetPrefix
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"1.2.3"
argument_list|,
literal|"hello world"
argument_list|)
operator|.
name|put
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"2.3.4"
argument_list|,
literal|"def"
argument_list|)
operator|.
name|put
argument_list|(
literal|"3.4"
argument_list|,
literal|"ghi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|firstLevelSettings
init|=
name|settings
operator|.
name|getByPrefix
argument_list|(
literal|"1."
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|firstLevelSettings
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|firstLevelSettings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstLevelSettings
operator|.
name|get
argument_list|(
literal|"2.3.4"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstLevelSettings
operator|.
name|get
argument_list|(
literal|"2.3"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|secondLevelSetting
init|=
name|firstLevelSettings
operator|.
name|getByPrefix
argument_list|(
literal|"2."
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|secondLevelSetting
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|secondLevelSetting
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secondLevelSetting
operator|.
name|get
argument_list|(
literal|"2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secondLevelSetting
operator|.
name|get
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|secondLevelSetting
operator|.
name|get
argument_list|(
literal|"1.2.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|secondLevelSetting
operator|.
name|get
argument_list|(
literal|"3.4"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|secondLevelSetting
operator|.
name|get
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|thirdLevelSetting
init|=
name|secondLevelSetting
operator|.
name|getByPrefix
argument_list|(
literal|"3."
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|thirdLevelSetting
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|thirdLevelSetting
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|thirdLevelSetting
operator|.
name|get
argument_list|(
literal|"2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|thirdLevelSetting
operator|.
name|get
argument_list|(
literal|"3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|thirdLevelSetting
operator|.
name|get
argument_list|(
literal|"1.2.3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|thirdLevelSetting
operator|.
name|get
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNames
specifier|public
name|void
name|testNames
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"def"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.baz"
argument_list|,
literal|"ghi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|settings
operator|.
name|names
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|fooSettings
init|=
name|settings
operator|.
name|getAsSettings
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|names
operator|=
name|fooSettings
operator|.
name|names
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatArraysAreOverriddenCorrectly
specifier|public
name|void
name|testThatArraysAreOverriddenCorrectly
parameter_list|()
throws|throws
name|IOException
block|{
comment|// overriding a single value with an array
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|YamlSettingsLoader
argument_list|(
literal|false
argument_list|)
operator|.
name|load
argument_list|(
literal|"value: 1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|YamlSettingsLoader
argument_list|(
literal|false
argument_list|)
operator|.
name|load
argument_list|(
literal|"value: [ 2, 3 ]"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"value.with.deep.key"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.with.deep.key"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value.with.deep.key"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// overriding an array with a shorter array
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value.deep.key"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// overriding an array with a longer array
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value.deep.key"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// overriding an array with a single value
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value.deep.key"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that other arrays are not overridden
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"e"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value.deep.key"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value.deep.key"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// overriding a deeper structure with an array
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"value.data"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsArray
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// overriding an array with a deeper structure
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"value"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"value.data"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"value.data"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixNormalization
specifier|public
name|void
name|testPrefixNormalization
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|normalizePrefix
argument_list|(
literal|"foo."
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|names
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|normalizePrefix
argument_list|(
literal|"foo."
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo.test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|normalizePrefix
argument_list|(
literal|"foo."
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"foo.test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo.test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|normalizePrefix
argument_list|(
literal|"foo."
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"foo.test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilteredMap
specifier|public
name|void
name|testFilteredMap
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b"
argument_list|,
literal|"ab1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"ab2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.c"
argument_list|,
literal|"ac1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b.c.d"
argument_list|,
literal|"ab3"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fiteredMap
init|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|k
parameter_list|)
lambda|->
name|k
operator|.
name|startsWith
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fiteredMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numKeys
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|fiteredMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|numKeys
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|numKeys
argument_list|)
expr_stmt|;
name|int
name|numValues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|fiteredMap
operator|.
name|values
argument_list|()
control|)
block|{
name|numValues
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|v
operator|.
name|startsWith
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.b.c.d"
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fiteredMap
operator|.
name|remove
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab1"
argument_list|,
name|fiteredMap
operator|.
name|get
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab2"
argument_list|,
name|fiteredMap
operator|.
name|get
argument_list|(
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab3"
argument_list|,
name|fiteredMap
operator|.
name|get
argument_list|(
literal|"a.b.c.d"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|fiteredMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"a.b"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"a.b.c"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"a.b.c.d"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NoSuchElementException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixMap
specifier|public
name|void
name|testPrefixMap
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b"
argument_list|,
literal|"ab1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"ab2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.c"
argument_list|,
literal|"ac1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b.c.d"
argument_list|,
literal|"ab3"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixMap
init|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|getByPrefix
argument_list|(
literal|"a."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|prefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numKeys
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|prefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|numKeys
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|k
argument_list|,
name|k
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
operator|||
name|k
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|numKeys
argument_list|)
expr_stmt|;
name|int
name|numValues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|prefixMap
operator|.
name|values
argument_list|()
control|)
block|{
name|numValues
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|v
argument_list|,
name|v
operator|.
name|startsWith
argument_list|(
literal|"ab"
argument_list|)
operator|||
name|v
operator|.
name|startsWith
argument_list|(
literal|"ac"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|prefixMap
operator|.
name|containsKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prefixMap
operator|.
name|containsKey
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prefixMap
operator|.
name|containsKey
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prefixMap
operator|.
name|containsKey
argument_list|(
literal|"b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prefixMap
operator|.
name|containsKey
argument_list|(
literal|"b.c.d"
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|prefixMap
operator|.
name|remove
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab1"
argument_list|,
name|prefixMap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab2"
argument_list|,
name|prefixMap
operator|.
name|get
argument_list|(
literal|"b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab3"
argument_list|,
name|prefixMap
operator|.
name|get
argument_list|(
literal|"b.c.d"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|prefixIterator
init|=
name|prefixMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|prefixIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|prefixIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|prefixIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"b.c"
argument_list|,
name|prefixIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|prefixIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"b.c.d"
argument_list|,
name|prefixIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|prefixIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|prefixIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|prefixIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NoSuchElementException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|prefixIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyFilterMap
specifier|public
name|void
name|testEmptyFilterMap
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b"
argument_list|,
literal|"ab1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"ab2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.c"
argument_list|,
literal|"ac1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a.b.c.d"
argument_list|,
literal|"ab3"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fiteredMap
init|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|k
parameter_list|)
lambda|->
literal|false
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fiteredMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|k
range|:
name|fiteredMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|fail
argument_list|(
literal|"no element"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|v
range|:
name|fiteredMap
operator|.
name|values
argument_list|()
control|)
block|{
name|fail
argument_list|(
literal|"no element"
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fiteredMap
operator|.
name|containsKey
argument_list|(
literal|"a.b.c.d"
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|fiteredMap
operator|.
name|remove
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fiteredMap
operator|.
name|get
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fiteredMap
operator|.
name|get
argument_list|(
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fiteredMap
operator|.
name|get
argument_list|(
literal|"a.b.c.d"
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|fiteredMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expectThrows
argument_list|(
name|NoSuchElementException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Settings
operator|.
name|EMPTY
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|MockSecureSettings
name|secureSettings
init|=
operator|new
name|MockSecureSettings
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|setSecureSettings
argument_list|(
name|secureSettings
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSecureSettingConflict
specifier|public
name|void
name|testSecureSettingConflict
parameter_list|()
block|{
name|Setting
argument_list|<
name|SecureString
argument_list|>
name|setting
init|=
name|SecureSetting
operator|.
name|secureString
argument_list|(
literal|"something.secure"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"something.secure"
argument_list|,
literal|"notreallysecure"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|setting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"must be stored inside the Elasticsearch keystore"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

