begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|NamedWriteableRegistryTests
specifier|public
class|class
name|NamedWriteableRegistryTests
extends|extends
name|ESTestCase
block|{
DECL|class|DummyNamedWriteable
specifier|private
specifier|static
class|class
name|DummyNamedWriteable
implements|implements
name|NamedWriteable
block|{
DECL|method|DummyNamedWriteable
name|DummyNamedWriteable
parameter_list|(
name|StreamInput
name|in
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
comment|// does not throw exception
block|}
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|NamedWriteableRegistry
operator|.
name|Entry
name|entry
init|=
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|NamedWriteable
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|DummyNamedWriteable
operator|::
operator|new
argument_list|)
decl_stmt|;
name|NamedWriteableRegistry
name|registry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
extends|extends
name|NamedWriteable
argument_list|>
name|reader
init|=
name|registry
operator|.
name|getReader
argument_list|(
name|NamedWriteable
operator|.
name|class
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|read
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicates
specifier|public
name|void
name|testDuplicates
parameter_list|()
throws|throws
name|IOException
block|{
name|NamedWriteableRegistry
operator|.
name|Entry
name|entry
init|=
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|NamedWriteable
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|DummyNamedWriteable
operator|::
operator|new
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
argument_list|,
name|entry
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is already registered"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownCategory
specifier|public
name|void
name|testUnknownCategory
parameter_list|()
throws|throws
name|IOException
block|{
name|NamedWriteableRegistry
name|registry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|registry
operator|.
name|getReader
argument_list|(
name|NamedWriteable
operator|.
name|class
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unknown NamedWriteable category ["
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownName
specifier|public
name|void
name|testUnknownName
parameter_list|()
throws|throws
name|IOException
block|{
name|NamedWriteableRegistry
operator|.
name|Entry
name|entry
init|=
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|NamedWriteable
operator|.
name|class
argument_list|,
literal|"test"
argument_list|,
name|DummyNamedWriteable
operator|::
operator|new
argument_list|)
decl_stmt|;
name|NamedWriteableRegistry
name|registry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|registry
operator|.
name|getReader
argument_list|(
name|NamedWriteable
operator|.
name|class
argument_list|,
literal|"dne"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unknown NamedWriteable ["
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

