begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressFileSystems
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileTestUtils
operator|.
name|assertFileContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFileNotExists
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link org.elasticsearch.common.io.FileSystemUtils}.  */
end_comment

begin_class
annotation|@
name|SuppressFileSystems
argument_list|(
literal|"WindowsFS"
argument_list|)
comment|// tries to move away open file handles
DECL|class|FileSystemUtilsTests
specifier|public
class|class
name|FileSystemUtilsTests
extends|extends
name|ESTestCase
block|{
DECL|field|src
specifier|private
name|Path
name|src
decl_stmt|;
DECL|field|dst
specifier|private
name|Path
name|dst
decl_stmt|;
annotation|@
name|Before
DECL|method|copySourceFilesToTarget
specifier|public
name|void
name|copySourceFilesToTarget
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|src
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|dst
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppend
specifier|public
name|void
name|testAppend
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|FileSystemUtils
operator|.
name|append
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/hello/world/this_is/awesome"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/foo/bar/hello/world/this_is/awesome"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileSystemUtils
operator|.
name|append
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/hello/world/this_is/awesome"
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/foo/bar/this_is/awesome"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FileSystemUtils
operator|.
name|append
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/hello/world/this_is/awesome"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"/foo/bar/world/this_is/awesome"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsHidden
specifier|public
name|void
name|testIsHidden
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/"
argument_list|,
literal|"foo"
argument_list|,
literal|"/foo"
argument_list|,
literal|"foo.bar"
argument_list|,
literal|"/foo.bar"
argument_list|,
literal|"foo/bar"
argument_list|,
literal|"foo/./bar"
argument_list|,
literal|"foo/../bar"
argument_list|,
literal|"/foo/./bar"
argument_list|,
literal|"/foo/../bar"
argument_list|)
control|)
block|{
name|Path
name|path
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|FileSystemUtils
operator|.
name|isHidden
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|".hidden"
argument_list|,
literal|".hidden.ext"
argument_list|,
literal|"/.hidden"
argument_list|,
literal|"/.hidden.ext"
argument_list|,
literal|"foo/.hidden"
argument_list|,
literal|"foo/.hidden.ext"
argument_list|,
literal|"/foo/.hidden"
argument_list|,
literal|"/foo/.hidden.ext"
argument_list|,
literal|"."
argument_list|,
literal|".."
argument_list|,
literal|"foo/."
argument_list|,
literal|"foo/.."
argument_list|)
control|)
block|{
name|Path
name|path
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileSystemUtils
operator|.
name|isHidden
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

