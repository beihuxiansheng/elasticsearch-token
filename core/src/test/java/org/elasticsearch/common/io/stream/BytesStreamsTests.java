begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|BytesRefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Tests for {@link BytesStreamOutput} paging behaviour.  */
end_comment

begin_class
DECL|class|BytesStreamsTests
specifier|public
class|class
name|BytesStreamsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
comment|// test empty stream to array
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleByte
specifier|public
name|void
name|testSingleByte
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
comment|// write single byte
name|out
operator|.
name|writeByte
argument_list|(
name|expectedData
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleShortPage
specifier|public
name|void
name|testSingleShortPage
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|expectedSize
init|=
literal|10
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
comment|// write byte-by-byte
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSize
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|expectedData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIllegalBulkWrite
specifier|public
name|void
name|testIllegalBulkWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
comment|// bulk-write with wrong args
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|out
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleShortPageBulkWrite
specifier|public
name|void
name|testSingleShortPageBulkWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
comment|// first bulk-write empty array: should not change anything
name|int
name|expectedSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// bulk-write again with actual bytes
name|expectedSize
operator|=
literal|10
expr_stmt|;
name|expectedData
operator|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleFullPageBulkWrite
specifier|public
name|void
name|testSingleFullPageBulkWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|expectedSize
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
comment|// write in bulk
name|out
operator|.
name|writeBytes
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleFullPageBulkWriteWithOffset
specifier|public
name|void
name|testSingleFullPageBulkWriteWithOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|initialOffset
init|=
literal|10
decl_stmt|;
name|int
name|additionalLength
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|initialOffset
operator|+
name|additionalLength
argument_list|)
decl_stmt|;
comment|// first create initial offset
name|out
operator|.
name|writeBytes
argument_list|(
name|expectedData
argument_list|,
literal|0
argument_list|,
name|initialOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialOffset
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now write the rest - more than fits into the remaining first page
name|out
operator|.
name|writeBytes
argument_list|(
name|expectedData
argument_list|,
name|initialOffset
argument_list|,
name|additionalLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedData
operator|.
name|length
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleFullPageBulkWriteWithOffsetCrossover
specifier|public
name|void
name|testSingleFullPageBulkWriteWithOffsetCrossover
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|initialOffset
init|=
literal|10
decl_stmt|;
name|int
name|additionalLength
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
operator|*
literal|2
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|initialOffset
operator|+
name|additionalLength
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|expectedData
argument_list|,
literal|0
argument_list|,
name|initialOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialOffset
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now write the rest - more than fits into the remaining page + a full page after
comment|// that,
comment|// ie. we cross over into a third
name|out
operator|.
name|writeBytes
argument_list|(
name|expectedData
argument_list|,
name|initialOffset
argument_list|,
name|additionalLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedData
operator|.
name|length
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleFullPage
specifier|public
name|void
name|testSingleFullPage
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|expectedSize
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
comment|// write byte-by-byte
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSize
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|expectedData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOneFullOneShortPage
specifier|public
name|void
name|testOneFullOneShortPage
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|expectedSize
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
operator|+
literal|10
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
comment|// write byte-by-byte
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSize
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|expectedData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTwoFullOneShortPage
specifier|public
name|void
name|testTwoFullOneShortPage
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|expectedSize
init|=
operator|(
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
operator|*
literal|2
operator|)
operator|+
literal|1
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
name|randomizedByteArrayWithSize
argument_list|(
name|expectedSize
argument_list|)
decl_stmt|;
comment|// write byte-by-byte
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSize
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|expectedData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedData
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSeek
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
name|position
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|position
operator|+=
literal|10
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|position
operator|+=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|position
operator|+=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
operator|+
literal|10
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
name|position
operator|+=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|position
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|position
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|out
operator|.
name|seek
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BytesStreamOutput cannot hold more than 2GB of data"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
name|position
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|forward
init|=
literal|100
decl_stmt|;
name|out
operator|.
name|skip
argument_list|(
name|forward
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|position
operator|+
name|forward
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|out
operator|.
name|skip
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|50
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"BytesStreamOutput cannot hold more than 2GB of data"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleStreams
specifier|public
name|void
name|testSimpleStreams
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"requires a 64-bit JRE ... ?!"
argument_list|,
name|Constants
operator|.
name|JRE_IS_64BIT
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
operator|-
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalLong
argument_list|(
literal|11234234L
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
literal|2.2
argument_list|)
expr_stmt|;
name|int
index|[]
name|intArray
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|intArray
argument_list|)
expr_stmt|;
name|int
index|[]
name|vIntArray
init|=
block|{
literal|4
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|out
operator|.
name|writeVIntArray
argument_list|(
name|vIntArray
argument_list|)
expr_stmt|;
name|long
index|[]
name|longArray
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|longArray
argument_list|)
expr_stmt|;
name|long
index|[]
name|vLongArray
init|=
block|{
literal|4
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|out
operator|.
name|writeVLongArray
argument_list|(
name|vLongArray
argument_list|)
expr_stmt|;
name|float
index|[]
name|floatArray
init|=
block|{
literal|1.1f
block|,
literal|2.2f
block|,
literal|3.3f
block|}
decl_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|floatArray
argument_list|)
expr_stmt|;
name|double
index|[]
name|doubleArray
init|=
block|{
literal|1.1
block|,
literal|2.2
block|,
literal|3.3
block|}
decl_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|doubleArray
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
literal|"goodbye"
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
literal|"bytesref"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"cat"
block|}
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBytesReference
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalDouble
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalDouble
argument_list|(
literal|1.2
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeTimeZone
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalTimeZone
argument_list|(
name|DateTimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalTimeZone
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|in
operator|.
name|available
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readShort
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readVLong
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readOptionalLong
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11234234L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|in
operator|.
name|readFloat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.1
argument_list|,
literal|0.0001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.2
argument_list|,
literal|0.0001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readGenericValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
name|intArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readVIntArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|vIntArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readGenericValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
name|longArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readVLongArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|vLongArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readGenericValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
name|floatArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readGenericValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
name|doubleArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"goodbye"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readGenericValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
literal|"bytesref"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readStringArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"cat"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readOptionalBytesReference
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|in
operator|.
name|readOptionalDouble
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readOptionalDouble
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.0001
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DateTimeZone
operator|.
name|forID
argument_list|(
literal|"CET"
argument_list|)
argument_list|,
name|in
operator|.
name|readTimeZone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DateTimeZone
operator|.
name|getDefault
argument_list|()
argument_list|,
name|in
operator|.
name|readOptionalTimeZone
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|in
operator|.
name|readOptionalTimeZone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNamedWriteable
specifier|public
name|void
name|testNamedWriteable
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|NamedWriteableRegistry
name|namedWriteableRegistry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|,
name|TestNamedWriteable
operator|.
name|NAME
argument_list|,
name|TestNamedWriteable
operator|::
operator|new
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TestNamedWriteable
name|namedWriteableIn
init|=
operator|new
name|TestNamedWriteable
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|namedWriteableIn
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|in
operator|.
name|available
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|BaseNamedWriteable
name|namedWriteableOut
init|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|namedWriteableIn
argument_list|,
name|namedWriteableOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNamedWriteableList
specifier|public
name|void
name|testNamedWriteableList
parameter_list|()
throws|throws
name|IOException
block|{
name|NamedWriteableRegistry
name|namedWriteableRegistry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|,
name|TestNamedWriteable
operator|.
name|NAME
argument_list|,
name|TestNamedWriteable
operator|::
operator|new
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|between
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BaseNamedWriteable
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TestNamedWriteable
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeNamedWriteableList
argument_list|(
name|expected
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|in
operator|.
name|readNamedWriteableList
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNamedWriteableNotSupportedWithoutWrapping
specifier|public
name|void
name|testNamedWriteableNotSupportedWithoutWrapping
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|TestNamedWriteable
name|testNamedWriteable
init|=
operator|new
name|TestNamedWriteable
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|testNamedWriteable
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"can't read named writeable from StreamInput"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNamedWriteableReaderReturnsNull
specifier|public
name|void
name|testNamedWriteableReaderReturnsNull
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|NamedWriteableRegistry
name|namedWriteableRegistry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|,
name|TestNamedWriteable
operator|.
name|NAME
argument_list|,
parameter_list|(
name|StreamInput
name|in
parameter_list|)
lambda|->
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TestNamedWriteable
name|namedWriteableIn
init|=
operator|new
name|TestNamedWriteable
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|namedWriteableIn
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|in
operator|.
name|available
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|IOException
name|e
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"] returned null which is not allowed and probably means it screwed up the stream."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testOptionalWriteableReaderReturnsNull
specifier|public
name|void
name|testOptionalWriteableReaderReturnsNull
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeOptionalWriteable
argument_list|(
operator|new
name|TestNamedWriteable
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IOException
name|e
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|in
operator|.
name|readOptionalWriteable
argument_list|(
parameter_list|(
name|StreamInput
name|ignored
parameter_list|)
lambda|->
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"] returned null which is not allowed and probably means it screwed up the stream."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWriteableReaderReturnsWrongName
specifier|public
name|void
name|testWriteableReaderReturnsWrongName
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|NamedWriteableRegistry
name|namedWriteableRegistry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|,
name|TestNamedWriteable
operator|.
name|NAME
argument_list|,
parameter_list|(
name|StreamInput
name|in
parameter_list|)
lambda|->
operator|new
name|TestNamedWriteable
argument_list|(
name|in
argument_list|)
block|{
block|@Override                                 public String getWriteableName(
argument_list|)
block|{
return|return
literal|"intentionally-broken"
return|;
block|}
block|}
block|)
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|TestNamedWriteable
name|namedWriteableIn
init|=
operator|new
name|TestNamedWriteable
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|out
operator|.
name|writeNamedWriteable
argument_list|(
name|namedWriteableIn
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|byte
index|[]
name|bytes
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_try
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|in
operator|.
name|available
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|AssertionError
name|e
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|BaseNamedWriteable
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|" claims to have a different name [intentionally-broken] than it was read from [test-named-writeable]."
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_try

begin_function
unit|}     }
DECL|method|testWriteStreamableList
specifier|public
name|void
name|testWriteStreamableList
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TestStreamable
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
operator|new
name|TestStreamable
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeStreamableList
argument_list|(
name|expected
argument_list|)
expr_stmt|;
specifier|final
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TestStreamable
argument_list|>
name|loaded
init|=
name|in
operator|.
name|readStreamableList
argument_list|(
name|TestStreamable
operator|::
operator|new
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loaded
argument_list|,
name|hasSize
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|,
name|loaded
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWriteMapOfLists
specifier|public
name|void
name|testWriteMapOfLists
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|int
name|listSize
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|listSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listSize
condition|;
operator|++
name|j
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|put
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|2
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeMapOfLists
argument_list|(
name|expected
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|,
name|StreamOutput
operator|::
name|writeString
argument_list|)
expr_stmt|;
specifier|final
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|loaded
init|=
name|in
operator|.
name|readMapOfLists
argument_list|(
name|StreamInput
operator|::
name|readString
argument_list|,
name|StreamInput
operator|::
name|readString
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loaded
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|expected
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|loaded
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|loadedList
init|=
name|loaded
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|loadedList
argument_list|,
name|hasSize
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loadedList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|loadedList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|BaseNamedWriteable
specifier|private
specifier|abstract
specifier|static
class|class
name|BaseNamedWriteable
implements|implements
name|NamedWriteable
block|{      }
end_class

begin_class
DECL|class|TestNamedWriteable
specifier|private
specifier|static
class|class
name|TestNamedWriteable
extends|extends
name|BaseNamedWriteable
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"test-named-writeable"
decl_stmt|;
DECL|field|field1
specifier|private
specifier|final
name|String
name|field1
decl_stmt|;
DECL|field|field2
specifier|private
specifier|final
name|String
name|field2
decl_stmt|;
DECL|method|TestNamedWriteable
name|TestNamedWriteable
parameter_list|(
name|String
name|field1
parameter_list|,
name|String
name|field2
parameter_list|)
block|{
name|this
operator|.
name|field1
operator|=
name|field1
expr_stmt|;
name|this
operator|.
name|field2
operator|=
name|field2
expr_stmt|;
block|}
DECL|method|TestNamedWriteable
specifier|public
name|TestNamedWriteable
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|field1
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|field2
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|field2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TestNamedWriteable
name|that
init|=
operator|(
name|TestNamedWriteable
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|field1
argument_list|,
name|that
operator|.
name|field1
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|field2
argument_list|,
name|that
operator|.
name|field2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|field1
argument_list|,
name|field2
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// we ignore this test for now since all existing callers of BytesStreamOutput happily
end_comment

begin_comment
comment|// call bytes() after close().
end_comment

begin_function
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://github.com/elastic/elasticsearch/issues/12620"
argument_list|)
DECL|method|testAccessAfterClose
specifier|public
name|void
name|testAccessAfterClose
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
comment|// immediately close
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
comment|// writing a single byte must fail
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// writing in bulk must fail
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|out
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// toByteArray() must fail
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// create& fill byte[] with randomized data
end_comment

begin_function
DECL|method|randomizedByteArrayWithSize
specifier|protected
name|byte
index|[]
name|randomizedByteArrayWithSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function

begin_function
DECL|method|testReadWriteGeoPoint
specifier|public
name|void
name|testReadWriteGeoPoint
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
empty_stmt|;
name|GeoPoint
name|geoPoint
init|=
operator|new
name|GeoPoint
argument_list|(
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|geoPoint
argument_list|)
expr_stmt|;
name|StreamInput
name|wrap
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|GeoPoint
name|point
init|=
operator|(
name|GeoPoint
operator|)
name|wrap
operator|.
name|readGenericValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|point
argument_list|,
name|geoPoint
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|GeoPoint
name|geoPoint
init|=
operator|new
name|GeoPoint
argument_list|(
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeGeoPoint
argument_list|(
name|geoPoint
argument_list|)
expr_stmt|;
name|StreamInput
name|wrap
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|GeoPoint
name|point
init|=
name|wrap
operator|.
name|readGeoPoint
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|point
argument_list|,
name|geoPoint
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|TestStreamable
specifier|private
specifier|static
class|class
name|TestStreamable
implements|implements
name|Streamable
block|{
DECL|field|value
specifier|private
name|boolean
name|value
decl_stmt|;
DECL|method|TestStreamable
specifier|public
name|TestStreamable
parameter_list|()
block|{ }
DECL|method|TestStreamable
specifier|public
name|TestStreamable
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|value
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|testWriteMapWithConsistentOrder
specifier|public
name|void
name|testWriteMapWithConsistentOrder
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|randomMap
argument_list|(
operator|new
name|TreeMap
argument_list|<>
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reverseMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
decl_stmt|;
name|reverseMap
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mapKeys
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reverseMapKeys
init|=
name|reverseMap
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|mapKeys
argument_list|,
name|reverseMapKeys
argument_list|)
expr_stmt|;
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|;
name|BytesStreamOutput
name|reverseMapOutput
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|output
operator|.
name|writeMapWithConsistentOrder
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|reverseMapOutput
operator|.
name|writeMapWithConsistentOrder
argument_list|(
name|reverseMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
argument_list|,
name|reverseMapOutput
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testReadMapByUsingWriteMapWithConsistentOrder
specifier|public
name|void
name|testReadMapByUsingWriteMapWithConsistentOrder
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|streamOutMap
init|=
name|randomMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|streamOut
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|streamOut
operator|.
name|writeMapWithConsistentOrder
argument_list|(
name|streamOutMap
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|streamOut
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|streamInMap
init|=
name|in
operator|.
name|readMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|streamOutMap
argument_list|,
name|streamInMap
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError
specifier|public
name|void
name|testWriteMapWithConsistentOrderWithLinkedHashMapShouldThrowAssertError
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Throwable
name|e
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|output
operator|.
name|writeMapWithConsistentOrder
argument_list|(
name|map
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|randomMap
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|randomMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|int
name|size
parameter_list|,
name|Supplier
argument_list|<
name|K
argument_list|>
name|keyGenerator
parameter_list|,
name|Supplier
argument_list|<
name|V
argument_list|>
name|valueGenerator
parameter_list|)
block|{
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|map
operator|.
name|put
argument_list|(
name|keyGenerator
operator|.
name|get
argument_list|()
argument_list|,
name|valueGenerator
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
end_function

begin_function
DECL|method|testWriteRandomStrings
specifier|public
name|void
name|testWriteRandomStrings
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numStrings
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStrings
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|randomRealisticUnicodeOfLengthBetween
argument_list|(
literal|0
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|strings
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|StreamInput
name|streamInput
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStrings
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|streamInput
operator|.
name|readString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|strings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/*      * tests the extreme case where characters use more than 2 bytes      */
end_comment

begin_function
DECL|method|testWriteLargeSurrogateOnlyString
specifier|public
name|void
name|testWriteLargeSurrogateOnlyString
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|deseretLetter
init|=
literal|"\uD801\uDC00"
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deseretLetter
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|largeString
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|2048
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|s
lambda|->
name|deseretLetter
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expands to 4 bytes"
argument_list|,
literal|4
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|deseretLetter
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|output
operator|.
name|writeString
argument_list|(
name|largeString
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|streamInput
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
name|largeString
argument_list|,
name|streamInput
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testReadTooLargeArraySize
specifier|public
name|void
name|testReadTooLargeArraySize
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|output
operator|.
name|writeVInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeVInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|StreamInput
name|streamInput
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|int
index|[]
name|ints
init|=
name|streamInput
operator|.
name|readIntArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|streamInput
operator|.
name|readIntArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testReadCorruptedArraySize
specifier|public
name|void
name|testReadCorruptedArraySize
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|output
operator|.
name|writeVInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeVInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|StreamInput
name|streamInput
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|int
index|[]
name|ints
init|=
name|streamInput
operator|.
name|readIntArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|EOFException
name|eofException
init|=
name|expectThrows
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|streamInput
operator|.
name|readIntArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tried to read: 100 bytes but only 40 remaining"
argument_list|,
name|eofException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testReadNegativeArraySize
specifier|public
name|void
name|testReadNegativeArraySize
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|output
operator|.
name|writeVInt
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeVInt
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|StreamInput
name|streamInput
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|int
index|[]
name|ints
init|=
name|streamInput
operator|.
name|readIntArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|ints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|NegativeArraySizeException
name|exception
init|=
name|expectThrows
argument_list|(
name|NegativeArraySizeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|streamInput
operator|.
name|readIntArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"array size must be positive but was: -2147483648"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

unit|}
end_unit

