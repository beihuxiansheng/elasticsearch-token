begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Abstract class offering base functionality for testing @{link Writeable} enums.  */
end_comment

begin_class
DECL|class|AbstractWriteableEnumTestCase
specifier|public
specifier|abstract
class|class
name|AbstractWriteableEnumTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|reader
specifier|private
specifier|final
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
name|reader
decl_stmt|;
DECL|method|AbstractWriteableEnumTestCase
specifier|public
name|AbstractWriteableEnumTestCase
parameter_list|(
name|Writeable
operator|.
name|Reader
argument_list|<
name|?
argument_list|>
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
comment|/**      * Test that the ordinals for the enum are consistent (i.e. the order hasn't changed)      * because writing an enum to a stream often uses the ordinal value.      */
DECL|method|testValidOrdinals
specifier|public
specifier|abstract
name|void
name|testValidOrdinals
parameter_list|()
function_decl|;
comment|/**      * Test that the conversion from a string to enum is correct.      */
DECL|method|testFromString
specifier|public
specifier|abstract
name|void
name|testFromString
parameter_list|()
function_decl|;
comment|/**      * Test that the correct enum value is produced from the serialized value in the {@link StreamInput}.      */
DECL|method|testReadFrom
specifier|public
specifier|abstract
name|void
name|testReadFrom
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Test that the correct serialized value is produced from the {@link StreamOutput}.      */
DECL|method|testWriteTo
specifier|public
specifier|abstract
name|void
name|testWriteTo
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|// a convenience method for testing the write of a writeable enum
DECL|method|assertWriteToStream
specifier|protected
specifier|static
name|void
name|assertWriteToStream
parameter_list|(
specifier|final
name|Writeable
name|writeableEnum
parameter_list|,
specifier|final
name|int
name|ordinal
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|writeableEnum
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ordinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// a convenience method for testing the read of a writeable enum
DECL|method|assertReadFromStream
specifier|protected
name|void
name|assertReadFromStream
parameter_list|(
specifier|final
name|int
name|ordinal
parameter_list|,
specifier|final
name|Writeable
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|reader
operator|.
name|read
argument_list|(
name|in
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

