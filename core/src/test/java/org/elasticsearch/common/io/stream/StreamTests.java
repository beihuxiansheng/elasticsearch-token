begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io.stream
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|ByteBufferBytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|StreamTests
specifier|public
class|class
name|StreamTests
extends|extends
name|ESTestCase
block|{
DECL|method|testRandomVLongSerialization
specifier|public
name|void
name|testRandomVLongSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|long
name|write
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeZLong
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|long
name|read
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
operator|.
name|readZLong
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|write
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSpecificVLongSerialization
specifier|public
name|void
name|testSpecificVLongSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Tuple
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|0L
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
operator|-
literal|1L
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|1L
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
operator|-
literal|2L
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
literal|2L
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|}
argument_list|)
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|2
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|value
range|:
name|values
control|)
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeZLong
argument_list|(
name|value
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|value
operator|.
name|v1
argument_list|()
argument_list|)
argument_list|,
name|value
operator|.
name|v2
argument_list|()
argument_list|,
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBufferBytesReference
name|bytes
init|=
operator|new
name|ByteBufferBytesReference
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|value
operator|.
name|v2
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|value
operator|.
name|v2
argument_list|()
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|value
operator|.
name|v1
argument_list|()
argument_list|,
name|bytes
operator|.
name|streamInput
argument_list|()
operator|.
name|readZLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

