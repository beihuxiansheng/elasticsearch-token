begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ByteBufferStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Basic tests for the {@link BoundTransportAddress} class. These tests should not bind to any addresses but should  * just test things like serialization and exception handling...  */
end_comment

begin_class
DECL|class|BoundTransportAddressTests
specifier|public
class|class
name|BoundTransportAddressTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
index|[]
name|inetAddresses
init|=
name|InetAddress
operator|.
name|getAllByName
argument_list|(
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InetSocketTransportAddress
argument_list|>
name|transportAddressList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|InetAddress
name|address
range|:
name|inetAddresses
control|)
block|{
name|transportAddressList
operator|.
name|add
argument_list|(
operator|new
name|InetSocketTransportAddress
argument_list|(
name|address
argument_list|,
name|randomIntBetween
argument_list|(
literal|9200
argument_list|,
literal|9299
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BoundTransportAddress
name|transportAddress
init|=
operator|new
name|BoundTransportAddress
argument_list|(
name|transportAddressList
operator|.
name|toArray
argument_list|(
operator|new
name|InetSocketTransportAddress
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|transportAddressList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|transportAddress
operator|.
name|boundAddresses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|transportAddressList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// serialize
name|BytesStreamOutput
name|streamOutput
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|transportAddress
operator|.
name|writeTo
argument_list|(
name|streamOutput
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|ByteBufferStreamInput
operator|.
name|wrap
argument_list|(
name|streamOutput
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|BoundTransportAddress
name|serializedAddress
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|serializedAddress
operator|=
name|BoundTransportAddress
operator|.
name|readBoundTransportAddress
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializedAddress
operator|=
operator|new
name|BoundTransportAddress
argument_list|()
expr_stmt|;
name|serializedAddress
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|serializedAddress
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|transportAddress
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serializedAddress
operator|.
name|boundAddresses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|transportAddress
operator|.
name|boundAddresses
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|serializedAddress
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|transportAddress
operator|.
name|publishAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TransportAddress
index|[]
name|serializedBoundAddresses
init|=
name|serializedAddress
operator|.
name|boundAddresses
argument_list|()
decl_stmt|;
name|TransportAddress
index|[]
name|boundAddresses
init|=
name|transportAddress
operator|.
name|boundAddresses
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|serializedBoundAddresses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|serializedBoundAddresses
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|boundAddresses
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadBoundAddressArray
specifier|public
name|void
name|testBadBoundAddressArray
parameter_list|()
block|{
try|try
block|{
name|TransportAddress
index|[]
name|badArray
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|TransportAddress
index|[
literal|0
index|]
decl_stmt|;
operator|new
name|BoundTransportAddress
argument_list|(
name|badArray
argument_list|,
operator|new
name|InetSocketTransportAddress
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an exception to be thrown due to no bound address"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
block|}
end_class

end_unit

