begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Implements exponentially weighted moving averages (commonly abbreviated EWMA) for a single value.  */
end_comment

begin_class
DECL|class|ExponentiallyWeightedMovingAverageTests
specifier|public
class|class
name|ExponentiallyWeightedMovingAverageTests
extends|extends
name|ESTestCase
block|{
DECL|method|testEWMA
specifier|public
name|void
name|testEWMA
parameter_list|()
block|{
specifier|final
name|ExponentiallyWeightedMovingAverage
name|ewma
init|=
operator|new
name|ExponentiallyWeightedMovingAverage
argument_list|(
literal|0.5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ewma
operator|.
name|addValue
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ewma
operator|.
name|getAverage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11.0
argument_list|)
argument_list|)
expr_stmt|;
name|ewma
operator|.
name|addValue
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ewma
operator|.
name|addValue
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|ewma
operator|.
name|addValue
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ewma
operator|.
name|getAverage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12.875
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidAlpha
specifier|public
name|void
name|testInvalidAlpha
parameter_list|()
block|{
try|try
block|{
name|ExponentiallyWeightedMovingAverage
name|ewma
init|=
operator|new
name|ExponentiallyWeightedMovingAverage
argument_list|(
operator|-
literal|0.5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"should have failed to create EWMA"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"alpha must be greater or equal to 0 and less than or equal to 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ExponentiallyWeightedMovingAverage
name|ewma
init|=
operator|new
name|ExponentiallyWeightedMovingAverage
argument_list|(
literal|1.5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"should have failed to create EWMA"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"alpha must be greater or equal to 0 and less than or equal to 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConvergingToValue
specifier|public
name|void
name|testConvergingToValue
parameter_list|()
block|{
specifier|final
name|ExponentiallyWeightedMovingAverage
name|ewma
init|=
operator|new
name|ExponentiallyWeightedMovingAverage
argument_list|(
literal|0.5
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|ewma
operator|.
name|addValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ewma
operator|.
name|getAverage
argument_list|()
argument_list|,
name|lessThan
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

