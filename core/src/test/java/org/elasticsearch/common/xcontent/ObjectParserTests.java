begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
operator|.
name|NamedObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ObjectParser
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_class
DECL|class|ObjectParserTests
specifier|public
class|class
name|ObjectParserTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"test\" : \"foo\",\n"
operator|+
literal|"  \"test_number\" : 2,\n"
operator|+
literal|"  \"testArray\":  [1,2,3,4]\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
class|class
name|TestStruct
block|{
specifier|public
name|String
name|test
decl_stmt|;
name|int
name|testNumber
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setTestNumber
parameter_list|(
name|int
name|testNumber
parameter_list|)
block|{
name|this
operator|.
name|testNumber
operator|=
name|testNumber
expr_stmt|;
block|}
specifier|public
name|void
name|setInts
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|ints
parameter_list|)
block|{
name|this
operator|.
name|ints
operator|=
name|ints
expr_stmt|;
block|}
block|}
name|ObjectParser
argument_list|<
name|TestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|TestStruct
name|s
init|=
operator|new
name|TestStruct
argument_list|()
decl_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|i
parameter_list|,
name|c
parameter_list|,
name|x
parameter_list|)
lambda|->
name|c
operator|.
name|test
operator|=
name|i
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareInt
argument_list|(
name|TestStruct
operator|::
name|setTestNumber
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test_number"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareIntArray
argument_list|(
name|TestStruct
operator|::
name|setInts
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test_array"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setParseFieldMatcher
argument_list|(
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|test
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|testNumber
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|ints
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|objectParser
operator|.
name|toString
argument_list|()
argument_list|,
literal|"ObjectParser{name='foo', fields=["
operator|+
literal|"FieldParser{preferred_name=test, supportedTokens=[VALUE_STRING], type=STRING}, "
operator|+
literal|"FieldParser{preferred_name=test_number, supportedTokens=[VALUE_STRING, VALUE_NUMBER], type=INT}, "
operator|+
literal|"FieldParser{preferred_name=test_array, supportedTokens=[START_ARRAY, VALUE_STRING, VALUE_NUMBER], type=INT_ARRAY}, "
operator|+
literal|"FieldParser{preferred_name=test_array, supportedTokens=[START_ARRAY, VALUE_STRING, VALUE_NUMBER], type=INT_ARRAY}, "
operator|+
literal|"FieldParser{preferred_name=test_number, supportedTokens=[VALUE_STRING, VALUE_NUMBER], type=INT}]}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testObjectOrDefault
specifier|public
name|void
name|testObjectOrDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"object\" : { \"test\": 2}}"
argument_list|)
decl_stmt|;
name|ObjectParser
argument_list|<
name|StaticTestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|,
name|StaticTestStruct
operator|::
operator|new
argument_list|)
decl_stmt|;
name|objectParser
operator|.
name|declareInt
argument_list|(
name|StaticTestStruct
operator|::
name|setTest
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareObjectOrDefault
argument_list|(
name|StaticTestStruct
operator|::
name|setObject
argument_list|,
name|objectParser
argument_list|,
name|StaticTestStruct
operator|::
operator|new
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"object"
argument_list|)
argument_list|)
expr_stmt|;
name|StaticTestStruct
name|s
init|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|object
operator|.
name|test
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|parser
operator|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"object\" : false }"
argument_list|)
expr_stmt|;
name|s
operator|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|s
operator|.
name|object
argument_list|)
expr_stmt|;
name|parser
operator|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"object\" : true }"
argument_list|)
expr_stmt|;
name|s
operator|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|s
operator|.
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|object
operator|.
name|test
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testExceptions
specifier|public
name|void
name|testExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"test\" : \"foo\"}"
argument_list|)
decl_stmt|;
class|class
name|TestStruct
block|{
specifier|public
name|void
name|setTest
parameter_list|(
name|int
name|test
parameter_list|)
block|{             }
block|}
name|ObjectParser
argument_list|<
name|TestStruct
argument_list|,
name|TestStruct
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"the_parser"
argument_list|)
decl_stmt|;
name|TestStruct
name|s
init|=
operator|new
name|TestStruct
argument_list|()
decl_stmt|;
name|objectParser
operator|.
name|declareInt
argument_list|(
name|TestStruct
operator|::
name|setTest
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"numeric value expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParsingException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"[the_parser] failed to parse field [test]"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NumberFormatException
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"not_supported_field\" : \"foo\"}"
argument_list|)
expr_stmt|;
try|try
block|{
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"field not supported"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"[the_parser] unknown field [not_supported_field], parser not found"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDeprecationFail
specifier|public
name|void
name|testDeprecationFail
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"old_test\" : \"foo\"}"
argument_list|)
decl_stmt|;
class|class
name|TestStruct
block|{
specifier|public
name|String
name|test
decl_stmt|;
block|}
name|ObjectParser
argument_list|<
name|TestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|TestStruct
name|s
init|=
operator|new
name|TestStruct
argument_list|()
decl_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|i
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
lambda|->
name|v
operator|.
name|test
operator|=
name|i
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test"
argument_list|,
literal|"old_test"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setParseFieldMatcher
argument_list|(
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
try|try
block|{
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"deprecated value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Deprecated field [old_test] used, expected [test] instead"
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|s
operator|.
name|test
argument_list|)
expr_stmt|;
name|parser
operator|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"old_test\" : \"foo\"}"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setParseFieldMatcher
argument_list|(
name|ParseFieldMatcher
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|s
operator|.
name|test
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailOnValueType
specifier|public
name|void
name|testFailOnValueType
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"numeric_value\" : false}"
argument_list|)
decl_stmt|;
class|class
name|TestStruct
block|{
specifier|public
name|String
name|test
decl_stmt|;
block|}
name|ObjectParser
argument_list|<
name|TestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|TestStruct
name|s
init|=
operator|new
name|TestStruct
argument_list|()
decl_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|i
parameter_list|,
name|c
parameter_list|,
name|x
parameter_list|)
lambda|->
name|c
operator|.
name|test
operator|=
name|i
operator|.
name|text
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"numeric_value"
argument_list|)
argument_list|,
name|ObjectParser
operator|.
name|ValueType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setParseFieldMatcher
argument_list|(
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
try|try
block|{
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"wrong type - must be number"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"[foo] numeric_value doesn't support values of type: VALUE_BOOLEAN"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseNested
specifier|public
name|void
name|testParseNested
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{ \"test\" : 1, \"object\" : { \"test\": 2}}"
argument_list|)
decl_stmt|;
class|class
name|TestStruct
block|{
specifier|public
name|int
name|test
decl_stmt|;
name|TestStruct
name|object
decl_stmt|;
block|}
name|ObjectParser
argument_list|<
name|TestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|TestStruct
name|s
init|=
operator|new
name|TestStruct
argument_list|()
decl_stmt|;
name|s
operator|.
name|object
operator|=
operator|new
name|TestStruct
argument_list|()
expr_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|i
parameter_list|,
name|c
parameter_list|,
name|x
parameter_list|)
lambda|->
name|c
operator|.
name|test
operator|=
name|i
operator|.
name|intValue
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|ValueType
operator|.
name|INT
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareField
argument_list|(
parameter_list|(
name|i
parameter_list|,
name|c
parameter_list|,
name|x
parameter_list|)
lambda|->
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|c
operator|.
name|object
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"object"
argument_list|)
argument_list|,
name|ValueType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|test
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|object
operator|.
name|test
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseNestedShortcut
specifier|public
name|void
name|testParseNestedShortcut
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{ \"test\" : 1, \"object\" : { \"test\": 2}}"
argument_list|)
decl_stmt|;
name|ObjectParser
argument_list|<
name|StaticTestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|,
name|StaticTestStruct
operator|::
operator|new
argument_list|)
decl_stmt|;
name|objectParser
operator|.
name|declareInt
argument_list|(
name|StaticTestStruct
operator|::
name|setTest
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareObject
argument_list|(
name|StaticTestStruct
operator|::
name|setObject
argument_list|,
name|objectParser
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"object"
argument_list|)
argument_list|)
expr_stmt|;
name|StaticTestStruct
name|s
init|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|test
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|object
operator|.
name|test
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyObject
specifier|public
name|void
name|testEmptyObject
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"object\" : {}}"
argument_list|)
decl_stmt|;
name|ObjectParser
argument_list|<
name|StaticTestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|,
name|StaticTestStruct
operator|::
operator|new
argument_list|)
decl_stmt|;
name|objectParser
operator|.
name|declareObject
argument_list|(
name|StaticTestStruct
operator|::
name|setObject
argument_list|,
name|objectParser
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"object"
argument_list|)
argument_list|)
expr_stmt|;
name|StaticTestStruct
name|s
init|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
operator|.
name|object
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyObjectInArray
specifier|public
name|void
name|testEmptyObjectInArray
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"object_array\" : [{}]}"
argument_list|)
decl_stmt|;
name|ObjectParser
argument_list|<
name|StaticTestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|,
name|StaticTestStruct
operator|::
operator|new
argument_list|)
decl_stmt|;
name|objectParser
operator|.
name|declareObjectArray
argument_list|(
name|StaticTestStruct
operator|::
name|setObjectArray
argument_list|,
name|objectParser
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"object_array"
argument_list|)
argument_list|)
expr_stmt|;
name|StaticTestStruct
name|s
init|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
operator|.
name|objectArray
argument_list|)
expr_stmt|;
block|}
DECL|class|StaticTestStruct
specifier|static
class|class
name|StaticTestStruct
block|{
DECL|field|test
name|int
name|test
decl_stmt|;
DECL|field|object
name|StaticTestStruct
name|object
decl_stmt|;
DECL|field|objectArray
name|List
argument_list|<
name|StaticTestStruct
argument_list|>
name|objectArray
decl_stmt|;
DECL|method|setTest
specifier|public
name|void
name|setTest
parameter_list|(
name|int
name|test
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
block|}
DECL|method|setObject
specifier|public
name|void
name|setObject
parameter_list|(
name|StaticTestStruct
name|object
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
DECL|method|setObjectArray
specifier|public
name|void
name|setObjectArray
parameter_list|(
name|List
argument_list|<
name|StaticTestStruct
argument_list|>
name|objectArray
parameter_list|)
block|{
name|this
operator|.
name|objectArray
operator|=
name|objectArray
expr_stmt|;
block|}
block|}
DECL|enum|TestEnum
enum|enum
name|TestEnum
block|{
DECL|enum constant|FOO
DECL|enum constant|BAR
name|FOO
block|,
name|BAR
block|}
empty_stmt|;
DECL|method|testParseEnumFromString
specifier|public
name|void
name|testParseEnumFromString
parameter_list|()
throws|throws
name|IOException
block|{
class|class
name|TestStruct
block|{
specifier|public
name|TestEnum
name|test
decl_stmt|;
specifier|public
name|void
name|set
parameter_list|(
name|TestEnum
name|value
parameter_list|)
block|{
name|test
operator|=
name|value
expr_stmt|;
block|}
block|}
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{ \"test\" : \"FOO\" }"
argument_list|)
decl_stmt|;
name|ObjectParser
argument_list|<
name|TestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|objectParser
operator|.
name|declareString
argument_list|(
parameter_list|(
name|struct
parameter_list|,
name|value
parameter_list|)
lambda|->
name|struct
operator|.
name|set
argument_list|(
name|TestEnum
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|TestStruct
name|s
init|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
operator|new
name|TestStruct
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|test
argument_list|,
name|TestEnum
operator|.
name|FOO
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllVariants
specifier|public
name|void
name|testAllVariants
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"int_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"1"
else|:
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"int_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"1"
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"int_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"1"
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"double_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"2.1"
else|:
literal|2.1d
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"double_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"2.1"
else|:
literal|2.1d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"double_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"2.1"
else|:
literal|2.1d
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"float_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"3.1"
else|:
literal|3.1f
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"float_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"3.1"
else|:
literal|3.1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"float_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"3.1"
else|:
literal|3.1
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"long_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"4"
else|:
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"long_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"4"
else|:
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"long_array_field"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"4"
else|:
literal|4
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"string_field"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"string_array_field"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"string_array_field"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|nullValue
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"boolean_field"
argument_list|,
name|nullValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"string_or_null"
argument_list|,
name|nullValue
condition|?
literal|null
else|:
literal|"5"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
decl_stmt|;
class|class
name|TestStruct
block|{
name|int
name|int_field
decl_stmt|;
name|long
name|long_field
decl_stmt|;
name|float
name|float_field
decl_stmt|;
name|double
name|double_field
decl_stmt|;
name|String
name|string_field
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|int_array_field
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|long_array_field
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|float_array_field
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|double_array_field
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|string_array_field
decl_stmt|;
name|boolean
name|null_value
decl_stmt|;
name|String
name|string_or_null
init|=
literal|"adsfsa"
decl_stmt|;
specifier|public
name|void
name|setInt_field
parameter_list|(
name|int
name|int_field
parameter_list|)
block|{
name|this
operator|.
name|int_field
operator|=
name|int_field
expr_stmt|;
block|}
specifier|public
name|void
name|setLong_field
parameter_list|(
name|long
name|long_field
parameter_list|)
block|{
name|this
operator|.
name|long_field
operator|=
name|long_field
expr_stmt|;
block|}
specifier|public
name|void
name|setFloat_field
parameter_list|(
name|float
name|float_field
parameter_list|)
block|{
name|this
operator|.
name|float_field
operator|=
name|float_field
expr_stmt|;
block|}
specifier|public
name|void
name|setDouble_field
parameter_list|(
name|double
name|double_field
parameter_list|)
block|{
name|this
operator|.
name|double_field
operator|=
name|double_field
expr_stmt|;
block|}
specifier|public
name|void
name|setString_field
parameter_list|(
name|String
name|string_field
parameter_list|)
block|{
name|this
operator|.
name|string_field
operator|=
name|string_field
expr_stmt|;
block|}
specifier|public
name|void
name|setInt_array_field
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|int_array_field
parameter_list|)
block|{
name|this
operator|.
name|int_array_field
operator|=
name|int_array_field
expr_stmt|;
block|}
specifier|public
name|void
name|setLong_array_field
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|long_array_field
parameter_list|)
block|{
name|this
operator|.
name|long_array_field
operator|=
name|long_array_field
expr_stmt|;
block|}
specifier|public
name|void
name|setFloat_array_field
parameter_list|(
name|List
argument_list|<
name|Float
argument_list|>
name|float_array_field
parameter_list|)
block|{
name|this
operator|.
name|float_array_field
operator|=
name|float_array_field
expr_stmt|;
block|}
specifier|public
name|void
name|setDouble_array_field
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|double_array_field
parameter_list|)
block|{
name|this
operator|.
name|double_array_field
operator|=
name|double_array_field
expr_stmt|;
block|}
specifier|public
name|void
name|setString_array_field
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|string_array_field
parameter_list|)
block|{
name|this
operator|.
name|string_array_field
operator|=
name|string_array_field
expr_stmt|;
block|}
specifier|public
name|void
name|setNull_value
parameter_list|(
name|boolean
name|null_value
parameter_list|)
block|{
name|this
operator|.
name|null_value
operator|=
name|null_value
expr_stmt|;
block|}
specifier|public
name|void
name|setString_or_null
parameter_list|(
name|String
name|string_or_null
parameter_list|)
block|{
name|this
operator|.
name|string_or_null
operator|=
name|string_or_null
expr_stmt|;
block|}
block|}
name|ObjectParser
argument_list|<
name|TestStruct
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|objectParser
operator|.
name|declareInt
argument_list|(
name|TestStruct
operator|::
name|setInt_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"int_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareIntArray
argument_list|(
name|TestStruct
operator|::
name|setInt_array_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"int_array_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareLong
argument_list|(
name|TestStruct
operator|::
name|setLong_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"long_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareLongArray
argument_list|(
name|TestStruct
operator|::
name|setLong_array_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"long_array_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareDouble
argument_list|(
name|TestStruct
operator|::
name|setDouble_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"double_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareDoubleArray
argument_list|(
name|TestStruct
operator|::
name|setDouble_array_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"double_array_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareFloat
argument_list|(
name|TestStruct
operator|::
name|setFloat_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"float_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareFloatArray
argument_list|(
name|TestStruct
operator|::
name|setFloat_array_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"float_array_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareString
argument_list|(
name|TestStruct
operator|::
name|setString_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"string_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareStringArray
argument_list|(
name|TestStruct
operator|::
name|setString_array_field
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"string_array_field"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareStringOrNull
argument_list|(
name|TestStruct
operator|::
name|setString_or_null
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"string_or_null"
argument_list|)
argument_list|)
expr_stmt|;
name|objectParser
operator|.
name|declareBoolean
argument_list|(
name|TestStruct
operator|::
name|setNull_value
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"boolean_field"
argument_list|)
argument_list|)
expr_stmt|;
name|TestStruct
name|parse
init|=
name|objectParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
operator|new
name|TestStruct
argument_list|()
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|parse
operator|.
name|double_array_field
operator|.
name|toArray
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2.1d
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parse
operator|.
name|double_field
argument_list|,
literal|2.1d
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|parse
operator|.
name|long_array_field
operator|.
name|toArray
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|4L
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parse
operator|.
name|long_field
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|parse
operator|.
name|string_array_field
operator|.
name|toArray
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"5"
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parse
operator|.
name|string_field
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|parse
operator|.
name|int_array_field
operator|.
name|toArray
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parse
operator|.
name|int_field
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|parse
operator|.
name|float_array_field
operator|.
name|toArray
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|3.1f
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parse
operator|.
name|float_field
argument_list|,
literal|3.1f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nullValue
argument_list|,
name|parse
operator|.
name|null_value
argument_list|)
expr_stmt|;
if|if
condition|(
name|nullValue
condition|)
block|{
name|assertNull
argument_list|(
name|parse
operator|.
name|string_or_null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|parse
operator|.
name|string_field
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseNamedObject
specifier|public
name|void
name|testParseNamedObject
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"named\": {\n"
operator|+
literal|"  \"a\": {}"
operator|+
literal|"}}"
argument_list|)
decl_stmt|;
name|NamedObjectHolder
name|h
init|=
name|NamedObjectHolder
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|h
operator|.
name|named
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|h
operator|.
name|named
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|namedSuppliedInOrder
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseNamedObjectInOrder
specifier|public
name|void
name|testParseNamedObjectInOrder
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"named\": [\n"
operator|+
literal|"  {\"a\": {}}"
operator|+
literal|"]}"
argument_list|)
decl_stmt|;
name|NamedObjectHolder
name|h
init|=
name|NamedObjectHolder
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|h
operator|.
name|named
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|h
operator|.
name|named
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|namedSuppliedInOrder
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseNamedObjectTwoFieldsInArray
specifier|public
name|void
name|testParseNamedObjectTwoFieldsInArray
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"named\": [\n"
operator|+
literal|"  {\"a\": {}, \"b\": {}}"
operator|+
literal|"]}"
argument_list|)
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NamedObjectHolder
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[named_object_holder] failed to parse field [named]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[named] can be a single object with any number of fields or an array where each entry is an object with a single field"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseNamedObjectNoFieldsInArray
specifier|public
name|void
name|testParseNamedObjectNoFieldsInArray
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"named\": [\n"
operator|+
literal|"  {}"
operator|+
literal|"]}"
argument_list|)
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NamedObjectHolder
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[named_object_holder] failed to parse field [named]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[named] can be a single object with any number of fields or an array where each entry is an object with a single field"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseNamedObjectJunkInArray
specifier|public
name|void
name|testParseNamedObjectJunkInArray
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"named\": [\n"
operator|+
literal|"  \"junk\""
operator|+
literal|"]}"
argument_list|)
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|NamedObjectHolder
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[named_object_holder] failed to parse field [named]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[named] can be a single object with any number of fields or an array where each entry is an object with a single field"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseNamedObjectInOrderNotSupported
specifier|public
name|void
name|testParseNamedObjectInOrderNotSupported
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\"named\": [\n"
operator|+
literal|"  {\"a\": {}}"
operator|+
literal|"]}"
argument_list|)
decl_stmt|;
comment|// Create our own parser for this test so we can disable support for the "ordered" mode specified by the array above
name|ObjectParser
argument_list|<
name|NamedObjectHolder
argument_list|,
name|Void
argument_list|>
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"named_object_holder"
argument_list|,
name|NamedObjectHolder
operator|::
operator|new
argument_list|)
decl_stmt|;
name|objectParser
operator|.
name|declareNamedObjects
argument_list|(
name|NamedObjectHolder
operator|::
name|setNamed
argument_list|,
name|NamedObject
operator|.
name|PARSER
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"named"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now firing the xml through it fails
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|objectParser
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[named_object_holder] failed to parse field [named]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[named] doesn't support arrays. Use a single object with multiple fields."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|NamedObjectHolder
specifier|static
class|class
name|NamedObjectHolder
block|{
DECL|field|PARSER
specifier|public
specifier|static
specifier|final
name|ObjectParser
argument_list|<
name|NamedObjectHolder
argument_list|,
name|Void
argument_list|>
name|PARSER
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"named_object_holder"
argument_list|,
name|NamedObjectHolder
operator|::
operator|new
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareNamedObjects
argument_list|(
name|NamedObjectHolder
operator|::
name|setNamed
argument_list|,
name|NamedObject
operator|.
name|PARSER
argument_list|,
name|NamedObjectHolder
operator|::
name|keepNamedInOrder
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"named"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|named
specifier|private
name|List
argument_list|<
name|NamedObject
argument_list|>
name|named
decl_stmt|;
DECL|field|namedSuppliedInOrder
specifier|private
name|boolean
name|namedSuppliedInOrder
init|=
literal|false
decl_stmt|;
DECL|method|setNamed
specifier|public
name|void
name|setNamed
parameter_list|(
name|List
argument_list|<
name|NamedObject
argument_list|>
name|named
parameter_list|)
block|{
name|this
operator|.
name|named
operator|=
name|named
expr_stmt|;
block|}
DECL|method|keepNamedInOrder
specifier|public
name|void
name|keepNamedInOrder
parameter_list|()
block|{
name|namedSuppliedInOrder
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|NamedObject
specifier|public
specifier|static
class|class
name|NamedObject
block|{
DECL|field|PARSER
specifier|public
specifier|static
specifier|final
name|NamedObjectParser
argument_list|<
name|NamedObject
argument_list|,
name|Void
argument_list|>
name|PARSER
decl_stmt|;
static|static
block|{
name|ObjectParser
argument_list|<
name|NamedObject
argument_list|,
name|Void
argument_list|>
name|parser
init|=
operator|new
name|ObjectParser
argument_list|<>
argument_list|(
literal|"named"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|declareInt
argument_list|(
name|NamedObject
operator|::
name|setFoo
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|=
parameter_list|(
name|XContentParser
name|p
parameter_list|,
name|Void
name|v
parameter_list|,
name|String
name|name
parameter_list|)
lambda|->
name|parser
operator|.
name|parse
argument_list|(
name|p
argument_list|,
operator|new
name|NamedObject
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|foo
name|int
name|foo
decl_stmt|;
DECL|method|NamedObject
specifier|public
name|NamedObject
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|setFoo
specifier|public
name|void
name|setFoo
parameter_list|(
name|int
name|foo
parameter_list|)
block|{
name|this
operator|.
name|foo
operator|=
name|foo
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

