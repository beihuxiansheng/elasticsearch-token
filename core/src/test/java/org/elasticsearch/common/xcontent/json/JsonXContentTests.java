begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent.json
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|BaseXContentTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_class
DECL|class|JsonXContentTests
specifier|public
class|class
name|JsonXContentTests
extends|extends
name|BaseXContentTestCase
block|{
annotation|@
name|Override
DECL|method|xcontentType
specifier|public
name|XContentType
name|xcontentType
parameter_list|()
block|{
return|return
name|XContentType
operator|.
name|JSON
return|;
block|}
DECL|method|testBigInteger
specifier|public
name|void
name|testBigInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JsonGenerator
name|generator
init|=
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|doTestBigInteger
argument_list|(
name|generator
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
DECL|method|testChecksForDuplicates
specifier|public
name|void
name|testChecksForDuplicates
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"Test only makes sense if JSON parser doesn't have strict duplicate checks enabled"
argument_list|,
name|JsonXContent
operator|.
name|isStrictDuplicateDetectionEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|JsonParseException
name|pex
init|=
name|expectThrows
argument_list|(
name|JsonParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{ \"key\": 1, \"key\": 2 }"
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Duplicate field 'key'"
argument_list|,
name|pex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

