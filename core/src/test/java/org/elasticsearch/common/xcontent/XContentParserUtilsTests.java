begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|ensureExpectedToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParserUtils
operator|.
name|parseTypedKeysObject
import|;
end_import

begin_class
DECL|class|XContentParserUtilsTests
specifier|public
class|class
name|XContentParserUtilsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testEnsureExpectedToken
specifier|public
name|void
name|testEnsureExpectedToken
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XContentParser
operator|.
name|Token
name|randomToken
init|=
name|randomFrom
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
literal|"{}"
argument_list|)
init|)
block|{
comment|// Parser current token is null
name|assertNull
argument_list|(
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|)
expr_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ensureExpectedToken
argument_list|(
name|randomToken
argument_list|,
name|parser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to parse object: expecting token of type ["
operator|+
name|randomToken
operator|+
literal|"] but found [null]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseTypedKeysObject
specifier|public
name|void
name|testParseTypedKeysObject
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|delimiter
init|=
name|randomFrom
argument_list|(
literal|"#"
argument_list|,
literal|":"
argument_list|,
literal|"/"
argument_list|,
literal|"-"
argument_list|,
literal|"_"
argument_list|,
literal|"|"
argument_list|,
literal|"_delim_"
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
name|namedXContents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|namedXContents
operator|.
name|add
argument_list|(
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"bool"
argument_list|)
argument_list|,
name|parser
lambda|->
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|booleanValue
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|namedXContents
operator|.
name|add
argument_list|(
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Long
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"long"
argument_list|)
argument_list|,
name|parser
lambda|->
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|longValue
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|NamedXContentRegistry
name|namedXContentRegistry
init|=
operator|new
name|NamedXContentRegistry
argument_list|(
name|namedXContents
argument_list|)
decl_stmt|;
name|BytesReference
name|bytes
init|=
name|toXContent
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
name|builder
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContentType
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|namedXContentRegistry
argument_list|,
name|bytes
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseTypedKeysObject
argument_list|(
name|parser
argument_list|,
name|delimiter
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to parse object: expecting token of type [FIELD_NAME] but found [START_OBJECT]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseTypedKeysObject
argument_list|(
name|parser
argument_list|,
name|delimiter
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot parse object of class [Boolean] without type information. Set [typed_keys] parameter "
operator|+
literal|"on the request to ensure the type information is added to the response output"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bytes
operator|=
name|toXContent
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
name|builder
operator|.
name|field
argument_list|(
literal|"type"
operator|+
name|delimiter
operator|+
literal|"name"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContentType
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|namedXContentRegistry
argument_list|,
name|bytes
argument_list|)
init|)
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|NamedXContentRegistry
operator|.
name|UnknownNamedObjectException
name|e
init|=
name|expectThrows
argument_list|(
name|NamedXContentRegistry
operator|.
name|UnknownNamedObjectException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseTypedKeysObject
argument_list|(
name|parser
argument_list|,
name|delimiter
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown Boolean [type]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type"
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
name|e
operator|.
name|getCategoryClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|longValue
init|=
name|randomLong
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|boolValue
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|bytes
operator|=
name|toXContent
argument_list|(
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"long"
operator|+
name|delimiter
operator|+
literal|"l"
argument_list|,
name|longValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"bool"
operator|+
name|delimiter
operator|+
literal|"b"
argument_list|,
name|boolValue
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
argument_list|,
name|xContentType
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContentType
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|namedXContentRegistry
argument_list|,
name|bytes
argument_list|)
init|)
block|{
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|Long
name|parsedLong
init|=
name|parseTypedKeysObject
argument_list|(
name|parser
argument_list|,
name|delimiter
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parsedLong
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longValue
argument_list|,
name|parsedLong
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
name|Boolean
name|parsedBoolean
init|=
name|parseTypedKeysObject
argument_list|(
name|parser
argument_list|,
name|delimiter
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parsedBoolean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|boolValue
argument_list|,
name|parsedBoolean
argument_list|)
expr_stmt|;
name|ensureExpectedToken
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|parser
operator|::
name|getTokenLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

