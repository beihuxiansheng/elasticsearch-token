begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcherSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ConstructingObjectParser
operator|.
name|constructorArg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|ConstructingObjectParserTests
specifier|public
class|class
name|ConstructingObjectParserTests
extends|extends
name|ESTestCase
block|{
DECL|field|MATCHER
specifier|private
specifier|static
specifier|final
name|ParseFieldMatcherSupplier
name|MATCHER
init|=
parameter_list|()
lambda|->
name|ParseFieldMatcher
operator|.
name|STRICT
decl_stmt|;
comment|/**      * Builds the object in random order and parses it.      */
DECL|method|testRandomOrder
specifier|public
name|void
name|testRandomOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|HasRequiredArguments
name|expected
init|=
operator|new
name|HasRequiredArguments
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|.
name|setMineral
argument_list|(
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setFruit
argument_list|(
name|randomInt
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setA
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setB
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setC
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setD
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|expected
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|=
name|shuffleXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|builder
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|bytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
try|try
block|{
name|HasRequiredArguments
name|parsed
init|=
name|HasRequiredArguments
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
name|MATCHER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|animal
argument_list|,
name|parsed
operator|.
name|animal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|vegetable
argument_list|,
name|parsed
operator|.
name|vegetable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|mineral
argument_list|,
name|parsed
operator|.
name|mineral
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|fruit
argument_list|,
name|parsed
operator|.
name|fruit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|a
argument_list|,
name|parsed
operator|.
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|b
argument_list|,
name|parsed
operator|.
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|c
argument_list|,
name|parsed
operator|.
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|d
argument_list|,
name|parsed
operator|.
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// It is convenient to decorate the error message with the json
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error parsing: ["
operator|+
name|builder
operator|.
name|string
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|testMissingAllConstructorParams
specifier|public
name|void
name|testMissingAllConstructorParams
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"mineral\": 1\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasRequiredArguments
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
name|MATCHER
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Required [animal, vegetable]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingSecondConstructorParam
specifier|public
name|void
name|testMissingSecondConstructorParam
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"mineral\": 1,\n"
operator|+
literal|"  \"animal\": \"cat\"\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasRequiredArguments
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
name|MATCHER
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Required [vegetable]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingFirstConstructorParam
specifier|public
name|void
name|testMissingFirstConstructorParam
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"mineral\": 1,\n"
operator|+
literal|"  \"vegetable\": 2\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasRequiredArguments
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
name|MATCHER
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Required [animal]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRepeatedConstructorParam
specifier|public
name|void
name|testRepeatedConstructorParam
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"vegetable\": 1,\n"
operator|+
literal|"  \"vegetable\": 2\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|Throwable
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasRequiredArguments
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
name|MATCHER
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[has_required_arguments] failed to parse field [vegetable]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Can't repeat param [vegetable]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadParam
specifier|public
name|void
name|testBadParam
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"animal\": \"cat\",\n"
operator|+
literal|"  \"vegetable\": 2,\n"
operator|+
literal|"  \"a\": \"supercalifragilisticexpialidocious\"\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasRequiredArguments
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
name|MATCHER
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[has_required_arguments] failed to parse field [a]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a] must be less than 10 characters in length but was [supercalifragilisticexpialidocious]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadParamBeforeObjectBuilt
specifier|public
name|void
name|testBadParamBeforeObjectBuilt
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"a\": \"supercalifragilisticexpialidocious\",\n"
operator|+
literal|"  \"animal\": \"cat\"\n,"
operator|+
literal|"  \"vegetable\": 2\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|HasRequiredArguments
operator|.
name|PARSER
operator|.
name|apply
argument_list|(
name|parser
argument_list|,
name|MATCHER
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[has_required_arguments] failed to parse field [vegetable]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
operator|(
name|ParsingException
operator|)
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failed to build [has_required_arguments] after last required field arrived"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
operator|(
name|ParsingException
operator|)
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[has_required_arguments] failed to parse field [a]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|e
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a] must be less than 10 characters in length but was [supercalifragilisticexpialidocious]"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructorArgsMustBeConfigured
specifier|public
name|void
name|testConstructorArgsMustBeConfigured
parameter_list|()
throws|throws
name|IOException
block|{
class|class
name|NoConstructorArgs
block|{         }
name|ConstructingObjectParser
argument_list|<
name|NoConstructorArgs
argument_list|,
name|ParseFieldMatcherSupplier
argument_list|>
name|parser
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
literal|"constructor_args_required"
argument_list|,
parameter_list|(
name|a
parameter_list|)
lambda|->
operator|new
name|NoConstructorArgs
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parser
operator|.
name|apply
argument_list|(
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[constructor_args_required] must configure at least on constructor argument. If it doens't have any it "
operator|+
literal|"should use ObjectParser instead of ConstructingObjectParser. This is a bug in the parser declaration."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the non-constructor fields are only set on time.      */
DECL|method|testCalledOneTime
specifier|public
name|void
name|testCalledOneTime
parameter_list|()
throws|throws
name|IOException
block|{
class|class
name|CalledOneTime
block|{
specifier|public
name|CalledOneTime
parameter_list|(
name|String
name|yeah
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"!"
argument_list|,
name|yeah
argument_list|)
expr_stmt|;
block|}
name|boolean
name|fooSet
init|=
literal|false
decl_stmt|;
name|void
name|setFoo
parameter_list|(
name|String
name|foo
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|fooSet
argument_list|)
expr_stmt|;
name|fooSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|ConstructingObjectParser
argument_list|<
name|CalledOneTime
argument_list|,
name|ParseFieldMatcherSupplier
argument_list|>
name|parser
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
literal|"one_time_test"
argument_list|,
parameter_list|(
name|a
parameter_list|)
lambda|->
operator|new
name|CalledOneTime
argument_list|(
operator|(
name|String
operator|)
name|a
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|declareString
argument_list|(
name|CalledOneTime
operator|::
name|setFoo
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|declareString
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"yeah"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ctor arg first so we can test for the bug we found one time
name|XContentParser
name|xcontent
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"yeah\": \"!\",\n"
operator|+
literal|"  \"foo\": \"foo\"\n"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|CalledOneTime
name|result
init|=
name|parser
operator|.
name|apply
argument_list|(
name|xcontent
argument_list|,
name|MATCHER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|fooSet
argument_list|)
expr_stmt|;
comment|// and ctor arg second just in case
name|xcontent
operator|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
literal|"{\n"
operator|+
literal|"  \"foo\": \"foo\",\n"
operator|+
literal|"  \"yeah\": \"!\"\n"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|result
operator|=
name|parser
operator|.
name|apply
argument_list|(
name|xcontent
argument_list|,
name|MATCHER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|fooSet
argument_list|)
expr_stmt|;
block|}
DECL|class|HasRequiredArguments
specifier|private
specifier|static
class|class
name|HasRequiredArguments
implements|implements
name|ToXContent
block|{
DECL|field|animal
specifier|final
name|String
name|animal
decl_stmt|;
DECL|field|vegetable
specifier|final
name|int
name|vegetable
decl_stmt|;
DECL|field|mineral
name|int
name|mineral
decl_stmt|;
DECL|field|fruit
name|int
name|fruit
decl_stmt|;
DECL|field|a
name|String
name|a
decl_stmt|;
DECL|field|b
name|String
name|b
decl_stmt|;
DECL|field|c
name|String
name|c
decl_stmt|;
DECL|field|d
name|boolean
name|d
decl_stmt|;
DECL|method|HasRequiredArguments
specifier|public
name|HasRequiredArguments
parameter_list|(
name|String
name|animal
parameter_list|,
name|int
name|vegetable
parameter_list|)
block|{
name|this
operator|.
name|animal
operator|=
name|animal
expr_stmt|;
name|this
operator|.
name|vegetable
operator|=
name|vegetable
expr_stmt|;
block|}
DECL|method|setMineral
specifier|public
name|void
name|setMineral
parameter_list|(
name|int
name|mineral
parameter_list|)
block|{
name|this
operator|.
name|mineral
operator|=
name|mineral
expr_stmt|;
block|}
DECL|method|setFruit
specifier|public
name|void
name|setFruit
parameter_list|(
name|int
name|fruit
parameter_list|)
block|{
name|this
operator|.
name|fruit
operator|=
name|fruit
expr_stmt|;
block|}
DECL|method|setA
specifier|public
name|void
name|setA
parameter_list|(
name|String
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|length
argument_list|()
operator|>
literal|9
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"[a] must be less than 10 characters in length but was ["
operator|+
name|a
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
block|}
DECL|method|setB
specifier|public
name|void
name|setB
parameter_list|(
name|String
name|b
parameter_list|)
block|{
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
DECL|method|setC
specifier|public
name|void
name|setC
parameter_list|(
name|String
name|c
parameter_list|)
block|{
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
DECL|method|setD
specifier|public
name|void
name|setD
parameter_list|(
name|boolean
name|d
parameter_list|)
block|{
name|this
operator|.
name|d
operator|=
name|d
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"animal"
argument_list|,
name|animal
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"vegetable"
argument_list|,
name|vegetable
argument_list|)
expr_stmt|;
if|if
condition|(
name|mineral
operator|!=
literal|0
condition|)
block|{
comment|// We're just using 0 as the default because it is easy for testing
name|builder
operator|.
name|field
argument_list|(
literal|"mineral"
argument_list|,
name|mineral
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fruit
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"fruit"
argument_list|,
name|fruit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"c"
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"d"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|field|PARSER
specifier|public
specifier|static
specifier|final
name|ConstructingObjectParser
argument_list|<
name|HasRequiredArguments
argument_list|,
name|ParseFieldMatcherSupplier
argument_list|>
name|PARSER
init|=
operator|new
name|ConstructingObjectParser
argument_list|<>
argument_list|(
literal|"has_required_arguments"
argument_list|,
name|a
lambda|->
operator|new
name|HasRequiredArguments
argument_list|(
operator|(
name|String
operator|)
name|a
index|[
literal|0
index|]
argument_list|,
operator|(
name|Integer
operator|)
name|a
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|PARSER
operator|.
name|declareString
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"animal"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|constructorArg
argument_list|()
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"vegetable"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|HasRequiredArguments
operator|::
name|setMineral
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"mineral"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareInt
argument_list|(
name|HasRequiredArguments
operator|::
name|setFruit
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"fruit"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|HasRequiredArguments
operator|::
name|setA
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|HasRequiredArguments
operator|::
name|setB
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareString
argument_list|(
name|HasRequiredArguments
operator|::
name|setC
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|PARSER
operator|.
name|declareBoolean
argument_list|(
name|HasRequiredArguments
operator|::
name|setD
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

