begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|BaseXContentTestCase
specifier|public
specifier|abstract
class|class
name|BaseXContentTestCase
extends|extends
name|ESTestCase
block|{
DECL|method|xcontentType
specifier|public
specifier|abstract
name|XContentType
name|xcontentType
parameter_list|()
function_decl|;
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|xcontentType
argument_list|()
argument_list|,
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRawField
specifier|public
name|void
name|testRawField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|boolean
name|useStream
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
for|for
control|(
name|XContentType
name|xcontentType
range|:
name|XContentType
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRawField
argument_list|(
name|xcontentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|useStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doTestRawField
name|void
name|doTestRawField
parameter_list|(
name|XContent
name|source
parameter_list|,
name|boolean
name|useStream
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|source
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|rawData
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|useStream
condition|)
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|VALUE_NULL
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRawValue
specifier|public
name|void
name|testRawValue
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|XContentType
name|xcontentType
range|:
name|XContentType
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRawValue
argument_list|(
name|xcontentType
operator|.
name|xContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestRawValue
name|void
name|doTestRawValue
parameter_list|(
name|XContent
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|source
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|rawData
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeRawValue
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|VALUE_NULL
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

