begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|ReadableInstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|BaseXContentTestCase
specifier|public
specifier|abstract
class|class
name|BaseXContentTestCase
extends|extends
name|ESTestCase
block|{
DECL|method|xcontentType
specifier|protected
specifier|abstract
name|XContentType
name|xcontentType
parameter_list|()
function_decl|;
DECL|method|builder
specifier|private
name|XContentBuilder
name|builder
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testContentType
specifier|public
name|void
name|testContentType
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|builder
argument_list|()
operator|.
name|contentType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|xcontentType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStartEndObject
specifier|public
name|void
name|testStartEndObject
parameter_list|()
throws|throws
name|IOException
block|{
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|expectObjectException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectObjectException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|expectObjectException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|expectValueException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFieldException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'foo':{}}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'foo':{'bar':{}}}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStartEndArray
specifier|public
name|void
name|testStartEndArray
parameter_list|()
throws|throws
name|IOException
block|{
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|expectArrayException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectArrayException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|expectArrayException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|expectValueException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectFieldException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFieldException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|null
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'foo':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'foo':[1,2,3]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testField
specifier|public
name|void
name|testField
parameter_list|()
throws|throws
name|IOException
block|{
name|expectValueException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFieldException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|field
argument_list|(
literal|null
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'foo':'bar'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|value
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullField
specifier|public
name|void
name|testNullField
parameter_list|()
throws|throws
name|IOException
block|{
name|expectValueException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|nullField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFieldException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|nullField
argument_list|(
literal|null
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnclosedException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|nullField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'foo':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|nullField
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullValue
specifier|public
name|void
name|testNullValue
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'foo':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|nullValue
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleans
specifier|public
name|void
name|testBooleans
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'boolean':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boolean"
argument_list|,
operator|(
name|Boolean
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':true}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':false}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':[true,false,true]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':[false,true]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"boolean"
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"boolean"
argument_list|,
operator|(
name|boolean
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"boolean"
argument_list|,
operator|new
name|boolean
index|[]
block|{}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boolean"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Boolean
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':true}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boolean"
argument_list|)
operator|.
name|value
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'boolean':false}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boolean"
argument_list|)
operator|.
name|value
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBytes
specifier|public
name|void
name|testBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'byte':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|Byte
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'byte':0}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'byte':1}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'byte':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Byte
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'byte':0}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'byte':1}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDoubles
specifier|public
name|void
name|testDoubles
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'double':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
operator|(
name|Double
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':42.5}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|42.5
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':1.2}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|1.2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':[42.0,43.0,45]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"double"
argument_list|,
literal|42.0
argument_list|,
literal|43.0
argument_list|,
literal|45
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"double"
argument_list|,
operator|(
name|double
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"double"
argument_list|,
operator|new
name|double
index|[]
block|{}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"double"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Double
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':0.001}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"double"
argument_list|)
operator|.
name|value
argument_list|(
literal|0.001
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'double':[1.7976931348623157E308,4.9E-324]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"double"
argument_list|,
operator|new
name|double
index|[]
block|{
name|Double
operator|.
name|MAX_VALUE
block|,
name|Double
operator|.
name|MIN_VALUE
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFloats
specifier|public
name|void
name|testFloats
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'float':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"float"
argument_list|,
operator|(
name|Float
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':42.5}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|42.5f
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':1.2}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"float"
argument_list|,
literal|1.2f
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"float"
argument_list|,
operator|(
name|float
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"float"
argument_list|,
operator|new
name|float
index|[]
block|{}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"float"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Float
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':9.9E-7}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"float"
argument_list|)
operator|.
name|value
argument_list|(
literal|0.00000099f
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':[42.0,43.0,45.666668]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"float"
argument_list|,
literal|42.0f
argument_list|,
literal|43.0f
argument_list|,
literal|45.66666667f
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'float':[3.4028235E38,1.4E-45]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"float"
argument_list|,
operator|new
name|float
index|[]
block|{
name|Float
operator|.
name|MAX_VALUE
block|,
name|Float
operator|.
name|MIN_VALUE
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntegers
specifier|public
name|void
name|testIntegers
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'integer':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"integer"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':42}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"integer"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|42
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':3}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"integer"
argument_list|,
literal|3
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':[1,3,5,7,11]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"integer"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|11
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"integer"
argument_list|,
operator|(
name|int
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"integer"
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"integer"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Integer
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':42}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"integer"
argument_list|)
operator|.
name|value
argument_list|(
literal|42
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'integer':[2147483647,-2147483648]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"integer"
argument_list|,
operator|new
name|int
index|[]
block|{
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MIN_VALUE
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongs
specifier|public
name|void
name|testLongs
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'long':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
operator|(
name|Long
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':42}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|42L
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':9223372036854775807}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
literal|9_223_372_036_854_775_807L
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':[1,3,5,7,11]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"long"
argument_list|,
literal|1L
argument_list|,
literal|3L
argument_list|,
literal|5L
argument_list|,
literal|7L
argument_list|,
literal|11L
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"long"
argument_list|,
operator|(
name|long
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"long"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"long"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Long
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':42}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"long"
argument_list|)
operator|.
name|value
argument_list|(
literal|42
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'long':[2147483647,-2147483648]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"long"
argument_list|,
operator|new
name|long
index|[]
block|{
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MIN_VALUE
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShorts
specifier|public
name|void
name|testShorts
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'short':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"short"
argument_list|,
operator|(
name|Short
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'short':5000}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"short"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|5000
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'short':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"short"
argument_list|,
operator|(
name|short
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'short':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"short"
argument_list|,
operator|new
name|short
index|[]
block|{}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'short':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"short"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Short
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'short':42}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"short"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|short
operator|)
literal|42
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'short':[1,3,5,7,11]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"short"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'short':[32767,-32768]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"short"
argument_list|,
operator|new
name|short
index|[]
block|{
name|Short
operator|.
name|MAX_VALUE
block|,
name|Short
operator|.
name|MIN_VALUE
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStrings
specifier|public
name|void
name|testStrings
parameter_list|()
throws|throws
name|IOException
block|{
name|assertResult
argument_list|(
literal|"{'string':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"string"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'string':'value'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"string"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'string':''}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"string"
argument_list|,
literal|""
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'string':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"string"
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'string':[]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"string"
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'string':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"string"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'string':'42'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"string"
argument_list|)
operator|.
name|value
argument_list|(
literal|"42"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'string':['a','b','c','d']}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"string"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinaryField
specifier|public
name|void
name|testBinaryField
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'binary':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"binary"
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|randomBytes
init|=
name|randomBytes
argument_list|()
decl_stmt|;
name|BytesReference
name|bytes
init|=
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"binary"
argument_list|,
name|randomBytes
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|isValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|randomBytes
argument_list|,
name|parser
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinaryValue
specifier|public
name|void
name|testBinaryValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'binary':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|randomBytes
init|=
name|randomBytes
argument_list|()
decl_stmt|;
name|BytesReference
name|bytes
init|=
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|value
argument_list|(
name|randomBytes
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|isValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|randomBytes
argument_list|,
name|parser
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinaryValueWithOffsetLength
specifier|public
name|void
name|testBinaryValueWithOffsetLength
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'binary':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|value
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|randomBytes
init|=
name|randomBytes
argument_list|()
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|randomBytes
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|randomBytes
operator|.
name|length
operator|-
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"bin"
argument_list|,
name|randomBytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|value
argument_list|(
name|randomBytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
literal|"bin"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|isValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|randomBytes
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
argument_list|,
name|parser
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinaryUTF8
specifier|public
name|void
name|testBinaryUTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'utf8':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|utf8Field
argument_list|(
literal|"utf8"
argument_list|,
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|randomBytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|randomBytes
argument_list|()
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|utf8Field
argument_list|(
literal|"utf8"
argument_list|,
name|randomBytesRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"utf8"
argument_list|)
operator|.
name|utf8Value
argument_list|(
name|randomBytesRef
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
literal|"utf8"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|isValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|utf8Bytes
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|randomBytesRef
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testText
specifier|public
name|void
name|testText
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'text':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
operator|(
name|Text
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'text':''}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'text':'foo bar'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BytesReference
name|random
init|=
operator|new
name|BytesArray
argument_list|(
name|randomBytes
argument_list|()
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
operator|new
name|Text
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|START_OBJECT
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|FIELD_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|isValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|utf8Bytes
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|random
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|Token
operator|.
name|END_OBJECT
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadableInstant
specifier|public
name|void
name|testReadableInstant
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'instant':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"instant"
argument_list|,
operator|(
name|ReadableInstant
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'instant':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"instant"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|ReadableInstant
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DateTime
name|t1
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"{'t1':'2016-01-01T00:00:00.000Z'}"
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t1"
argument_list|,
name|t1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t1"
argument_list|)
operator|.
name|value
argument_list|(
name|t1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DateTime
name|t2
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|12
argument_list|,
literal|25
argument_list|,
literal|7
argument_list|,
literal|59
argument_list|,
literal|42
argument_list|,
literal|213
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|expected
operator|=
literal|"{'t2':'2016-12-25T07:59:42.213Z'}"
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t2"
argument_list|,
name|t2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t2"
argument_list|)
operator|.
name|value
argument_list|(
name|t2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeFormatter
name|formatter
init|=
name|randomFrom
argument_list|(
name|ISODateTimeFormat
operator|.
name|basicDate
argument_list|()
argument_list|,
name|ISODateTimeFormat
operator|.
name|dateTimeNoMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DateTime
name|t3
init|=
name|DateTime
operator|.
name|now
argument_list|()
decl_stmt|;
name|expected
operator|=
literal|"{'t3':'"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|t3
argument_list|)
operator|+
literal|"'}"
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t3"
argument_list|,
name|t3
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t3"
argument_list|)
operator|.
name|value
argument_list|(
name|t3
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DateTime
name|t4
init|=
operator|new
name|DateTime
argument_list|(
name|randomDateTimeZone
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|=
literal|"{'t4':'"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|t4
argument_list|)
operator|+
literal|"'}"
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t4"
argument_list|,
name|t4
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t4"
argument_list|)
operator|.
name|value
argument_list|(
name|t4
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|date
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
operator|%
operator|(
literal|2
operator|*
operator|(
name|long
operator|)
literal|10e11
operator|)
argument_list|)
decl_stmt|;
comment|// 1970-01-01T00:00:00Z - 2033-05-18T05:33:20.000+02:00
specifier|final
name|DateTime
name|t5
init|=
operator|new
name|DateTime
argument_list|(
name|date
argument_list|,
name|randomDateTimeZone
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|=
literal|"{'t5':'"
operator|+
name|XContentBuilder
operator|.
name|DEFAULT_DATE_PRINTER
operator|.
name|print
argument_list|(
name|t5
argument_list|)
operator|+
literal|"'}"
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t5"
argument_list|,
name|t5
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t5"
argument_list|)
operator|.
name|value
argument_list|(
name|t5
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|"{'t5':'"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|t5
argument_list|)
operator|+
literal|"'}"
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t5"
argument_list|,
name|t5
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t5"
argument_list|)
operator|.
name|value
argument_list|(
name|t5
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|Instant
name|i1
init|=
operator|new
name|Instant
argument_list|(
literal|1451606400000L
argument_list|)
decl_stmt|;
comment|// 2016-01-01T00:00:00.000Z
name|expected
operator|=
literal|"{'i1':'2016-01-01T00:00:00.000Z'}"
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"i1"
argument_list|,
name|i1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"i1"
argument_list|)
operator|.
name|value
argument_list|(
name|i1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|Instant
name|i2
init|=
operator|new
name|Instant
argument_list|(
literal|1482652782213L
argument_list|)
decl_stmt|;
comment|// 2016-12-25T07:59:42.213Z
name|expected
operator|=
literal|"{'i2':'"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|i2
argument_list|)
operator|+
literal|"'}"
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"i2"
argument_list|,
name|i2
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"i2"
argument_list|)
operator|.
name|value
argument_list|(
name|i2
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFormatterException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t3"
argument_list|,
name|t3
argument_list|,
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFormatterException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"t3"
argument_list|)
operator|.
name|value
argument_list|(
name|t3
argument_list|,
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDate
specifier|public
name|void
name|testDate
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'date':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date"
argument_list|,
operator|(
name|Date
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'date':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"date"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|Date
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Date
name|d1
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
literal|"{'d1':'2016-01-01T00:00:00.000Z'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d1"
argument_list|,
name|d1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'d1':'2016-01-01T00:00:00.000Z'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d1"
argument_list|)
operator|.
name|value
argument_list|(
name|d1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Date
name|d2
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|12
argument_list|,
literal|25
argument_list|,
literal|7
argument_list|,
literal|59
argument_list|,
literal|42
argument_list|,
literal|213
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
literal|"{'d2':'2016-12-25T07:59:42.213Z'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d2"
argument_list|,
name|d2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'d2':'2016-12-25T07:59:42.213Z'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d2"
argument_list|)
operator|.
name|value
argument_list|(
name|d2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeFormatter
name|formatter
init|=
name|randomFrom
argument_list|(
name|ISODateTimeFormat
operator|.
name|basicDate
argument_list|()
argument_list|,
name|ISODateTimeFormat
operator|.
name|dateTimeNoMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Date
name|d3
init|=
name|DateTime
operator|.
name|now
argument_list|()
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"{'d3':'"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|d3
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"'}"
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d3"
argument_list|,
name|d3
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|value
argument_list|(
name|d3
argument_list|,
name|formatter
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFormatterException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d3"
argument_list|,
name|d3
argument_list|,
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFormatterException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"d3"
argument_list|)
operator|.
name|value
argument_list|(
name|d3
argument_list|,
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectNonNullFormatterException
argument_list|(
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|value
argument_list|(
literal|null
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDateField
specifier|public
name|void
name|testDateField
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Date
name|d
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
literal|"{'date_in_millis':1451606400000}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|dateField
argument_list|(
literal|"date_in_millis"
argument_list|,
literal|"date"
argument_list|,
name|d
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'date':'2016-01-01T00:00:00.000Z','date_in_millis':1451606400000}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|humanReadable
argument_list|(
literal|true
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|dateField
argument_list|(
literal|"date_in_millis"
argument_list|,
literal|"date"
argument_list|,
name|d
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCalendar
specifier|public
name|void
name|testCalendar
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|calendar
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toCalendar
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|assertResult
argument_list|(
literal|"{'calendar':'2016-01-01T00:00:00.000Z'}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"calendar"
argument_list|)
operator|.
name|value
argument_list|(
name|calendar
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGeoPoint
specifier|public
name|void
name|testGeoPoint
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'geo':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"geo"
argument_list|,
operator|(
name|GeoPoint
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'geo':{'lat':52.4267578125,'lon':13.271484375}}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"geo"
argument_list|,
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
literal|"u336q"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'geo':{'lat':52.5201416015625,'lon':13.4033203125}}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"geo"
argument_list|)
operator|.
name|value
argument_list|(
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
literal|"u33dc1"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLatLon
specifier|public
name|void
name|testLatLon
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expected
init|=
literal|"{'latlon':{'lat':13.271484375,'lon':52.4267578125}}"
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|latlon
argument_list|(
literal|"latlon"
argument_list|,
literal|13.271484375
argument_list|,
literal|52.4267578125
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"latlon"
argument_list|)
operator|.
name|latlon
argument_list|(
literal|13.271484375
argument_list|,
literal|52.4267578125
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPath
specifier|public
name|void
name|testPath
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'path':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
operator|(
name|Path
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path
init|=
name|PathUtils
operator|.
name|get
argument_list|(
literal|"first"
argument_list|,
literal|"second"
argument_list|,
literal|"third"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expected
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"{'path':'first\\\\second\\\\third'}"
else|:
literal|"{'path':'first/second/third'}"
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testObjects
specifier|public
name|void
name|testObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
name|objects
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[false,true,false]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[1,1,2,3,5,8,13]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|,
operator|(
name|byte
operator|)
literal|3
block|,
operator|(
name|byte
operator|)
literal|5
block|,
operator|(
name|byte
operator|)
literal|8
block|,
operator|(
name|byte
operator|)
literal|13
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[1.0,1.0,2.0,3.0,5.0,8.0,13.0]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1.0d
block|,
literal|1.0d
block|,
literal|2.0d
block|,
literal|3.0d
block|,
literal|5.0d
block|,
literal|8.0d
block|,
literal|13.0d
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[1.0,1.0,2.0,3.0,5.0,8.0,13.0]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1.0f
block|,
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|5.0f
block|,
literal|8.0f
block|,
literal|13.0f
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[{'lat':45.759429931640625,'lon':4.8394775390625}]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
literal|"u05kq4k"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[1,1,2,3,5,8,13]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|8
block|,
literal|13
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[1,1,2,3,5,8,13]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1L
block|,
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|5L
block|,
literal|8L
block|,
literal|13L
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[1,1,2,3,5,8]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
name|short
operator|)
literal|1
block|,
operator|(
name|short
operator|)
literal|1
block|,
operator|(
name|short
operator|)
literal|2
block|,
operator|(
name|short
operator|)
literal|3
block|,
operator|(
name|short
operator|)
literal|5
block|,
operator|(
name|short
operator|)
literal|8
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':['a','b','c']}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':['a','b','c']}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"b"
argument_list|)
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"c"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':null}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[null,null,null]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':['OPEN','CLOSE']}"
argument_list|,
name|IndexMetaData
operator|.
name|State
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[{'f1':'v1'},{'f2':'v2'}]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|singletonMap
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
block|,
name|singletonMap
argument_list|(
literal|"f2"
argument_list|,
literal|"v2"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[[1,2,3],[4,5]]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
block|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|paths
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"{'objects':['a\\\\b\\\\c','d\\\\e']}"
else|:
literal|"{'objects':['a/b/c','d/e']}"
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
name|paths
argument_list|,
operator|new
name|Object
index|[]
block|{
name|PathUtils
operator|.
name|get
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
block|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeFormatter
name|formatter
init|=
name|XContentBuilder
operator|.
name|DEFAULT_DATE_PRINTER
decl_stmt|;
specifier|final
name|Date
name|d1
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
specifier|final
name|Date
name|d2
init|=
operator|new
name|DateTime
argument_list|(
literal|2015
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':['"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|d1
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"','"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|d2
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"']}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|d1
block|,
name|d2
block|}
argument_list|)
expr_stmt|;
specifier|final
name|DateTime
name|dt1
init|=
name|DateTime
operator|.
name|now
argument_list|()
decl_stmt|;
specifier|final
name|DateTime
name|dt2
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|12
argument_list|,
literal|25
argument_list|,
literal|7
argument_list|,
literal|59
argument_list|,
literal|42
argument_list|,
literal|213
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':['"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|dt1
argument_list|)
operator|+
literal|"','2016-12-25T07:59:42.213Z']}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|dt1
block|,
name|dt2
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Calendar
name|c1
init|=
operator|new
name|DateTime
argument_list|(
literal|2012
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|,
literal|10
argument_list|,
literal|23
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toCalendar
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|Calendar
name|c2
init|=
operator|new
name|DateTime
argument_list|(
literal|2014
argument_list|,
literal|11
argument_list|,
literal|16
argument_list|,
literal|19
argument_list|,
literal|36
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toCalendar
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':['2012-07-07T10:23:00.000Z','2014-11-16T19:36:00.000Z']}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ToXContent
name|x1
init|=
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"f2"
argument_list|,
literal|2
argument_list|)
operator|.
name|array
argument_list|(
literal|"f3"
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
specifier|final
name|ToXContent
name|x2
init|=
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"f2"
argument_list|,
name|x1
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'objects':[{'f1':'v1','f2':2,'f3':[3,4,5]},{'f1':'v1','f2':{'f1':'v1','f2':2,'f3':[3,4,5]}}]}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|x1
block|,
name|x2
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
name|o
range|:
name|objects
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|expected
init|=
name|o
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"objects"
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"objects"
argument_list|)
operator|.
name|value
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"objects"
argument_list|)
operator|.
name|values
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"objects"
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testObject
specifier|public
name|void
name|testObject
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|object
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':false}"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':13}"
argument_list|,
operator|(
name|byte
operator|)
literal|13
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':5.0}"
argument_list|,
literal|5.0d
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':8.0}"
argument_list|,
literal|8.0f
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':{'lat':45.759429931640625,'lon':4.8394775390625}}"
argument_list|,
name|GeoPoint
operator|.
name|fromGeohash
argument_list|(
literal|"u05kq4k"
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':3}"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':2}"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':1}"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'string'}"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'a'}"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'b'}"
argument_list|,
operator|new
name|Text
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':null}"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'OPEN'}"
argument_list|,
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'NM'}"
argument_list|,
name|DistanceUnit
operator|.
name|NAUTICALMILES
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':{'f1':'v1'}}"
argument_list|,
name|singletonMap
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':{'f1':{'f2':'v2'}}}"
argument_list|,
name|singletonMap
argument_list|(
literal|"f1"
argument_list|,
name|singletonMap
argument_list|(
literal|"f2"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':[1,2,3]}"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"{'object':'a\\\\b\\\\c'}"
else|:
literal|"{'object':'a/b/c'}"
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeFormatter
name|formatter
init|=
name|XContentBuilder
operator|.
name|DEFAULT_DATE_PRINTER
decl_stmt|;
specifier|final
name|Date
name|d1
init|=
operator|new
name|DateTime
argument_list|(
literal|2016
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|d1
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"'}"
argument_list|,
name|d1
argument_list|)
expr_stmt|;
specifier|final
name|DateTime
name|d2
init|=
name|DateTime
operator|.
name|now
argument_list|()
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'"
operator|+
name|formatter
operator|.
name|print
argument_list|(
name|d2
argument_list|)
operator|+
literal|"'}"
argument_list|,
name|d2
argument_list|)
expr_stmt|;
specifier|final
name|Calendar
name|c1
init|=
operator|new
name|DateTime
argument_list|(
literal|2010
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toCalendar
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':'2010-01-01T00:00:00.000Z'}"
argument_list|,
name|c1
argument_list|)
expr_stmt|;
specifier|final
name|ToXContent
name|x1
init|=
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"f2"
argument_list|,
literal|2
argument_list|)
operator|.
name|array
argument_list|(
literal|"f3"
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
specifier|final
name|ToXContent
name|x2
init|=
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"f2"
argument_list|,
name|x1
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
literal|"{'object':{'f1':'v1','f2':{'f1':'v1','f2':2,'f3':[3,4,5]}}}"
argument_list|,
name|x2
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|o
range|:
name|object
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|expected
init|=
name|o
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|humanReadable
argument_list|(
literal|true
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"object"
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|humanReadable
argument_list|(
literal|true
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"object"
argument_list|)
operator|.
name|value
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertResult
argument_list|(
literal|"{'objects':[null,null,null]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
literal|"objects"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToXContent
specifier|public
name|void
name|testToXContent
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"{'xcontent':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"xcontent"
argument_list|,
operator|(
name|ToXContent
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'xcontent':null}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"xcontent"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
name|ToXContent
operator|)
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|ToXContent
name|xcontent0
init|=
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
literal|"array"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
decl_stmt|;
name|assertResult
argument_list|(
literal|"{'field':'value','array':['1','2','3'],'foo':{'bar':'baz'}}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|value
argument_list|(
name|xcontent0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"{'xcontent':{'field':'value','array':['1','2','3'],'foo':{'bar':'baz'}}}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"xcontent"
argument_list|,
name|xcontent0
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|ToXContent
name|xcontent1
init|=
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
decl_stmt|;
name|ToXContent
name|xcontent2
init|=
parameter_list|(
name|builder
parameter_list|,
name|params
parameter_list|)
lambda|->
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"root"
argument_list|,
name|xcontent0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|array
argument_list|(
literal|"childs"
argument_list|,
name|xcontent0
argument_list|,
name|xcontent1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
decl_stmt|;
name|assertResult
argument_list|(
literal|"{'root':{"
operator|+
literal|"'field':'value',"
operator|+
literal|"'array':['1','2','3'],"
operator|+
literal|"'foo':{'bar':'baz'}"
operator|+
literal|"},"
operator|+
literal|"'childs':["
operator|+
literal|"{'field':'value','array':['1','2','3'],'foo':{'bar':'baz'}},"
operator|+
literal|"{'field':'value','foo':{'bar':'baz'}}"
operator|+
literal|"]}"
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|value
argument_list|(
name|xcontent2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMap
specifier|public
name|void
name|testMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|maps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"{'map':null}"
argument_list|,
operator|(
name|Map
operator|)
literal|null
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"{'map':{}}"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"{'map':{'key':'value'}}"
argument_list|,
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"long[]"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|3L
block|}
argument_list|)
expr_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"path"
argument_list|,
literal|"to"
argument_list|,
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
literal|"object"
argument_list|,
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"path\\\\to\\\\file"
else|:
literal|"path/to/file"
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
literal|"{'map':{'path':'"
operator|+
name|path
operator|+
literal|"','string':'value','long[]':[1,3],'int':42,'long':42,'object':{'key':'value'}}}"
argument_list|,
name|innerMap
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|m
range|:
name|maps
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|expected
init|=
name|m
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"map"
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"map"
argument_list|)
operator|.
name|value
argument_list|(
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"map"
argument_list|)
operator|.
name|map
argument_list|(
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIterable
specifier|public
name|void
name|testIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
argument_list|>
name|iterables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|iterables
operator|.
name|put
argument_list|(
literal|"{'iter':null}"
argument_list|,
operator|(
name|Iterable
operator|)
literal|null
argument_list|)
expr_stmt|;
name|iterables
operator|.
name|put
argument_list|(
literal|"{'iter':[]}"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|iterables
operator|.
name|put
argument_list|(
literal|"{'iter':['a','b']}"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"{'iter':'path\\\\to\\\\file'}"
else|:
literal|"{'iter':'path/to/file'}"
decl_stmt|;
name|iterables
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"path"
argument_list|,
literal|"to"
argument_list|,
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|paths
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"{'iter':['a\\\\b\\\\c','c\\\\d']}"
else|:
literal|"{'iter':['a/b/c','c/d']}"
decl_stmt|;
name|iterables
operator|.
name|put
argument_list|(
name|paths
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|PathUtils
operator|.
name|get
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
argument_list|>
name|i
range|:
name|iterables
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|expected
init|=
name|i
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"iter"
argument_list|,
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"iter"
argument_list|)
operator|.
name|value
argument_list|(
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUnknownObject
specifier|public
name|void
name|testUnknownObject
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|objects
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'obj':50.63}"
argument_list|,
name|DistanceUnit
operator|.
name|METERS
operator|.
name|fromMeters
argument_list|(
literal|50.63
argument_list|)
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'obj':'MINUTES'}"
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|objects
operator|.
name|put
argument_list|(
literal|"{'obj':'class org.elasticsearch.common.xcontent.BaseXContentTestCase'}"
argument_list|,
name|BaseXContentTestCase
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|o
range|:
name|objects
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|expected
init|=
name|o
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"obj"
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
name|expected
argument_list|,
parameter_list|()
lambda|->
name|builder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"obj"
argument_list|)
operator|.
name|value
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|xcontentType
argument_list|()
argument_list|,
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingEndObject
specifier|public
name|void
name|testMissingEndObject
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|e
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Unclosed object or array found"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingEndArray
specifier|public
name|void
name|testMissingEndArray
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|e
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Unclosed object or array found"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRawField
specifier|public
name|void
name|testRawField
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|boolean
name|useStream
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
for|for
control|(
name|XContentType
name|xcontentType
range|:
name|XContentType
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRawField
argument_list|(
name|xcontentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|useStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doTestRawField
name|void
name|doTestRawField
parameter_list|(
name|XContent
name|source
parameter_list|,
name|boolean
name|useStream
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|source
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|rawData
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|useStream
condition|)
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeRawField
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|VALUE_NULL
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRawValue
specifier|public
name|void
name|testRawValue
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|XContentType
name|xcontentType
range|:
name|XContentType
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRawValue
argument_list|(
name|xcontentType
operator|.
name|xContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestRawValue
name|void
name|doTestRawValue
parameter_list|(
name|XContent
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|source
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|rawData
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeRawValue
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|VALUE_NULL
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|os
argument_list|)
init|)
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeRawValue
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|parser
operator|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|VALUE_NULL
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestBigInteger
specifier|protected
name|void
name|doTestBigInteger
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|ByteArrayOutputStream
name|os
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Big integers cannot be handled explicitly, but if some values happen to be big ints,
comment|// we can still call parser.map() and get the bigint value so that eg. source filtering
comment|// keeps working
name|BigInteger
name|bigInteger
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"bigint"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|bigInteger
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|xcontentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|parser
operator|.
name|map
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"bigint"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureNameNotNull
specifier|public
name|void
name|testEnsureNameNotNull
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|XContentBuilder
operator|.
name|ensureNameNotNull
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Field name cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormatterNameNotNull
specifier|public
name|void
name|testFormatterNameNotNull
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|XContentBuilder
operator|.
name|ensureFormatterNotNull
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"DateTimeFormatter cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureNotNull
specifier|public
name|void
name|testEnsureNotNull
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|XContentBuilder
operator|.
name|ensureNotNull
argument_list|(
literal|null
argument_list|,
literal|"message"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"message"
argument_list|)
argument_list|)
expr_stmt|;
name|XContentBuilder
operator|.
name|ensureNotNull
argument_list|(
literal|"foo"
argument_list|,
literal|"No exception must be thrown"
argument_list|)
expr_stmt|;
block|}
DECL|method|expectUnclosedException
specifier|private
specifier|static
name|void
name|expectUnclosedException
parameter_list|(
name|ThrowingRunnable
name|runnable
parameter_list|)
block|{
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
name|runnable
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Failed to close the XContentBuilder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|allOf
argument_list|(
name|notNullValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unclosed object or array found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectValueException
specifier|private
specifier|static
name|void
name|expectValueException
parameter_list|(
name|ThrowingRunnable
name|runnable
parameter_list|)
block|{
name|JsonGenerationException
name|e
init|=
name|expectThrows
argument_list|(
name|JsonGenerationException
operator|.
name|class
argument_list|,
name|runnable
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"expecting a value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectFieldException
specifier|private
specifier|static
name|void
name|expectFieldException
parameter_list|(
name|ThrowingRunnable
name|runnable
parameter_list|)
block|{
name|JsonGenerationException
name|e
init|=
name|expectThrows
argument_list|(
name|JsonGenerationException
operator|.
name|class
argument_list|,
name|runnable
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"expecting field name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectNonNullFieldException
specifier|private
specifier|static
name|void
name|expectNonNullFieldException
parameter_list|(
name|ThrowingRunnable
name|runnable
parameter_list|)
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|runnable
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Field name cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectNonNullFormatterException
specifier|private
specifier|static
name|void
name|expectNonNullFormatterException
parameter_list|(
name|ThrowingRunnable
name|runnable
parameter_list|)
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|runnable
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"DateTimeFormatter cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectObjectException
specifier|private
specifier|static
name|void
name|expectObjectException
parameter_list|(
name|ThrowingRunnable
name|runnable
parameter_list|)
block|{
name|JsonGenerationException
name|e
init|=
name|expectThrows
argument_list|(
name|JsonGenerationException
operator|.
name|class
argument_list|,
name|runnable
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Current context not Object"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectArrayException
specifier|private
specifier|static
name|void
name|expectArrayException
parameter_list|(
name|ThrowingRunnable
name|runnable
parameter_list|)
block|{
name|JsonGenerationException
name|e
init|=
name|expectThrows
argument_list|(
name|JsonGenerationException
operator|.
name|class
argument_list|,
name|runnable
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Current context not Array"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|equalToJson
specifier|public
specifier|static
name|Matcher
argument_list|<
name|String
argument_list|>
name|equalToJson
parameter_list|(
name|String
name|json
parameter_list|)
block|{
return|return
name|Matchers
operator|.
name|equalTo
argument_list|(
name|json
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertResult
specifier|private
specifier|static
name|void
name|assertResult
parameter_list|(
name|String
name|expected
parameter_list|,
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Build the XContentBuilder, convert its bytes to JSON and check it matches
name|assertThat
argument_list|(
name|XContentHelper
operator|.
name|convertToJson
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|,
name|equalToJson
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomBytes
specifier|private
specifier|static
name|byte
index|[]
name|randomBytes
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|randomUnicodeOfLength
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|Builder
specifier|private
interface|interface
name|Builder
block|{
DECL|method|build
name|XContentBuilder
name|build
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

