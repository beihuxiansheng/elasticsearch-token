begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|XContentTypeTests
specifier|public
class|class
name|XContentTypeTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFromJson
specifier|public
name|void
name|testFromJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mediaType
init|=
literal|"application/json"
decl_stmt|;
name|XContentType
name|expectedXContentType
init|=
name|XContentType
operator|.
name|JSON
decl_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|";"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|"; charset=UTF-8"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromJsonUppercase
specifier|public
name|void
name|testFromJsonUppercase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mediaType
init|=
literal|"application/json"
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|XContentType
name|expectedXContentType
init|=
name|XContentType
operator|.
name|JSON
decl_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|";"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|"; charset=UTF-8"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromYaml
specifier|public
name|void
name|testFromYaml
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mediaType
init|=
literal|"application/yaml"
decl_stmt|;
name|XContentType
name|expectedXContentType
init|=
name|XContentType
operator|.
name|YAML
decl_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|";"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|"; charset=UTF-8"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromSmile
specifier|public
name|void
name|testFromSmile
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mediaType
init|=
literal|"application/smile"
decl_stmt|;
name|XContentType
name|expectedXContentType
init|=
name|XContentType
operator|.
name|SMILE
decl_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|";"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromCbor
specifier|public
name|void
name|testFromCbor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mediaType
init|=
literal|"application/cbor"
decl_stmt|;
name|XContentType
name|expectedXContentType
init|=
name|XContentType
operator|.
name|CBOR
decl_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|";"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromWildcard
specifier|public
name|void
name|testFromWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mediaType
init|=
literal|"application/*"
decl_stmt|;
name|XContentType
name|expectedXContentType
init|=
name|XContentType
operator|.
name|JSON
decl_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|";"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromWildcardUppercase
specifier|public
name|void
name|testFromWildcardUppercase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mediaType
init|=
literal|"APPLICATION/*"
decl_stmt|;
name|XContentType
name|expectedXContentType
init|=
name|XContentType
operator|.
name|JSON
decl_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|mediaType
operator|+
literal|";"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedXContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFromRubbish
specifier|public
name|void
name|testFromRubbish
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
literal|null
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
literal|""
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
literal|"gobbly;goop"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

