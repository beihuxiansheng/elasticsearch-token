begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|XContentMapValuesTests
specifier|public
class|class
name|XContentMapValuesTests
extends|extends
name|ESTestCase
block|{
DECL|method|testFilter
specifier|public
name|void
name|testFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test2"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"something_else"
argument_list|,
literal|"value3"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|source
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filter
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|source
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test1"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|source
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test*"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|source
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test1"
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"something_else"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// more complex object...
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path1"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"path2"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|source
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|filter
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|source
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path1"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|source
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path1*"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"path1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source
operator|.
name|get
argument_list|(
literal|"path1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|containsKey
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|source
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test1*"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|containsKey
argument_list|(
literal|"path1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|source
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"path1.path2.*"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|get
argument_list|(
literal|"path1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|source
operator|.
name|get
argument_list|(
literal|"path1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|containsKey
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|testExtractValue
specifier|public
name|void
name|testExtractValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"test"
argument_list|,
name|map
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"test.me"
argument_list|,
name|map
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"something.else.2"
argument_list|,
name|map
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"path2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1.path2.test"
argument_list|,
name|map
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1.path2.test_me"
argument_list|,
name|map
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1.non_path2.test"
argument_list|,
name|map
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|extValue
init|=
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1.path2"
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|extValue
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extMapValue
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|extValue
decl_stmt|;
name|assertThat
argument_list|(
name|extMapValue
argument_list|,
name|hasEntry
argument_list|(
literal|"test"
argument_list|,
operator|(
name|Object
operator|)
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|extValue
operator|=
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|extValue
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|extMapValue
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|extValue
expr_stmt|;
name|assertThat
argument_list|(
name|extMapValue
operator|.
name|containsKey
argument_list|(
literal|"path2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// lists
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path1"
argument_list|)
operator|.
name|array
argument_list|(
literal|"test"
argument_list|,
literal|"value1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|extValue
operator|=
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1.test"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|extValue
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|extListValue
init|=
operator|(
name|List
operator|)
name|extValue
decl_stmt|;
name|assertThat
argument_list|(
name|extListValue
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path1"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"path2"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|extValue
operator|=
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1.path2.test"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|extValue
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|extListValue
operator|=
operator|(
name|List
operator|)
name|extValue
expr_stmt|;
name|assertThat
argument_list|(
name|extListValue
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|extListValue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|extListValue
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// fields with . in them
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"xxx.yyy"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"xxx.yyy"
argument_list|,
name|map
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path1.xxx"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"path2.yyy"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
literal|"path1.xxx.path2.yyy.test"
argument_list|,
name|map
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractRawValue
specifier|public
name|void
name|testExtractRawValue
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractRawValues
argument_list|(
literal|"test"
argument_list|,
name|map
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test.me"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractRawValues
argument_list|(
literal|"test.me"
argument_list|,
name|map
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"path2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractRawValues
argument_list|(
literal|"path1.path2.test"
argument_list|,
name|map
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"path1.xxx"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"path2.yyy"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|map
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|XContentMapValues
operator|.
name|extractRawValues
argument_list|(
literal|"path1.xxx.path2.yyy.test"
argument_list|,
name|map
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixedNamesFilteringTest
specifier|public
name|void
name|testPrefixedNamesFilteringTest
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"obj"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"obj_name"
argument_list|,
literal|"value_name"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filterdMap
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj_name"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filterdMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|filterdMap
operator|.
name|get
argument_list|(
literal|"obj_name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value_name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNestedFiltering
specifier|public
name|void
name|testNestedFiltering
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"array"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"nested"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"nested_2"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|falteredMap
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"array.nested"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|falteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Selecting members of objects within arrays (ex. [ 1, { nested: "value"} ])  always returns all values in the array (1 in the ex)
comment|// this is expected behavior as this types of objects are not supported in ES
name|assertThat
argument_list|(
call|(
name|Integer
call|)
argument_list|(
operator|(
name|List
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|List
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|Integer
call|)
argument_list|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|List
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"nested"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|falteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"array.*"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|falteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|Integer
call|)
argument_list|(
operator|(
name|List
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|List
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"obj"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|falteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj.field"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|falteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|String
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|falteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj.*"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|falteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|String
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|String
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|falteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testCompleteObjectFiltering
specifier|public
name|void
name|testCompleteObjectFiltering
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"obj"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"array"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredMap
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|filteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.field2"
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|filteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"array"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|List
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|Integer
call|)
argument_list|(
operator|(
name|List
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|List
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|filteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"array"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.field2"
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|List
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|Integer
call|)
argument_list|(
operator|(
name|List
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|List
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|List
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"array"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testFilterIncludesUsingStarPrefix
specifier|public
name|void
name|testFilterIncludesUsingStarPrefix
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"obj"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"n_obj"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"n_field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"n_field2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredMap
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.field2"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
argument_list|,
name|hasKey
argument_list|(
literal|"obj"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
argument_list|,
name|hasKey
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// only objects
name|filteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.*"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
argument_list|,
name|hasKey
argument_list|(
literal|"obj"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
argument_list|,
name|hasKey
argument_list|(
literal|"n_obj"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"n_obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|filteredMap
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.*2"
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
argument_list|,
name|hasKey
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
argument_list|,
name|hasKey
argument_list|(
literal|"obj"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
argument_list|,
name|hasKey
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
argument_list|,
name|hasKey
argument_list|(
literal|"n_obj"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"n_obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredMap
operator|.
name|get
argument_list|(
literal|"n_obj"
argument_list|)
operator|)
argument_list|,
name|hasKey
argument_list|(
literal|"n_field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilterWithEmptyIncludesExcludes
specifier|public
name|void
name|testFilterWithEmptyIncludesExcludes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredMap
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredMap
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatFilterIncludesEmptyObjectWhenUsingIncludes
specifier|public
name|void
name|testThatFilterIncludesEmptyObjectWhenUsingIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapTuple
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredSource
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|filteredSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatFilterIncludesEmptyObjectWhenUsingExcludes
specifier|public
name|void
name|testThatFilterIncludesEmptyObjectWhenUsingExcludes
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapTuple
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredSource
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"nonExistingField"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|filteredSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotOmittingObjectsWithExcludedProperties
specifier|public
name|void
name|testNotOmittingObjectsWithExcludedProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj"
argument_list|)
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapTuple
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredSource
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj.f1"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredSource
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredSource
argument_list|,
name|hasKey
argument_list|(
literal|"obj"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|testNotOmittingObjectWithNestedExcludedObject
specifier|public
name|void
name|testNotOmittingObjectWithNestedExcludedObject
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"obj2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"obj3"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
comment|// implicit include
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapTuple
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredSource
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.obj2"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredSource
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredSource
argument_list|,
name|hasKey
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj1"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// explicit include
name|filteredSource
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"obj1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.obj2"
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredSource
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredSource
argument_list|,
name|hasKey
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj1"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// wild card include
name|filteredSource
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.obj2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.obj3"
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredSource
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredSource
argument_list|,
name|hasKey
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj1"
argument_list|)
operator|)
argument_list|,
name|hasKey
argument_list|(
literal|"obj2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|Map
call|)
argument_list|(
operator|(
name|Map
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"obj2"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|testIncludingObjectWithNestedIncludedObject
specifier|public
name|void
name|testIncludingObjectWithNestedIncludedObject
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"obj1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"obj2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapTuple
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filteredSource
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|mapTuple
operator|.
name|v2
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*.obj2"
block|}
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredSource
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredSource
argument_list|,
name|hasKey
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj1"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj1"
argument_list|)
operator|)
argument_list|,
name|hasKey
argument_list|(
literal|"obj2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|Map
call|)
argument_list|(
operator|(
name|Map
operator|)
name|filteredSource
operator|.
name|get
argument_list|(
literal|"obj1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"obj2"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyList
specifier|public
name|void
name|testEmptyList
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"some_array"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some_array"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes read the start array token, sometimes not
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|parser
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimpleList
specifier|public
name|void
name|testSimpleList
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"some_array"
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some_array"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes read the start array token, sometimes not
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|,
name|parser
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedList
specifier|public
name|void
name|testNestedList
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"some_array"
argument_list|)
operator|.
name|startArray
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some_array"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes read the start array token, sometimes not
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|parser
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedMapInList
specifier|public
name|void
name|testNestedMapInList
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"some_array"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some_array"
argument_list|,
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes read the start array token, sometimes not
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|parser
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDotsInFieldNames
specifier|public
name|void
name|testDotsInFieldNames
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sub
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sub
operator|.
name|put
argument_list|(
literal|"baz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// dots in field names in includes
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filtered
init|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|expected
operator|.
name|remove
argument_list|(
literal|"quux"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
comment|// dots in field names in excludes
name|filtered
operator|=
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|expected
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"quux"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
block|}
DECL|method|testSupplementaryCharactersInPaths
specifier|public
name|void
name|testSupplementaryCharactersInPaths
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"æç´¢"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"ææ°"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"æç´¢"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"æç´¢"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ææ°"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"æç´¢"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSharedPrefixes
specifier|public
name|void
name|testSharedPrefixes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foobar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foobaz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foobar"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foobaz"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|XContentMapValues
operator|.
name|filter
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foobar"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

