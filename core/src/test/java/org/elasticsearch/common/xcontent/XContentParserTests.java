begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|XContentParserTests
specifier|public
class|class
name|XContentParserTests
extends|extends
name|ESTestCase
block|{
DECL|method|testReadList
specifier|public
name|void
name|testReadList
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [\"bar\"]}"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [\"bar\",\"baz\"]}"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [1, 2, 3], \"bar\": 4}"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [{\"bar\":1},{\"baz\":2},{\"qux\":3}]}"
argument_list|)
argument_list|,
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [null]}"
argument_list|)
argument_list|,
name|contains
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": []}"
argument_list|)
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [1]}"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [1,2]}"
argument_list|)
argument_list|,
name|contains
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readList
argument_list|(
literal|"{\"foo\": [{},{},{},{}]}"
argument_list|)
argument_list|,
name|hasSize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadListThrowsException
specifier|public
name|void
name|testReadListThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Calling XContentParser.list() or listOrderedMap() to read a simple
comment|// value or object should throw an exception
name|assertReadListThrowsException
argument_list|(
literal|"{\"foo\": \"bar\"}"
argument_list|)
expr_stmt|;
name|assertReadListThrowsException
argument_list|(
literal|"{\"foo\": 1, \"bar\": 2}"
argument_list|)
expr_stmt|;
name|assertReadListThrowsException
argument_list|(
literal|"{\"foo\": {\"bar\":\"baz\"}}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readList
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|readList
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|source
argument_list|)
init|)
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|token
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|token
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
call|(
name|List
argument_list|<
name|T
argument_list|>
call|)
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|parser
operator|.
name|listOrderedMap
argument_list|()
else|:
name|parser
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|assertReadListThrowsException
specifier|private
name|void
name|assertReadListThrowsException
parameter_list|(
name|String
name|source
parameter_list|)
block|{
try|try
block|{
name|readList
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown a parse exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Failed to parse list"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testReadMapStrings
specifier|public
name|void
name|testReadMapStrings
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|readMapStrings
argument_list|(
literal|"{\"foo\": {\"kbar\":\"vbar\"}}"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"kbar"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"vbar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|readMapStrings
argument_list|(
literal|"{\"foo\": {\"kbar\":\"vbar\", \"kbaz\":\"vbaz\"}}"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"kbar"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"vbar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"kbaz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"vbaz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|readMapStrings
argument_list|(
literal|"{\"foo\": {}}"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readMapStrings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readMapStrings
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|,
name|source
argument_list|)
init|)
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|token
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|token
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|token
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|randomBoolean
argument_list|()
condition|?
name|parser
operator|.
name|mapStringsOrdered
argument_list|()
else|:
name|parser
operator|.
name|mapStrings
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

