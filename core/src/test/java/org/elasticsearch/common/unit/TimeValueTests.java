begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.unit
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|PeriodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueNanos
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|object
operator|.
name|HasToString
operator|.
name|hasToString
import|;
end_import

begin_class
DECL|class|TimeValueTests
specifier|public
class|class
name|TimeValueTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
name|assertThat
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeUnit
operator|.
name|MICROSECONDS
operator|.
name|toMicros
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
operator|.
name|micros
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toSeconds
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|seconds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMinutes
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|minutes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toHours
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
operator|.
name|hours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toDays
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
operator|.
name|days
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"10ms"
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"1.5s"
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|1533
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"1.5m"
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|90
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"1.5h"
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|90
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"1.5d"
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|36
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"1000d"
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFormat
specifier|public
name|void
name|testFormat
parameter_list|()
block|{
name|assertThat
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|1025
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|format
argument_list|(
name|PeriodType
operator|.
name|dayTime
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1 second and 25 milliseconds"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|format
argument_list|(
name|PeriodType
operator|.
name|dayTime
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1 minute"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|65
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|format
argument_list|(
name|PeriodType
operator|.
name|dayTime
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1 hour and 5 minutes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|24
operator|*
literal|600
operator|+
literal|85
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|format
argument_list|(
name|PeriodType
operator|.
name|dayTime
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"241 hours and 25 minutes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinusOne
specifier|public
name|void
name|testMinusOne
parameter_list|()
block|{
name|assertThat
argument_list|(
operator|new
name|TimeValue
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|nanos
argument_list|()
argument_list|,
name|lessThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseTimeValue
specifier|public
name|void
name|testParseTimeValue
parameter_list|()
block|{
comment|// Space is allowed before unit:
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 ms"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10ms"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 MS"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10MS"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 s"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10s"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 S"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10S"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 m"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10m"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 h"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10h"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 H"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10H"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 d"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10d"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 D"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10D"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Time values of months should throw an exception as months are not
comment|// supported. Note that this is the only unit that is not case sensitive
comment|// as `m` is the only character that is overloaded in terms of which
comment|// time unit is expected between the upper and lower case versions
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10 M"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"10M"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
specifier|final
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|String
name|zeros
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
name|length
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\0'
argument_list|,
literal|'0'
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"-"
operator|+
name|zeros
operator|+
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
operator|==
name|TimeValue
operator|.
name|MINUS_ONE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|zeros
operator|+
literal|"0"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
operator|==
name|TimeValue
operator|.
name|ZERO
argument_list|)
expr_stmt|;
block|}
DECL|method|testRoundTrip
specifier|public
name|void
name|testRoundTrip
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|randomTimeValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeValue
name|t
init|=
operator|new
name|TimeValue
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|128
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|t
operator|.
name|getStringRep
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|FRACTIONAL_TIME_VALUES_ARE_NOT_SUPPORTED
specifier|private
specifier|static
specifier|final
name|String
name|FRACTIONAL_TIME_VALUES_ARE_NOT_SUPPORTED
init|=
literal|"fractional time values are not supported"
decl_stmt|;
DECL|method|testNonFractionalTimeValues
specifier|public
name|void
name|testNonFractionalTimeValues
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|+
name|randomTimeUnit
argument_list|()
decl_stmt|;
specifier|final
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"failed to parse ["
operator|+
name|s
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|not
argument_list|(
name|hasToString
argument_list|(
name|containsString
argument_list|(
name|FRACTIONAL_TIME_VALUES_ARE_NOT_SUPPORTED
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFractionalTimeValues
specifier|public
name|void
name|testFractionalTimeValues
parameter_list|()
block|{
name|double
name|value
decl_stmt|;
do|do
block|{
name|value
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|value
operator|==
literal|0
condition|)
do|;
specifier|final
name|String
name|s
init|=
name|Double
operator|.
name|toString
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|128
argument_list|)
operator|+
name|value
argument_list|)
operator|+
name|randomTimeUnit
argument_list|()
decl_stmt|;
specifier|final
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|s
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"failed to parse ["
operator|+
name|s
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
name|FRACTIONAL_TIME_VALUES_ARE_NOT_SUPPORTED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomTimeUnit
specifier|private
name|String
name|randomTimeUnit
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
literal|"nanos"
argument_list|,
literal|"micros"
argument_list|,
literal|"ms"
argument_list|,
literal|"s"
argument_list|,
literal|"m"
argument_list|,
literal|"h"
argument_list|,
literal|"d"
argument_list|)
return|;
block|}
DECL|method|assertEqualityAfterSerialize
specifier|private
name|void
name|assertEqualityAfterSerialize
parameter_list|(
name|TimeValue
name|value
parameter_list|,
name|int
name|expectedSize
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|value
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|TimeValue
name|inValue
init|=
operator|new
name|TimeValue
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|inValue
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inValue
operator|.
name|duration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|value
operator|.
name|duration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inValue
operator|.
name|timeUnit
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|value
operator|.
name|timeUnit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialize
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEqualityAfterSerialize
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEqualityAfterSerialize
argument_list|(
name|timeValueNanos
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEqualityAfterSerialize
argument_list|(
name|timeValueNanos
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEqualityAfterSerialize
argument_list|(
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|TimeValue
name|timeValue
init|=
operator|new
name|TimeValue
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeZLong
argument_list|(
name|timeValue
operator|.
name|duration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEqualityAfterSerialize
argument_list|(
name|timeValue
argument_list|,
literal|1
operator|+
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailOnUnknownUnits
specifier|public
name|void
name|testFailOnUnknownUnits
parameter_list|()
block|{
try|try
block|{
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"23tw"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"failed to parse"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailOnMissingUnits
specifier|public
name|void
name|testFailOnMissingUnits
parameter_list|()
block|{
try|try
block|{
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"42"
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"failed to parse"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNoDotsAllowed
specifier|public
name|void
name|testNoDotsAllowed
parameter_list|()
block|{
try|try
block|{
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"42ms."
argument_list|,
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ElasticsearchParseException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"failed to parse"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToStringRep
specifier|public
name|void
name|testToStringRep
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
operator|new
name|TimeValue
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10ms"
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1533ms"
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|1533
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"90s"
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|90
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"90m"
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|90
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"36h"
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|36
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1000d"
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompareEquality
specifier|public
name|void
name|testCompareEquality
parameter_list|()
block|{
name|long
name|randomLong
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|TimeUnit
name|randomUnit
init|=
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|TimeValue
name|firstValue
init|=
operator|new
name|TimeValue
argument_list|(
name|randomLong
argument_list|,
name|randomUnit
argument_list|)
decl_stmt|;
name|TimeValue
name|secondValue
init|=
operator|new
name|TimeValue
argument_list|(
name|randomLong
argument_list|,
name|randomUnit
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|firstValue
operator|.
name|compareTo
argument_list|(
name|secondValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompareValue
specifier|public
name|void
name|testCompareValue
parameter_list|()
block|{
name|long
name|firstRandom
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|long
name|secondRandom
init|=
name|randomValueOtherThan
argument_list|(
name|firstRandom
argument_list|,
name|ESTestCase
operator|::
name|randomNonNegativeLong
argument_list|)
decl_stmt|;
name|TimeUnit
name|unit
init|=
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|TimeValue
name|firstValue
init|=
operator|new
name|TimeValue
argument_list|(
name|firstRandom
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|TimeValue
name|secondValue
init|=
operator|new
name|TimeValue
argument_list|(
name|secondRandom
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|firstRandom
operator|>
name|secondRandom
argument_list|,
name|firstValue
operator|.
name|compareTo
argument_list|(
name|secondValue
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondRandom
operator|>
name|firstRandom
argument_list|,
name|secondValue
operator|.
name|compareTo
argument_list|(
name|firstValue
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompareUnits
specifier|public
name|void
name|testCompareUnits
parameter_list|()
block|{
name|long
name|number
init|=
name|randomNonNegativeLong
argument_list|()
decl_stmt|;
name|TimeUnit
name|randomUnit
init|=
name|randomValueOtherThan
argument_list|(
name|TimeUnit
operator|.
name|DAYS
argument_list|,
parameter_list|()
lambda|->
name|randomFrom
argument_list|(
name|TimeUnit
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TimeValue
name|firstValue
init|=
operator|new
name|TimeValue
argument_list|(
name|number
argument_list|,
name|randomUnit
argument_list|)
decl_stmt|;
name|TimeValue
name|secondValue
init|=
operator|new
name|TimeValue
argument_list|(
name|number
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|firstValue
operator|.
name|compareTo
argument_list|(
name|secondValue
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secondValue
operator|.
name|compareTo
argument_list|(
name|firstValue
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testConversionHashCode
specifier|public
name|void
name|testConversionHashCode
parameter_list|()
block|{
name|TimeValue
name|firstValue
init|=
operator|new
name|TimeValue
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|TimeValue
name|secondValue
init|=
operator|new
name|TimeValue
argument_list|(
name|firstValue
operator|.
name|getSeconds
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|firstValue
operator|.
name|hashCode
argument_list|()
argument_list|,
name|secondValue
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

