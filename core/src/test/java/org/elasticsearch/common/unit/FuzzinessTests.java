begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.unit
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|sameInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|number
operator|.
name|IsCloseTo
operator|.
name|closeTo
import|;
end_import

begin_class
DECL|class|FuzzinessTests
specifier|public
class|class
name|FuzzinessTests
extends|extends
name|ESTestCase
block|{
DECL|method|testNumerics
specifier|public
name|void
name|testNumerics
parameter_list|()
block|{
name|String
index|[]
name|options
init|=
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"1"
block|,
literal|"1.000000"
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|Fuzziness
operator|.
name|build
argument_list|(
name|randomFrom
argument_list|(
name|options
argument_list|)
argument_list|)
operator|.
name|asFloat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseFromXContent
specifier|public
name|void
name|testParseFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
block|{
name|XContent
name|xcontent
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|float
name|floatValue
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|Fuzziness
operator|.
name|X_FIELD_NAME
argument_list|,
name|floatValue
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|xcontent
operator|.
name|createParser
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|Fuzziness
name|parse
init|=
name|Fuzziness
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parse
operator|.
name|asFloat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|floatValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|XContent
name|xcontent
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|Integer
name|intValue
init|=
name|frequently
argument_list|()
condition|?
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
else|:
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Float
name|floatRep
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|Number
name|value
init|=
name|intValue
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|value
operator|=
operator|new
name|Float
argument_list|(
name|floatRep
operator|+=
name|intValue
argument_list|)
expr_stmt|;
block|}
name|String
name|json
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|Fuzziness
operator|.
name|X_FIELD_NAME
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|value
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|xcontent
operator|.
name|createParser
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Fuzziness
name|parse
init|=
name|Fuzziness
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|intValue
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|parse
operator|.
name|asDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|intValue
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|intValue
condition|)
block|{
case|case
literal|1
case|:
name|assertThat
argument_list|(
name|parse
argument_list|,
name|sameInstance
argument_list|(
name|Fuzziness
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|assertThat
argument_list|(
name|parse
argument_list|,
name|sameInstance
argument_list|(
name|Fuzziness
operator|.
name|TWO
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|assertThat
argument_list|(
name|parse
argument_list|,
name|sameInstance
argument_list|(
name|Fuzziness
operator|.
name|ZERO
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
block|{
name|XContent
name|xcontent
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|Fuzziness
operator|.
name|X_FIELD_NAME
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"AUTO"
else|:
literal|"auto"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|json
operator|=
name|Fuzziness
operator|.
name|AUTO
operator|.
name|toXContent
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
name|XContentParser
name|parser
init|=
name|xcontent
operator|.
name|createParser
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|Fuzziness
name|parse
init|=
name|Fuzziness
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parse
argument_list|,
name|sameInstance
argument_list|(
name|Fuzziness
operator|.
name|AUTO
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAuto
specifier|public
name|void
name|testAuto
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Fuzziness
operator|.
name|AUTO
operator|.
name|asFloat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsDistance
specifier|public
name|void
name|testAsDistance
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|integer
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|""
operator|+
operator|(
name|randomBoolean
argument_list|()
condition|?
name|integer
operator|.
name|intValue
argument_list|()
else|:
name|integer
operator|.
name|floatValue
argument_list|()
operator|)
decl_stmt|;
name|assertThat
argument_list|(
name|Fuzziness
operator|.
name|build
argument_list|(
name|value
argument_list|)
operator|.
name|asDistance
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|2
argument_list|,
name|integer
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|Fuzziness
name|fuzziness
init|=
name|Fuzziness
operator|.
name|AUTO
decl_stmt|;
name|Fuzziness
name|deserializedFuzziness
init|=
name|doSerializeRoundtrip
argument_list|(
name|fuzziness
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fuzziness
argument_list|,
name|deserializedFuzziness
argument_list|)
expr_stmt|;
name|fuzziness
operator|=
name|Fuzziness
operator|.
name|fromEdits
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|deserializedFuzziness
operator|=
name|doSerializeRoundtrip
argument_list|(
name|fuzziness
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fuzziness
argument_list|,
name|deserializedFuzziness
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerializationAuto
specifier|public
name|void
name|testSerializationAuto
parameter_list|()
throws|throws
name|IOException
block|{
name|Fuzziness
name|fuzziness
init|=
name|Fuzziness
operator|.
name|AUTO
decl_stmt|;
name|Fuzziness
name|deserializedFuzziness
init|=
name|doSerializeRoundtrip
argument_list|(
name|fuzziness
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fuzziness
argument_list|,
name|deserializedFuzziness
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fuzziness
operator|.
name|asFloat
argument_list|()
argument_list|,
name|deserializedFuzziness
operator|.
name|asFloat
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
DECL|method|doSerializeRoundtrip
specifier|private
specifier|static
name|Fuzziness
name|doSerializeRoundtrip
parameter_list|(
name|Fuzziness
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|in
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|StreamInput
name|streamInput
init|=
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
return|return
operator|new
name|Fuzziness
argument_list|(
name|streamInput
argument_list|)
return|;
block|}
block|}
end_class

end_unit

