begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_class
DECL|class|IteratorsTests
specifier|public
class|class
name|IteratorsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testConcatentation
specifier|public
name|void
name|testConcatentation
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|threeTwoOne
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fourFiveSix
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|concat
init|=
name|Iterators
operator|.
name|concat
argument_list|(
name|threeTwoOne
operator|.
name|iterator
argument_list|()
argument_list|,
name|fourFiveSix
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
name|assertContainsInOrder
argument_list|(
name|concat
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoConcatenation
specifier|public
name|void
name|testNoConcatenation
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
expr|<
name|Integer
operator|>
name|concat
argument_list|()
decl_stmt|;
name|assertEmptyIterator
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyConcatenation
specifier|public
name|void
name|testEmptyConcatenation
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
expr|<
name|Integer
operator|>
name|concat
argument_list|(
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|assertEmptyIterator
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleEmptyConcatenation
specifier|public
name|void
name|testMultipleEmptyConcatenation
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|concat
argument_list|(
name|empty
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|)
decl_stmt|;
name|assertEmptyIterator
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleton
specifier|public
name|void
name|testSingleton
parameter_list|()
block|{
name|int
name|value
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|assertSingleton
argument_list|(
name|value
argument_list|,
name|singletonIterator
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyBeforeSingleton
specifier|public
name|void
name|testEmptyBeforeSingleton
parameter_list|()
block|{
name|int
name|value
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|assertSingleton
argument_list|(
name|value
argument_list|,
name|empty
argument_list|()
argument_list|,
name|singletonIterator
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyAfterSingleton
specifier|public
name|void
name|testEmptyAfterSingleton
parameter_list|()
block|{
name|int
name|value
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|assertSingleton
argument_list|(
name|value
argument_list|,
name|singletonIterator
argument_list|(
name|value
argument_list|)
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomSingleton
specifier|public
name|void
name|testRandomSingleton
parameter_list|()
block|{
name|int
name|numberOfIterators
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|int
name|singletonIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numberOfIterators
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
index|[]
name|iterators
init|=
operator|new
name|Iterator
index|[
name|numberOfIterators
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIterators
condition|;
name|i
operator|++
control|)
block|{
name|iterators
index|[
name|i
index|]
operator|=
name|i
operator|!=
name|singletonIndex
condition|?
name|empty
argument_list|()
else|:
name|singletonIterator
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|assertSingleton
argument_list|(
name|value
argument_list|,
name|iterators
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomIterators
specifier|public
name|void
name|testRandomIterators
parameter_list|()
block|{
name|int
name|numberOfIterators
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
index|[]
name|iterators
init|=
operator|new
name|Iterator
index|[
name|numberOfIterators
index|]
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIterators
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numberOfValues
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|theseValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfValues
condition|;
name|j
operator|++
control|)
block|{
name|int
name|value
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|theseValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|iterators
index|[
name|i
index|]
operator|=
name|theseValues
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|assertContainsInOrder
argument_list|(
name|Iterators
operator|.
name|concat
argument_list|(
name|iterators
argument_list|)
argument_list|,
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoEntries
specifier|public
name|void
name|testTwoEntries
parameter_list|()
block|{
name|int
name|first
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|int
name|second
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|concat
init|=
name|Iterators
operator|.
name|concat
argument_list|(
name|singletonIterator
argument_list|(
name|first
argument_list|)
argument_list|,
name|empty
argument_list|()
argument_list|,
name|empty
argument_list|()
argument_list|,
name|singletonIterator
argument_list|(
name|second
argument_list|)
argument_list|)
decl_stmt|;
name|assertContainsInOrder
argument_list|(
name|concat
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
DECL|method|testNull
specifier|public
name|void
name|testNull
parameter_list|()
block|{
try|try
block|{
name|Iterators
operator|.
name|concat
argument_list|(
operator|(
name|Iterator
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected "
operator|+
name|NullPointerException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{          }
block|}
DECL|method|testNullIterator
specifier|public
name|void
name|testNullIterator
parameter_list|()
block|{
try|try
block|{
name|Iterators
operator|.
name|concat
argument_list|(
name|singletonIterator
argument_list|(
literal|1
argument_list|)
argument_list|,
name|empty
argument_list|()
argument_list|,
literal|null
argument_list|,
name|empty
argument_list|()
argument_list|,
name|singletonIterator
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected "
operator|+
name|NullPointerException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{          }
block|}
DECL|method|singletonIterator
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|singletonIterator
parameter_list|(
name|T
name|value
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|value
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|assertSingleton
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|assertSingleton
parameter_list|(
name|T
name|value
parameter_list|,
name|Iterator
argument_list|<
name|T
argument_list|>
modifier|...
name|iterators
parameter_list|)
block|{
name|Iterator
argument_list|<
name|T
argument_list|>
name|concat
init|=
name|Iterators
operator|.
name|concat
argument_list|(
name|iterators
argument_list|)
decl_stmt|;
name|assertContainsInOrder
argument_list|(
name|concat
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|empty
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|empty
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
DECL|method|assertContainsInOrder
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|assertContainsInOrder
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|,
name|T
modifier|...
name|values
parameter_list|)
block|{
for|for
control|(
name|T
name|value
range|:
name|values
control|)
block|{
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNoSuchElementException
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEmptyIterator
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|assertEmptyIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoSuchElementException
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoSuchElementException
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|assertNoSuchElementException
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|)
block|{
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected "
operator|+
name|NoSuchElementException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{          }
block|}
block|}
end_class

end_unit

