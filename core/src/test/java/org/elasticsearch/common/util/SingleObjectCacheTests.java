begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
DECL|class|SingleObjectCacheTests
specifier|public
class|class
name|SingleObjectCacheTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|testRefresh
specifier|public
name|void
name|testRefresh
parameter_list|()
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|needsRefresh
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SingleObjectCache
argument_list|<
name|Integer
argument_list|>
name|cache
init|=
operator|new
name|SingleObjectCache
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|100000
argument_list|)
argument_list|,
literal|0
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|refresh
parameter_list|()
block|{
return|return
name|count
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|needsRefresh
parameter_list|()
block|{
return|return
name|needsRefresh
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getOrRefresh
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getOrRefresh
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|needsRefresh
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getOrRefresh
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|needsRefresh
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getOrRefresh
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefreshDoesntBlock
specifier|public
name|void
name|testRefreshDoesntBlock
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|needsRefresh
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|waiting
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|SingleObjectCache
argument_list|<
name|Integer
argument_list|>
name|cache
init|=
operator|new
name|SingleObjectCache
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|1000
argument_list|)
argument_list|,
literal|0
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|refresh
parameter_list|()
block|{
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
try|try
block|{
name|waiting
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
block|}
return|return
name|count
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|needsRefresh
parameter_list|()
block|{
return|return
name|needsRefresh
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getOrRefresh
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|needsRefresh
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Integer
name|value
init|=
name|cache
operator|.
name|getOrRefresh
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|waiting
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getOrRefresh
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|needsRefresh
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getOrRefresh
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

