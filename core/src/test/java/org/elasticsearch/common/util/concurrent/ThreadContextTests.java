begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
DECL|class|ThreadContextTests
specifier|public
class|class
name|ThreadContextTests
extends|extends
name|ESTestCase
block|{
DECL|method|testStashContext
specifier|public
name|void
name|testStashContext
parameter_list|()
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"ctx.foo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ThreadContext
operator|.
name|StoredContext
name|ctx
init|=
name|threadContext
operator|.
name|stashContext
argument_list|()
init|)
block|{
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStashAndMerge
specifier|public
name|void
name|testStashAndMerge
parameter_list|()
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"ctx.foo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toMerge
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|toMerge
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|toMerge
operator|.
name|put
argument_list|(
literal|"simon"
argument_list|,
literal|"says"
argument_list|)
expr_stmt|;
try|try
init|(
name|ThreadContext
operator|.
name|StoredContext
name|ctx
init|=
name|threadContext
operator|.
name|stashAndMergeHeaders
argument_list|(
name|toMerge
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"says"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"simon"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"simon"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStoreContext
specifier|public
name|void
name|testStoreContext
parameter_list|()
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"ctx.foo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|ThreadContext
operator|.
name|StoredContext
name|storedContext
init|=
name|threadContext
operator|.
name|newStoredContext
argument_list|()
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
try|try
init|(
name|ThreadContext
operator|.
name|StoredContext
name|ctx
init|=
name|threadContext
operator|.
name|stashContext
argument_list|()
init|)
block|{
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|storedContext
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|storedContext
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyHeaders
specifier|public
name|void
name|testCopyHeaders
parameter_list|()
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|copyHeaders
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|copyHeaders
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAccessClosed
specifier|public
name|void
name|testAccessClosed
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"ctx.foo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"threadcontext is already closed"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"threadcontext is already closed"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"boom"
argument_list|,
literal|"boom"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"threadcontext is already closed"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSerialize
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"ctx.foo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|threadContext
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
init|(
name|ThreadContext
operator|.
name|StoredContext
name|ctx
init|=
name|threadContext
operator|.
name|stashContext
argument_list|()
init|)
block|{
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|readHeaders
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerializeInDifferentContext
specifier|public
name|void
name|testSerializeInDifferentContext
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"ctx.foo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|{
name|Settings
name|otherSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|otherhreadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|otherSettings
argument_list|)
decl_stmt|;
name|otherhreadContext
operator|.
name|readHeaders
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|otherhreadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|otherhreadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|otherhreadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSerializeInDifferentContextNoDefaults
specifier|public
name|void
name|testSerializeInDifferentContextNoDefaults
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
block|{
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putTransient
argument_list|(
literal|"ctx.foo"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|threadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|{
name|Settings
name|otherSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|otherhreadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|otherSettings
argument_list|)
decl_stmt|;
name|otherhreadContext
operator|.
name|readHeaders
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|otherhreadContext
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|otherhreadContext
operator|.
name|getTransient
argument_list|(
literal|"ctx.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|otherhreadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCanResetDefault
specifier|public
name|void
name|testCanResetDefault
parameter_list|()
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"default"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStashAndMergeWithModifiedDefaults
specifier|public
name|void
name|testStashAndMergeWithModifiedDefaults
parameter_list|()
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadContext
name|threadContext
init|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toMerge
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|toMerge
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
try|try
init|(
name|ThreadContext
operator|.
name|StoredContext
name|ctx
init|=
name|threadContext
operator|.
name|stashAndMergeHeaders
argument_list|(
name|toMerge
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|build
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"request.headers.default"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|threadContext
operator|=
operator|new
name|ThreadContext
argument_list|(
name|build
argument_list|)
expr_stmt|;
name|threadContext
operator|.
name|putHeader
argument_list|(
literal|"default"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|toMerge
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|toMerge
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
try|try
init|(
name|ThreadContext
operator|.
name|StoredContext
name|ctx
init|=
name|threadContext
operator|.
name|stashAndMergeHeaders
argument_list|(
name|toMerge
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|threadContext
operator|.
name|getHeader
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

