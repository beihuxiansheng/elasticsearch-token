begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|PrioritizedExecutorsTests
specifier|public
class|class
name|PrioritizedExecutorsTests
extends|extends
name|ESTestCase
block|{
DECL|field|holder
specifier|private
specifier|final
name|ThreadContext
name|holder
init|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|method|testPriorityQueue
specifier|public
name|void
name|testPriorityQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|PriorityBlockingQueue
argument_list|<
name|Priority
argument_list|>
name|queue
init|=
operator|new
name|PriorityBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Priority
argument_list|>
name|priorities
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Priority
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|priorities
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Priority
name|priority
range|:
name|priorities
control|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|Priority
name|prevPriority
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|prevPriority
operator|==
literal|null
condition|)
block|{
name|prevPriority
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|queue
operator|.
name|poll
argument_list|()
operator|.
name|after
argument_list|(
name|prevPriority
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSubmitPrioritizedExecutorWithRunnables
specifier|public
name|void
name|testSubmitPrioritizedExecutorWithRunnables
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|,
name|holder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|CountDownLatch
name|awaitingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|finishedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|AwaitingJob
argument_list|(
name|awaitingLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|7
argument_list|,
name|Priority
operator|.
name|LANGUID
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|5
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|2
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|6
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first LOW (fifo)
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|1
argument_list|,
name|Priority
operator|.
name|URGENT
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|4
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|3
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first HIGH (fifo)
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|0
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|awaitingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|finishedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecutePrioritizedExecutorWithRunnables
specifier|public
name|void
name|testExecutePrioritizedExecutorWithRunnables
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|,
name|holder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|CountDownLatch
name|awaitingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|finishedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|AwaitingJob
argument_list|(
name|awaitingLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|7
argument_list|,
name|Priority
operator|.
name|LANGUID
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|5
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|2
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|6
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first LOW (fifo)
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|1
argument_list|,
name|Priority
operator|.
name|URGENT
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|4
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|3
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first HIGH (fifo)
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
literal|0
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|awaitingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|finishedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubmitPrioritizedExecutorWithCallables
specifier|public
name|void
name|testSubmitPrioritizedExecutorWithCallables
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|,
name|holder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|CountDownLatch
name|awaitingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|finishedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|AwaitingJob
argument_list|(
name|awaitingLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|7
argument_list|,
name|Priority
operator|.
name|LANGUID
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|5
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|2
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|6
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first LOW (fifo)
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|1
argument_list|,
name|Priority
operator|.
name|URGENT
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|4
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|3
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first HIGH (fifo)
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|0
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|awaitingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|finishedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubmitPrioritizedExecutorWithMixed
specifier|public
name|void
name|testSubmitPrioritizedExecutorWithMixed
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|,
name|holder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|CountDownLatch
name|awaitingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|finishedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|AwaitingJob
argument_list|(
name|awaitingLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|7
argument_list|,
name|Priority
operator|.
name|LANGUID
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|5
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|2
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|6
argument_list|,
name|Priority
operator|.
name|LOW
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first LOW (fifo)
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|1
argument_list|,
name|Priority
operator|.
name|URGENT
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|4
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CallableJob
argument_list|(
literal|3
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// will execute after the first HIGH (fifo)
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Job
argument_list|(
literal|0
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
name|results
argument_list|,
name|finishedLatch
argument_list|)
argument_list|)
expr_stmt|;
name|awaitingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|finishedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeout
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|ScheduledExecutorService
name|timer
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PrioritizedEsThreadPoolExecutor
name|executor
init|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|,
name|holder
argument_list|,
name|timer
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|invoked
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|block
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|invoked
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|block
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"the blocking"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|invoked
operator|.
name|await
argument_list|()
expr_stmt|;
name|PrioritizedEsThreadPoolExecutor
operator|.
name|Pending
index|[]
name|pending
init|=
name|executor
operator|.
name|getPending
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|pending
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pending
index|[
literal|0
index|]
operator|.
name|task
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"the blocking"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pending
index|[
literal|0
index|]
operator|.
name|executing
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|executeCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|timedOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|executeCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"the waiting"
return|;
block|}
block|}
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|100
argument_list|)
comment|/* enough timeout to catch them in the pending list... */
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|timedOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pending
operator|=
name|executor
operator|.
name|getPending
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|pending
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pending
index|[
literal|0
index|]
operator|.
name|task
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"the blocking"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pending
index|[
literal|0
index|]
operator|.
name|executing
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pending
index|[
literal|1
index|]
operator|.
name|task
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"the waiting"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pending
index|[
literal|1
index|]
operator|.
name|executing
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timedOut
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// sleep a bit to double check that execute on the timed out update task is not called...
name|assertThat
argument_list|(
name|executeCalled
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terminate
argument_list|(
name|timer
argument_list|,
name|executor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimeoutCleanup
specifier|public
name|void
name|testTimeoutCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadPool
name|threadPool
init|=
operator|new
name|TestThreadPool
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|ScheduledThreadPoolExecutor
name|timer
init|=
operator|(
name|ScheduledThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|scheduler
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|timeoutCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|PrioritizedEsThreadPoolExecutor
name|executor
init|=
name|EsExecutors
operator|.
name|newSinglePrioritizing
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|,
name|holder
argument_list|,
name|timer
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|invoked
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|invoked
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We should never get here
name|timeoutCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|invoked
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// the timeout handler is added post execution (and quickly cancelled). We have allow for this
comment|// and use assert busy
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertThat
argument_list|(
name|timer
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|timeoutCalled
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terminate
argument_list|(
name|executor
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terminate
argument_list|(
name|threadPool
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|AwaitingJob
specifier|static
class|class
name|AwaitingJob
extends|extends
name|PrioritizedRunnable
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|AwaitingJob
specifier|private
name|AwaitingJob
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|super
argument_list|(
name|Priority
operator|.
name|URGENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|Job
specifier|static
class|class
name|Job
extends|extends
name|PrioritizedRunnable
block|{
DECL|field|result
specifier|private
specifier|final
name|int
name|result
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|results
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|Job
name|Job
parameter_list|(
name|int
name|result
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|results
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CallableJob
specifier|static
class|class
name|CallableJob
extends|extends
name|PrioritizedCallable
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|result
specifier|private
specifier|final
name|int
name|result
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|results
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|CallableJob
name|CallableJob
parameter_list|(
name|int
name|result
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|results
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

