begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressLoggerChecks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|Lifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests {@link AbstractLifecycleRunnable}.  */
end_comment

begin_class
DECL|class|AbstractLifecycleRunnableTests
specifier|public
class|class
name|AbstractLifecycleRunnableTests
extends|extends
name|ESTestCase
block|{
DECL|field|lifecycle
specifier|private
specifier|final
name|Lifecycle
name|lifecycle
init|=
name|mock
argument_list|(
name|Lifecycle
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|mock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testDoRunOnlyRunsWhenNotStoppedOrClosed
specifier|public
name|void
name|testDoRunOnlyRunsWhenNotStoppedOrClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|Callable
argument_list|<
name|?
argument_list|>
name|runCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// it's "not stopped or closed"
name|when
argument_list|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AbstractLifecycleRunnable
name|runnable
init|=
operator|new
name|AbstractLifecycleRunnable
argument_list|(
name|lifecycle
argument_list|,
name|logger
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"It should not fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRunInLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
name|runCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|lifecycle
argument_list|,
name|logger
argument_list|,
name|runCallable
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lifecycle
argument_list|)
operator|.
name|stoppedOrClosed
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|runCallable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lifecycle
argument_list|)
operator|.
name|stoppedOrClosed
argument_list|()
expr_stmt|;
comment|// onAfter uses it too, but we're not testing it here
name|inOrder
operator|.
name|verifyNoMoreInteractions
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressLoggerChecks
argument_list|(
name|reason
operator|=
literal|"mock usage"
argument_list|)
DECL|method|testDoRunDoesNotRunWhenStoppedOrClosed
specifier|public
name|void
name|testDoRunDoesNotRunWhenStoppedOrClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|Callable
argument_list|<
name|?
argument_list|>
name|runCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// it's stopped or closed
name|when
argument_list|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AbstractLifecycleRunnable
name|runnable
init|=
operator|new
name|AbstractLifecycleRunnable
argument_list|(
name|lifecycle
argument_list|,
name|logger
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"It should not fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRunInLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"Should not run with lifecycle stopped or closed."
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|lifecycle
argument_list|,
name|logger
argument_list|,
name|runCallable
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lifecycle
argument_list|)
operator|.
name|stoppedOrClosed
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|logger
argument_list|)
operator|.
name|trace
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lifecycle
argument_list|)
operator|.
name|stoppedOrClosed
argument_list|()
expr_stmt|;
comment|// onAfter uses it too, but we're not testing it here
name|inOrder
operator|.
name|verifyNoMoreInteractions
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnAfterOnlyWhenNotStoppedOrClosed
specifier|public
name|void
name|testOnAfterOnlyWhenNotStoppedOrClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|Callable
argument_list|<
name|?
argument_list|>
name|runCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|?
argument_list|>
name|afterCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// it's "not stopped or closed"
name|when
argument_list|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AbstractLifecycleRunnable
name|runnable
init|=
operator|new
name|AbstractLifecycleRunnable
argument_list|(
name|lifecycle
argument_list|,
name|logger
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"It should not fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRunInLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
name|runCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onAfterInLifecycle
parameter_list|()
block|{
try|try
block|{
name|afterCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected for mock."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|lifecycle
argument_list|,
name|logger
argument_list|,
name|runCallable
argument_list|,
name|afterCallable
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lifecycle
argument_list|)
operator|.
name|stoppedOrClosed
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|runCallable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lifecycle
argument_list|)
operator|.
name|stoppedOrClosed
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|afterCallable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verifyNoMoreInteractions
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnAfterDoesNotHappenWhenStoppedOrClosed
specifier|public
name|void
name|testOnAfterDoesNotHappenWhenStoppedOrClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|Callable
argument_list|<
name|?
argument_list|>
name|runCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// it's stopped or closed
name|when
argument_list|(
name|lifecycle
operator|.
name|stoppedOrClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AbstractLifecycleRunnable
name|runnable
init|=
operator|new
name|AbstractLifecycleRunnable
argument_list|(
name|lifecycle
argument_list|,
name|logger
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"It should not fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRunInLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"Should not run with lifecycle stopped or closed."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onAfterInLifecycle
parameter_list|()
block|{
name|fail
argument_list|(
literal|"Should not run with lifecycle stopped or closed."
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|lifecycle
argument_list|,
name|runCallable
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lifecycle
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|stoppedOrClosed
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verifyNoMoreInteractions
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

