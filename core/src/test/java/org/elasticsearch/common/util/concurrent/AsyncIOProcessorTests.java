begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_class
DECL|class|AsyncIOProcessorTests
specifier|public
class|class
name|AsyncIOProcessorTests
extends|extends
name|ESTestCase
block|{
DECL|method|testPut
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|boolean
name|blockInternal
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|AtomicInteger
name|received
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
name|processor
init|=
operator|new
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
argument_list|(
name|logger
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2024
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|write
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|<
name|Object
argument_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
argument_list|>
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockInternal
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|Tuple
argument_list|<
name|Object
argument_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|c
range|:
name|candidates
control|)
block|{
name|received
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|received
operator|.
name|addAndGet
argument_list|(
name|candidates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|randomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|20000
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|thread
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|processor
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
parameter_list|(
name|ex
parameter_list|)
lambda|->
name|semaphore
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
empty_stmt|;
block|}
expr_stmt|;
name|thread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|semaphore
operator|.
name|acquire
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|*
name|thread
operator|.
name|length
argument_list|,
name|received
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomFail
specifier|public
name|void
name|testRandomFail
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|AtomicInteger
name|received
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|failed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|actualFailed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
name|processor
init|=
operator|new
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
argument_list|(
name|logger
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2024
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|write
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|<
name|Object
argument_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
argument_list|>
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
name|received
operator|.
name|addAndGet
argument_list|(
name|candidates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|failed
operator|.
name|addAndGet
argument_list|(
name|candidates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|randomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|20000
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
index|]
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|thread
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|processor
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
parameter_list|(
name|ex
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|actualFailed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
empty_stmt|;
block|}
expr_stmt|;
name|thread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|semaphore
operator|.
name|acquire
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|*
name|thread
operator|.
name|length
argument_list|,
name|received
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|actualFailed
operator|.
name|get
argument_list|()
argument_list|,
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConsumerCanThrowExceptions
specifier|public
name|void
name|testConsumerCanThrowExceptions
parameter_list|()
block|{
name|AtomicInteger
name|received
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|notified
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
name|processor
init|=
operator|new
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
argument_list|(
name|logger
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2024
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|write
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|<
name|Object
argument_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
argument_list|>
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
name|received
operator|.
name|addAndGet
argument_list|(
name|candidates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|processor
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
parameter_list|(
name|e
parameter_list|)
lambda|->
block|{
name|notified
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
argument_list|)
expr_stmt|;
name|processor
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
parameter_list|(
name|e
parameter_list|)
lambda|->
block|{
name|notified
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|notified
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|received
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullArguments
specifier|public
name|void
name|testNullArguments
parameter_list|()
block|{
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
name|processor
init|=
operator|new
name|AsyncIOProcessor
argument_list|<
name|Object
argument_list|>
argument_list|(
name|logger
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2024
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|write
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|<
name|Object
argument_list|,
name|Consumer
argument_list|<
name|Exception
argument_list|>
argument_list|>
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{             }
block|}
decl_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|processor
operator|.
name|put
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|e
parameter_list|)
lambda|->
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|processor
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

