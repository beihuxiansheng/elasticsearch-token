begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.primitives
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|primitives
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|IntegerTests
specifier|public
class|class
name|IntegerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testTryParse
specifier|public
name|void
name|testTryParse
parameter_list|()
block|{
name|assertTryParse
argument_list|(
literal|0
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertTryParse
argument_list|(
literal|0
argument_list|,
literal|"-0"
argument_list|)
expr_stmt|;
name|assertTryParse
argument_list|(
literal|1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertTryParse
argument_list|(
operator|-
literal|1
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|assertTryParse
argument_list|(
literal|12345
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|assertTryParse
argument_list|(
operator|-
literal|12345
argument_list|,
literal|"-12345"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
operator|<<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|randomInt
argument_list|()
decl_stmt|;
name|assertTryParse
argument_list|(
name|value
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTryParse
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTryParse
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
literal|"9999999999999999"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|*
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
operator|)
operator|*
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Integers
operator|.
name|tryParse
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTryParse
specifier|private
specifier|static
name|void
name|assertTryParse
parameter_list|(
name|Integer
name|expected
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Integers
operator|.
name|tryParse
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

