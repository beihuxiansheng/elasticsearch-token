begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ByteUtilsTests
specifier|public
class|class
name|ByteUtilsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testZigZag
specifier|public
name|void
name|testZigZag
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|l
argument_list|,
name|ByteUtils
operator|.
name|zigZagDecode
argument_list|(
name|ByteUtils
operator|.
name|zigZagEncode
argument_list|(
name|l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testZigZag
specifier|public
name|void
name|testZigZag
parameter_list|()
block|{
name|testZigZag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testZigZag
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|testZigZag
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testZigZag
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testZigZag
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|testZigZag
argument_list|(
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ByteUtils
operator|.
name|zigZagEncode
argument_list|(
name|randomInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ByteUtils
operator|.
name|zigZagEncode
argument_list|(
operator|-
name|randomInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFloat
specifier|public
name|void
name|testFloat
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|float
index|[]
name|data
init|=
operator|new
name|float
index|[
name|scaledRandomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
operator|*
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|randomFloat
argument_list|()
expr_stmt|;
name|ByteUtils
operator|.
name|writeFloatLE
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|encoded
argument_list|,
name|i
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|ByteUtils
operator|.
name|readFloatLE
argument_list|(
name|encoded
argument_list|,
name|i
operator|*
literal|4
argument_list|)
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDouble
specifier|public
name|void
name|testDouble
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|double
index|[]
name|data
init|=
operator|new
name|double
index|[
name|scaledRandomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
operator|*
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|ByteUtils
operator|.
name|writeDoubleLE
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|encoded
argument_list|,
name|i
operator|*
literal|8
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|ByteUtils
operator|.
name|readDoubleLE
argument_list|(
name|encoded
argument_list|,
name|i
operator|*
literal|8
argument_list|)
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testVLong
specifier|public
name|void
name|testVLong
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
name|scaledRandomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|randomInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|data
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|data
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|data
index|[
name|i
index|]
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|data
index|[
name|i
index|]
operator|=
name|randomInt
argument_list|(
literal|1
operator|<<
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|data
index|[
name|i
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
specifier|final
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|ByteUtils
operator|.
name|MAX_BYTES_VLONG
operator|*
name|data
operator|.
name|length
index|]
decl_stmt|;
name|ByteArrayDataOutput
name|out
init|=
operator|new
name|ByteArrayDataOutput
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|out
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|ByteUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
operator|<
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|ByteUtils
operator|.
name|MAX_BYTES_VLONG
argument_list|,
name|out
operator|.
name|getPosition
argument_list|()
operator|-
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ByteArrayDataInput
name|in
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|ByteUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

