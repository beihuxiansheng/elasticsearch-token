begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModulesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|ExtensionPointTests
specifier|public
class|class
name|ExtensionPointTests
extends|extends
name|ESTestCase
block|{
DECL|method|testClassSet
specifier|public
name|void
name|testClassSet
parameter_list|()
block|{
specifier|final
name|ExtensionPoint
operator|.
name|ClassSet
argument_list|<
name|TestBaseClass
argument_list|>
name|allocationDeciders
init|=
operator|new
name|ExtensionPoint
operator|.
name|ClassSet
argument_list|<>
argument_list|(
literal|"test_class"
argument_list|,
name|TestBaseClass
operator|.
name|class
argument_list|,
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|allocationDeciders
operator|.
name|registerExtension
argument_list|(
name|TestImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|Injector
name|injector
init|=
operator|new
name|ModulesBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Module
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|allocationDeciders
operator|.
name|bind
argument_list|(
name|binder
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|createInjector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TestImpl
operator|.
name|instances
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestBaseClass
specifier|public
specifier|static
class|class
name|TestBaseClass
block|{}
DECL|class|Consumer
specifier|public
specifier|static
class|class
name|Consumer
block|{
annotation|@
name|Inject
DECL|method|Consumer
specifier|public
name|Consumer
parameter_list|(
name|Set
argument_list|<
name|TestBaseClass
argument_list|>
name|deciders
parameter_list|,
name|TestImpl
name|other
parameter_list|)
block|{
comment|// we require the TestImpl more than once to ensure it's bound as a singleton
block|}
block|}
DECL|class|TestImpl
specifier|public
specifier|static
class|class
name|TestImpl
extends|extends
name|TestBaseClass
block|{
DECL|field|instances
specifier|static
specifier|final
name|AtomicInteger
name|instances
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|method|TestImpl
specifier|public
name|TestImpl
parameter_list|()
block|{
name|instances
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

