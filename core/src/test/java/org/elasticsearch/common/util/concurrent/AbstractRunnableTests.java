begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Tests {@link AbstractRunnable}  */
end_comment

begin_class
DECL|class|AbstractRunnableTests
specifier|public
class|class
name|AbstractRunnableTests
extends|extends
name|ESTestCase
block|{
DECL|method|testRunSuccess
specifier|public
name|void
name|testRunSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Callable
argument_list|<
name|?
argument_list|>
name|runCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractRunnable
name|runnable
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"It should not fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|runCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|runCallable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
DECL|method|testRunFailure
specifier|public
name|void
name|testRunFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|AbstractRunnable
name|runnable
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|assertSame
argument_list|(
name|exception
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
name|exception
throw|;
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnAfterSuccess
specifier|public
name|void
name|testOnAfterSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Callable
argument_list|<
name|?
argument_list|>
name|runCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|?
argument_list|>
name|afterCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractRunnable
name|runnable
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"It should not fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|runCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAfter
parameter_list|()
block|{
try|try
block|{
name|afterCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected for mock."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|runCallable
argument_list|,
name|afterCallable
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|runCallable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|afterCallable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnAfterFailure
specifier|public
name|void
name|testOnAfterFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|?
argument_list|>
name|afterCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractRunnable
name|runnable
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|assertSame
argument_list|(
name|exception
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
name|exception
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAfter
parameter_list|()
block|{
try|try
block|{
name|afterCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected for mock."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|afterCallable
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnRejection
specifier|public
name|void
name|testOnRejection
parameter_list|()
throws|throws
name|Exception
block|{
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|?
argument_list|>
name|failureCallable
init|=
name|mock
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractRunnable
name|runnable
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|assertSame
argument_list|(
name|exception
argument_list|,
name|t
argument_list|)
expr_stmt|;
try|try
block|{
name|failureCallable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected for mock."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"Not tested"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|runnable
operator|.
name|onRejection
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsForceExecutuonDefaultsFalse
specifier|public
name|void
name|testIsForceExecutuonDefaultsFalse
parameter_list|()
block|{
name|AbstractRunnable
name|runnable
init|=
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not tested"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"Not tested"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|runnable
operator|.
name|isForceExecution
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

