begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|AllocationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|MetaDataStateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardStateMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|OldIndexUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
DECL|class|IndexFolderUpgraderTests
specifier|public
class|class
name|IndexFolderUpgraderTests
extends|extends
name|ESTestCase
block|{
comment|/**      * tests custom data paths are upgraded      */
DECL|method|testUpgradeCustomDataPath
specifier|public
name|void
name|testUpgradeCustomDataPath
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|customPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|ADD_NODE_LOCK_ID_TO_CUSTOM_PATH
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_SHARED_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|customPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|NodeEnvironment
name|nodeEnv
init|=
name|newNodeEnvironment
argument_list|(
name|nodeSettings
argument_list|)
init|)
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|customPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexState
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|numIdxFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|numTranslogFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexState
argument_list|,
name|nodeSettings
argument_list|)
decl_stmt|;
name|writeIndex
argument_list|(
name|nodeEnv
argument_list|,
name|indexSettings
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
name|IndexFolderUpgrader
name|helper
init|=
operator|new
name|IndexFolderUpgrader
argument_list|(
name|settings
argument_list|,
name|nodeEnv
argument_list|)
decl_stmt|;
name|helper
operator|.
name|upgrade
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|nodeEnv
argument_list|,
name|indexSettings
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * tests upgrade on partially upgraded index, when we crash while upgrading      */
DECL|method|testPartialUpgradeCustomDataPath
specifier|public
name|void
name|testPartialUpgradeCustomDataPath
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|customPath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|ADD_NODE_LOCK_ID_TO_CUSTOM_PATH
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_SHARED_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|customPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|NodeEnvironment
name|nodeEnv
init|=
name|newNodeEnvironment
argument_list|(
name|nodeSettings
argument_list|)
init|)
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|customPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexState
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|numIdxFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|numTranslogFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexState
argument_list|,
name|nodeSettings
argument_list|)
decl_stmt|;
name|writeIndex
argument_list|(
name|nodeEnv
argument_list|,
name|indexSettings
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
name|IndexFolderUpgrader
name|helper
init|=
operator|new
name|IndexFolderUpgrader
argument_list|(
name|settings
argument_list|,
name|nodeEnv
argument_list|)
block|{
annotation|@
name|Override
name|void
name|upgrade
parameter_list|(
name|Index
name|index
parameter_list|,
name|Path
name|source
parameter_list|,
name|Path
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"simulated"
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// only upgrade some paths
try|try
block|{
name|helper
operator|.
name|upgrade
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
name|helper
operator|=
operator|new
name|IndexFolderUpgrader
argument_list|(
name|settings
argument_list|,
name|nodeEnv
argument_list|)
expr_stmt|;
comment|// try to upgrade again
name|helper
operator|.
name|upgrade
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|nodeEnv
argument_list|,
name|indexSettings
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpgrade
specifier|public
name|void
name|testUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|ADD_NODE_LOCK_ID_TO_CUSTOM_PATH
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|NodeEnvironment
name|nodeEnv
init|=
name|newNodeEnvironment
argument_list|(
name|nodeSettings
argument_list|)
init|)
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexState
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|numIdxFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|numTranslogFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexState
argument_list|,
name|nodeSettings
argument_list|)
decl_stmt|;
name|writeIndex
argument_list|(
name|nodeEnv
argument_list|,
name|indexSettings
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
name|IndexFolderUpgrader
name|helper
init|=
operator|new
name|IndexFolderUpgrader
argument_list|(
name|settings
argument_list|,
name|nodeEnv
argument_list|)
decl_stmt|;
name|helper
operator|.
name|upgrade
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|nodeEnv
argument_list|,
name|indexSettings
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpgradeIndices
specifier|public
name|void
name|testUpgradeIndices
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|ADD_NODE_LOCK_ID_TO_CUSTOM_PATH
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|NodeEnvironment
name|nodeEnv
init|=
name|newNodeEnvironment
argument_list|(
name|nodeSettings
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|IndexSettings
argument_list|,
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|indexSettingsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeSettings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|V_2_0_0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexState
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|fileCounts
init|=
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexState
argument_list|,
name|nodeSettings
argument_list|)
decl_stmt|;
name|indexSettingsMap
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|,
name|fileCounts
argument_list|)
expr_stmt|;
name|writeIndex
argument_list|(
name|nodeEnv
argument_list|,
name|indexSettings
argument_list|,
name|fileCounts
operator|.
name|v1
argument_list|()
argument_list|,
name|fileCounts
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndexFolderUpgrader
operator|.
name|upgradeIndicesIfNeeded
argument_list|(
name|nodeSettings
argument_list|,
name|nodeEnv
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|IndexSettings
argument_list|,
name|Tuple
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|indexSettingsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|checkIndex
argument_list|(
name|nodeEnv
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|v1
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Run upgrade on a real bwc index      */
DECL|method|testUpgradeRealIndex
specifier|public
name|void
name|testUpgradeRealIndex
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|getBwcIndicesPath
argument_list|()
argument_list|,
literal|"index-*.zip"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|CollectionUtil
operator|.
name|introSort
argument_list|(
name|indexes
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getFileName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path
init|=
name|randomFrom
argument_list|(
name|indexes
argument_list|)
decl_stmt|;
specifier|final
name|String
name|indexName
init|=
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|".zip"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
try|try
init|(
name|NodeEnvironment
name|nodeEnvironment
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|Path
name|unzipDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|unzipDataDir
init|=
name|unzipDir
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
comment|// decompress the index
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|TestUtil
operator|.
name|unzip
argument_list|(
name|stream
argument_list|,
name|unzipDir
argument_list|)
expr_stmt|;
block|}
comment|// check it is unique
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|unzipDataDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|list
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|unzipDataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Backwards index must contain exactly one cluster but was "
operator|+
name|list
operator|.
name|length
argument_list|)
throw|;
block|}
comment|// the bwc scripts packs the indices under this path
name|Path
name|src
init|=
name|OldIndexUtils
operator|.
name|getIndexDir
argument_list|(
name|logger
argument_list|,
name|indexName
argument_list|,
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|list
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"["
operator|+
name|path
operator|+
literal|"] missing index dir: "
operator|+
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|indicesPath
init|=
name|randomFrom
argument_list|(
name|nodeEnvironment
operator|.
name|nodePaths
argument_list|()
argument_list|)
operator|.
name|indicesPath
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> injecting index [{}] into [{}]"
argument_list|,
name|indexName
argument_list|,
name|indicesPath
argument_list|)
expr_stmt|;
name|OldIndexUtils
operator|.
name|copyIndex
argument_list|(
name|logger
argument_list|,
name|src
argument_list|,
name|src
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|indicesPath
argument_list|)
expr_stmt|;
name|IndexFolderUpgrader
operator|.
name|upgradeIndicesIfNeeded
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|nodeEnvironment
argument_list|)
expr_stmt|;
comment|// ensure old index folder is deleted
name|Set
argument_list|<
name|String
argument_list|>
name|indexFolders
init|=
name|nodeEnvironment
operator|.
name|availableIndexFolders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|indexFolders
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// ensure index metadata is moved
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|,
name|nodeEnvironment
operator|.
name|resolveIndexFolder
argument_list|(
name|indexFolders
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|indexMetaData
argument_list|)
expr_stmt|;
name|Index
name|index
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ShardId
argument_list|>
name|shardIds
init|=
name|nodeEnvironment
operator|.
name|findAllShardIds
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// ensure all shards are moved
name|assertEquals
argument_list|(
name|shardIds
operator|.
name|size
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardId
name|shardId
range|:
name|shardIds
control|)
block|{
specifier|final
name|ShardPath
name|shardPath
init|=
name|ShardPath
operator|.
name|loadShardPath
argument_list|(
name|logger
argument_list|,
name|nodeEnvironment
argument_list|,
name|shardId
argument_list|,
operator|new
name|IndexSettings
argument_list|(
name|indexMetaData
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|translog
init|=
name|shardPath
operator|.
name|resolveTranslog
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|idx
init|=
name|shardPath
operator|.
name|resolveIndex
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|state
init|=
name|shardPath
operator|.
name|getShardStatePath
argument_list|()
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|shardPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|translog
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNeedsUpgrade
specifier|public
name|void
name|testNeedsUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexState
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|NodeEnvironment
name|nodeEnvironment
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|indexState
argument_list|,
name|nodeEnvironment
operator|.
name|indexPaths
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexFolderUpgrader
operator|.
name|needsUpgrade
argument_list|(
name|index
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkIndex
specifier|private
name|void
name|checkIndex
parameter_list|(
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|int
name|numIdxFiles
parameter_list|,
name|int
name|numTranslogFiles
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Index
name|index
init|=
name|indexSettings
operator|.
name|getIndex
argument_list|()
decl_stmt|;
comment|// ensure index state can be loaded
name|IndexMetaData
name|loadLatestState
init|=
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|,
name|nodeEnv
operator|.
name|indexPaths
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|loadLatestState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loadLatestState
operator|.
name|getIndex
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|shardId
init|=
literal|0
init|;
name|shardId
operator|<
name|indexSettings
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|shardId
operator|++
control|)
block|{
comment|// ensure shard path can be loaded
name|ShardPath
name|targetShardPath
init|=
name|ShardPath
operator|.
name|loadShardPath
argument_list|(
name|logger
argument_list|,
name|nodeEnv
argument_list|,
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
argument_list|,
name|indexSettings
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|targetShardPath
argument_list|)
expr_stmt|;
comment|// ensure shard contents are copied over
specifier|final
name|Path
name|translog
init|=
name|targetShardPath
operator|.
name|resolveTranslog
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|idx
init|=
name|targetShardPath
operator|.
name|resolveIndex
argument_list|()
decl_stmt|;
comment|// ensure index and translog files are copied over
name|assertEquals
argument_list|(
name|numTranslogFiles
argument_list|,
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|translog
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numIdxFiles
argument_list|,
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|idx
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
index|[]
name|files
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|translog
argument_list|)
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|Path
argument_list|>
name|translogFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTranslogFiles
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|translogFiles
operator|.
name|contains
argument_list|(
name|translog
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".translog"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|content
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|translog
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".translog"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
operator|new
name|String
argument_list|(
name|content
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
index|[]
name|indexFileList
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|idx
argument_list|)
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|Path
argument_list|>
name|idxFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|indexFileList
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIdxFiles
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|idxFiles
operator|.
name|contains
argument_list|(
name|idx
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".tst"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|content
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|idx
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".tst"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
operator|new
name|String
argument_list|(
name|content
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeIndex
specifier|private
name|void
name|writeIndex
parameter_list|(
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|IndexSettings
name|indexSettings
parameter_list|,
name|int
name|numIdxFiles
parameter_list|,
name|int
name|numTranslogFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeEnvironment
operator|.
name|NodePath
index|[]
name|nodePaths
init|=
name|nodeEnv
operator|.
name|nodePaths
argument_list|()
decl_stmt|;
name|Path
index|[]
name|oldIndexPaths
init|=
operator|new
name|Path
index|[
name|nodePaths
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodePaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|oldIndexPaths
index|[
name|i
index|]
operator|=
name|nodePaths
index|[
name|i
index|]
operator|.
name|indicesPath
operator|.
name|resolve
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndexMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|indexSettings
operator|.
name|getIndexMetaData
argument_list|()
argument_list|,
name|oldIndexPaths
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|indexSettings
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|id
operator|++
control|)
block|{
name|Path
name|oldIndexPath
init|=
name|randomFrom
argument_list|(
name|oldIndexPaths
argument_list|)
decl_stmt|;
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexSettings
operator|.
name|hasCustomDataPath
argument_list|()
condition|)
block|{
name|Path
name|customIndexPath
init|=
name|nodeEnv
operator|.
name|resolveBaseCustomLocation
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|resolve
argument_list|(
name|indexSettings
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|writeShard
argument_list|(
name|shardId
argument_list|,
name|customIndexPath
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeShard
argument_list|(
name|shardId
argument_list|,
name|oldIndexPath
argument_list|,
name|numIdxFiles
argument_list|,
name|numTranslogFiles
argument_list|)
expr_stmt|;
block|}
name|ShardStateMetaData
name|state
init|=
operator|new
name|ShardStateMetaData
argument_list|(
literal|true
argument_list|,
name|indexSettings
operator|.
name|getUUID
argument_list|()
argument_list|,
name|AllocationId
operator|.
name|newInitializing
argument_list|()
argument_list|)
decl_stmt|;
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
name|state
argument_list|,
name|oldIndexPath
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeShard
specifier|private
name|void
name|writeShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Path
name|indexLocation
parameter_list|,
specifier|final
name|int
name|numIdxFiles
parameter_list|,
specifier|final
name|int
name|numTranslogFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|oldShardDataPath
init|=
name|indexLocation
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|shardId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|translogPath
init|=
name|oldShardDataPath
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|TRANSLOG_FOLDER_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|idxPath
init|=
name|oldShardDataPath
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|INDEX_FOLDER_NAME
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|translogPath
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|idxPath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIdxFiles
condition|;
name|i
operator|++
control|)
block|{
name|String
name|filename
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|w
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|idxPath
operator|.
name|resolve
argument_list|(
name|filename
operator|+
literal|".tst"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|w
operator|.
name|write
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTranslogFiles
condition|;
name|i
operator|++
control|)
block|{
name|String
name|filename
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|w
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|translogPath
operator|.
name|resolve
argument_list|(
name|filename
operator|+
literal|".translog"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|w
operator|.
name|write
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

