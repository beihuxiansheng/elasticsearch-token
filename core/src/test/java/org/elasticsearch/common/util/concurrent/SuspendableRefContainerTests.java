begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util.concurrent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|SuspendableRefContainerTests
specifier|public
class|class
name|SuspendableRefContainerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBasicAcquire
specifier|public
name|void
name|testBasicAcquire
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|SuspendableRefContainer
name|refContainer
init|=
operator|new
name|SuspendableRefContainer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Releasable
name|lock1
init|=
name|randomLockingMethod
argument_list|(
name|refContainer
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Releasable
name|lock2
init|=
name|randomLockingMethod
argument_list|(
name|refContainer
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|lock1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|lock1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check idempotence
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|lock2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAcquisitionBlockingBlocksNewAcquisitions
specifier|public
name|void
name|testAcquisitionBlockingBlocksNewAcquisitions
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|SuspendableRefContainer
name|refContainer
init|=
operator|new
name|SuspendableRefContainer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Releasable
name|block
init|=
name|refContainer
operator|.
name|blockAcquisition
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|tryAcquire
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Releasable
name|lock
init|=
name|refContainer
operator|.
name|tryAcquire
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// same with blocking acquire
name|AtomicBoolean
name|acquired
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Releasable
name|lock
init|=
name|randomBoolean
argument_list|()
condition|?
name|refContainer
operator|.
name|acquire
argument_list|()
else|:
name|refContainer
operator|.
name|acquireUninterruptibly
argument_list|()
init|)
block|{
name|acquired
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
init|(
name|Releasable
name|block
init|=
name|refContainer
operator|.
name|blockAcquisition
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// check that blocking acquire really blocks
name|assertThat
argument_list|(
name|acquired
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|acquired
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAcquisitionBlockingWaitsOnExistingAcquisitions
specifier|public
name|void
name|testAcquisitionBlockingWaitsOnExistingAcquisitions
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|SuspendableRefContainer
name|refContainer
init|=
operator|new
name|SuspendableRefContainer
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|acquired
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Releasable
name|block
init|=
name|refContainer
operator|.
name|blockAcquisition
argument_list|()
init|)
block|{
name|acquired
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
init|(
name|Releasable
name|lock
init|=
name|randomLockingMethod
argument_list|(
name|refContainer
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|acquired
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|acquired
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|refContainer
operator|.
name|activeRefs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomLockingMethod
specifier|private
name|Releasable
name|randomLockingMethod
parameter_list|(
name|SuspendableRefContainer
name|refContainer
parameter_list|)
throws|throws
name|InterruptedException
block|{
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
name|refContainer
operator|.
name|tryAcquire
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|refContainer
operator|.
name|acquire
argument_list|()
return|;
case|case
literal|2
case|:
return|return
name|refContainer
operator|.
name|acquireUninterruptibly
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"randomLockingMethod inconsistent"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

