begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|bwcompat
operator|.
name|OldIndexBackwardsCompatibilityIT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|MetaDataStateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardStateMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
DECL|class|MultiDataPathUpgraderTests
specifier|public
class|class
name|MultiDataPathUpgraderTests
extends|extends
name|ESTestCase
block|{
DECL|method|testUpgradeRandomPaths
specifier|public
name|void
name|testUpgradeRandomPaths
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|NodeEnvironment
name|nodeEnvironment
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
specifier|final
name|String
name|uuid
init|=
name|Strings
operator|.
name|base64UUID
argument_list|()
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|shardDataPaths
init|=
name|nodeEnvironment
operator|.
name|availableShardPaths
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeEnvironment
operator|.
name|nodeDataPaths
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|helper
operator|.
name|needsUpgrading
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|numIdxFiles
init|=
literal|0
decl_stmt|;
name|int
name|numTranslogFiles
init|=
literal|0
decl_stmt|;
name|int
name|metaStateVersion
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|shardPath
range|:
name|shardDataPaths
control|)
block|{
specifier|final
name|Path
name|translog
init|=
name|shardPath
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|TRANSLOG_FOLDER_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|idx
init|=
name|shardPath
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|INDEX_FOLDER_NAME
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|translog
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|int
name|numFiles
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
operator|,
name|numIdxFiles
operator|++
control|)
block|{
name|String
name|filename
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|numIdxFiles
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|w
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|idx
operator|.
name|resolve
argument_list|(
name|filename
operator|+
literal|".tst"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|w
operator|.
name|write
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
name|numFiles
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
operator|,
name|numTranslogFiles
operator|++
control|)
block|{
name|String
name|filename
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|numTranslogFiles
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|w
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|translog
operator|.
name|resolve
argument_list|(
name|filename
operator|+
literal|".translog"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|w
operator|.
name|write
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
operator|++
name|metaStateVersion
expr_stmt|;
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
name|metaStateVersion
argument_list|,
literal|true
argument_list|,
name|uuid
argument_list|)
argument_list|,
name|metaStateVersion
argument_list|,
name|shardDataPaths
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|path
init|=
name|randomFrom
argument_list|(
name|shardDataPaths
argument_list|)
decl_stmt|;
name|ShardPath
name|targetPath
init|=
operator|new
name|ShardPath
argument_list|(
literal|false
argument_list|,
name|path
argument_list|,
name|path
argument_list|,
name|uuid
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
decl_stmt|;
name|helper
operator|.
name|upgrade
argument_list|(
name|shardId
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|helper
operator|.
name|needsUpgrading
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardDataPaths
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|Path
name|shardPath
range|:
name|shardDataPaths
control|)
block|{
if|if
condition|(
name|shardPath
operator|.
name|equals
argument_list|(
name|targetPath
operator|.
name|getDataPath
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Path
name|translog
init|=
name|shardPath
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|TRANSLOG_FOLDER_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|idx
init|=
name|shardPath
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|INDEX_FOLDER_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|state
init|=
name|shardPath
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|translog
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|shardPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ShardStateMetaData
name|stateMetaData
init|=
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|targetPath
operator|.
name|getShardStatePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|metaStateVersion
argument_list|,
name|stateMetaData
operator|.
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stateMetaData
operator|.
name|primary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uuid
argument_list|,
name|stateMetaData
operator|.
name|indexUUID
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|translog
init|=
name|targetPath
operator|.
name|getDataPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|TRANSLOG_FOLDER_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|idx
init|=
name|targetPath
operator|.
name|getDataPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|ShardPath
operator|.
name|INDEX_FOLDER_NAME
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|idx
operator|.
name|resolve
argument_list|(
literal|"write.lock"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numTranslogFiles
argument_list|,
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|translog
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numIdxFiles
argument_list|,
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|idx
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|HashSet
argument_list|<
name|Path
argument_list|>
name|translogFiles
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|translog
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTranslogFiles
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|translogFiles
operator|.
name|contains
argument_list|(
name|translog
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".translog"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|content
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|translog
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".translog"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
operator|new
name|String
argument_list|(
name|content
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HashSet
argument_list|<
name|Path
argument_list|>
name|idxFiles
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIdxFiles
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|idxFiles
operator|.
name|contains
argument_list|(
name|idx
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".tst"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|content
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|idx
operator|.
name|resolve
argument_list|(
name|name
operator|+
literal|".tst"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
operator|new
name|String
argument_list|(
name|content
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Run upgrade on a real bwc index      */
DECL|method|testUpgradeRealIndex
specifier|public
name|void
name|testUpgradeRealIndex
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|getBwcIndicesPath
argument_list|()
argument_list|,
literal|"index-*.zip"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|CollectionUtil
operator|.
name|introSort
argument_list|(
name|indexes
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Path
name|o1
parameter_list|,
name|Path
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getFileName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getFileName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
name|randomFrom
argument_list|(
name|indexes
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|indexFile
init|=
name|path
decl_stmt|;
specifier|final
name|String
name|indexName
init|=
name|indexFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|".zip"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
try|try
init|(
name|NodeEnvironment
name|nodeEnvironment
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
if|if
condition|(
name|nodeEnvironment
operator|.
name|nodeDataPaths
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|helper
operator|.
name|needsUpgrading
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|unzipDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|unzipDataDir
init|=
name|unzipDir
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
comment|// decompress the index
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|indexFile
argument_list|)
init|)
block|{
name|TestUtil
operator|.
name|unzip
argument_list|(
name|stream
argument_list|,
name|unzipDir
argument_list|)
expr_stmt|;
block|}
comment|// check it is unique
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|unzipDataDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|list
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|unzipDataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Backwards index must contain exactly one cluster but was "
operator|+
name|list
operator|.
name|length
argument_list|)
throw|;
block|}
comment|// the bwc scripts packs the indices under this path
name|Path
name|src
init|=
name|list
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
literal|"nodes/0/indices/"
operator|+
name|indexName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"["
operator|+
name|indexFile
operator|+
literal|"] missing index dir: "
operator|+
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|multiDataPath
init|=
operator|new
name|Path
index|[
name|nodeEnvironment
operator|.
name|nodeDataPaths
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeEnvironment
operator|.
name|NodePath
name|nodePath
range|:
name|nodeEnvironment
operator|.
name|nodePaths
argument_list|()
control|)
block|{
name|multiDataPath
index|[
name|i
operator|++
index|]
operator|=
name|nodePath
operator|.
name|indicesPath
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> injecting index [{}] into multiple data paths"
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|OldIndexBackwardsCompatibilityIT
operator|.
name|copyIndex
argument_list|(
name|logger
argument_list|,
name|src
argument_list|,
name|indexName
argument_list|,
name|multiDataPath
argument_list|)
expr_stmt|;
specifier|final
name|ShardPath
name|shardPath
init|=
operator|new
name|ShardPath
argument_list|(
literal|false
argument_list|,
name|nodeEnvironment
operator|.
name|availableShardPaths
argument_list|(
operator|new
name|ShardId
argument_list|(
name|indexName
argument_list|,
literal|0
argument_list|)
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|nodeEnvironment
operator|.
name|availableShardPaths
argument_list|(
operator|new
name|ShardId
argument_list|(
name|indexName
argument_list|,
literal|0
argument_list|)
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|,
operator|new
name|ShardId
argument_list|(
name|indexName
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
operator|(
name|Object
operator|)
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|shardPath
operator|.
name|resolveIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
decl_stmt|;
name|helper
operator|.
name|upgrade
argument_list|(
operator|new
name|ShardId
argument_list|(
name|indexName
argument_list|,
literal|0
argument_list|)
argument_list|,
name|shardPath
argument_list|)
expr_stmt|;
name|helper
operator|.
name|checkIndex
argument_list|(
name|shardPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|helper
operator|.
name|needsUpgrading
argument_list|(
operator|new
name|ShardId
argument_list|(
name|indexName
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNeedsUpgrade
specifier|public
name|void
name|testNeedsUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|NodeEnvironment
name|nodeEnvironment
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
name|String
name|uuid
init|=
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
name|uuid
argument_list|)
argument_list|,
literal|1
argument_list|,
name|nodeEnvironment
operator|.
name|availableShardPaths
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
decl_stmt|;
name|boolean
name|multiDataPaths
init|=
name|nodeEnvironment
operator|.
name|nodeDataPaths
argument_list|()
operator|.
name|length
operator|>
literal|1
decl_stmt|;
name|boolean
name|needsUpgrading
init|=
name|helper
operator|.
name|needsUpgrading
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiDataPaths
condition|)
block|{
name|assertTrue
argument_list|(
name|needsUpgrading
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|needsUpgrading
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPickTargetShardPath
specifier|public
name|void
name|testPickTargetShardPath
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|NodeEnvironment
name|nodeEnvironment
init|=
name|newNodeEnvironment
argument_list|()
init|)
block|{
specifier|final
name|ShardId
name|shard
init|=
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
name|nodeEnvironment
operator|.
name|availableShardPaths
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|pickShardPath
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"one path needs no upgrading"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// only one path
block|}
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Tuple
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|pathToSpace
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|expectedPath
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// path with most of the file bytes
name|expectedPath
operator|=
name|randomFrom
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|long
index|[]
name|used
init|=
operator|new
name|long
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
name|long
name|sumSpaceUsed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|used
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|spaceUsed
init|=
name|paths
index|[
name|i
index|]
operator|==
name|expectedPath
condition|?
name|randomIntBetween
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
else|:
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|sumSpaceUsed
operator|+=
name|spaceUsed
expr_stmt|;
name|used
index|[
name|i
index|]
operator|=
name|spaceUsed
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|used
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|availalbe
init|=
name|randomIntBetween
argument_list|(
call|(
name|int
call|)
argument_list|(
literal|2
operator|*
name|sumSpaceUsed
operator|-
name|used
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|4
operator|*
operator|(
name|int
operator|)
name|sumSpaceUsed
argument_list|)
decl_stmt|;
name|pathToSpace
operator|.
name|put
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|availalbe
argument_list|,
name|used
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// path with largest available space
name|expectedPath
operator|=
name|randomFrom
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|long
index|[]
name|used
init|=
operator|new
name|long
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
name|long
name|sumSpaceUsed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|used
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|spaceUsed
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|sumSpaceUsed
operator|+=
name|spaceUsed
expr_stmt|;
name|used
index|[
name|i
index|]
operator|=
name|spaceUsed
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|used
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|availalbe
init|=
name|paths
index|[
name|i
index|]
operator|==
name|expectedPath
condition|?
name|randomIntBetween
argument_list|(
call|(
name|int
call|)
argument_list|(
name|sumSpaceUsed
argument_list|)
argument_list|,
call|(
name|int
call|)
argument_list|(
literal|2
operator|*
name|sumSpaceUsed
argument_list|)
argument_list|)
else|:
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|sumSpaceUsed
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|pathToSpace
operator|.
name|put
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|availalbe
argument_list|,
name|used
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|long
name|getUsabelSpace
parameter_list|(
name|NodeEnvironment
operator|.
name|NodePath
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|pathToSpace
operator|.
name|get
argument_list|(
name|path
operator|.
name|resolve
argument_list|(
name|shard
argument_list|)
argument_list|)
operator|.
name|v1
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getSpaceUsedByShard
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|pathToSpace
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|v2
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|String
name|uuid
init|=
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|ShardStateMetaData
operator|.
name|FORMAT
operator|.
name|write
argument_list|(
operator|new
name|ShardStateMetaData
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
name|uuid
argument_list|)
argument_list|,
literal|1
argument_list|,
name|paths
argument_list|)
expr_stmt|;
specifier|final
name|ShardPath
name|shardPath
init|=
name|helper
operator|.
name|pickShardPath
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|shardPath
operator|.
name|getDataPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|shardPath
operator|.
name|getShardStatePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MultiDataPathUpgrader
name|helper
init|=
operator|new
name|MultiDataPathUpgrader
argument_list|(
name|nodeEnvironment
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|long
name|getUsabelSpace
parameter_list|(
name|NodeEnvironment
operator|.
name|NodePath
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getSpaceUsedByShard
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|randomIntBetween
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|pickShardPath
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"not enough space"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// not enough space
block|}
block|}
block|}
block|}
end_class

end_unit

