begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.breaker
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|BreakerSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|HierarchyCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  * Tests for the Memory Aggregating Circuit Breaker  */
end_comment

begin_class
DECL|class|MemoryCircuitBreakerTests
specifier|public
class|class
name|MemoryCircuitBreakerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testThreadedUpdatesToBreaker
specifier|public
name|void
name|testThreadedUpdatesToBreaker
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_THREADS
init|=
name|scaledRandomIntBetween
argument_list|(
literal|3
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|int
name|BYTES_PER_THREAD
init|=
name|scaledRandomIntBetween
argument_list|(
literal|500
argument_list|,
literal|4500
argument_list|)
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
specifier|final
name|AtomicBoolean
name|tripped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|MemoryCircuitBreaker
name|breaker
init|=
operator|new
name|MemoryCircuitBreaker
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
operator|(
name|BYTES_PER_THREAD
operator|*
name|NUM_THREADS
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
literal|1.0
argument_list|,
name|logger
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BYTES_PER_THREAD
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|breaker
operator|.
name|addEstimateBytesAndMaybeBreak
argument_list|(
literal|1L
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CircuitBreakingException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tripped
operator|.
name|get
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
literal|"tripped too many times"
argument_list|,
literal|true
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|tripped
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"no other exceptions were thrown"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"breaker was tripped"
argument_list|,
name|tripped
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"breaker was tripped at least once"
argument_list|,
name|breaker
operator|.
name|getTrippedCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedUpdatesToChildBreaker
specifier|public
name|void
name|testThreadedUpdatesToChildBreaker
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_THREADS
init|=
name|scaledRandomIntBetween
argument_list|(
literal|3
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|int
name|BYTES_PER_THREAD
init|=
name|scaledRandomIntBetween
argument_list|(
literal|500
argument_list|,
literal|4500
argument_list|)
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
specifier|final
name|AtomicBoolean
name|tripped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|ChildMemoryCircuitBreaker
argument_list|>
name|breakerRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|CircuitBreakerService
name|service
init|=
operator|new
name|HierarchyCircuitBreakerService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CircuitBreaker
name|getBreaker
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|breakerRef
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkParentLimit
parameter_list|(
name|String
name|label
parameter_list|)
throws|throws
name|CircuitBreakingException
block|{
comment|// never trip
block|}
block|}
decl_stmt|;
specifier|final
name|BreakerSettings
name|settings
init|=
operator|new
name|BreakerSettings
argument_list|(
name|CircuitBreaker
operator|.
name|REQUEST
argument_list|,
operator|(
name|BYTES_PER_THREAD
operator|*
name|NUM_THREADS
operator|)
operator|-
literal|1
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
specifier|final
name|ChildMemoryCircuitBreaker
name|breaker
init|=
operator|new
name|ChildMemoryCircuitBreaker
argument_list|(
name|settings
argument_list|,
name|logger
argument_list|,
operator|(
name|HierarchyCircuitBreakerService
operator|)
name|service
argument_list|,
name|CircuitBreaker
operator|.
name|REQUEST
argument_list|)
decl_stmt|;
name|breakerRef
operator|.
name|set
argument_list|(
name|breaker
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BYTES_PER_THREAD
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|breaker
operator|.
name|addEstimateBytesAndMaybeBreak
argument_list|(
literal|1L
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CircuitBreakingException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tripped
operator|.
name|get
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
literal|"tripped too many times"
argument_list|,
literal|true
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|tripped
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"no other exceptions were thrown"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"breaker was tripped"
argument_list|,
name|tripped
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"breaker was tripped at least once"
argument_list|,
name|breaker
operator|.
name|getTrippedCount
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThreadedUpdatesToChildBreakerWithParentLimit
specifier|public
name|void
name|testThreadedUpdatesToChildBreakerWithParentLimit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_THREADS
init|=
name|scaledRandomIntBetween
argument_list|(
literal|3
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|int
name|BYTES_PER_THREAD
init|=
name|scaledRandomIntBetween
argument_list|(
literal|500
argument_list|,
literal|4500
argument_list|)
decl_stmt|;
specifier|final
name|int
name|parentLimit
init|=
operator|(
name|BYTES_PER_THREAD
operator|*
name|NUM_THREADS
operator|)
operator|-
literal|2
decl_stmt|;
specifier|final
name|int
name|childLimit
init|=
name|parentLimit
operator|+
literal|10
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|tripped
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|parentTripped
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|ChildMemoryCircuitBreaker
argument_list|>
name|breakerRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|CircuitBreakerService
name|service
init|=
operator|new
name|HierarchyCircuitBreakerService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CircuitBreaker
name|getBreaker
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|breakerRef
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkParentLimit
parameter_list|(
name|String
name|label
parameter_list|)
throws|throws
name|CircuitBreakingException
block|{
comment|// Parent will trip right before regular breaker would trip
if|if
condition|(
name|getBreaker
argument_list|(
name|CircuitBreaker
operator|.
name|REQUEST
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|>
name|parentLimit
condition|)
block|{
name|parentTripped
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> parent tripped"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CircuitBreakingException
argument_list|(
literal|"parent tripped"
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|BreakerSettings
name|settings
init|=
operator|new
name|BreakerSettings
argument_list|(
name|CircuitBreaker
operator|.
name|REQUEST
argument_list|,
name|childLimit
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
specifier|final
name|ChildMemoryCircuitBreaker
name|breaker
init|=
operator|new
name|ChildMemoryCircuitBreaker
argument_list|(
name|settings
argument_list|,
name|logger
argument_list|,
operator|(
name|HierarchyCircuitBreakerService
operator|)
name|service
argument_list|,
name|CircuitBreaker
operator|.
name|REQUEST
argument_list|)
decl_stmt|;
name|breakerRef
operator|.
name|set
argument_list|(
name|breaker
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BYTES_PER_THREAD
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|breaker
operator|.
name|addEstimateBytesAndMaybeBreak
argument_list|(
literal|1L
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CircuitBreakingException
name|e
parameter_list|)
block|{
name|tripped
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> NUM_THREADS: [{}], BYTES_PER_THREAD: [{}], TOTAL_BYTES: [{}], PARENT_LIMIT: [{}], CHILD_LIMIT: [{}]"
argument_list|,
name|NUM_THREADS
argument_list|,
name|BYTES_PER_THREAD
argument_list|,
operator|(
name|BYTES_PER_THREAD
operator|*
name|NUM_THREADS
operator|)
argument_list|,
name|parentLimit
argument_list|,
name|childLimit
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting threads..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> child breaker: used: {}, limit: {}"
argument_list|,
name|breaker
operator|.
name|getUsed
argument_list|()
argument_list|,
name|breaker
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> parent tripped: {}, total trip count: {} (expecting 1-2 for each)"
argument_list|,
name|parentTripped
operator|.
name|get
argument_list|()
argument_list|,
name|tripped
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"no other exceptions were thrown"
argument_list|,
name|lastException
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"breaker should be reset back to the parent limit after parent breaker trips"
argument_list|,
name|breaker
operator|.
name|getUsed
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|long
operator|)
name|parentLimit
operator|-
name|NUM_THREADS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"parent breaker was tripped at least once"
argument_list|,
name|parentTripped
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"total breaker was tripped at least once"
argument_list|,
name|tripped
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstantFactor
specifier|public
name|void
name|testConstantFactor
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MemoryCircuitBreaker
name|breaker
init|=
operator|new
name|MemoryCircuitBreaker
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|15
argument_list|)
argument_list|,
literal|1.6
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|String
name|field
init|=
literal|"myfield"
decl_stmt|;
comment|// add only 7 bytes
name|breaker
operator|.
name|addWithoutBreaking
argument_list|(
literal|7
argument_list|)
expr_stmt|;
try|try
block|{
comment|// this won't actually add it because it trips the breaker
name|breaker
operator|.
name|addEstimateBytesAndMaybeBreak
argument_list|(
literal|3
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should never reach this"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CircuitBreakingException
name|cbe
parameter_list|)
block|{         }
comment|// shouldn't throw an exception
name|breaker
operator|.
name|addEstimateBytesAndMaybeBreak
argument_list|(
literal|2
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|breaker
operator|.
name|getUsed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|9L
argument_list|)
argument_list|)
expr_stmt|;
comment|// adding 3 more bytes (now at 12)
name|breaker
operator|.
name|addWithoutBreaking
argument_list|(
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Adding no bytes still breaks
name|breaker
operator|.
name|addEstimateBytesAndMaybeBreak
argument_list|(
literal|0
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should never reach this"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CircuitBreakingException
name|cbe
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"breaker was tripped exactly twice"
argument_list|,
name|breaker
operator|.
name|getTrippedCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cbe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"field ["
operator|+
name|field
operator|+
literal|"]"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

