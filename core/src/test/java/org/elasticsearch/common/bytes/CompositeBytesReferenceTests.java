begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.bytes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|CompositeBytesReferenceTests
specifier|public
class|class
name|CompositeBytesReferenceTests
extends|extends
name|AbstractBytesReferenceTestCase
block|{
annotation|@
name|Override
DECL|method|newBytesReference
specifier|protected
name|BytesReference
name|newBytesReference
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we know bytes stream output always creates a paged bytes reference, we use it to create randomized content
name|List
argument_list|<
name|BytesReference
argument_list|>
name|referenceList
init|=
name|newRefList
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesReference
name|ref
init|=
operator|new
name|CompositeBytesReference
argument_list|(
name|referenceList
operator|.
name|toArray
argument_list|(
operator|new
name|BytesReference
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|ref
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
DECL|method|newRefList
specifier|private
name|List
argument_list|<
name|BytesReference
argument_list|>
name|newRefList
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BytesReference
argument_list|>
name|referenceList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
control|)
block|{
name|int
name|remaining
init|=
name|length
operator|-
name|i
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|ReleasableBytesStreamOutput
name|out
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|sliceLength
argument_list|,
name|bigarrays
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sliceLength
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|sliceLength
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|referenceList
operator|.
name|add
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|+=
name|sliceLength
expr_stmt|;
block|}
return|return
name|referenceList
return|;
block|}
DECL|method|testCompositeBuffer
specifier|public
name|void
name|testCompositeBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BytesReference
argument_list|>
name|referenceList
init|=
name|newRefList
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|PAGE_SIZE
operator|*
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|ref
init|=
operator|new
name|CompositeBytesReference
argument_list|(
name|referenceList
operator|.
name|toArray
argument_list|(
operator|new
name|BytesReference
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRefIterator
name|iterator
init|=
name|ref
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|BytesReference
name|reference
range|:
name|referenceList
control|)
block|{
name|BytesRefIterator
name|innerIter
init|=
name|reference
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// sometimes we have a paged ref - pull an iter and walk all pages!
name|BytesRef
name|scratch
decl_stmt|;
while|while
condition|(
operator|(
name|scratch
operator|=
name|innerIter
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|BytesRef
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|next
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNull
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesReference
name|reference
range|:
name|referenceList
control|)
block|{
name|assertEquals
argument_list|(
name|reference
argument_list|,
name|ref
operator|.
name|slice
argument_list|(
name|offset
argument_list|,
name|reference
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|probes
init|=
name|randomIntBetween
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|reference
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|reference
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|probes
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|reference
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ref
operator|.
name|get
argument_list|(
name|offset
operator|+
name|index
argument_list|)
argument_list|,
name|reference
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|reference
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|BytesArray
name|array
init|=
operator|new
name|BytesArray
argument_list|(
name|builder
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|array
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|array
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ref
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|ref
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|array
argument_list|,
name|output
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testToBytesRefSharedPage
specifier|public
name|void
name|testToBytesRefSharedPage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// CompositeBytesReference doesn't share pages
block|}
annotation|@
name|Override
DECL|method|testSliceArrayOffset
specifier|public
name|void
name|testSliceArrayOffset
parameter_list|()
throws|throws
name|IOException
block|{
comment|// the assertions in this test only work on no-composite buffers
block|}
annotation|@
name|Override
DECL|method|testSliceToBytesRef
specifier|public
name|void
name|testSliceToBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
comment|// CompositeBytesReference shifts offsets
block|}
block|}
end_class

end_unit

