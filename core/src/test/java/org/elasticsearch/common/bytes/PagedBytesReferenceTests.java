begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.bytes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|PagedBytesReferenceTests
specifier|public
class|class
name|PagedBytesReferenceTests
extends|extends
name|ESTestCase
block|{
DECL|field|PAGE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|PAGE_SIZE
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
decl_stmt|;
DECL|field|bigarrays
specifier|private
name|BigArrays
name|bigarrays
init|=
operator|new
name|BigArrays
argument_list|(
literal|null
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|testGet
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|PAGE_SIZE
operator|*
literal|3
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|length
operator|-
name|sliceOffset
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|sliceOffset
argument_list|)
argument_list|,
name|slice
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|sliceOffset
operator|+
name|sliceLength
operator|-
literal|1
argument_list|)
argument_list|,
name|slice
operator|.
name|get
argument_list|(
name|sliceLength
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLength
specifier|public
name|void
name|testLength
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|sizes
init|=
block|{
literal|0
block|,
name|randomInt
argument_list|(
name|PAGE_SIZE
argument_list|)
block|,
name|PAGE_SIZE
block|,
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
literal|3
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSlice
specifier|public
name|void
name|testSlice
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
literal|3
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|length
operator|-
name|sliceOffset
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceLength
argument_list|,
name|slice
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|slice
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|sliceOffset
argument_list|,
name|slice
operator|.
name|arrayOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|slice
operator|.
name|arrayOffset
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|testStreamInput
specifier|public
name|void
name|testStreamInput
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|StreamInput
name|si
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
comment|// read single bytes one by one
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset the stream for bulk reading
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// buffer for bulk reads
name|byte
index|[]
name|origBuf
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|origBuf
argument_list|)
expr_stmt|;
name|byte
index|[]
name|targetBuf
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|origBuf
argument_list|,
name|origBuf
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// bulk-read 0 bytes: must not modify buffer
name|si
operator|.
name|readBytes
argument_list|(
name|targetBuf
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|origBuf
index|[
literal|0
index|]
argument_list|,
name|targetBuf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// read a few few bytes as ints
name|int
name|bytesToRead
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesToRead
condition|;
name|i
operator|++
control|)
block|{
name|int
name|b
init|=
name|si
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// bulk-read all
name|si
operator|.
name|readFully
argument_list|(
name|targetBuf
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|,
name|targetBuf
argument_list|)
expr_stmt|;
comment|// continuing to read should now fail with EOFException
try|try
block|{
name|si
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected EOF"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// yay
block|}
comment|// try to read more than the stream contains
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|si
operator|.
name|readBytes
argument_list|(
name|targetBuf
argument_list|,
literal|0
argument_list|,
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IndexOutOfBoundsException: le> stream.length"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ioob
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testStreamInputBulkReadWithOffset
specifier|public
name|void
name|testStreamInputBulkReadWithOffset
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|StreamInput
name|si
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
comment|// read a bunch of single bytes one by one
name|int
name|offset
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|si
operator|.
name|available
argument_list|()
argument_list|,
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now do NOT reset the stream - keep the stream's offset!
comment|// buffer to compare remaining bytes against bulk read
name|byte
index|[]
name|pbrBytesWithOffset
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// randomized target buffer to ensure no stale slots
name|byte
index|[]
name|targetBytes
init|=
operator|new
name|byte
index|[
name|pbrBytesWithOffset
operator|.
name|length
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|targetBytes
argument_list|)
expr_stmt|;
comment|// bulk-read all
name|si
operator|.
name|readFully
argument_list|(
name|targetBytes
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|pbrBytesWithOffset
argument_list|,
name|targetBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|si
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomReads
specifier|public
name|void
name|testRandomReads
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|StreamInput
name|streamInput
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|BytesRefBuilder
name|target
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|target
operator|.
name|length
argument_list|()
operator|<
name|pbr
operator|.
name|length
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
condition|)
block|{
case|case
literal|6
case|:
case|case
literal|5
case|:
name|target
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[]
block|{
name|streamInput
operator|.
name|readByte
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
case|case
literal|3
case|:
name|BytesRef
name|bytesRef
init|=
name|streamInput
operator|.
name|readBytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|target
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|target
operator|.
name|append
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
break|break;
default|default:
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|target
operator|.
name|length
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|int
name|offset
init|=
name|scaledRandomIntBetween
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|read
init|=
name|streamInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|offset
argument_list|)
decl_stmt|;
name|target
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|target
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|targetBytes
init|=
name|target
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|targetBytes
operator|.
name|bytes
argument_list|,
name|targetBytes
operator|.
name|offset
argument_list|,
name|targetBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceStreamInput
specifier|public
name|void
name|testSliceStreamInput
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
comment|// test stream input over slice (upper half of original)
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|length
operator|-
name|sliceOffset
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|StreamInput
name|sliceInput
init|=
name|slice
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
comment|// single reads
name|assertEquals
argument_list|(
name|slice
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sliceInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slice
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sliceInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slice
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|sliceInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
operator|-
literal|3
argument_list|)
expr_stmt|;
comment|// reset the slice stream for bulk reading
name|sliceInput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
comment|// bulk read
name|byte
index|[]
name|sliceBytes
init|=
operator|new
name|byte
index|[
name|sliceLength
index|]
decl_stmt|;
name|sliceInput
operator|.
name|readFully
argument_list|(
name|sliceBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// compare slice content with upper half of original
name|byte
index|[]
name|pbrSliceBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|,
name|sliceOffset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|pbrSliceBytes
argument_list|,
name|sliceBytes
argument_list|)
expr_stmt|;
comment|// compare slice bytes with bytes read from slice via streamInput :D
name|byte
index|[]
name|sliceToBytes
init|=
name|slice
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceBytes
operator|.
name|length
argument_list|,
name|sliceToBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|sliceBytes
argument_list|,
name|sliceToBytes
argument_list|)
expr_stmt|;
name|sliceInput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|sliceLength
operator|+
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
index|]
decl_stmt|;
name|int
name|offset
init|=
name|scaledRandomIntBetween
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|sliceLength
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|read
init|=
name|sliceInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|sliceLength
operator|/
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
operator|-
name|read
argument_list|)
expr_stmt|;
name|sliceInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
operator|+
name|read
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|sliceBytes
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|sliceLength
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteToOutputStream
specifier|public
name|void
name|testWriteToOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
literal|4
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|pbr
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|,
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSliceWriteToOutputStream
specifier|public
name|void
name|testSliceWriteToOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|length
operator|-
name|sliceOffset
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|sliceOut
init|=
operator|new
name|BytesStreamOutput
argument_list|(
name|sliceLength
argument_list|)
decl_stmt|;
name|slice
operator|.
name|writeTo
argument_list|(
name|sliceOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slice
operator|.
name|length
argument_list|()
argument_list|,
name|sliceOut
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|slice
operator|.
name|toBytes
argument_list|()
argument_list|,
name|sliceOut
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
name|sliceOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testToBytes
specifier|public
name|void
name|testToBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|sizes
init|=
block|{
literal|0
block|,
name|randomInt
argument_list|(
name|PAGE_SIZE
argument_list|)
block|,
name|PAGE_SIZE
block|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|pbr
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify that toBytes() is cheap for small payloads
if|if
condition|(
name|sizes
index|[
name|i
index|]
operator|<=
name|PAGE_SIZE
condition|)
block|{
name|assertSame
argument_list|(
name|bytes
argument_list|,
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotSame
argument_list|(
name|bytes
argument_list|,
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testToBytesArraySharedPage
specifier|public
name|void
name|testToBytesArraySharedPage
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesArray
name|ba
init|=
name|pbr
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|BytesArray
name|ba2
init|=
name|pbr
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// single-page optimization
name|assertSame
argument_list|(
name|ba
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToBytesArrayMaterializedPages
specifier|public
name|void
name|testToBytesArrayMaterializedPages
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we need a length != (n * pagesize) to avoid page sharing at boundaries
name|int
name|length
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|%
name|PAGE_SIZE
operator|)
operator|==
literal|0
condition|)
block|{
name|length
operator|=
name|randomIntBetween
argument_list|(
name|PAGE_SIZE
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesArray
name|ba
init|=
name|pbr
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|BytesArray
name|ba2
init|=
name|pbr
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure no single-page optimization
name|assertNotSame
argument_list|(
name|ba
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyBytesArray
specifier|public
name|void
name|testCopyBytesArray
parameter_list|()
throws|throws
name|IOException
block|{
comment|// small PBR which would normally share the first page
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesArray
name|ba
init|=
name|pbr
operator|.
name|copyBytesArray
argument_list|()
decl_stmt|;
name|BytesArray
name|ba2
init|=
name|pbr
operator|.
name|copyBytesArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ba
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ba
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceCopyBytesArray
specifier|public
name|void
name|testSliceCopyBytesArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesArray
name|ba1
init|=
name|slice
operator|.
name|copyBytesArray
argument_list|()
decl_stmt|;
name|BytesArray
name|ba2
init|=
name|slice
operator|.
name|copyBytesArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ba1
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|slice
operator|.
name|toBytes
argument_list|()
argument_list|,
name|ba1
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|slice
operator|.
name|toBytes
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ba1
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyToBytesRefIterator
specifier|public
name|void
name|testEmptyToBytesRefIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|pbr
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterator
specifier|public
name|void
name|testIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesRefIterator
name|iterator
init|=
name|pbr
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|ref
decl_stmt|;
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|builder
operator|.
name|toBytesRef
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceIterator
specifier|public
name|void
name|testSliceIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesRefIterator
name|iterator
init|=
name|slice
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|ref
init|=
literal|null
decl_stmt|;
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|slice
operator|.
name|toBytes
argument_list|()
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|builder
operator|.
name|toBytesRef
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|testIteratorRandom
specifier|public
name|void
name|testIteratorRandom
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|pbr
operator|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|pbr
operator|=
name|pbr
operator|.
name|toBytesArray
argument_list|()
expr_stmt|;
block|}
name|BytesRefIterator
name|iterator
init|=
name|pbr
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|ref
init|=
literal|null
decl_stmt|;
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|builder
operator|.
name|toBytesRef
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasArray
specifier|public
name|void
name|testHasArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
comment|// must return true for<= pagesize
name|assertEquals
argument_list|(
name|length
operator|<=
name|PAGE_SIZE
argument_list|,
name|pbr
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testArray
specifier|public
name|void
name|testArray
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|sizes
init|=
block|{
literal|0
block|,
name|randomInt
argument_list|(
name|PAGE_SIZE
argument_list|)
block|,
name|PAGE_SIZE
block|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|// verify that array() is cheap for small payloads
if|if
condition|(
name|sizes
index|[
name|i
index|]
operator|<=
name|PAGE_SIZE
condition|)
block|{
name|byte
index|[]
name|array
init|=
name|pbr
operator|.
name|array
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|array
argument_list|,
name|pbr
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|pbr
operator|.
name|array
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|isx
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
block|}
DECL|method|testArrayOffset
specifier|public
name|void
name|testArrayOffset
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|pbr
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|arrayOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|pbr
operator|.
name|arrayOffset
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|testSliceArrayOffset
specifier|public
name|void
name|testSliceArrayOffset
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|sliceOffset
argument_list|,
name|slice
operator|.
name|arrayOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|slice
operator|.
name|arrayOffset
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
DECL|method|testToUtf8
specifier|public
name|void
name|testToUtf8
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pbr
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: good way to test?
block|}
DECL|method|testToBytesRef
specifier|public
name|void
name|testToBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesRef
name|ref
init|=
name|pbr
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|ref
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceToBytesRef
specifier|public
name|void
name|testSliceToBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
comment|// get a BytesRef from a slice
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesRef
name|sliceRef
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
comment|// note that these are only true if we have<= than a page, otherwise offset/length are shifted
name|assertEquals
argument_list|(
name|sliceOffset
argument_list|,
name|sliceRef
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceLength
argument_list|,
name|sliceRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyBytesRef
specifier|public
name|void
name|testCopyBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesRef
name|ref
init|=
name|pbr
operator|.
name|copyBytesRef
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashCode
specifier|public
name|void
name|testHashCode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// empty content must have hash 1 (JDK compat)
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
argument_list|,
name|pbr
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with content
name|pbr
operator|=
name|getRandomizedPagedBytesReference
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|jdkHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pbrHash
init|=
name|pbr
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|jdkHash
argument_list|,
name|pbrHash
argument_list|)
expr_stmt|;
comment|// test hashes of slices
name|int
name|sliceFrom
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|int
name|sliceJdkHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|slice
operator|.
name|toBytes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceHash
init|=
name|slice
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceJdkHash
argument_list|,
name|sliceHash
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArray
name|ba1
init|=
name|bigarrays
operator|.
name|newByteArray
argument_list|(
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ByteArray
name|ba2
init|=
name|bigarrays
operator|.
name|newByteArray
argument_list|(
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// copy contents
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ba2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ba1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get refs& compare
name|BytesReference
name|pbr
init|=
operator|new
name|PagedBytesReference
argument_list|(
name|bigarrays
argument_list|,
name|ba1
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr2
init|=
operator|new
name|PagedBytesReference
argument_list|(
name|bigarrays
argument_list|,
name|ba2
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pbr
argument_list|,
name|pbr2
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsPeerClass
specifier|public
name|void
name|testEqualsPeerClass
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|getRandomizedPagedBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesReference
name|ba
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pbr
argument_list|,
name|ba
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceEquals
specifier|public
name|void
name|testSliceEquals
parameter_list|()
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArray
name|ba1
init|=
name|bigarrays
operator|.
name|newByteArray
argument_list|(
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
operator|new
name|PagedBytesReference
argument_list|(
name|bigarrays
argument_list|,
name|ba1
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// test equality of slices
name|int
name|sliceFrom
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|)
decl_stmt|;
name|BytesReference
name|slice1
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesReference
name|slice2
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|slice1
operator|.
name|toBytes
argument_list|()
argument_list|,
name|slice2
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// test a slice with same offset but different length,
comment|// unless randomized testing gave us a 0-length slice.
if|if
condition|(
name|sliceLength
operator|>
literal|0
condition|)
block|{
name|BytesReference
name|slice3
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
operator|/
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|slice1
operator|.
name|toBytes
argument_list|()
argument_list|,
name|slice3
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRandomizedPagedBytesReference
specifier|private
name|BytesReference
name|getRandomizedPagedBytesReference
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we know bytes stream output always creates a paged bytes reference, we use it to create randomized content
name|ReleasableBytesStreamOutput
name|out
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|length
argument_list|,
name|bigarrays
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|out
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|BytesReference
name|ref
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
argument_list|,
name|Matchers
operator|.
name|instanceOf
argument_list|(
name|PagedBytesReference
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
block|}
end_class

end_unit

