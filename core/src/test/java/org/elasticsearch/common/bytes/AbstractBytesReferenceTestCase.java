begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.bytes
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|AbstractBytesReferenceTestCase
specifier|public
specifier|abstract
class|class
name|AbstractBytesReferenceTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|PAGE_SIZE
specifier|protected
specifier|static
specifier|final
name|int
name|PAGE_SIZE
init|=
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
decl_stmt|;
DECL|field|bigarrays
specifier|protected
specifier|final
name|BigArrays
name|bigarrays
init|=
operator|new
name|BigArrays
argument_list|(
literal|null
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|method|testGet
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|PAGE_SIZE
operator|*
literal|3
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|length
operator|-
name|sliceOffset
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|sliceOffset
argument_list|)
argument_list|,
name|slice
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|sliceOffset
operator|+
name|sliceLength
operator|-
literal|1
argument_list|)
argument_list|,
name|slice
operator|.
name|get
argument_list|(
name|sliceLength
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|probes
init|=
name|randomIntBetween
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|BytesReference
name|copy
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|probes
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|copy
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
name|randomIntBetween
argument_list|(
name|sliceOffset
argument_list|,
name|sliceOffset
operator|+
name|sliceLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|slice
operator|.
name|get
argument_list|(
name|index
operator|-
name|sliceOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLength
specifier|public
name|void
name|testLength
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|sizes
init|=
block|{
literal|0
block|,
name|randomInt
argument_list|(
name|PAGE_SIZE
argument_list|)
block|,
name|PAGE_SIZE
block|,
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
literal|3
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSlice
specifier|public
name|void
name|testSlice
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
literal|3
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|length
operator|-
name|sliceOffset
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceLength
argument_list|,
name|slice
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|singlePageOrNull
init|=
name|getSinglePageOrNull
argument_list|(
name|slice
argument_list|)
decl_stmt|;
if|if
condition|(
name|singlePageOrNull
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|sliceOffset
argument_list|,
name|singlePageOrNull
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStreamInput
specifier|public
name|void
name|testStreamInput
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|StreamInput
name|si
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
comment|// read single bytes one by one
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset the stream for bulk reading
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// buffer for bulk reads
name|byte
index|[]
name|origBuf
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|origBuf
argument_list|)
expr_stmt|;
name|byte
index|[]
name|targetBuf
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|origBuf
argument_list|,
name|origBuf
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// bulk-read 0 bytes: must not modify buffer
name|si
operator|.
name|readBytes
argument_list|(
name|targetBuf
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|origBuf
index|[
literal|0
index|]
argument_list|,
name|targetBuf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// read a few few bytes as ints
name|int
name|bytesToRead
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesToRead
condition|;
name|i
operator|++
control|)
block|{
name|int
name|b
init|=
name|si
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xff
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// bulk-read all
name|si
operator|.
name|readFully
argument_list|(
name|targetBuf
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|,
name|targetBuf
argument_list|)
expr_stmt|;
comment|// continuing to read should now fail with EOFException
try|try
block|{
name|si
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected EOF"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
decl||
name|IndexOutOfBoundsException
name|eof
parameter_list|)
block|{
comment|// yay
block|}
comment|// try to read more than the stream contains
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
name|expectThrows
argument_list|(
name|IndexOutOfBoundsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|si
operator|.
name|readBytes
argument_list|(
name|targetBuf
argument_list|,
literal|0
argument_list|,
name|length
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStreamInputMarkAndReset
specifier|public
name|void
name|testStreamInputMarkAndReset
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|StreamInput
name|si
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|StreamInput
name|wrap
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|wrap
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|wrap
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|si
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|wrap
operator|.
name|reset
argument_list|()
expr_stmt|;
name|si
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|si
operator|.
name|readByte
argument_list|()
argument_list|,
name|wrap
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|si
operator|.
name|available
argument_list|()
argument_list|,
name|wrap
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStreamInputBulkReadWithOffset
specifier|public
name|void
name|testStreamInputBulkReadWithOffset
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|StreamInput
name|si
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|si
argument_list|)
expr_stmt|;
comment|// read a bunch of single bytes one by one
name|int
name|offset
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|si
operator|.
name|available
argument_list|()
argument_list|,
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|si
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now do NOT reset the stream - keep the stream's offset!
comment|// buffer to compare remaining bytes against bulk read
name|byte
index|[]
name|pbrBytesWithOffset
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// randomized target buffer to ensure no stale slots
name|byte
index|[]
name|targetBytes
init|=
operator|new
name|byte
index|[
name|pbrBytesWithOffset
operator|.
name|length
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|targetBytes
argument_list|)
expr_stmt|;
comment|// bulk-read all
name|si
operator|.
name|readFully
argument_list|(
name|targetBytes
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|pbrBytesWithOffset
argument_list|,
name|targetBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|si
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomReads
specifier|public
name|void
name|testRandomReads
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|StreamInput
name|streamInput
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|BytesRefBuilder
name|target
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|target
operator|.
name|length
argument_list|()
operator|<
name|pbr
operator|.
name|length
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
condition|)
block|{
case|case
literal|6
case|:
case|case
literal|5
case|:
name|target
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[]
block|{
name|streamInput
operator|.
name|readByte
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
case|case
literal|3
case|:
name|BytesRef
name|bytesRef
init|=
name|streamInput
operator|.
name|readBytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|target
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|target
operator|.
name|append
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
break|break;
default|default:
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|target
operator|.
name|length
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|int
name|offset
init|=
name|scaledRandomIntBetween
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|read
init|=
name|streamInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|offset
argument_list|)
decl_stmt|;
name|target
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|target
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|targetBytes
init|=
name|target
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|targetBytes
operator|.
name|bytes
argument_list|,
name|targetBytes
operator|.
name|offset
argument_list|,
name|targetBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceStreamInput
specifier|public
name|void
name|testSliceStreamInput
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
comment|// test stream input over slice (upper half of original)
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|length
operator|-
name|sliceOffset
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|StreamInput
name|sliceInput
init|=
name|slice
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
comment|// single reads
name|assertEquals
argument_list|(
name|slice
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sliceInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slice
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sliceInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slice
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|sliceInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
operator|-
literal|3
argument_list|)
expr_stmt|;
comment|// reset the slice stream for bulk reading
name|sliceInput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
comment|// bulk read
name|byte
index|[]
name|sliceBytes
init|=
operator|new
name|byte
index|[
name|sliceLength
index|]
decl_stmt|;
name|sliceInput
operator|.
name|readFully
argument_list|(
name|sliceBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// compare slice content with upper half of original
name|byte
index|[]
name|pbrSliceBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|,
name|sliceOffset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|pbrSliceBytes
argument_list|,
name|sliceBytes
argument_list|)
expr_stmt|;
comment|// compare slice bytes with bytes read from slice via streamInput :D
name|byte
index|[]
name|sliceToBytes
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceBytes
operator|.
name|length
argument_list|,
name|sliceToBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|sliceBytes
argument_list|,
name|sliceToBytes
argument_list|)
expr_stmt|;
name|sliceInput
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|sliceLength
operator|+
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
index|]
decl_stmt|;
name|int
name|offset
init|=
name|scaledRandomIntBetween
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|sliceLength
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|read
init|=
name|sliceInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|sliceLength
operator|/
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
name|sliceLength
operator|-
name|read
argument_list|)
expr_stmt|;
name|sliceInput
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
operator|+
name|read
argument_list|,
name|sliceLength
operator|-
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|sliceBytes
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|sliceLength
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceInput
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteToOutputStream
specifier|public
name|void
name|testWriteToOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
literal|4
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|pbr
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInputStreamSkip
specifier|public
name|void
name|testInputStreamSkip
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
name|PAGE_SIZE
operator|*
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|StreamInput
name|input
init|=
name|pbr
operator|.
name|streamInput
argument_list|()
init|)
block|{
specifier|final
name|int
name|offset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|input
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|input
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|nextOffset
init|=
name|randomIntBetween
argument_list|(
name|offset
argument_list|,
name|length
operator|-
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nextOffset
operator|-
name|offset
argument_list|,
name|input
operator|.
name|skip
argument_list|(
name|nextOffset
operator|-
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|get
argument_list|(
name|nextOffset
operator|+
literal|1
argument_list|)
argument_list|,
name|input
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
comment|// +1 for the one byte we read above
name|assertEquals
argument_list|(
name|length
operator|-
operator|(
name|nextOffset
operator|+
literal|2
operator|)
argument_list|,
name|input
operator|.
name|skip
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|input
operator|.
name|skip
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSliceWriteToOutputStream
specifier|public
name|void
name|testSliceWriteToOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|length
operator|-
name|sliceOffset
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|sliceOut
init|=
operator|new
name|BytesStreamOutput
argument_list|(
name|sliceLength
argument_list|)
decl_stmt|;
name|slice
operator|.
name|writeTo
argument_list|(
name|sliceOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slice
operator|.
name|length
argument_list|()
argument_list|,
name|sliceOut
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice
argument_list|)
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|sliceOut
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sliceOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testToBytes
specifier|public
name|void
name|testToBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|sizes
init|=
block|{
literal|0
block|,
name|randomInt
argument_list|(
name|PAGE_SIZE
argument_list|)
block|,
name|PAGE_SIZE
block|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bytes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|j
index|]
argument_list|,
name|pbr
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testToBytesRefSharedPage
specifier|public
name|void
name|testToBytesRefSharedPage
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesArray
name|ba
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|BytesArray
name|ba2
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// single-page optimization
name|assertSame
argument_list|(
name|ba
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToBytesRefMaterializedPages
specifier|public
name|void
name|testToBytesRefMaterializedPages
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we need a length != (n * pagesize) to avoid page sharing at boundaries
name|int
name|length
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|%
name|PAGE_SIZE
operator|)
operator|==
literal|0
condition|)
block|{
name|length
operator|=
name|randomIntBetween
argument_list|(
name|PAGE_SIZE
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesArray
name|ba
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|BytesArray
name|ba2
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyBytesRefSharesBytes
specifier|public
name|void
name|testCopyBytesRefSharesBytes
parameter_list|()
throws|throws
name|IOException
block|{
comment|// small PBR which would normally share the first page
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesArray
name|ba
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BytesArray
name|ba2
init|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ba
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ba
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceCopyBytesRef
specifier|public
name|void
name|testSliceCopyBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesArray
name|ba1
init|=
operator|new
name|BytesArray
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BytesArray
name|ba2
init|=
operator|new
name|BytesArray
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ba1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ba1
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice
argument_list|)
argument_list|,
name|ba1
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice
argument_list|)
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ba1
operator|.
name|array
argument_list|()
argument_list|,
name|ba2
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyToBytesRefIterator
specifier|public
name|void
name|testEmptyToBytesRefIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|pbr
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterator
specifier|public
name|void
name|testIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesRefIterator
name|iterator
init|=
name|pbr
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|ref
decl_stmt|;
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|builder
operator|.
name|toBytesRef
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceIterator
specifier|public
name|void
name|testSliceIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesRefIterator
name|iterator
init|=
name|slice
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|ref
init|=
literal|null
decl_stmt|;
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice
argument_list|)
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|builder
operator|.
name|toBytesRef
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|testIteratorRandom
specifier|public
name|void
name|testIteratorRandom
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|pbr
operator|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|pbr
operator|=
operator|new
name|BytesArray
argument_list|(
name|pbr
operator|.
name|toBytesRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BytesRefIterator
name|iterator
init|=
name|pbr
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|ref
init|=
literal|null
decl_stmt|;
name|BytesRefBuilder
name|builder
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|builder
operator|.
name|toBytesRef
argument_list|()
argument_list|)
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|testArrayOffset
specifier|public
name|void
name|testArrayOffset
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesRef
name|singlePageOrNull
init|=
name|getSinglePageOrNull
argument_list|(
name|pbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|singlePageOrNull
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|singlePageOrNull
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSliceArrayOffset
specifier|public
name|void
name|testSliceArrayOffset
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomInt
argument_list|(
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// an offset to the end would be len 0
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesRef
name|singlePageOrNull
init|=
name|getSinglePageOrNull
argument_list|(
name|slice
argument_list|)
decl_stmt|;
if|if
condition|(
name|singlePageOrNull
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getSinglePageOrNull
argument_list|(
name|pbr
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// original reference has pages
name|assertEquals
argument_list|(
name|sliceOffset
operator|%
name|PAGE_SIZE
argument_list|,
name|singlePageOrNull
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// orig ref has no pages ie. BytesArray
name|assertEquals
argument_list|(
name|sliceOffset
argument_list|,
name|singlePageOrNull
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testToUtf8
specifier|public
name|void
name|testToUtf8
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|pbr
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: good way to test?
block|}
DECL|method|testToBytesRef
specifier|public
name|void
name|testToBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|BytesRef
name|ref
init|=
name|pbr
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pbr
operator|.
name|length
argument_list|()
argument_list|,
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceToBytesRef
specifier|public
name|void
name|testSliceToBytesRef
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|PAGE_SIZE
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
comment|// get a BytesRef from a slice
name|int
name|sliceOffset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceOffset
argument_list|)
decl_stmt|;
name|BytesRef
name|sliceRef
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceOffset
argument_list|,
name|sliceLength
argument_list|)
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
comment|// note that these are only true if we have<= than a page, otherwise offset/length are shifted
name|assertEquals
argument_list|(
name|sliceOffset
argument_list|,
name|sliceRef
operator|.
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sliceLength
argument_list|,
name|sliceRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testHashCode
specifier|public
name|void
name|testHashCode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// empty content must have hash 1 (JDK compat)
name|BytesReference
name|pbr
init|=
name|newBytesReference
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
argument_list|,
name|pbr
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with content
name|pbr
operator|=
name|newBytesReference
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|jdkHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|pbr
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pbrHash
init|=
name|pbr
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|jdkHash
argument_list|,
name|pbrHash
argument_list|)
expr_stmt|;
comment|// test hashes of slices
name|int
name|sliceFrom
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|int
name|sliceJdkHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sliceHash
init|=
name|slice
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sliceJdkHash
argument_list|,
name|sliceHash
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesReference
name|bytesReference
init|=
name|newBytesReference
argument_list|(
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|copy
init|=
name|bytesReference
operator|.
name|slice
argument_list|(
literal|0
argument_list|,
name|bytesReference
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// get refs& compare
name|assertEquals
argument_list|(
name|copy
argument_list|,
name|bytesReference
argument_list|)
expr_stmt|;
name|int
name|sliceFrom
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|bytesReference
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|bytesReference
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
argument_list|,
name|bytesReference
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
argument_list|)
expr_stmt|;
name|BytesRef
name|bytesRef
init|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|copy
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytesRef
argument_list|)
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|int
name|offsetToFlip
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|bytesRef
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|value
init|=
operator|~
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|bytesRef
operator|.
name|bytes
index|[
name|bytesRef
operator|.
name|offset
operator|+
name|offsetToFlip
index|]
argument_list|)
decl_stmt|;
name|bytesRef
operator|.
name|bytes
index|[
name|bytesRef
operator|.
name|offset
operator|+
name|offsetToFlip
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
name|assertNotEquals
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|bytesRef
argument_list|)
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testSliceEquals
specifier|public
name|void
name|testSliceEquals
parameter_list|()
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArray
name|ba1
init|=
name|bigarrays
operator|.
name|newByteArray
argument_list|(
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BytesReference
name|pbr
init|=
operator|new
name|PagedBytesReference
argument_list|(
name|bigarrays
argument_list|,
name|ba1
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// test equality of slices
name|int
name|sliceFrom
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|pbr
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|)
decl_stmt|;
name|BytesReference
name|slice1
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|BytesReference
name|slice2
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice1
argument_list|)
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test a slice with same offset but different length,
comment|// unless randomized testing gave us a 0-length slice.
if|if
condition|(
name|sliceLength
operator|>
literal|0
condition|)
block|{
name|BytesReference
name|slice3
init|=
name|pbr
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
operator|/
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice1
argument_list|)
argument_list|,
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|slice3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newBytesReference
specifier|protected
specifier|abstract
name|BytesReference
name|newBytesReference
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|testCompareTo
specifier|public
name|void
name|testCompareTo
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|int
name|length
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|bytesReference
init|=
name|newBytesReference
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bytesReference
operator|.
name|compareTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|BytesArray
argument_list|(
literal|""
argument_list|)
operator|.
name|compareTo
argument_list|(
name|bytesReference
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bytesReference
operator|.
name|compareTo
argument_list|(
name|bytesReference
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sliceFrom
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|bytesReference
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sliceLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|bytesReference
operator|.
name|length
argument_list|()
operator|-
name|sliceFrom
argument_list|)
decl_stmt|;
name|BytesReference
name|slice
init|=
name|bytesReference
operator|.
name|slice
argument_list|(
name|sliceFrom
argument_list|,
name|sliceLength
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bytesReference
operator|.
name|toBytesRef
argument_list|()
operator|.
name|compareTo
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
argument_list|)
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|bytesReference
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytesReference
operator|.
name|toBytesRef
argument_list|()
operator|.
name|compareTo
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
argument_list|)
argument_list|,
name|bytesReference
operator|.
name|compareTo
argument_list|(
name|slice
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
operator|.
name|compareTo
argument_list|(
name|bytesReference
operator|.
name|toBytesRef
argument_list|()
argument_list|)
argument_list|,
name|slice
operator|.
name|compareTo
argument_list|(
name|bytesReference
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|slice
operator|.
name|compareTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|slice
operator|.
name|toBytesRef
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|slice
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|crazyLength
init|=
name|length
operator|+
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|PAGE_SIZE
operator|*
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|ReleasableBytesStreamOutput
name|crazyStream
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|length
argument_list|,
name|bigarrays
argument_list|)
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|crazyLength
operator|-
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|offset
condition|;
name|j
operator|++
control|)
block|{
name|crazyStream
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bytesReference
operator|.
name|writeTo
argument_list|(
name|crazyStream
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|crazyStream
operator|.
name|size
argument_list|()
init|;
name|j
operator|<
name|crazyLength
condition|;
name|j
operator|++
control|)
block|{
name|crazyStream
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PagedBytesReference
name|crazyReference
init|=
name|crazyStream
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|crazyReference
operator|.
name|compareTo
argument_list|(
name|bytesReference
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|crazyReference
operator|.
name|slice
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|compareTo
argument_list|(
name|bytesReference
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bytesReference
operator|.
name|compareTo
argument_list|(
name|crazyReference
operator|.
name|slice
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSinglePageOrNull
specifier|public
specifier|static
name|BytesRef
name|getSinglePageOrNull
parameter_list|(
name|BytesReference
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|BytesRefIterator
name|iterator
init|=
name|ref
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BytesRef
name|retVal
init|=
name|next
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|retVal
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|BytesRef
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getNumPages
specifier|public
specifier|static
name|int
name|getNumPages
parameter_list|(
name|BytesReference
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|BytesRefIterator
name|iterator
init|=
name|ref
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|num
operator|++
expr_stmt|;
block|}
block|}
return|return
name|num
return|;
block|}
DECL|method|testBasicEquals
specifier|public
name|void
name|testBasicEquals
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|10
else|:
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|offset1
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|array1
init|=
operator|new
name|byte
index|[
name|offset1
operator|+
name|len
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
index|]
decl_stmt|;
name|random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|array1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|offset2
init|=
name|randomInt
argument_list|(
name|offset1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|array2
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|array1
argument_list|,
name|offset1
operator|-
name|offset2
argument_list|,
name|array1
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|BytesArray
name|b1
init|=
operator|new
name|BytesArray
argument_list|(
name|array1
argument_list|,
name|offset1
argument_list|,
name|len
argument_list|)
decl_stmt|;
specifier|final
name|BytesArray
name|b2
init|=
operator|new
name|BytesArray
argument_list|(
name|array2
argument_list|,
name|offset2
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|b1
argument_list|)
argument_list|)
argument_list|,
name|b1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|hashCode
argument_list|(
name|BytesReference
operator|.
name|toBytes
argument_list|(
name|b2
argument_list|)
argument_list|)
argument_list|,
name|b2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// test same instance
name|assertEquals
argument_list|(
name|b1
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b2
argument_list|,
name|b2
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
comment|// test different length
name|BytesArray
name|differentLen
init|=
operator|new
name|BytesArray
argument_list|(
name|array1
argument_list|,
name|offset1
argument_list|,
name|randomInt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|b1
argument_list|,
name|differentLen
argument_list|)
expr_stmt|;
comment|// test changed bytes
name|array1
index|[
name|offset1
operator|+
name|randomInt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
index|]
operator|+=
literal|13
expr_stmt|;
name|assertNotEquals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

