begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
operator|.
name|USAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliToolConfig
operator|.
name|Builder
operator|.
name|cmd
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|CliToolTests
specifier|public
class|class
name|CliToolTests
extends|extends
name|CliToolTestCase
block|{
annotation|@
name|Test
DECL|method|testOK
specifier|public
name|void
name|testOK
parameter_list|()
throws|throws
name|Exception
block|{
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|executed
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
block|{
name|executed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|OK
return|;
block|}
block|}
decl_stmt|;
name|SingleCmdTool
name|tool
init|=
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertStatus
argument_list|(
name|status
argument_list|,
name|OK
argument_list|)
expr_stmt|;
name|assertCommandHasBeenExecuted
argument_list|(
name|executed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsageError
specifier|public
name|void
name|testUsageError
parameter_list|()
throws|throws
name|Exception
block|{
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|executed
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
block|{
name|executed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|CliTool
operator|.
name|ExitStatus
operator|.
name|USAGE
return|;
block|}
block|}
decl_stmt|;
name|SingleCmdTool
name|tool
init|=
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertStatus
argument_list|(
name|status
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|USAGE
argument_list|)
expr_stmt|;
name|assertCommandHasBeenExecuted
argument_list|(
name|executed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIOError
specifier|public
name|void
name|testIOError
parameter_list|()
throws|throws
name|Exception
block|{
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|executed
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|executed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"io error"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|SingleCmdTool
name|tool
init|=
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertStatus
argument_list|(
name|status
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|IO_ERROR
argument_list|)
expr_stmt|;
name|assertCommandHasBeenExecuted
argument_list|(
name|executed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodeError
specifier|public
name|void
name|testCodeError
parameter_list|()
throws|throws
name|Exception
block|{
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|executed
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|executed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"random error"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|SingleCmdTool
name|tool
init|=
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertStatus
argument_list|(
name|status
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|CODE_ERROR
argument_list|)
expr_stmt|;
name|assertCommandHasBeenExecuted
argument_list|(
name|executed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiCommand
specifier|public
name|void
name|testMultiCommand
parameter_list|()
block|{
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
index|[]
name|executed
init|=
operator|new
name|AtomicReference
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|executed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|executed
index|[
name|i
index|]
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|NamedCommand
index|[]
name|cmds
init|=
operator|new
name|NamedCommand
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|cmds
index|[
name|i
index|]
operator|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
operator|+
name|index
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|executed
index|[
name|index
index|]
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|OK
return|;
block|}
block|}
expr_stmt|;
block|}
name|MultiCmdTool
name|tool
init|=
operator|new
name|MultiCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmds
argument_list|)
decl_stmt|;
name|int
name|cmdIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|count
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|(
literal|"cmd"
operator|+
name|cmdIndex
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|,
name|is
argument_list|(
name|OK
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|executed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|executed
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
name|i
operator|==
name|cmdIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiCommand_UnknownCommand
specifier|public
name|void
name|testMultiCommand_UnknownCommand
parameter_list|()
block|{
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
index|[]
name|executed
init|=
operator|new
name|AtomicReference
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|executed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|executed
index|[
name|i
index|]
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|NamedCommand
index|[]
name|cmds
init|=
operator|new
name|NamedCommand
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|cmds
index|[
name|i
index|]
operator|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
operator|+
name|index
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|executed
index|[
name|index
index|]
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|OK
return|;
block|}
block|}
expr_stmt|;
block|}
name|MultiCmdTool
name|tool
init|=
operator|new
name|MultiCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmds
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|(
literal|"cmd"
operator|+
name|count
argument_list|)
decl_stmt|;
comment|// "cmd" + count doesn't exist
name|assertThat
argument_list|(
name|status
argument_list|,
name|is
argument_list|(
name|CliTool
operator|.
name|ExitStatus
operator|.
name|USAGE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|executed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|executed
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleCommand_ToolHelp
specifier|public
name|void
name|testSingleCommand_ToolHelp
parameter_list|()
throws|throws
name|Exception
block|{
name|CaptureOutputTerminal
name|terminal
init|=
operator|new
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|executed
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd1"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|executed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"io error"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|SingleCmdTool
name|tool
init|=
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"-h"
argument_list|)
argument_list|)
decl_stmt|;
name|assertStatus
argument_list|(
name|status
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK_AND_EXIT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"cmd1 help"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiCommand_ToolHelp
specifier|public
name|void
name|testMultiCommand_ToolHelp
parameter_list|()
block|{
name|CaptureOutputTerminal
name|terminal
init|=
operator|new
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
name|NamedCommand
index|[]
name|cmds
init|=
operator|new
name|NamedCommand
index|[
literal|2
index|]
decl_stmt|;
name|cmds
index|[
literal|0
index|]
operator|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd0"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|OK
return|;
block|}
block|}
expr_stmt|;
name|cmds
index|[
literal|1
index|]
operator|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd1"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|OK
return|;
block|}
block|}
expr_stmt|;
name|MultiCmdTool
name|tool
init|=
operator|new
name|MultiCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmds
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"-h"
argument_list|)
argument_list|)
decl_stmt|;
name|assertStatus
argument_list|(
name|status
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK_AND_EXIT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"tool help"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiCommand_CmdHelp
specifier|public
name|void
name|testMultiCommand_CmdHelp
parameter_list|()
block|{
name|CaptureOutputTerminal
name|terminal
init|=
operator|new
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
name|NamedCommand
index|[]
name|cmds
init|=
operator|new
name|NamedCommand
index|[
literal|2
index|]
decl_stmt|;
name|cmds
index|[
literal|0
index|]
operator|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd0"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|OK
return|;
block|}
block|}
expr_stmt|;
name|cmds
index|[
literal|1
index|]
operator|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd1"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|OK
return|;
block|}
block|}
expr_stmt|;
name|MultiCmdTool
name|tool
init|=
operator|new
name|MultiCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmds
argument_list|)
decl_stmt|;
name|CliTool
operator|.
name|ExitStatus
name|status
init|=
name|tool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"cmd1 -h"
argument_list|)
argument_list|)
decl_stmt|;
name|assertStatus
argument_list|(
name|status
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK_AND_EXIT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"cmd1 help"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatThrowExceptionCanBeLogged
specifier|public
name|void
name|testThatThrowExceptionCanBeLogged
parameter_list|()
throws|throws
name|Exception
block|{
name|CaptureOutputTerminal
name|terminal
init|=
operator|new
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"error message"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|SingleCmdTool
name|tool
init|=
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|assertStatus
argument_list|(
name|tool
operator|.
name|execute
argument_list|()
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|CODE_ERROR
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"error message"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set env... and log stack trace
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|Terminal
operator|.
name|DEBUG_SYSTEM_PROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|terminal
operator|=
operator|new
name|CaptureOutputTerminal
argument_list|()
expr_stmt|;
name|assertStatus
argument_list|(
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|,
name|CliTool
operator|.
name|ExitStatus
operator|.
name|CODE_ERROR
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"error message"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// This class must be part of the stack strace
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|Terminal
operator|.
name|DEBUG_SYSTEM_PROPERTY
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleLaunch
specifier|public
name|void
name|testMultipleLaunch
parameter_list|()
throws|throws
name|Exception
block|{
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|executed
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"cmd"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
block|{
name|executed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|OK
return|;
block|}
block|}
decl_stmt|;
name|SingleCmdTool
name|tool
init|=
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|tool
operator|.
name|parse
argument_list|(
literal|"cmd"
argument_list|,
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
literal|"--verbose"
argument_list|)
argument_list|)
expr_stmt|;
name|tool
operator|.
name|parse
argument_list|(
literal|"cmd"
argument_list|,
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
literal|"--silent"
argument_list|)
argument_list|)
expr_stmt|;
name|tool
operator|.
name|parse
argument_list|(
literal|"cmd"
argument_list|,
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
literal|"--help"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPromptForSetting
specifier|public
name|void
name|testPromptForSetting
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|promptedSecretValue
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|promptedTextValue
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Terminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|char
index|[]
name|readSecret
parameter_list|(
name|String
name|text
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|args
argument_list|,
name|arrayContaining
argument_list|(
operator|(
name|Object
operator|)
literal|"foo.password"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"changeit"
operator|.
name|toCharArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|readText
parameter_list|(
name|String
name|text
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|args
argument_list|,
name|arrayContaining
argument_list|(
operator|(
name|Object
operator|)
literal|"replace"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"replaced"
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|NamedCommand
name|cmd
init|=
operator|new
name|NamedCommand
argument_list|(
literal|"noop"
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
block|{
name|promptedSecretValue
operator|.
name|set
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"foo.password"
argument_list|)
argument_list|)
expr_stmt|;
name|promptedTextValue
operator|.
name|set
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"replace"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|OK
return|;
block|}
block|}
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.foo.password"
argument_list|,
name|InternalSettingsPreparer
operator|.
name|SECRET_PROMPT_VALUE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.replace"
argument_list|,
name|InternalSettingsPreparer
operator|.
name|TEXT_PROMPT_VALUE
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|SingleCmdTool
argument_list|(
literal|"tool"
argument_list|,
name|terminal
argument_list|,
name|cmd
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.foo.password"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.replace"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|counter
operator|.
name|intValue
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|promptedSecretValue
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"changeit"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|promptedTextValue
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"replaced"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStopAtNonOptionParsing
specifier|public
name|void
name|testStopAtNonOptionParsing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|lenientCommand
init|=
name|cmd
argument_list|(
literal|"lenient"
argument_list|,
name|CliTool
operator|.
name|Command
operator|.
name|Exit
operator|.
name|class
argument_list|)
operator|.
name|stopAtNonOption
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CliToolConfig
operator|.
name|Cmd
name|strictCommand
init|=
name|cmd
argument_list|(
literal|"strict"
argument_list|,
name|CliTool
operator|.
name|Command
operator|.
name|Exit
operator|.
name|class
argument_list|)
operator|.
name|stopAtNonOption
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CliToolConfig
name|config
init|=
name|CliToolConfig
operator|.
name|config
argument_list|(
literal|"elasticsearch"
argument_list|,
name|CliTool
operator|.
name|class
argument_list|)
operator|.
name|cmds
argument_list|(
name|lenientCommand
argument_list|,
name|strictCommand
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CaptureOutputTerminal
name|terminal
init|=
operator|new
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
specifier|final
name|CliTool
name|cliTool
init|=
operator|new
name|CliTool
argument_list|(
name|config
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Command
name|parse
parameter_list|(
name|String
name|cmdName
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|NamedCommand
argument_list|(
name|cmdName
argument_list|,
name|terminal
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ExitStatus
name|execute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|OK
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// known parameters, no error
name|assertStatus
argument_list|(
name|cliTool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"lenient --verbose"
argument_list|)
argument_list|)
argument_list|,
name|OK
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
name|cliTool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"lenient -v"
argument_list|)
argument_list|)
argument_list|,
name|OK
argument_list|)
expr_stmt|;
comment|// unknown parameters, no error
name|assertStatus
argument_list|(
name|cliTool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"lenient --unknown"
argument_list|)
argument_list|)
argument_list|,
name|OK
argument_list|)
expr_stmt|;
name|assertStatus
argument_list|(
name|cliTool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"lenient -u"
argument_list|)
argument_list|)
argument_list|,
name|OK
argument_list|)
expr_stmt|;
comment|// unknown parameters, error
name|assertStatus
argument_list|(
name|cliTool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"strict --unknown"
argument_list|)
argument_list|)
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Unrecognized option: --unknown"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertStatus
argument_list|(
name|cliTool
operator|.
name|execute
argument_list|(
name|args
argument_list|(
literal|"strict -u"
argument_list|)
argument_list|)
argument_list|,
name|USAGE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Unrecognized option: -u"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStatus
specifier|private
name|void
name|assertStatus
parameter_list|(
name|CliTool
operator|.
name|ExitStatus
name|status
parameter_list|,
name|CliTool
operator|.
name|ExitStatus
name|expectedStatus
parameter_list|)
block|{
name|assertThat
argument_list|(
name|status
argument_list|,
name|is
argument_list|(
name|expectedStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCommandHasBeenExecuted
specifier|private
name|void
name|assertCommandHasBeenExecuted
parameter_list|(
name|AtomicReference
argument_list|<
name|Boolean
argument_list|>
name|executed
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Expected command atomic reference counter to be set to true"
argument_list|,
name|executed
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|SingleCmdTool
specifier|private
specifier|static
class|class
name|SingleCmdTool
extends|extends
name|CliTool
block|{
DECL|field|command
specifier|private
specifier|final
name|Command
name|command
decl_stmt|;
DECL|method|SingleCmdTool
specifier|private
name|SingleCmdTool
parameter_list|(
name|String
name|name
parameter_list|,
name|Terminal
name|terminal
parameter_list|,
name|NamedCommand
name|command
parameter_list|)
block|{
name|super
argument_list|(
name|CliToolConfig
operator|.
name|config
argument_list|(
name|name
argument_list|,
name|SingleCmdTool
operator|.
name|class
argument_list|)
operator|.
name|cmds
argument_list|(
name|cmd
argument_list|(
name|command
operator|.
name|name
argument_list|,
name|command
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|protected
name|Command
name|parse
parameter_list|(
name|String
name|cmdName
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|command
return|;
block|}
block|}
DECL|class|MultiCmdTool
specifier|private
specifier|static
class|class
name|MultiCmdTool
extends|extends
name|CliTool
block|{
DECL|field|commands
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|commands
decl_stmt|;
DECL|method|MultiCmdTool
specifier|private
name|MultiCmdTool
parameter_list|(
name|String
name|name
parameter_list|,
name|Terminal
name|terminal
parameter_list|,
name|NamedCommand
modifier|...
name|commands
parameter_list|)
block|{
name|super
argument_list|(
name|CliToolConfig
operator|.
name|config
argument_list|(
name|name
argument_list|,
name|MultiCmdTool
operator|.
name|class
argument_list|)
operator|.
name|cmds
argument_list|(
name|cmds
argument_list|(
name|commands
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|commandByName
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|commandByName
operator|.
name|put
argument_list|(
name|commands
index|[
name|i
index|]
operator|.
name|name
argument_list|,
name|commands
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|commands
operator|=
name|commandByName
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|protected
name|Command
name|parse
parameter_list|(
name|String
name|cmdName
parameter_list|,
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|commands
operator|.
name|get
argument_list|(
name|cmdName
argument_list|)
return|;
block|}
DECL|method|cmds
specifier|private
specifier|static
name|CliToolConfig
operator|.
name|Cmd
index|[]
name|cmds
parameter_list|(
name|NamedCommand
modifier|...
name|commands
parameter_list|)
block|{
name|CliToolConfig
operator|.
name|Cmd
index|[]
name|cmds
init|=
operator|new
name|CliToolConfig
operator|.
name|Cmd
index|[
name|commands
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cmds
index|[
name|i
index|]
operator|=
name|cmd
argument_list|(
name|commands
index|[
name|i
index|]
operator|.
name|name
argument_list|,
name|commands
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|cmds
return|;
block|}
block|}
DECL|class|NamedCommand
specifier|private
specifier|static
specifier|abstract
class|class
name|NamedCommand
extends|extends
name|CliTool
operator|.
name|Command
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|NamedCommand
specifier|private
name|NamedCommand
parameter_list|(
name|String
name|name
parameter_list|,
name|Terminal
name|terminal
parameter_list|)
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

