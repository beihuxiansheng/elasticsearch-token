begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|StringsTests
specifier|public
class|class
name|StringsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testToCamelCase
specifier|public
name|void
name|testToCamelCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooBar"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"fooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FooBar"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"FooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooBar"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"foo_bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooBarFooBar"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"foo_bar_foo_bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooBar"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"foo_bar_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_foo"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"_foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_fooBar"
argument_list|,
name|Strings
operator|.
name|toCamelCase
argument_list|(
literal|"_foo_bar_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubstring
specifier|public
name|void
name|testSubstring
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|Strings
operator|.
name|substring
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Strings
operator|.
name|substring
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Strings
operator|.
name|substring
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oo"
argument_list|,
name|Strings
operator|.
name|substring
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oo"
argument_list|,
name|Strings
operator|.
name|substring
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|Strings
operator|.
name|substring
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCleanTruncate
specifier|public
name|void
name|testCleanTruncate
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|Strings
operator|.
name|cleanTruncate
argument_list|(
literal|null
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Strings
operator|.
name|cleanTruncate
argument_list|(
literal|"foo"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Strings
operator|.
name|cleanTruncate
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Throws out high surrogates
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Strings
operator|.
name|cleanTruncate
argument_list|(
literal|"foo\uD83D\uDEAB"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// But will keep the whole character
name|assertEquals
argument_list|(
literal|"foo\uD83D\uDEAB"
argument_list|,
name|Strings
operator|.
name|cleanTruncate
argument_list|(
literal|"foo\uD83D\uDEAB"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * Doesn't take care around combining marks. This example has its          * meaning changed because that last codepoint is supposed to combine          * backwards into the find "o" and be represented as the "o" with a          * circle around it with a slash through it. As in "no 'o's allowed          * here.          */
name|assertEquals
argument_list|(
literal|"o"
argument_list|,
name|Strings
operator|.
name|cleanTruncate
argument_list|(
literal|"o\uD83D\uDEAB"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Strings
operator|.
name|cleanTruncate
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEvilToString
specifier|public
name|void
name|testEvilToString
parameter_list|()
block|{
name|ToXContent
name|needsEnclosingObject
init|=
operator|new
name|ToXContent
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|builder
operator|.
name|field
argument_list|(
literal|"ok"
argument_list|,
literal|"here"
argument_list|)
operator|.
name|field
argument_list|(
literal|"catastrophe"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|String
name|toString
init|=
name|Strings
operator|.
name|toString
argument_list|(
name|needsEnclosingObject
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|,
name|containsString
argument_list|(
literal|"Error building toString out of XContent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|,
name|containsString
argument_list|(
literal|"Can not write a field name, expecting a value"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can salvage it!
name|toString
operator|=
name|Strings
operator|.
name|toString
argument_list|(
name|needsEnclosingObject
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|,
name|containsString
argument_list|(
literal|"\"ok\":\"here\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|toString
argument_list|,
name|containsString
argument_list|(
literal|"\"catastrophe\":\"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

