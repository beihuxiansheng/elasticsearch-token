begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.path
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|path
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayContaining
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PathTrieTests
specifier|public
class|class
name|PathTrieTests
extends|extends
name|ESTestCase
block|{
DECL|method|testPath
specifier|public
name|void
name|testPath
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|"walla"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"a/d/g"
argument_list|,
literal|"kuku"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"x/b/c"
argument_list|,
literal|"lala"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"a/x/*"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"a/b/*"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"*/*/x"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{index}/insert/{docId}"
argument_list|,
literal|"bingo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"a/b/c"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"walla"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"a/d/g"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"x/b/c"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"lala"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"a/x/b"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"a/b/d"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"a/b"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"a/b/c/d"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"g/t/x"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"index1/insert/12"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bingo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"index1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"docId"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyPath
specifier|public
name|void
name|testEmptyPath
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/"
argument_list|,
literal|"walla"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|""
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"walla"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDifferentNamesOnDifferentPath
specifier|public
name|void
name|testDifferentNamesOnDifferentPath
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/a/{type}"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/b/{name}"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/a/test"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/b/testX"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"testX"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSameNameOnDifferentPath
specifier|public
name|void
name|testSameNameOnDifferentPath
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/a/c/{name}"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/b/{name}"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/a/c/test"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/b/testX"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"testX"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreferNonWildcardExecution
specifier|public
name|void
name|testPreferNonWildcardExecution
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{test}"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"b"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{test}/a"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"b/a"
argument_list|,
literal|"test4"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{test}/{testB}"
argument_list|,
literal|"test5"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{test}/x/{testC}"
argument_list|,
literal|"test6"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/b"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/b/a"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/v/x"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/v/x/c"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSamePathConcreteResolution
specifier|public
name|void
name|testSamePathConcreteResolution
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{x}/{y}/{z}"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{x}/_y/{k}"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/a/b/c"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"y"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"z"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/a/_y/c"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"k"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNamedWildcardAndLookupWithWildcard
specifier|public
name|void
name|testNamedWildcardAndLookupWithWildcard
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"x/{test}"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"{test}/a"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/{test}"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/{test}/_endpoint"
argument_list|,
literal|"test4"
argument_list|)
expr_stmt|;
name|trie
operator|.
name|insert
argument_list|(
literal|"/*/{test}/_endpoint"
argument_list|,
literal|"test5"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/x/*"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/b/a"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/*"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"/*/_endpoint"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|retrieve
argument_list|(
literal|"a/*/_endpoint"
argument_list|,
name|params
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitPath
specifier|public
name|void
name|testSplitPath
parameter_list|()
block|{
name|PathTrie
argument_list|<
name|String
argument_list|>
name|trie
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/a/"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/a/b/<c/d>"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"<c/d>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/a/b/<c/d>/d"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"<c/d>"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/d}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/d}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/M{YYYY.MM}}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/M{YYYY.MM}}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/M{YYYY.MM}}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/M{YYYY.MM}}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/M{YYYY.MM|UTC}}>/log/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/M{YYYY.MM|UTC}}>"
argument_list|,
literal|"log"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/M}>,<logstash-{now/M-1M}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/M}>,<logstash-{now/M-1M}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/M}>,<logstash-{now/M-1M}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/M}>,<logstash-{now/M-1M}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/M{YYYY.MM}}>,<logstash-{now/M-1M{YYYY.MM}}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/M{YYYY.MM}}>,<logstash-{now/M-1M{YYYY.MM}}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trie
operator|.
name|splitPath
argument_list|(
literal|"/<logstash-{now/M{YYYY.MM|UTC}}>,<logstash-{now/M-1M{YYYY.MM|UTC}}>/_search"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"<logstash-{now/M{YYYY.MM|UTC}}>,<logstash-{now/M-1M{YYYY.MM|UTC}}>"
argument_list|,
literal|"_search"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

