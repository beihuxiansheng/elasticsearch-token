begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|MinScoreQueryTests
specifier|public
class|class
name|MinScoreQueryTests
extends|extends
name|ESTestCase
block|{
DECL|field|terms
specifier|private
specifier|static
name|String
index|[]
name|terms
decl_stmt|;
DECL|field|dir
specifier|private
specifier|static
name|Directory
name|dir
decl_stmt|;
DECL|field|r
specifier|private
specifier|static
name|IndexReader
name|r
decl_stmt|;
DECL|field|s
specifier|private
specifier|static
name|IndexSearcher
name|s
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|before
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|terms
operator|=
operator|new
name|String
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|terms
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numTerms
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTerms
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
comment|// simulate zipf distribution
name|String
name|term
init|=
name|terms
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|terms
operator|.
name|length
operator|-
literal|1
argument_list|)
argument_list|)
index|]
decl_stmt|;
name|value
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"field"
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|s
operator|=
name|newSearcher
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|terms
operator|=
literal|null
expr_stmt|;
name|r
operator|=
literal|null
expr_stmt|;
name|s
operator|=
literal|null
expr_stmt|;
name|dir
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|randomTerm
specifier|private
specifier|static
name|Term
name|randomTerm
parameter_list|()
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|terms
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|terms
operator|.
name|length
argument_list|)
index|]
argument_list|)
return|;
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|)
argument_list|,
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|)
argument_list|,
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.3f
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|)
argument_list|,
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchNoDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSearcher
name|s1
init|=
operator|new
name|IndexSearcher
argument_list|(
operator|new
name|MultiReader
argument_list|()
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s2
init|=
operator|new
name|IndexSearcher
argument_list|(
operator|new
name|MultiReader
argument_list|()
argument_list|)
decl_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|,
name|s1
argument_list|)
argument_list|,
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|,
name|s1
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|,
name|s1
argument_list|)
argument_list|,
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|0.5f
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** pick a min score which is in the range of scores produced by the query */
DECL|method|randomMinScore
specifier|private
name|float
name|randomMinScore
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|TopDocs
name|topDocs
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|float
name|base
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|topDocs
operator|.
name|totalHits
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|1
case|:
name|base
operator|=
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
expr_stmt|;
break|break;
default|default:
name|base
operator|=
operator|(
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
operator|+
name|topDocs
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
operator|)
operator|/
literal|2
expr_stmt|;
break|break;
block|}
name|float
name|delta
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|-
literal|0.5f
decl_stmt|;
return|return
name|base
operator|+
name|delta
return|;
block|}
DECL|method|assertMinScoreEquivalence
specifier|private
name|void
name|assertMinScoreEquivalence
parameter_list|(
name|Query
name|query
parameter_list|,
name|Query
name|minScoreQuery
parameter_list|,
name|float
name|minScore
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TopDocs
name|topDocs
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TopDocs
name|minScoreTopDocs
init|=
name|s
operator|.
name|search
argument_list|(
name|minScoreQuery
argument_list|,
name|s
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|totalHits
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
operator|>=
name|minScore
condition|)
block|{
name|assertEquals
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|,
name|minScoreTopDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|minScoreTopDocs
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|score
argument_list|,
literal|1e-5f
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|minScoreTopDocs
operator|.
name|totalHits
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|iters
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|Term
name|term
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|float
name|minScore
init|=
name|randomMinScore
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Query
name|minScoreQuery
init|=
operator|new
name|MinScoreQuery
argument_list|(
name|query
argument_list|,
name|minScore
argument_list|)
decl_stmt|;
name|assertMinScoreEquivalence
argument_list|(
name|query
argument_list|,
name|minScoreQuery
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFilteredApproxQuery
specifier|public
name|void
name|testFilteredApproxQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// same as testBasics but with a query that exposes approximations
specifier|final
name|int
name|iters
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|Term
name|term
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|float
name|minScore
init|=
name|randomMinScore
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Query
name|minScoreQuery
init|=
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|RandomApproximationQuery
argument_list|(
name|query
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|minScore
argument_list|)
decl_stmt|;
name|assertMinScoreEquivalence
argument_list|(
name|query
argument_list|,
name|minScoreQuery
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedInConjunction
specifier|public
name|void
name|testNestedInConjunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// To test scorers as well, not only bulk scorers
name|Term
name|t1
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Term
name|t2
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Query
name|tq1
init|=
operator|new
name|TermQuery
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|Query
name|tq2
init|=
operator|new
name|TermQuery
argument_list|(
name|t2
argument_list|)
decl_stmt|;
name|float
name|minScore
init|=
name|randomMinScore
argument_list|(
name|tq1
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq1
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MinScoreQuery
argument_list|(
name|tq1
argument_list|,
name|minScore
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|tq2
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BooleanQuery
name|bq2
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|tq1
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|tq2
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMinScoreEquivalence
argument_list|(
name|bq2
argument_list|,
name|bq1
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedInConjunctionWithApprox
specifier|public
name|void
name|testNestedInConjunctionWithApprox
parameter_list|()
throws|throws
name|Exception
block|{
comment|// same, but with approximations
name|Term
name|t1
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Term
name|t2
init|=
name|randomTerm
argument_list|()
decl_stmt|;
name|Query
name|tq1
init|=
operator|new
name|TermQuery
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|Query
name|tq2
init|=
operator|new
name|TermQuery
argument_list|(
name|t2
argument_list|)
decl_stmt|;
name|float
name|minScore
init|=
name|randomMinScore
argument_list|(
name|tq1
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq1
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MinScoreQuery
argument_list|(
operator|new
name|RandomApproximationQuery
argument_list|(
name|tq1
argument_list|,
name|random
argument_list|()
argument_list|)
argument_list|,
name|minScore
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|tq2
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BooleanQuery
name|bq2
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|tq1
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|tq2
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMinScoreEquivalence
argument_list|(
name|bq2
argument_list|,
name|bq1
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

