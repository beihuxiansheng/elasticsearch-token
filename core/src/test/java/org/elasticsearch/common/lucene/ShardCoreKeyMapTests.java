begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|ElasticsearchDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ShardCoreKeyMapTests
specifier|public
class|class
name|ShardCoreKeyMapTests
extends|extends
name|ESTestCase
block|{
DECL|method|testMissingShard
specifier|public
name|void
name|testMissingShard
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|w
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
init|)
block|{
name|ShardCoreKeyMap
name|map
init|=
operator|new
name|ShardCoreKeyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
try|try
block|{
name|map
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// ok
block|}
block|}
block|}
block|}
block|}
DECL|method|testAddingAClosedReader
specifier|public
name|void
name|testAddingAClosedReader
parameter_list|()
throws|throws
name|Exception
block|{
name|LeafReader
name|reader
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|writer
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
init|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|DirectoryReader
name|dirReader
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|writer
operator|.
name|getReader
argument_list|()
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|"index1"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
argument_list|)
init|)
block|{
name|reader
operator|=
name|dirReader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|reader
argument_list|()
expr_stmt|;
block|}
block|}
name|ShardCoreKeyMap
name|map
init|=
operator|new
name|ShardCoreKeyMap
argument_list|()
decl_stmt|;
try|try
block|{
name|map
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AlreadyClosedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// What we wanted
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w1
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir1
argument_list|)
decl_stmt|;
name|w1
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w2
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir2
argument_list|)
decl_stmt|;
name|w2
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|dir3
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w3
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir3
argument_list|)
decl_stmt|;
name|w3
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|ShardId
name|shardId1
init|=
operator|new
name|ShardId
argument_list|(
literal|"index1"
argument_list|,
literal|"_na_"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ShardId
name|shardId2
init|=
operator|new
name|ShardId
argument_list|(
literal|"index1"
argument_list|,
literal|"_na_"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ShardId
name|shardId3
init|=
operator|new
name|ShardId
argument_list|(
literal|"index2"
argument_list|,
literal|"_na_"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ElasticsearchDirectoryReader
name|reader1
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|w1
operator|.
name|getReader
argument_list|()
argument_list|,
name|shardId1
argument_list|)
decl_stmt|;
name|ElasticsearchDirectoryReader
name|reader2
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|w2
operator|.
name|getReader
argument_list|()
argument_list|,
name|shardId2
argument_list|)
decl_stmt|;
name|ElasticsearchDirectoryReader
name|reader3
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|w3
operator|.
name|getReader
argument_list|()
argument_list|,
name|shardId3
argument_list|)
decl_stmt|;
name|ShardCoreKeyMap
name|map
init|=
operator|new
name|ShardCoreKeyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryReader
name|reader
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|reader1
argument_list|,
name|reader2
argument_list|,
name|reader3
argument_list|)
control|)
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|map
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adding them back is a no-op
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader1
operator|.
name|leaves
argument_list|()
control|)
block|{
name|map
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader2
operator|.
name|leaves
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|shardId2
argument_list|,
name|map
operator|.
name|getShardId
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheHelper
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w1
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|ElasticsearchDirectoryReader
name|newReader1
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|w1
operator|.
name|getReader
argument_list|()
argument_list|,
name|shardId1
argument_list|)
decl_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader1
operator|=
name|newReader1
expr_stmt|;
comment|// same for reader2, but with a force merge to trigger evictions
name|w2
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|w2
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ElasticsearchDirectoryReader
name|newReader2
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|w2
operator|.
name|getReader
argument_list|()
argument_list|,
name|shardId2
argument_list|)
decl_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|=
name|newReader2
expr_stmt|;
for|for
control|(
name|DirectoryReader
name|reader
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|reader1
argument_list|,
name|reader2
argument_list|,
name|reader3
argument_list|)
control|)
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|map
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|index1Keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryReader
name|reader
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|reader1
argument_list|,
name|reader2
argument_list|)
control|)
block|{
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|index1Keys
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheHelper
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|index1Keys
operator|.
name|removeAll
argument_list|(
name|map
operator|.
name|getCoreKeysForIndex
argument_list|(
literal|"index1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|index1Keys
argument_list|)
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|w1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|w3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

