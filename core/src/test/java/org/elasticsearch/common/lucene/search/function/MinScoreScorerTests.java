begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TwoPhaseIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|MinScoreScorerTests
specifier|public
class|class
name|MinScoreScorerTests
extends|extends
name|LuceneTestCase
block|{
DECL|method|iterator
specifier|private
specifier|static
name|DocIdSetIterator
name|iterator
parameter_list|(
specifier|final
name|int
modifier|...
name|docs
parameter_list|)
block|{
return|return
operator|new
name|DocIdSetIterator
argument_list|()
block|{
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|docs
operator|.
name|length
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
return|return
name|docs
index|[
operator|++
name|i
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|i
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|i
operator|==
name|docs
operator|.
name|length
condition|?
name|NO_MORE_DOCS
else|:
name|docs
index|[
name|i
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|docs
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|slowAdvance
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|scorer
specifier|private
specifier|static
name|Scorer
name|scorer
parameter_list|(
name|int
name|maxDoc
parameter_list|,
specifier|final
name|int
index|[]
name|docs
parameter_list|,
specifier|final
name|float
index|[]
name|scores
parameter_list|,
specifier|final
name|boolean
name|twoPhase
parameter_list|)
block|{
specifier|final
name|DocIdSetIterator
name|iterator
init|=
name|twoPhase
condition|?
name|DocIdSetIterator
operator|.
name|all
argument_list|(
name|maxDoc
argument_list|)
else|:
name|iterator
argument_list|(
name|docs
argument_list|)
decl_stmt|;
return|return
operator|new
name|Scorer
argument_list|(
literal|null
argument_list|)
block|{
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
if|if
condition|(
name|twoPhase
condition|)
block|{
return|return
name|TwoPhaseIterator
operator|.
name|asDocIdSetIterator
argument_list|(
name|twoPhaseIterator
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|iterator
return|;
block|}
block|}
specifier|public
name|TwoPhaseIterator
name|twoPhaseIterator
parameter_list|()
block|{
if|if
condition|(
name|twoPhase
condition|)
block|{
return|return
operator|new
name|TwoPhaseIterator
argument_list|(
name|iterator
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|docs
argument_list|,
name|iterator
operator|.
name|docID
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|matchCost
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|docs
argument_list|,
name|docID
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|scores
index|[
name|idx
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
block|}
return|;
block|}
DECL|method|doTestRandom
specifier|public
name|void
name|doTestRandom
parameter_list|(
name|boolean
name|twoPhase
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxDoc
operator|/
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|uniqueDocs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|uniqueDocs
operator|.
name|size
argument_list|()
operator|<
name|numDocs
condition|)
block|{
name|uniqueDocs
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[
name|numDocs
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
range|:
name|uniqueDocs
control|)
block|{
name|docs
index|[
name|i
operator|++
index|]
operator|=
name|doc
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|docs
argument_list|)
expr_stmt|;
specifier|final
name|float
index|[]
name|scores
init|=
operator|new
name|float
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|scores
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
expr_stmt|;
block|}
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|maxDoc
argument_list|,
name|docs
argument_list|,
name|scores
argument_list|,
name|twoPhase
argument_list|)
decl_stmt|;
specifier|final
name|float
name|minScore
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|Scorer
name|minScoreScorer
init|=
operator|new
name|MinScoreScorer
argument_list|(
literal|null
argument_list|,
name|scorer
argument_list|,
name|minScore
argument_list|)
decl_stmt|;
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
specifier|final
name|int
name|target
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|target
operator|=
name|doc
operator|+
literal|1
expr_stmt|;
name|doc
operator|=
name|minScoreScorer
operator|.
name|iterator
argument_list|()
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|doc
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|doc
operator|=
name|minScoreScorer
operator|.
name|iterator
argument_list|()
operator|.
name|advance
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|docs
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
operator|-
literal|1
operator|-
name|idx
expr_stmt|;
block|}
while|while
condition|(
name|idx
operator|<
name|docs
operator|.
name|length
operator|&&
name|scores
index|[
name|idx
index|]
operator|<
name|minScore
condition|)
block|{
name|idx
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|==
name|docs
operator|.
name|length
condition|)
block|{
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|docs
index|[
name|idx
index|]
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|scores
index|[
name|idx
index|]
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRegularIterator
specifier|public
name|void
name|testRegularIterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|doTestRandom
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTwoPhaseIterator
specifier|public
name|void
name|testTwoPhaseIterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|doTestRandom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

