begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|AbstractDoubleSearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|LeafSearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ScriptScoreFunctionTests
specifier|public
class|class
name|ScriptScoreFunctionTests
extends|extends
name|ESTestCase
block|{
comment|/**      * Tests https://github.com/elastic/elasticsearch/issues/2426      */
DECL|method|testScriptScoresReturnsNaN
specifier|public
name|void
name|testScriptScoresReturnsNaN
parameter_list|()
throws|throws
name|IOException
block|{
comment|// script that always returns NaN
name|ScoreFunction
name|scoreFunction
init|=
operator|new
name|ScriptScoreFunction
argument_list|(
operator|new
name|Script
argument_list|(
literal|"Double.NaN"
argument_list|)
argument_list|,
operator|new
name|SearchScript
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LeafSearchScript
name|getLeafSearchScript
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AbstractDoubleSearchScript
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|runAsDouble
parameter_list|()
block|{
return|return
name|Double
operator|.
name|NaN
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// do nothing: we are a fake with no lookup
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LeafScoreFunction
name|leafScoreFunction
init|=
name|scoreFunction
operator|.
name|getLeafScoreFunction
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ScriptException
name|expected
init|=
name|expectThrows
argument_list|(
name|ScriptException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|leafScoreFunction
operator|.
name|score
argument_list|(
name|randomInt
argument_list|()
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"returned NaN"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

