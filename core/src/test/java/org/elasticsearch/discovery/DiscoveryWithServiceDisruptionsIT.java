begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|DjbHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|elect
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|fd
operator|.
name|FaultDetection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|membership
operator|.
name|MembershipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|ZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|ZenPingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ping
operator|.
name|unicast
operator|.
name|UnicastZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|publish
operator|.
name|PublishClusterStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|discovery
operator|.
name|ClusterDiscoveryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0
argument_list|)
annotation|@
name|ESIntegTestCase
operator|.
name|SuppressLocalMode
DECL|class|DiscoveryWithServiceDisruptionsIT
specifier|public
class|class
name|DiscoveryWithServiceDisruptionsIT
extends|extends
name|ESIntegTestCase
block|{
DECL|field|DISRUPTION_HEALING_OVERHEAD
specifier|private
specifier|static
specifier|final
name|TimeValue
name|DISRUPTION_HEALING_OVERHEAD
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|40
argument_list|)
decl_stmt|;
comment|// we use 30s as timeout in many places.
DECL|field|discoveryConfig
specifier|private
name|ClusterDiscoveryConfiguration
name|discoveryConfig
decl_stmt|;
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|discoveryConfig
operator|.
name|node
argument_list|(
name|nodeOrdinal
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|clearConfig
specifier|public
name|void
name|clearConfig
parameter_list|()
block|{
name|discoveryConfig
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|numberOfShards
specifier|protected
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
DECL|method|numberOfReplicas
specifier|protected
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|startCluster
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
return|return
name|startCluster
argument_list|(
name|numberOfNodes
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|startCluster
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|,
name|int
name|minimumMasterNode
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
return|return
name|startCluster
argument_list|(
name|numberOfNodes
argument_list|,
name|minimumMasterNode
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|startCluster
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|,
name|int
name|minimumMasterNode
parameter_list|,
annotation|@
name|Nullable
name|int
index|[]
name|unicastHostsOrdinals
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|configureUnicastCluster
argument_list|(
name|numberOfNodes
argument_list|,
name|unicastHostsOrdinals
argument_list|,
name|minimumMasterNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
name|numberOfNodes
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ensureStableCluster
argument_list|(
name|numberOfNodes
argument_list|)
expr_stmt|;
comment|// TODO: this is a temporary solution so that nodes will not base their reaction to a partition based on previous successful results
for|for
control|(
name|ZenPingService
name|pingService
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|ZenPingService
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|pingService
operator|.
name|zenPings
argument_list|()
control|)
block|{
if|if
condition|(
name|zenPing
operator|instanceof
name|UnicastZenPing
condition|)
block|{
operator|(
operator|(
name|UnicastZenPing
operator|)
name|zenPing
operator|)
operator|.
name|clearTemporalResponses
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodes
return|;
block|}
DECL|field|DEFAULT_SETTINGS
specifier|final
specifier|static
name|Settings
name|DEFAULT_SETTINGS
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|FaultDetection
operator|.
name|SETTING_PING_TIMEOUT
argument_list|,
literal|"1s"
argument_list|)
comment|// for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
name|FaultDetection
operator|.
name|SETTING_PING_RETRIES
argument_list|,
literal|"1"
argument_list|)
comment|// for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
literal|"discovery.zen.join_timeout"
argument_list|,
literal|"10s"
argument_list|)
comment|// still long to induce failures but to long so test won't time out
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT
argument_list|,
literal|"1s"
argument_list|)
comment|//<-- for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
literal|"http.enabled"
argument_list|,
literal|false
argument_list|)
comment|// just to make test quicker
operator|.
name|put
argument_list|(
literal|"transport.host"
argument_list|,
literal|"127.0.0.1"
argument_list|)
comment|// only bind on one IF we use v4 here by default
operator|.
name|put
argument_list|(
literal|"transport.bind_host"
argument_list|,
literal|"127.0.0.1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"transport.publish_host"
argument_list|,
literal|"127.0.0.1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"gateway.local.list_timeout"
argument_list|,
literal|"10s"
argument_list|)
comment|// still long to induce failures but to long so test won't time out
operator|.
name|put
argument_list|(
literal|"plugin.types"
argument_list|,
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|configureUnicastCluster
specifier|private
name|void
name|configureUnicastCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|,
annotation|@
name|Nullable
name|int
index|[]
name|unicastHostsOrdinals
parameter_list|,
name|int
name|minimumMasterNode
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|minimumMasterNode
operator|<
literal|0
condition|)
block|{
name|minimumMasterNode
operator|=
name|numberOfNodes
operator|/
literal|2
operator|+
literal|1
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"---> configured unicast"
argument_list|)
expr_stmt|;
comment|// TODO: Rarely use default settings form some of these
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DEFAULT_SETTINGS
argument_list|)
operator|.
name|put
argument_list|(
name|ElectMasterService
operator|.
name|DISCOVERY_ZEN_MINIMUM_MASTER_NODES
argument_list|,
name|minimumMasterNode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|discoveryConfig
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|unicastHostsOrdinals
operator|==
literal|null
condition|)
block|{
name|discoveryConfig
operator|=
operator|new
name|ClusterDiscoveryConfiguration
operator|.
name|UnicastZen
argument_list|(
name|numberOfNodes
argument_list|,
name|nodeSettings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|discoveryConfig
operator|=
operator|new
name|ClusterDiscoveryConfiguration
operator|.
name|UnicastZen
argument_list|(
name|numberOfNodes
argument_list|,
name|nodeSettings
argument_list|,
name|unicastHostsOrdinals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test that no split brain occurs under partial network partition. See https://github.com/elasticsearch/elasticsearch/issues/2488      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|failWithMinimumMasterNodesConfigured
specifier|public
name|void
name|failWithMinimumMasterNodesConfigured
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Figure out what is the elected master node
specifier|final
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"---> legit elected master node="
operator|+
name|masterNode
argument_list|)
expr_stmt|;
comment|// Pick a node that isn't the elected master.
name|Set
argument_list|<
name|String
argument_list|>
name|nonMasters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|nonMasters
operator|.
name|remove
argument_list|(
name|masterNode
argument_list|)
expr_stmt|;
specifier|final
name|String
name|unluckyNode
init|=
name|randomFrom
argument_list|(
name|nonMasters
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
decl_stmt|;
comment|// Simulate a network issue between the unlucky node and elected master node in both directions.
name|NetworkDisconnectPartition
name|networkDisconnect
init|=
operator|new
name|NetworkDisconnectPartition
argument_list|(
name|masterNode
argument_list|,
name|unluckyNode
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|setDisruptionScheme
argument_list|(
name|networkDisconnect
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until elected master has removed that the unlucky node...
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|assertNoMaster
argument_list|(
name|unluckyNode
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until the master node sees all 3 nodes again.
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// The elected master shouldn't have changed, since the unlucky node never could have elected himself as
comment|// master since m_m_n of 2 could never be satisfied.
name|assertMaster
argument_list|(
name|masterNode
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify that nodes fault detection works after master (re) election      */
annotation|@
name|Test
DECL|method|testNodesFDAfterMasterReelection
specifier|public
name|void
name|testNodesFDAfterMasterReelection
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping current master"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> reducing min master nodes to 2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ElectMasterService
operator|.
name|DISCOVERY_ZEN_MINIMUM_MASTER_NODES
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|master
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|String
name|nonMaster
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|master
argument_list|)
condition|)
block|{
name|nonMaster
operator|=
name|node
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> isolating [{}]"
argument_list|,
name|nonMaster
argument_list|)
expr_stmt|;
name|addRandomIsolation
argument_list|(
name|nonMaster
argument_list|)
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for master to remove it"
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|master
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify that the proper block is applied when nodes loose their master      */
annotation|@
name|Test
DECL|method|testVerifyApiBlocksDuringPartition
specifier|public
name|void
name|testVerifyApiBlocksDuringPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Makes sure that the get request can be executed on each node locally:
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Everything is stable now, it is now time to simulate evil...
comment|// but first make sure we have no initializing shards and all is green
comment|// (waiting for green here, because indexing / search in a yellow index is fine as long as no other nodes go down)
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|NetworkPartition
name|networkPartition
init|=
name|addRandomPartition
argument_list|()
decl_stmt|;
specifier|final
name|String
name|isolatedNode
init|=
name|networkPartition
operator|.
name|getMinoritySide
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nonIsolatedNode
init|=
name|networkPartition
operator|.
name|getMajoritySide
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Simulate a network issue between the unlucky node and the rest of the cluster.
name|networkPartition
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for isolated node [{}] to have no master"
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|assertNoMaster
argument_list|(
name|isolatedNode
argument_list|,
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wait until elected master has been removed and a new 2 node cluster was from (via [{}])"
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|nonIsolatedNode
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|networkPartition
operator|.
name|getMajoritySide
argument_list|()
control|)
block|{
name|ClusterState
name|nodeState
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|nodeState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nodeState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|fail
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"
operator|+
name|nodeState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|networkPartition
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until the master node sees al 3 nodes again.
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
operator|+
name|networkPartition
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Verify no master block with {} set to {}"
argument_list|,
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK
argument_list|,
literal|"all"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|networkPartition
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for isolated node [{}] to have no master"
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|assertNoMaster
argument_list|(
name|isolatedNode
argument_list|,
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_ALL
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we have stable cluster& cross partition recoveries are canceled by the removal of the missing node
comment|// the unresponsive partition causes recoveries to only time out after 15m (default) and these will cause
comment|// the test to fail due to unfreed resources
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|nonIsolatedNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition      * and verifies that all node agree on the new cluster state      */
annotation|@
name|Test
DECL|method|testIsolateMasterAndVerifyClusterStateConsensus
specifier|public
name|void
name|testIsolateMasterAndVerifyClusterStateConsensus
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|isolatedNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|NetworkPartition
name|networkPartition
init|=
name|addRandomIsolation
argument_list|(
name|isolatedNode
argument_list|)
decl_stmt|;
name|networkPartition
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|String
name|nonIsolatedNode
init|=
name|networkPartition
operator|.
name|getMajoritySide
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// make sure cluster reforms
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|nonIsolatedNode
argument_list|)
expr_stmt|;
comment|// make sure isolated need picks up on things.
name|assertNoMaster
argument_list|(
name|isolatedNode
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
comment|// restore isolation
name|networkPartition
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
operator|+
name|networkPartition
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"issue a reroute"
argument_list|)
expr_stmt|;
comment|// trigger a reroute now, instead of waiting for the background reroute of RerouteService
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
argument_list|)
expr_stmt|;
comment|// and wait for it to finish and for the cluster to stabilize
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// verify all cluster states are the same
name|ClusterState
name|state
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ClusterState
name|nodeState
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|nodeState
expr_stmt|;
continue|continue;
block|}
comment|// assert nodes are identical
try|try
block|{
name|assertEquals
argument_list|(
literal|"unequal versions"
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|nodeState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unequal node count"
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|nodeState
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"different masters "
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|,
name|nodeState
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"different meta data version"
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
argument_list|,
name|nodeState
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|prettyPrint
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeState
operator|.
name|routingTable
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"different routing"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed comparing cluster state: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"--- cluster state of node ["
operator|+
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"]: ---\n"
operator|+
name|state
operator|.
name|prettyPrint
argument_list|()
operator|+
literal|"\n--- cluster state ["
operator|+
name|node
operator|+
literal|"]: ---\n"
operator|+
name|nodeState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test that we do not loose document whose indexing request was successful, under a randomly selected disruption scheme      * We also collect& report the type of indexing failures that occur.      *<p/>      * This test is a superset of tests run in the Jepsen test suite, with the exception of versioned updates      */
annotation|@
name|Test
comment|// NOTE: if you remove the awaitFix, make sure to port the test to the 1.x branch
annotation|@
name|LuceneTestCase
operator|.
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"needs some more work to stabilize"
argument_list|)
annotation|@
name|TestLogging
argument_list|(
literal|"action.index:TRACE,action.get:TRACE,discovery:TRACE,cluster.service:TRACE,indices.recovery:TRACE,indices.cluster:TRACE"
argument_list|)
DECL|method|testAckedIndexing
specifier|public
name|void
name|testAckedIndexing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: add node count randomizaion
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|ServiceDisruptionScheme
name|disruptionScheme
init|=
name|addRandomDisruptionScheme
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"disruption scheme [{}] added"
argument_list|,
name|disruptionScheme
argument_list|)
expr_stmt|;
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ackedDocs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// id -> node sent.
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|indexers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Semaphore
argument_list|>
name|semaphores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|idGenerator
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|countDownLatchRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptedExceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"starting indexers"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|String
name|node
range|:
name|nodes
control|)
block|{
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|semaphores
operator|.
name|add
argument_list|(
name|semaphore
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
name|client
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"indexer_"
operator|+
name|indexers
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numPrimaries
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
operator|.
name|numPrimaries
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] Acquired semaphore and it has {} permits left"
argument_list|,
name|name
argument_list|,
name|semaphore
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|shard
init|=
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|getInstance
argument_list|(
name|DjbHashFunction
operator|.
name|class
argument_list|)
operator|.
name|hash
argument_list|(
name|id
argument_list|)
operator|%
name|numPrimaries
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] indexing id [{}] through node [{}] targeting shard [{}]"
argument_list|,
name|name
argument_list|,
name|id
argument_list|,
name|node
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|IndexResponse
name|response
init|=
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1s"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|ackedDocs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] indexed id [{}] through node [{}]"
argument_list|,
name|name
argument_list|,
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
name|exceptedExceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] failed id [{}] through node [{}]"
argument_list|,
name|e
argument_list|,
name|name
argument_list|,
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] decreased counter : {}"
argument_list|,
name|name
argument_list|,
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// fine - semaphore interrupt
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"unexpected exception in background thread of [{}]"
argument_list|,
name|t
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|indexers
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|int
name|docsPerIndexer
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing "
operator|+
name|docsPerIndexer
operator|+
literal|" docs per indexer before partition"
argument_list|)
expr_stmt|;
name|countDownLatchRef
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
name|docsPerIndexer
operator|*
name|indexers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Semaphore
name|semaphore
range|:
name|semaphores
control|)
block|{
name|semaphore
operator|.
name|release
argument_list|(
name|docsPerIndexer
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|2
argument_list|)
init|;
name|iter
operator|>
literal|0
condition|;
name|iter
operator|--
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"starting disruptions& indexing (iteration [{}])"
argument_list|,
name|iter
argument_list|)
expr_stmt|;
name|disruptionScheme
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|docsPerIndexer
operator|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing "
operator|+
name|docsPerIndexer
operator|+
literal|" docs per indexer during partition"
argument_list|)
expr_stmt|;
name|countDownLatchRef
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
name|docsPerIndexer
operator|*
name|indexers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|semaphores
argument_list|)
expr_stmt|;
for|for
control|(
name|Semaphore
name|semaphore
range|:
name|semaphores
control|)
block|{
name|assertThat
argument_list|(
name|semaphore
operator|.
name|availablePermits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|(
name|docsPerIndexer
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|60000
operator|+
name|disruptionScheme
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
operator|*
operator|(
name|docsPerIndexer
operator|*
name|indexers
operator|.
name|size
argument_list|()
operator|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"stopping disruption"
argument_list|)
expr_stmt|;
name|disruptionScheme
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|disruptionScheme
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
operator|+
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"validating successful docs"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"validating through node [{}]"
argument_list|,
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ackedDocs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"doc ["
operator|+
name|id
operator|+
literal|"] indexed via node ["
operator|+
name|ackedDocs
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|+
literal|"] not found"
argument_list|,
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" (checked via node ["
operator|+
name|node
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"done validating (iteration [{}])"
argument_list|,
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|exceptedExceptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Indexing exceptions during disruption:"
argument_list|)
decl_stmt|;
for|for
control|(
name|Exception
name|e
range|:
name|exceptedExceptions
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"shutting down indexers"
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|indexer
range|:
name|indexers
control|)
block|{
name|indexer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|join
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test that cluster recovers from a long GC on master that causes other nodes to elect a new one      */
annotation|@
name|Test
DECL|method|testMasterNodeGCs
specifier|public
name|void
name|testMasterNodeGCs
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|oldMasterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
comment|// a very long GC, but it's OK as we remove the disruption when it has had an effect
name|SingleNodeDisruption
name|masterNodeDisruption
init|=
operator|new
name|IntermittentLongGCDisruption
argument_list|(
name|oldMasterNode
argument_list|,
name|getRandom
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|30000
argument_list|,
literal|60000
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|masterNodeDisruption
argument_list|)
expr_stmt|;
name|masterNodeDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|oldNonMasterNodesSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|oldNonMasterNodesSet
operator|.
name|remove
argument_list|(
name|oldMasterNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oldNonMasterNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldNonMasterNodesSet
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for nodes to de-elect master [{}]"
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|oldNonMasterNodesSet
control|)
block|{
name|assertDifferentMaster
argument_list|(
name|node
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for nodes to elect a new master"
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|oldNonMasterNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for any pinging to stop"
argument_list|)
expr_stmt|;
name|assertDiscoveryCompleted
argument_list|(
name|oldNonMasterNodes
argument_list|)
expr_stmt|;
comment|// restore GC
name|masterNodeDisruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
operator|+
name|masterNodeDisruption
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|oldNonMasterNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure all nodes agree on master
name|String
name|newMaster
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|newMaster
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|oldMasterNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMaster
argument_list|(
name|newMaster
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes      * that already are following another elected master node. These nodes should reject this cluster state and prevent      * them from following the stale master.      */
annotation|@
name|Test
DECL|method|testStaleMasterNotHijackingMajority
specifier|public
name|void
name|testStaleMasterNotHijackingMajority
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 3 node cluster with unicast discovery and minimum_master_nodes set to 2:
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Save the current master node as old master node, because that node will get frozen
specifier|final
name|String
name|oldMasterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|assertMaster
argument_list|(
name|oldMasterNode
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
comment|// Simulating a painful gc by suspending all threads for a long time on the current elected master node.
name|SingleNodeDisruption
name|masterNodeDisruption
init|=
operator|new
name|LongGCDisruption
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|oldMasterNode
argument_list|)
decl_stmt|;
comment|// Save the majority side
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|majoritySide
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|majoritySide
operator|.
name|remove
argument_list|(
name|oldMasterNode
argument_list|)
expr_stmt|;
comment|// Keeps track of the previous and current master when a master node transition took place on each node on the majority side:
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|masters
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|node
range|:
name|majoritySide
control|)
block|{
name|masters
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|DiscoveryNode
name|previousMaster
init|=
name|event
operator|.
name|previousState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentMaster
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|previousMaster
argument_list|,
name|currentMaster
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"node {} received new cluster state: {} \n and had previous cluster state: {}"
argument_list|,
name|node
argument_list|,
name|event
operator|.
name|state
argument_list|()
argument_list|,
name|event
operator|.
name|previousState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|previousMasterNodeName
init|=
name|previousMaster
operator|!=
literal|null
condition|?
name|previousMaster
operator|.
name|name
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|currentMasterNodeName
init|=
name|currentMaster
operator|!=
literal|null
condition|?
name|currentMaster
operator|.
name|name
argument_list|()
else|:
literal|null
decl_stmt|;
name|masters
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|previousMasterNodeName
argument_list|,
name|currentMasterNodeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|oldMasterNodeSteppedDown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|oldMasterNode
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|oldMasterNodeSteppedDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|masterNodeDisruption
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"freezing node [{}]"
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
name|masterNodeDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// Wait for the majority side to get stable
name|assertDifferentMaster
argument_list|(
name|majoritySide
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
name|assertDifferentMaster
argument_list|(
name|majoritySide
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
name|assertDiscoveryCompleted
argument_list|(
name|majoritySide
argument_list|)
expr_stmt|;
comment|// The old master node is frozen, but here we submit a cluster state update task that doesn't get executed,
comment|// but will be queued and once the old master node un-freezes it gets executed.
comment|// The old master node will send this update + the cluster state where he is flagged as master to the other
comment|// nodes that follow the new master. These nodes should ignore this update.
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|oldMasterNode
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"sneaky-update"
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failure [{}]"
argument_list|,
name|t
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Save the new elected master node
specifier|final
name|String
name|newMasterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|(
name|majoritySide
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"new detected master node [{}]"
argument_list|,
name|newMasterNode
argument_list|)
expr_stmt|;
comment|// Stop disruption
name|logger
operator|.
name|info
argument_list|(
literal|"Unfreeze node [{}]"
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
name|masterNodeDisruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|oldMasterNodeSteppedDown
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Make sure that the end state is consistent on all nodes:
name|assertDiscoveryCompleted
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
comment|// Use assertBusy(...) because the unfrozen node may take a while to actually join the cluster.
comment|// The assertDiscoveryCompleted(...) can't know if all nodes have the old master node in all of the local cluster states
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertMaster
argument_list|(
name|newMasterNode
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|masters
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|masters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nodeName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|recordedMasterTransition
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] Each node should only record two master node transitions"
argument_list|,
name|recordedMasterTransition
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] First transition's previous master should be [null]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|v1
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|oldMasterNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] First transition's current master should be ["
operator|+
name|newMasterNode
operator|+
literal|"]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|v2
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] Second transition's previous master should be [null]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|v1
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] Second transition's current master should be ["
operator|+
name|newMasterNode
operator|+
literal|"]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|v2
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newMasterNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that a document which is indexed on the majority side of a partition, is available from the minority side,      * once the partition is healed      *      * @throws Exception      */
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
name|value
operator|=
literal|"cluster.service:TRACE"
argument_list|)
DECL|method|testRejoinDocumentExistsInAllShardCopies
specifier|public
name|void
name|testRejoinDocumentExistsInAllShardCopies
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodes
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|isolatedNode
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|notIsolatedNode
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ServiceDisruptionScheme
name|scheme
init|=
name|addRandomIsolation
argument_list|(
name|isolatedNode
argument_list|)
decl_stmt|;
name|scheme
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|notIsolatedNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|IndexResponse
name|indexResponse
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Verifying if document exists via node["
operator|+
name|notIsolatedNode
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|GetResponse
name|getResponse
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scheme
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Verifying if document exists after isolating node["
operator|+
name|isolatedNode
operator|+
literal|"] via node["
operator|+
name|node
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A 4 node cluster with m_m_n set to 3 and each node has one unicast enpoint. One node partitions from the master node.      * The temporal unicast responses is empty. When partition is solved the one ping response contains a master node.      * The rejoining node should take this master node and connect.      */
annotation|@
name|Test
DECL|method|unicastSinglePingResponseContainsMaster
specifier|public
name|void
name|unicastSinglePingResponseContainsMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|4
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
decl_stmt|;
comment|// Figure out what is the elected master node
specifier|final
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"---> legit elected master node="
operator|+
name|masterNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|otherNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|otherNodes
operator|.
name|remove
argument_list|(
name|masterNode
argument_list|)
expr_stmt|;
name|otherNodes
operator|.
name|remove
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//<-- Don't isolate the node that is in the unicast endpoint for all the other nodes.
specifier|final
name|String
name|isolatedNode
init|=
name|otherNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Forcefully clean temporal response lists on all nodes. Otherwise the node in the unicast host list
comment|// includes all the other nodes that have pinged it and the issue doesn't manifest
for|for
control|(
name|ZenPingService
name|pingService
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|ZenPingService
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|pingService
operator|.
name|zenPings
argument_list|()
control|)
block|{
operator|(
operator|(
name|UnicastZenPing
operator|)
name|zenPing
operator|)
operator|.
name|clearTemporalResponses
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Simulate a network issue between the unlucky node and elected master node in both directions.
name|NetworkDisconnectPartition
name|networkDisconnect
init|=
operator|new
name|NetworkDisconnectPartition
argument_list|(
name|masterNode
argument_list|,
name|isolatedNode
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|setDisruptionScheme
argument_list|(
name|networkDisconnect
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until elected master has removed that the unlucky node...
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
comment|// The isolate master node must report no master, so it starts with pinging
name|assertNoMaster
argument_list|(
name|isolatedNode
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until the master node sees all 4 nodes again.
name|ensureStableCluster
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// The elected master shouldn't have changed, since the isolated node never could have elected himself as
comment|// master since m_m_n of 3 could never be satisfied.
name|assertMaster
argument_list|(
name|masterNode
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"discovery.zen:TRACE,cluster.service:TRACE"
argument_list|)
DECL|method|isolatedUnicastNodes
specifier|public
name|void
name|isolatedUnicastNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|4
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
decl_stmt|;
comment|// Figure out what is the elected master node
specifier|final
name|String
name|unicastTarget
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|unicastTargetSide
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|unicastTargetSide
operator|.
name|add
argument_list|(
name|unicastTarget
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|restOfClusterSide
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|restOfClusterSide
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|restOfClusterSide
operator|.
name|remove
argument_list|(
name|unicastTarget
argument_list|)
expr_stmt|;
comment|// Forcefully clean temporal response lists on all nodes. Otherwise the node in the unicast host list
comment|// includes all the other nodes that have pinged it and the issue doesn't manifest
for|for
control|(
name|ZenPingService
name|pingService
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|ZenPingService
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|ZenPing
name|zenPing
range|:
name|pingService
operator|.
name|zenPings
argument_list|()
control|)
block|{
operator|(
operator|(
name|UnicastZenPing
operator|)
name|zenPing
operator|)
operator|.
name|clearTemporalResponses
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Simulate a network issue between the unicast target node and the rest of the cluster
name|NetworkDisconnectPartition
name|networkDisconnect
init|=
operator|new
name|NetworkDisconnectPartition
argument_list|(
name|unicastTargetSide
argument_list|,
name|restOfClusterSide
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|setDisruptionScheme
argument_list|(
name|networkDisconnect
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until elected master has removed that the unlucky node...
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// The isolate master node must report no master, so it starts with pinging
name|assertNoMaster
argument_list|(
name|unicastTarget
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until the master node sees all 3 nodes again.
name|ensureStableCluster
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/** Test cluster join with issues in cluster state publishing * */
annotation|@
name|Test
DECL|method|testClusterJoinDespiteOfPublishingIssues
specifier|public
name|void
name|testClusterJoinDespiteOfPublishingIssues
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|String
name|nonMasterNode
decl_stmt|;
if|if
condition|(
name|masterNode
operator|.
name|equals
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|nonMasterNode
operator|=
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonMasterNode
operator|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|DiscoveryNodes
name|discoveryNodes
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|nonMasterNode
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"blocking requests from non master [{}] to master [{}]"
argument_list|,
name|nonMasterNode
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
name|MockTransportService
name|nonMasterTransportService
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|nonMasterNode
argument_list|)
decl_stmt|;
name|nonMasterTransportService
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|discoveryNodes
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMaster
argument_list|(
name|nonMasterNode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"blocking cluster state publishing from master [{}] to non master [{}]"
argument_list|,
name|masterNode
argument_list|,
name|nonMasterNode
argument_list|)
expr_stmt|;
name|MockTransportService
name|masterTransportService
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|masterNode
argument_list|)
decl_stmt|;
name|masterTransportService
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|discoveryNodes
operator|.
name|localNode
argument_list|()
argument_list|,
name|PublishClusterStateAction
operator|.
name|ACTION_NAME
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"allowing requests from non master [{}] to master [{}], waiting for two join request"
argument_list|,
name|nonMasterNode
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nonMasterTransportService
operator|.
name|addDelegate
argument_list|(
name|discoveryNodes
operator|.
name|masterNode
argument_list|()
argument_list|,
operator|new
name|MockTransportService
operator|.
name|DelegateTransport
argument_list|(
name|nonMasterTransportService
operator|.
name|original
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|sendRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
name|MembershipAction
operator|.
name|DISCOVERY_JOIN_ACTION_NAME
argument_list|)
condition|)
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for cluster to reform"
argument_list|)
expr_stmt|;
name|masterTransportService
operator|.
name|clearRule
argument_list|(
name|discoveryNodes
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
name|nonMasterTransportService
operator|.
name|clearRule
argument_list|(
name|discoveryNodes
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterFormingWithASlowNode
specifier|public
name|void
name|testClusterFormingWithASlowNode
parameter_list|()
throws|throws
name|Exception
block|{
name|configureUnicastCluster
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|SlowClusterStateProcessing
name|disruption
init|=
operator|new
name|SlowClusterStateProcessing
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
comment|// don't wait for initial state, wat want to add the disruption while the cluster is forming..
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|3
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoveryService
operator|.
name|SETTING_INITIAL_STATE_TIMEOUT
argument_list|,
literal|"1ms"
argument_list|)
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT
argument_list|,
literal|"3s"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"applying disruption while cluster is forming ..."
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|disruption
argument_list|)
expr_stmt|;
name|disruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an asymetric break between a master and one of the nodes and makes      * sure that the node is removed form the cluster, that the node start pinging and that      * the cluster reforms when healed.      */
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"discovery.zen:TRACE,action:TRACE"
argument_list|)
DECL|method|testNodeNotReachableFromMaster
specifier|public
name|void
name|testNodeNotReachableFromMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|String
name|nonMasterNode
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|nonMasterNode
operator|==
literal|null
condition|)
block|{
name|nonMasterNode
operator|=
name|randomFrom
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonMasterNode
operator|.
name|equals
argument_list|(
name|masterNode
argument_list|)
condition|)
block|{
name|nonMasterNode
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"blocking request from master [{}] to [{}]"
argument_list|,
name|masterNode
argument_list|,
name|nonMasterNode
argument_list|)
expr_stmt|;
name|MockTransportService
name|masterTransportService
init|=
operator|(
name|MockTransportService
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|masterNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|masterTransportService
operator|.
name|addUnresponsiveRule
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|nonMasterNode
argument_list|)
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|masterTransportService
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|nonMasterNode
argument_list|)
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for [{}] to be removed from cluster"
argument_list|,
name|nonMasterNode
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for [{}] to have no master"
argument_list|,
name|nonMasterNode
argument_list|)
expr_stmt|;
name|assertNoMaster
argument_list|(
name|nonMasterNode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"healing partition and checking cluster reforms"
argument_list|)
expr_stmt|;
name|masterTransportService
operator|.
name|clearAllRules
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexImportedFromDataOnlyNodesIfMasterLostDataFolder
specifier|public
name|void
name|testIndexImportedFromDataOnlyNodesIfMasterLostDataFolder
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test for https://github.com/elastic/elasticsearch/issues/8823
name|configureUnicastCluster
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|restartNode
argument_list|(
name|masterNode
argument_list|,
operator|new
name|InternalTestCluster
operator|.
name|RestartCallback
argument_list|()
block|{
specifier|public
name|boolean
name|clearData
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// tests if indices are really deleted even if a master transition inbetween
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://github.com/elastic/elasticsearch/issues/11665"
argument_list|)
annotation|@
name|Test
DECL|method|testIndicesDeleted
specifier|public
name|void
name|testIndicesDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|configureUnicastCluster
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|masterNodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNodesAsync
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|dataNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNodeAsync
argument_list|()
decl_stmt|;
name|dataNode
operator|.
name|get
argument_list|()
expr_stmt|;
name|masterNodes
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|String
name|masterNode1
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|NetworkPartition
name|networkPartition
init|=
operator|new
name|NetworkUnresponsivePartition
argument_list|(
name|masterNode1
argument_list|,
name|dataNode
operator|.
name|get
argument_list|()
argument_list|,
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|networkPartition
argument_list|)
expr_stmt|;
name|networkPartition
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|masterNode1
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1s"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|restartNode
argument_list|(
name|masterNode1
argument_list|,
name|InternalTestCluster
operator|.
name|EMPTY_CALLBACK
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addRandomPartition
specifier|protected
name|NetworkPartition
name|addRandomPartition
parameter_list|()
block|{
name|NetworkPartition
name|partition
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|partition
operator|=
operator|new
name|NetworkUnresponsivePartition
argument_list|(
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partition
operator|=
operator|new
name|NetworkDisconnectPartition
argument_list|(
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setDisruptionScheme
argument_list|(
name|partition
argument_list|)
expr_stmt|;
return|return
name|partition
return|;
block|}
DECL|method|addRandomIsolation
specifier|protected
name|NetworkPartition
name|addRandomIsolation
parameter_list|(
name|String
name|isolatedNode
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|side1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|side2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|side1
operator|.
name|add
argument_list|(
name|isolatedNode
argument_list|)
expr_stmt|;
name|side2
operator|.
name|remove
argument_list|(
name|isolatedNode
argument_list|)
expr_stmt|;
name|NetworkPartition
name|partition
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|partition
operator|=
operator|new
name|NetworkUnresponsivePartition
argument_list|(
name|side1
argument_list|,
name|side2
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partition
operator|=
operator|new
name|NetworkDisconnectPartition
argument_list|(
name|side1
argument_list|,
name|side2
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|partition
argument_list|)
expr_stmt|;
return|return
name|partition
return|;
block|}
DECL|method|addRandomDisruptionScheme
specifier|private
name|ServiceDisruptionScheme
name|addRandomDisruptionScheme
parameter_list|()
block|{
comment|// TODO: add partial partitions
name|List
argument_list|<
name|ServiceDisruptionScheme
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|NetworkUnresponsivePartition
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NetworkDelaysPartition
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NetworkDisconnectPartition
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SlowClusterStateProcessing
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|setDisruptionScheme
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getNodeClusterState
specifier|private
name|ClusterState
name|getNodeClusterState
parameter_list|(
name|String
name|node
parameter_list|)
block|{
return|return
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
return|;
block|}
DECL|method|assertNoMaster
specifier|private
name|void
name|assertNoMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNoMaster
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoMaster
specifier|private
name|void
name|assertNoMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|,
name|TimeValue
name|maxWaitTime
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNoMaster
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
name|maxWaitTime
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoMaster
specifier|private
name|void
name|assertNoMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|ClusterBlock
name|expectedBlocks
parameter_list|,
name|TimeValue
name|maxWaitTime
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterState
name|state
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] still has ["
operator|+
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|+
literal|"] as master"
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedBlocks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|expectedBlocks
operator|.
name|levels
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] does have level ["
operator|+
name|level
operator|+
literal|"] in it's blocks"
argument_list|,
name|state
operator|.
name|getBlocks
argument_list|()
operator|.
name|hasGlobalBlock
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
name|maxWaitTime
operator|.
name|getMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDifferentMaster
specifier|private
name|void
name|assertDifferentMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|,
specifier|final
name|String
name|oldMasterNode
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClusterState
name|state
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|String
name|masterNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|masterNode
operator|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] master is [{}]"
argument_list|,
name|node
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] still has ["
operator|+
name|masterNode
operator|+
literal|"] as master"
argument_list|,
name|oldMasterNode
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|masterNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMaster
specifier|private
name|void
name|assertMaster
parameter_list|(
name|String
name|masterNode
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ClusterState
name|state
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|String
name|failMsgSuffix
init|=
literal|"cluster_state:\n"
operator|+
name|state
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"wrong node count on ["
operator|+
name|node
operator|+
literal|"]. "
operator|+
name|failMsgSuffix
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|otherMasterNodeName
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|!=
literal|null
condition|?
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|null
decl_stmt|;
name|assertThat
argument_list|(
literal|"wrong master on node ["
operator|+
name|node
operator|+
literal|"]. "
operator|+
name|failMsgSuffix
argument_list|,
name|otherMasterNodeName
argument_list|,
name|equalTo
argument_list|(
name|masterNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertDiscoveryCompleted
specifier|private
name|void
name|assertDiscoveryCompleted
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
specifier|final
name|String
name|node
range|:
name|nodes
control|)
block|{
name|assertTrue
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] is still joining master"
argument_list|,
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|!
operator|(
operator|(
name|ZenDiscovery
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|)
operator|.
name|joiningCluster
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

