begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|BlockingClusterStatePublishResponseHandlerTests
specifier|public
class|class
name|BlockingClusterStatePublishResponseHandlerTests
extends|extends
name|ESTestCase
block|{
DECL|class|PublishResponder
specifier|private
specifier|static
class|class
name|PublishResponder
extends|extends
name|AbstractRunnable
block|{
DECL|field|fail
specifier|final
name|boolean
name|fail
decl_stmt|;
DECL|field|node
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|barrier
specifier|final
name|CyclicBarrier
name|barrier
decl_stmt|;
DECL|field|logger
specifier|final
name|Logger
name|logger
decl_stmt|;
DECL|field|handler
specifier|final
name|BlockingClusterStatePublishResponseHandler
name|handler
decl_stmt|;
DECL|method|PublishResponder
specifier|public
name|PublishResponder
parameter_list|(
name|boolean
name|fail
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|,
name|CyclicBarrier
name|barrier
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|BlockingClusterStatePublishResponseHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|fail
operator|=
name|fail
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|barrier
operator|=
name|barrier
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|fail
condition|)
block|{
name|handler
operator|.
name|onFailure
argument_list|(
name|node
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"bla"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|onResponse
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testConcurrentAccess
specifier|public
name|void
name|testConcurrentAccess
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|nodeCount
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|DiscoveryNode
index|[]
name|allNodes
init|=
operator|new
name|DiscoveryNode
index|[
name|nodeCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node_"
operator|+
name|i
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|allNodes
index|[
name|i
index|]
operator|=
name|node
expr_stmt|;
block|}
name|BlockingClusterStatePublishResponseHandler
name|handler
init|=
operator|new
name|BlockingClusterStatePublishResponseHandler
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|allNodes
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|firstRound
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
name|nodeCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|firstRound
index|]
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|firstRound
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|completedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|completedNodes
operator|.
name|add
argument_list|(
name|allNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|PublishResponder
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|allNodes
index|[
name|i
index|]
argument_list|,
name|barrier
argument_list|,
name|logger
argument_list|,
name|handler
argument_list|)
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait on the threads to finish
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// verify that the publisher times out
name|assertFalse
argument_list|(
literal|"expected handler wait to timeout as not all nodes responded"
argument_list|,
name|handler
operator|.
name|awaitAllNodes
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|pendingNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|handler
operator|.
name|pendingNodes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|completedNodes
argument_list|,
name|not
argument_list|(
name|contains
argument_list|(
name|pendingNodes
operator|.
name|toArray
argument_list|(
operator|new
name|DiscoveryNode
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|completedNodes
operator|.
name|size
argument_list|()
operator|+
name|pendingNodes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|allNodes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|secondRound
init|=
name|allNodes
operator|.
name|length
operator|-
name|firstRound
decl_stmt|;
name|threads
operator|=
operator|new
name|Thread
index|[
name|secondRound
index|]
expr_stmt|;
name|barrier
operator|=
operator|new
name|CyclicBarrier
argument_list|(
name|secondRound
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|PublishResponder
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|allNodes
index|[
name|firstRound
operator|+
name|i
index|]
argument_list|,
name|barrier
argument_list|,
name|logger
argument_list|,
name|handler
argument_list|)
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait on the threads to finish
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"expected handler not to timeout as all nodes responded"
argument_list|,
name|handler
operator|.
name|awaitAllNodes
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|handler
operator|.
name|pendingNodes
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

