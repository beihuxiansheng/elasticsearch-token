begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|HotThreads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|IntermittentLongGCDisruption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|LongGCDisruption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|TwoPartitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|SingleNodeDisruption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  * Tests relating to the loss of the master.  */
end_comment

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0
argument_list|,
name|autoMinMasterNodes
operator|=
literal|false
argument_list|)
annotation|@
name|TestLogging
argument_list|(
literal|"_root:DEBUG,org.elasticsearch.cluster.service:TRACE"
argument_list|)
DECL|class|MasterDisruptionIT
specifier|public
class|class
name|MasterDisruptionIT
extends|extends
name|AbstractDisruptionTestCase
block|{
comment|/**      * Test that no split brain occurs under partial network partition. See https://github.com/elastic/elasticsearch/issues/2488      */
DECL|method|testFailWithMinimumMasterNodesConfigured
specifier|public
name|void
name|testFailWithMinimumMasterNodesConfigured
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Figure out what is the elected master node
specifier|final
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"---> legit elected master node={}"
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
comment|// Pick a node that isn't the elected master.
name|Set
argument_list|<
name|String
argument_list|>
name|nonMasters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|nonMasters
operator|.
name|remove
argument_list|(
name|masterNode
argument_list|)
expr_stmt|;
specifier|final
name|String
name|unluckyNode
init|=
name|randomFrom
argument_list|(
name|nonMasters
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
decl_stmt|;
comment|// Simulate a network issue between the unlucky node and elected master node in both directions.
name|NetworkDisruption
name|networkDisconnect
init|=
operator|new
name|NetworkDisruption
argument_list|(
operator|new
name|NetworkDisruption
operator|.
name|TwoPartitions
argument_list|(
name|masterNode
argument_list|,
name|unluckyNode
argument_list|)
argument_list|,
operator|new
name|NetworkDisruption
operator|.
name|NetworkDisconnect
argument_list|()
argument_list|)
decl_stmt|;
name|setDisruptionScheme
argument_list|(
name|networkDisconnect
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until elected master has removed that the unlucky node...
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|masterNode
argument_list|)
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|assertNoMaster
argument_list|(
name|unluckyNode
argument_list|)
expr_stmt|;
name|networkDisconnect
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until the master node sees all 3 nodes again.
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// The elected master shouldn't have changed, since the unlucky node never could have elected himself as
comment|// master since m_m_n of 2 could never be satisfied.
name|assertMaster
argument_list|(
name|masterNode
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify that nodes fault detection works after master (re) election      */
DECL|method|testNodesFDAfterMasterReelection
specifier|public
name|void
name|testNodesFDAfterMasterReelection
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> stopping current master"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> reducing min master nodes to 2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ElectMasterService
operator|.
name|DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|master
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|String
name|nonMaster
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|master
argument_list|)
condition|)
block|{
name|nonMaster
operator|=
name|node
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> isolating [{}]"
argument_list|,
name|nonMaster
argument_list|)
expr_stmt|;
name|NetworkDisruption
operator|.
name|TwoPartitions
name|partitions
init|=
name|isolateNode
argument_list|(
name|nonMaster
argument_list|)
decl_stmt|;
name|NetworkDisruption
name|networkDisruption
init|=
name|addRandomDisruptionType
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|networkDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for master to remove it"
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|master
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that emulates a frozen elected master node that unfreezes and pushes his cluster state to other nodes      * that already are following another elected master node. These nodes should reject this cluster state and prevent      * them from following the stale master.      */
annotation|@
name|TestLogging
argument_list|(
literal|"_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE"
argument_list|)
DECL|method|testStaleMasterNotHijackingMajority
specifier|public
name|void
name|testStaleMasterNotHijackingMajority
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 3 node cluster with unicast discovery and minimum_master_nodes set to 2:
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Save the current master node as old master node, because that node will get frozen
specifier|final
name|String
name|oldMasterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|assertMaster
argument_list|(
name|oldMasterNode
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
comment|// Simulating a painful gc by suspending all threads for a long time on the current elected master node.
name|SingleNodeDisruption
name|masterNodeDisruption
init|=
operator|new
name|LongGCDisruption
argument_list|(
name|random
argument_list|()
argument_list|,
name|oldMasterNode
argument_list|)
decl_stmt|;
comment|// Save the majority side
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|majoritySide
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|majoritySide
operator|.
name|remove
argument_list|(
name|oldMasterNode
argument_list|)
expr_stmt|;
comment|// Keeps track of the previous and current master when a master node transition took place on each node on the majority side:
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|masters
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|node
range|:
name|majoritySide
control|)
block|{
name|masters
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|.
name|addListener
argument_list|(
name|event
lambda|->
block|{
name|DiscoveryNode
name|previousMaster
init|=
name|event
operator|.
name|previousState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|currentMaster
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|previousMaster
argument_list|,
name|currentMaster
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"node {} received new cluster state: {} \n and had previous cluster state: {}"
argument_list|,
name|node
argument_list|,
name|event
operator|.
name|state
argument_list|()
argument_list|,
name|event
operator|.
name|previousState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|previousMasterNodeName
init|=
name|previousMaster
operator|!=
literal|null
condition|?
name|previousMaster
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|currentMasterNodeName
init|=
name|currentMaster
operator|!=
literal|null
condition|?
name|currentMaster
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|masters
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|previousMasterNodeName
argument_list|,
name|currentMasterNodeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|oldMasterNodeSteppedDown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|oldMasterNode
argument_list|)
operator|.
name|addListener
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|oldMasterNodeSteppedDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|masterNodeDisruption
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"freezing node [{}]"
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
name|masterNodeDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// Wait for the majority side to get stable
name|assertDifferentMaster
argument_list|(
name|majoritySide
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
name|assertDifferentMaster
argument_list|(
name|majoritySide
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
comment|// the test is periodically tripping on the following assertion. To find out which threads are blocking the nodes from making
comment|// progress we print a stack dump
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
try|try
block|{
name|assertDiscoveryCompleted
argument_list|(
name|majoritySide
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"discovery failed to complete, probably caused by a blocked thread: {}"
argument_list|,
operator|new
name|HotThreads
argument_list|()
operator|.
name|busiestThreads
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|ignoreIdleThreads
argument_list|(
literal|false
argument_list|)
operator|.
name|detect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The old master node is frozen, but here we submit a cluster state update task that doesn't get executed,
comment|// but will be queued and once the old master node un-freezes it gets executed.
comment|// The old master node will send this update + the cluster state where he is flagged as master to the other
comment|// nodes that follow the new master. These nodes should ignore this update.
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|oldMasterNode
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"sneaky-update"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|(
name|Priority
operator|.
name|IMMEDIATE
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"failure [{}]"
argument_list|,
name|source
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Save the new elected master node
specifier|final
name|String
name|newMasterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|(
name|majoritySide
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"new detected master node [{}]"
argument_list|,
name|newMasterNode
argument_list|)
expr_stmt|;
comment|// Stop disruption
name|logger
operator|.
name|info
argument_list|(
literal|"Unfreeze node [{}]"
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
name|masterNodeDisruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|oldMasterNodeSteppedDown
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Make sure that the end state is consistent on all nodes:
name|assertDiscoveryCompleted
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|assertMaster
argument_list|(
name|newMasterNode
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|masters
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|masters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nodeName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|recordedMasterTransition
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] Each node should only record two master node transitions"
argument_list|,
name|recordedMasterTransition
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] First transition's previous master should be [null]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|v1
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|oldMasterNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] First transition's current master should be ["
operator|+
name|newMasterNode
operator|+
literal|"]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|v2
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] Second transition's previous master should be [null]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|v1
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"] Second transition's current master should be ["
operator|+
name|newMasterNode
operator|+
literal|"]"
argument_list|,
name|recordedMasterTransition
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|v2
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newMasterNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that cluster recovers from a long GC on master that causes other nodes to elect a new one      */
DECL|method|testMasterNodeGCs
specifier|public
name|void
name|testMasterNodeGCs
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|oldMasterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
comment|// a very long GC, but it's OK as we remove the disruption when it has had an effect
name|SingleNodeDisruption
name|masterNodeDisruption
init|=
operator|new
name|IntermittentLongGCDisruption
argument_list|(
name|random
argument_list|()
argument_list|,
name|oldMasterNode
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|30000
argument_list|,
literal|60000
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|masterNodeDisruption
argument_list|)
expr_stmt|;
name|masterNodeDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|oldNonMasterNodesSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|oldNonMasterNodesSet
operator|.
name|remove
argument_list|(
name|oldMasterNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oldNonMasterNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldNonMasterNodesSet
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for nodes to de-elect master [{}]"
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|oldNonMasterNodesSet
control|)
block|{
name|assertDifferentMaster
argument_list|(
name|node
argument_list|,
name|oldMasterNode
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for nodes to elect a new master"
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|oldNonMasterNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for any pinging to stop"
argument_list|)
expr_stmt|;
name|assertDiscoveryCompleted
argument_list|(
name|oldNonMasterNodes
argument_list|)
expr_stmt|;
comment|// restore GC
name|masterNodeDisruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
specifier|final
name|TimeValue
name|waitTime
init|=
operator|new
name|TimeValue
argument_list|(
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
operator|+
name|masterNodeDisruption
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
decl_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
name|waitTime
argument_list|,
literal|false
argument_list|,
name|oldNonMasterNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure all nodes agree on master
name|String
name|newMaster
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|newMaster
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|oldMasterNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMaster
argument_list|(
name|newMaster
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test isolates the master from rest of the cluster, waits for a new master to be elected, restores the partition      * and verifies that all node agree on the new cluster state      */
annotation|@
name|TestLogging
argument_list|(
literal|"_root:DEBUG,"
operator|+
literal|"org.elasticsearch.cluster.service:TRACE,"
operator|+
literal|"org.elasticsearch.gateway:TRACE,"
operator|+
literal|"org.elasticsearch.indices.store:TRACE"
argument_list|)
DECL|method|testIsolateMasterAndVerifyClusterStateConsensus
specifier|public
name|void
name|testIsolateMasterAndVerifyClusterStateConsensus
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|isolatedNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|TwoPartitions
name|partitions
init|=
name|isolateNode
argument_list|(
name|isolatedNode
argument_list|)
decl_stmt|;
name|NetworkDisruption
name|networkDisruption
init|=
name|addRandomDisruptionType
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|networkDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|String
name|nonIsolatedNode
init|=
name|partitions
operator|.
name|getMajoritySide
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// make sure cluster reforms
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|nonIsolatedNode
argument_list|)
expr_stmt|;
comment|// make sure isolated need picks up on things.
name|assertNoMaster
argument_list|(
name|isolatedNode
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
comment|// restore isolation
name|networkDisruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
operator|+
name|networkDisruption
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"issue a reroute"
argument_list|)
expr_stmt|;
comment|// trigger a reroute now, instead of waiting for the background reroute of RerouteService
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
argument_list|)
expr_stmt|;
comment|// and wait for it to finish and for the cluster to stabilize
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// verify all cluster states are the same
comment|// use assert busy to wait for cluster states to be applied (as publish_timeout has low value)
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|state
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ClusterState
name|nodeState
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|nodeState
expr_stmt|;
continue|continue;
block|}
comment|// assert nodes are identical
try|try
block|{
name|assertEquals
argument_list|(
literal|"unequal versions"
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|nodeState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unequal node count"
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
name|nodeState
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"different masters "
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
argument_list|,
name|nodeState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"different meta data version"
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
argument_list|,
name|nodeState
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"different routing"
argument_list|,
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|nodeState
operator|.
name|routingTable
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed comparing cluster state: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"--- cluster state of node ["
operator|+
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"]: ---\n"
operator|+
name|state
operator|+
literal|"\n--- cluster state ["
operator|+
name|node
operator|+
literal|"]: ---\n"
operator|+
name|nodeState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify that the proper block is applied when nodes loose their master      */
DECL|method|testVerifyApiBlocksDuringPartition
specifier|public
name|void
name|testVerifyApiBlocksDuringPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Makes sure that the get request can be executed on each node locally:
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Everything is stable now, it is now time to simulate evil...
comment|// but first make sure we have no initializing shards and all is green
comment|// (waiting for green here, because indexing / search in a yellow index is fine as long as no other nodes go down)
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|TwoPartitions
name|partitions
init|=
name|TwoPartitions
operator|.
name|random
argument_list|(
name|random
argument_list|()
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
decl_stmt|;
name|NetworkDisruption
name|networkDisruption
init|=
name|addRandomDisruptionType
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|getMinoritySide
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|isolatedNode
init|=
name|partitions
operator|.
name|getMinoritySide
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitions
operator|.
name|getMajoritySide
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|nonIsolatedNode
init|=
name|partitions
operator|.
name|getMajoritySide
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Simulate a network issue between the unlucky node and the rest of the cluster.
name|networkDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for isolated node [{}] to have no master"
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|assertNoMaster
argument_list|(
name|isolatedNode
argument_list|,
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"wait until elected master has been removed and a new 2 node cluster was from (via [{}])"
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|nonIsolatedNode
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|partitions
operator|.
name|getMajoritySide
argument_list|()
control|)
block|{
name|ClusterState
name|nodeState
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|nodeState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nodeState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|fail
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] has no master or has blocks, despite of being on the right side of the partition. State dump:\n"
operator|+
name|nodeState
argument_list|)
expr_stmt|;
block|}
block|}
name|networkDisruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
comment|// Wait until the master node sees al 3 nodes again.
name|ensureStableCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
operator|+
name|networkDisruption
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Verify no master block with {} set to {}"
argument_list|,
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"all"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|networkDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for isolated node [{}] to have no master"
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|assertNoMaster
argument_list|(
name|isolatedNode
argument_list|,
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_ALL
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we have stable cluster& cross partition recoveries are canceled by the removal of the missing node
comment|// the unresponsive partition causes recoveries to only time out after 15m (default) and these will cause
comment|// the test to fail due to unfreed resources
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|nonIsolatedNode
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDiscoveryCompleted
name|void
name|assertDiscoveryCompleted
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
specifier|final
name|String
name|node
range|:
name|nodes
control|)
block|{
name|assertTrue
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] is still joining master"
argument_list|,
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
operator|!
operator|(
operator|(
name|ZenDiscovery
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|)
operator|.
name|joiningCluster
argument_list|()
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

