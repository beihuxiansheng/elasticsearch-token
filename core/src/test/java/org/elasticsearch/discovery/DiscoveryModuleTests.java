begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModuleTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|UnicastHostsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|DiscoveryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|NoopDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_class
DECL|class|DiscoveryModuleTests
specifier|public
class|class
name|DiscoveryModuleTests
extends|extends
name|ModuleTestCase
block|{
DECL|interface|DummyDiscoPlugin
specifier|public
interface|interface
name|DummyDiscoPlugin
extends|extends
name|DiscoveryPlugin
block|{
DECL|method|impl
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|UnicastHostsProvider
argument_list|>
argument_list|>
name|impl
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getZenHostsProviders
specifier|default
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|UnicastHostsProvider
argument_list|>
argument_list|>
name|getZenHostsProviders
parameter_list|(
name|TransportService
name|transportService
parameter_list|,
name|NetworkService
name|networkService
parameter_list|)
block|{
return|return
name|impl
argument_list|()
return|;
block|}
block|}
DECL|method|testRegisterDefaults
specifier|public
name|void
name|testRegisterDefaults
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
name|DiscoveryModule
name|module
init|=
operator|new
name|DiscoveryModule
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|assertBinding
argument_list|(
name|module
argument_list|,
name|Discovery
operator|.
name|class
argument_list|,
name|ZenDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterDiscovery
specifier|public
name|void
name|testRegisterDiscovery
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DummyDiscoPlugin
name|plugin
init|=
parameter_list|()
lambda|->
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"custom"
argument_list|,
parameter_list|()
lambda|->
name|Collections
operator|::
name|emptyList
argument_list|)
decl_stmt|;
name|DiscoveryModule
name|module
init|=
operator|new
name|DiscoveryModule
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|plugin
argument_list|)
argument_list|)
decl_stmt|;
name|module
operator|.
name|addDiscoveryType
argument_list|(
literal|"custom"
argument_list|,
name|NoopDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBinding
argument_list|(
name|module
argument_list|,
name|Discovery
operator|.
name|class
argument_list|,
name|NoopDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testHostsProvider
specifier|public
name|void
name|testHostsProvider
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_HOSTS_PROVIDER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|UnicastHostsProvider
name|provider
init|=
name|Collections
operator|::
name|emptyList
decl_stmt|;
name|DummyDiscoPlugin
name|plugin
init|=
parameter_list|()
lambda|->
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"custom"
argument_list|,
parameter_list|()
lambda|->
name|provider
argument_list|)
decl_stmt|;
name|DiscoveryModule
name|module
init|=
operator|new
name|DiscoveryModule
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|plugin
argument_list|)
argument_list|)
decl_stmt|;
name|assertInstanceBinding
argument_list|(
name|module
argument_list|,
name|UnicastHostsProvider
operator|.
name|class
argument_list|,
name|instance
lambda|->
name|instance
operator|==
name|provider
argument_list|)
expr_stmt|;
block|}
DECL|method|testHostsProviderBwc
specifier|public
name|void
name|testHostsProviderBwc
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"custom"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|UnicastHostsProvider
name|provider
init|=
name|Collections
operator|::
name|emptyList
decl_stmt|;
name|DummyDiscoPlugin
name|plugin
init|=
parameter_list|()
lambda|->
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"custom"
argument_list|,
parameter_list|()
lambda|->
name|provider
argument_list|)
decl_stmt|;
name|DiscoveryModule
name|module
init|=
operator|new
name|DiscoveryModule
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|plugin
argument_list|)
argument_list|)
decl_stmt|;
name|module
operator|.
name|addDiscoveryType
argument_list|(
literal|"custom"
argument_list|,
name|NoopDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertInstanceBinding
argument_list|(
name|module
argument_list|,
name|UnicastHostsProvider
operator|.
name|class
argument_list|,
name|instance
lambda|->
name|instance
operator|==
name|provider
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownHostsProvider
specifier|public
name|void
name|testUnknownHostsProvider
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_HOSTS_PROVIDER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"dne"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|DiscoveryModule
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown zen hosts provider [dne]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuplicateHostsProvider
specifier|public
name|void
name|testDuplicateHostsProvider
parameter_list|()
block|{
name|DummyDiscoPlugin
name|plugin1
init|=
parameter_list|()
lambda|->
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"dup"
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|)
decl_stmt|;
name|DummyDiscoPlugin
name|plugin2
init|=
parameter_list|()
lambda|->
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"dup"
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|)
decl_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|DiscoveryModule
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|plugin1
argument_list|,
name|plugin2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot specify zen hosts provider [dup] twice"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

