begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|NoShardAvailableActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|Murmur3HashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
operator|.
name|IndicesStoreIntegrationIT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|Bridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|NetworkDisconnect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|NetworkLinkDisruptionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|TwoPartitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|ServiceDisruptionScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_comment
comment|/**  * Tests various cluster operations (e.g., indexing) during disruptions.  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0
argument_list|,
name|autoMinMasterNodes
operator|=
literal|false
argument_list|)
annotation|@
name|TestLogging
argument_list|(
literal|"_root:DEBUG,org.elasticsearch.cluster.service:TRACE"
argument_list|)
DECL|class|ClusterDisruptionIT
specifier|public
class|class
name|ClusterDisruptionIT
extends|extends
name|AbstractDisruptionTestCase
block|{
comment|/**      * Test that we do not loose document whose indexing request was successful, under a randomly selected disruption scheme      * We also collect&amp; report the type of indexing failures that occur.      *<p>      * This test is a superset of tests run in the Jepsen test suite, with the exception of versioned updates      */
annotation|@
name|TestLogging
argument_list|(
literal|"_root:DEBUG,org.elasticsearch.action.bulk:TRACE,org.elasticsearch.action.get:TRACE,discovery:TRACE,"
operator|+
literal|"org.elasticsearch.cluster.service:TRACE,org.elasticsearch.indices.recovery:TRACE,"
operator|+
literal|"org.elasticsearch.indices.cluster:TRACE,org.elasticsearch.index.shard:TRACE"
argument_list|)
DECL|method|testAckedIndexing
specifier|public
name|void
name|testAckedIndexing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|seconds
init|=
operator|!
operator|(
name|TEST_NIGHTLY
operator|&&
name|rarely
argument_list|()
operator|)
condition|?
literal|1
else|:
literal|5
decl_stmt|;
specifier|final
name|String
name|timeout
init|=
name|seconds
operator|+
literal|"s"
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
name|rarely
argument_list|()
condition|?
literal|5
else|:
literal|3
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|randomInt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|ServiceDisruptionScheme
name|disruptionScheme
init|=
name|addRandomDisruptionScheme
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"disruption scheme [{}] added"
argument_list|,
name|disruptionScheme
argument_list|)
expr_stmt|;
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ackedDocs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// id -> node sent.
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|indexers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Semaphore
argument_list|>
name|semaphores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|idGenerator
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|countDownLatchRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptedExceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"starting indexers"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|String
name|node
range|:
name|nodes
control|)
block|{
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|semaphores
operator|.
name|add
argument_list|(
name|semaphore
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
name|client
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"indexer_"
operator|+
name|indexers
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numPrimaries
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
operator|.
name|numPrimaries
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] Acquired semaphore and it has {} permits left"
argument_list|,
name|name
argument_list|,
name|semaphore
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|shard
init|=
name|Math
operator|.
name|floorMod
argument_list|(
name|Murmur3HashFunction
operator|.
name|hash
argument_list|(
name|id
argument_list|)
argument_list|,
name|numPrimaries
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] indexing id [{}] through node [{}] targeting shard [{}]"
argument_list|,
name|name
argument_list|,
name|id
argument_list|,
name|node
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|IndexResponse
name|response
init|=
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|get
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DocWriteResponse
operator|.
name|Result
operator|.
name|CREATED
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|ackedDocs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] indexed id [{}] through node [{}]"
argument_list|,
name|name
argument_list|,
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
name|exceptedExceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
specifier|final
name|String
name|docId
init|=
name|id
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"[{}] failed id [{}] through node [{}]"
argument_list|,
name|name
argument_list|,
name|docId
argument_list|,
name|node
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] decreased counter : {}"
argument_list|,
name|name
argument_list|,
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// fine - semaphore interrupt
block|}
catch|catch
parameter_list|(
name|AssertionError
decl||
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"unexpected exception in background thread of [{}]"
argument_list|,
name|node
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|indexers
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|int
name|docsPerIndexer
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing {} docs per indexer before partition"
argument_list|,
name|docsPerIndexer
argument_list|)
expr_stmt|;
name|countDownLatchRef
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
name|docsPerIndexer
operator|*
name|indexers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Semaphore
name|semaphore
range|:
name|semaphores
control|)
block|{
name|semaphore
operator|.
name|release
argument_list|(
name|docsPerIndexer
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|2
argument_list|)
init|;
name|iter
operator|>
literal|0
condition|;
name|iter
operator|--
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"starting disruptions& indexing (iteration [{}])"
argument_list|,
name|iter
argument_list|)
expr_stmt|;
name|disruptionScheme
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|docsPerIndexer
operator|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing {} docs per indexer during partition"
argument_list|,
name|docsPerIndexer
argument_list|)
expr_stmt|;
name|countDownLatchRef
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
name|docsPerIndexer
operator|*
name|indexers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|semaphores
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Semaphore
name|semaphore
range|:
name|semaphores
control|)
block|{
name|assertThat
argument_list|(
name|semaphore
operator|.
name|availablePermits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|(
name|docsPerIndexer
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"waiting for indexing requests to complete"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|countDownLatchRef
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|(
name|docsPerIndexer
operator|*
name|seconds
operator|*
literal|1000
operator|+
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"stopping disruption"
argument_list|)
expr_stmt|;
name|disruptionScheme
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
name|ensureStableCluster
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|disruptionScheme
operator|.
name|expectedTimeToHeal
argument_list|()
operator|.
name|millis
argument_list|()
operator|+
name|DISRUPTION_HEALING_OVERHEAD
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// in case of a bridge partition, shard allocation can fail "index.allocation.max_retries" times if the master
comment|// is the super-connected node and recovery source and target are on opposite sides of the bridge
if|if
condition|(
name|disruptionScheme
operator|instanceof
name|NetworkDisruption
operator|&&
operator|(
operator|(
name|NetworkDisruption
operator|)
name|disruptionScheme
operator|)
operator|.
name|getDisruptedLinks
argument_list|()
operator|instanceof
name|Bridge
condition|)
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|setRetryFailed
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"validating successful docs"
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"validating through node [{}] ([{}] acked docs)"
argument_list|,
name|node
argument_list|,
name|ackedDocs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ackedDocs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"doc ["
operator|+
name|id
operator|+
literal|"] indexed via node ["
operator|+
name|ackedDocs
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|+
literal|"] not found"
argument_list|,
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|id
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
decl||
name|NoShardAvailableActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" (checked via node ["
operator|+
name|node
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"done validating (iteration [{}])"
argument_list|,
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|exceptedExceptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Exception
name|e
range|:
name|exceptedExceptions
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Indexing exceptions during disruption: {}"
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"shutting down indexers"
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|indexer
range|:
name|indexers
control|)
block|{
name|indexer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|indexer
operator|.
name|join
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Test that a document which is indexed on the majority side of a partition, is available from the minority side,      * once the partition is healed      */
DECL|method|testRejoinDocumentExistsInAllShardCopies
specifier|public
name|void
name|testRejoinDocumentExistsInAllShardCopies
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|isolatedNode
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|notIsolatedNode
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TwoPartitions
name|partitions
init|=
name|isolateNode
argument_list|(
name|isolatedNode
argument_list|)
decl_stmt|;
name|NetworkDisruption
name|scheme
init|=
name|addRandomDisruptionType
argument_list|(
name|partitions
argument_list|)
decl_stmt|;
name|scheme
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|notIsolatedNode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|IndexResponse
name|indexResponse
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Verifying if document exists via node[{}]"
argument_list|,
name|notIsolatedNode
argument_list|)
expr_stmt|;
name|GetResponse
name|getResponse
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scheme
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Verifying if document exists after isolating node[{}] via node[{}]"
argument_list|,
name|isolatedNode
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// simulate handling of sending shard failure during an isolation
DECL|method|testSendingShardFailure
specifier|public
name|void
name|testSendingShardFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|startCluster
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nonMasterNodes
init|=
name|nodes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|node
lambda|->
operator|!
name|node
operator|.
name|equals
argument_list|(
name|masterNode
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nonMasterNode
init|=
name|randomFrom
argument_list|(
name|nonMasterNodes
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|nonMasterNodeId
init|=
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|(
name|nonMasterNode
argument_list|)
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// fail a random shard
name|ShardRouting
name|failedShard
init|=
name|randomFrom
argument_list|(
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nonMasterNodeId
argument_list|)
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
decl_stmt|;
name|ShardStateAction
name|service
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ShardStateAction
operator|.
name|class
argument_list|,
name|nonMasterNode
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|success
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|String
name|isolatedNode
init|=
name|randomBoolean
argument_list|()
condition|?
name|masterNode
else|:
name|nonMasterNode
decl_stmt|;
name|TwoPartitions
name|partitions
init|=
name|isolateNode
argument_list|(
name|isolatedNode
argument_list|)
decl_stmt|;
comment|// we cannot use the NetworkUnresponsive disruption type here as it will swallow the "shard failed" request, calling neither
comment|// onSuccess nor onFailure on the provided listener.
name|NetworkLinkDisruptionType
name|disruptionType
init|=
operator|new
name|NetworkDisconnect
argument_list|()
decl_stmt|;
name|NetworkDisruption
name|networkDisruption
init|=
operator|new
name|NetworkDisruption
argument_list|(
name|partitions
argument_list|,
name|disruptionType
argument_list|)
decl_stmt|;
name|setDisruptionScheme
argument_list|(
name|networkDisruption
argument_list|)
expr_stmt|;
name|networkDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|service
operator|.
name|localShardFailed
argument_list|(
name|failedShard
argument_list|,
literal|"simulated"
argument_list|,
operator|new
name|CorruptIndexException
argument_list|(
literal|"simulated"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|,
operator|new
name|ShardStateAction
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|success
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|success
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
assert|assert
literal|false
assert|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|isolatedNode
operator|.
name|equals
argument_list|(
name|nonMasterNode
argument_list|)
condition|)
block|{
name|assertNoMaster
argument_list|(
name|nonMasterNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ensureStableCluster
argument_list|(
literal|2
argument_list|,
name|nonMasterNode
argument_list|)
expr_stmt|;
block|}
comment|// heal the partition
name|networkDisruption
operator|.
name|removeAndEnsureHealthy
argument_list|(
name|internalCluster
argument_list|()
argument_list|)
expr_stmt|;
comment|// the cluster should stabilize
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// the listener should be notified
name|assertTrue
argument_list|(
name|success
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// the failed shard should be gone
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
init|=
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
name|assertThat
argument_list|(
name|shard
operator|.
name|allocationId
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|failedShard
operator|.
name|allocationId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This test creates a scenario where a primary shard (0 replicas) relocates and is in POST_RECOVERY on the target      * node but already deleted on the source node. Search request should still work.      */
DECL|method|testSearchWithRelocationAndSlowClusterStateProcessing
specifier|public
name|void
name|testSearchWithRelocationAndSlowClusterStateProcessing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// don't use DEFAULT settings (which can cause node disconnects on a slow CI machine)
name|configureCluster
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNode
argument_list|()
decl_stmt|;
specifier|final
name|String
name|node_1
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating index [test] with one shard and on replica"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node_2
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexRequestBuilderList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|indexRequestBuilderList
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"int_field\":1}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequestBuilderList
argument_list|)
expr_stmt|;
name|IndicesStoreIntegrationIT
operator|.
name|relocateAndBlockCompletion
argument_list|(
name|logger
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|,
name|node_1
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
comment|// now search for the documents and see if we get a reply
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexImportedFromDataOnlyNodesIfMasterLostDataFolder
specifier|public
name|void
name|testIndexImportedFromDataOnlyNodesIfMasterLostDataFolder
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test for https://github.com/elastic/elasticsearch/issues/8823
name|configureCluster
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|masterNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ensureStableCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|restartNode
argument_list|(
name|masterNode
argument_list|,
operator|new
name|InternalTestCluster
operator|.
name|RestartCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|clearData
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that indices are properly deleted even if there is a master transition in between.      * Test for https://github.com/elastic/elasticsearch/issues/11665      */
DECL|method|testIndicesDeleted
specifier|public
name|void
name|testIndicesDeleted
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DEFAULT_SETTINGS
argument_list|)
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"0s"
argument_list|)
comment|// don't wait on isolated data node
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|COMMIT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"30s"
argument_list|)
comment|// wait till cluster state is committed
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|idxName
init|=
literal|"test"
decl_stmt|;
name|configureCluster
argument_list|(
name|settings
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allMasterEligibleNodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startMasterOnlyNodes
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dataNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|()
decl_stmt|;
name|ensureStableCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|masterNode1
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|NetworkDisruption
name|networkDisruption
init|=
operator|new
name|NetworkDisruption
argument_list|(
operator|new
name|TwoPartitions
argument_list|(
name|masterNode1
argument_list|,
name|dataNode
argument_list|)
argument_list|,
operator|new
name|NetworkDisruption
operator|.
name|NetworkUnresponsive
argument_list|()
argument_list|)
decl_stmt|;
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|networkDisruption
argument_list|)
expr_stmt|;
name|networkDisruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
comment|// We know this will time out due to the partition, we check manually below to not proceed until
comment|// the delete has been applied to the master node and the master eligible node.
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|masterNode1
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|idxName
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"0s"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Don't restart the master node until we know the index deletion has taken effect on master and the master eligible node.
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|String
name|masterNode
range|:
name|allMasterEligibleNodes
control|)
block|{
specifier|final
name|ClusterState
name|masterState
init|=
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|(
name|masterNode
argument_list|)
operator|.
name|state
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"index not deleted on "
operator|+
name|masterNode
argument_list|,
name|masterState
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|idxName
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|restartNode
argument_list|(
name|masterNode1
argument_list|,
name|InternalTestCluster
operator|.
name|EMPTY_CALLBACK
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
name|idxName
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

