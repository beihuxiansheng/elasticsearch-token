begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.single
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|single
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createMasterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|SingleNodeDiscoveryTests
specifier|public
class|class
name|SingleNodeDiscoveryTests
extends|extends
name|ESTestCase
block|{
DECL|method|testInitialJoin
specifier|public
name|void
name|testInitialJoin
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|EMPTY
decl_stmt|;
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|ThreadPool
name|threadPool
init|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Stack
argument_list|<
name|Closeable
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|MockTransportService
name|transportService
init|=
name|MockTransportService
operator|.
name|createNewService
argument_list|(
name|settings
argument_list|,
name|version
argument_list|,
name|threadPool
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|DiscoveryNode
name|node
init|=
name|transportService
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
specifier|final
name|MasterService
name|masterService
init|=
name|createMasterService
argument_list|(
name|threadPool
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|ClusterState
argument_list|>
name|clusterState
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SingleNodeDiscovery
name|discovery
init|=
operator|new
name|SingleNodeDiscovery
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transportService
argument_list|,
name|masterService
argument_list|,
operator|new
name|ClusterApplier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setInitialState
parameter_list|(
name|ClusterState
name|initialState
parameter_list|)
block|{
name|clusterState
operator|.
name|set
argument_list|(
name|initialState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|String
name|source
parameter_list|,
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
parameter_list|,
name|ClusterStateTaskListener
name|listener
parameter_list|)
block|{
name|clusterState
operator|.
name|set
argument_list|(
name|clusterStateSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|clusterStateProcessed
argument_list|(
name|source
argument_list|,
name|clusterState
operator|.
name|get
argument_list|()
argument_list|,
name|clusterState
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|discovery
operator|.
name|start
argument_list|()
expr_stmt|;
name|discovery
operator|.
name|startInitialJoin
argument_list|()
expr_stmt|;
specifier|final
name|DiscoveryNodes
name|nodes
init|=
name|clusterState
operator|.
name|get
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodes
operator|.
name|getSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodes
operator|.
name|getMasterNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|stack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

