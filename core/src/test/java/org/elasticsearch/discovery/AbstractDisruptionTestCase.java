begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|FaultDetection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|UnicastZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|discovery
operator|.
name|ClusterDiscoveryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|discovery
operator|.
name|TestZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|Bridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|DisruptedLinks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|NetworkDisconnect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|NetworkLinkDisruptionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|TwoPartitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|ServiceDisruptionScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|SlowClusterStateProcessing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|AbstractDisruptionTestCase
specifier|public
specifier|abstract
class|class
name|AbstractDisruptionTestCase
extends|extends
name|ESIntegTestCase
block|{
DECL|field|DISRUPTION_HEALING_OVERHEAD
specifier|static
specifier|final
name|TimeValue
name|DISRUPTION_HEALING_OVERHEAD
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|40
argument_list|)
decl_stmt|;
comment|// we use 30s as timeout in many places.
DECL|field|discoveryConfig
specifier|private
name|ClusterDiscoveryConfiguration
name|discoveryConfig
decl_stmt|;
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|discoveryConfig
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TestZenDiscovery
operator|.
name|USE_MOCK_PINGS
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|clearConfig
specifier|public
name|void
name|clearConfig
parameter_list|()
block|{
name|discoveryConfig
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|numberOfShards
specifier|protected
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
DECL|method|numberOfReplicas
specifier|protected
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|field|disableBeforeIndexDeletion
specifier|private
name|boolean
name|disableBeforeIndexDeletion
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|disableBeforeIndexDeletion
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDisruptionScheme
specifier|public
name|void
name|setDisruptionScheme
parameter_list|(
name|ServiceDisruptionScheme
name|scheme
parameter_list|)
block|{
if|if
condition|(
name|scheme
operator|instanceof
name|NetworkDisruption
operator|&&
operator|(
operator|(
name|NetworkDisruption
operator|)
name|scheme
operator|)
operator|.
name|getNetworkLinkDisruptionType
argument_list|()
operator|instanceof
name|NetworkDisruption
operator|.
name|NetworkUnresponsive
condition|)
block|{
comment|// the network unresponsive disruption may leave operations in flight
comment|// this is because this disruption scheme swallows requests by design
comment|// as such, these operations will never be marked as finished
name|disableBeforeIndexDeletion
operator|=
literal|true
expr_stmt|;
block|}
name|super
operator|.
name|setDisruptionScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeIndexDeletion
specifier|protected
name|void
name|beforeIndexDeletion
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|disableBeforeIndexDeletion
operator|==
literal|false
condition|)
block|{
name|super
operator|.
name|beforeIndexDeletion
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startCluster
name|List
argument_list|<
name|String
argument_list|>
name|startCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
return|return
name|startCluster
argument_list|(
name|numberOfNodes
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|startCluster
name|List
argument_list|<
name|String
argument_list|>
name|startCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|,
name|int
name|minimumMasterNode
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
return|return
name|startCluster
argument_list|(
name|numberOfNodes
argument_list|,
name|minimumMasterNode
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|startCluster
name|List
argument_list|<
name|String
argument_list|>
name|startCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|,
name|int
name|minimumMasterNode
parameter_list|,
annotation|@
name|Nullable
name|int
index|[]
name|unicastHostsOrdinals
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|configureCluster
argument_list|(
name|numberOfNodes
argument_list|,
name|unicastHostsOrdinals
argument_list|,
name|minimumMasterNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodes
argument_list|(
name|numberOfNodes
argument_list|)
decl_stmt|;
name|ensureStableCluster
argument_list|(
name|numberOfNodes
argument_list|)
expr_stmt|;
comment|// TODO: this is a temporary solution so that nodes will not base their reaction to a partition based on previous successful results
name|ZenPing
name|zenPing
init|=
operator|(
operator|(
name|TestZenDiscovery
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getZenPing
argument_list|()
decl_stmt|;
if|if
condition|(
name|zenPing
operator|instanceof
name|UnicastZenPing
condition|)
block|{
operator|(
operator|(
name|UnicastZenPing
operator|)
name|zenPing
operator|)
operator|.
name|clearTemporalResponses
argument_list|()
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
DECL|field|DEFAULT_SETTINGS
specifier|static
specifier|final
name|Settings
name|DEFAULT_SETTINGS
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|FaultDetection
operator|.
name|PING_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1s"
argument_list|)
comment|// for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
name|FaultDetection
operator|.
name|PING_RETRIES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1"
argument_list|)
comment|// for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
literal|"discovery.zen.join_timeout"
argument_list|,
literal|"10s"
argument_list|)
comment|// still long to induce failures but to long so test won't time out
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1s"
argument_list|)
comment|//<-- for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
name|TcpTransport
operator|.
name|TCP_CONNECT_TIMEOUT
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"10s"
argument_list|)
comment|// Network delay disruption waits for the min between this
comment|// value and the time of disruption and does not recover immediately
comment|// when disruption is stop. We should make sure we recover faster
comment|// then the default of 30s, causing ensureGreen and friends to time out
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|configureCluster
name|void
name|configureCluster
parameter_list|(
name|int
name|numberOfNodes
parameter_list|,
annotation|@
name|Nullable
name|int
index|[]
name|unicastHostsOrdinals
parameter_list|,
name|int
name|minimumMasterNode
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|configureCluster
argument_list|(
name|DEFAULT_SETTINGS
argument_list|,
name|numberOfNodes
argument_list|,
name|unicastHostsOrdinals
argument_list|,
name|minimumMasterNode
argument_list|)
expr_stmt|;
block|}
DECL|method|configureCluster
name|void
name|configureCluster
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|int
name|numberOfNodes
parameter_list|,
annotation|@
name|Nullable
name|int
index|[]
name|unicastHostsOrdinals
parameter_list|,
name|int
name|minimumMasterNode
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|minimumMasterNode
operator|<
literal|0
condition|)
block|{
name|minimumMasterNode
operator|=
name|numberOfNodes
operator|/
literal|2
operator|+
literal|1
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"---> configured unicast"
argument_list|)
expr_stmt|;
comment|// TODO: Rarely use default settings form some of these
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|MAX_LOCAL_STORAGE_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|numberOfNodes
argument_list|)
operator|.
name|put
argument_list|(
name|ElectMasterService
operator|.
name|DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|minimumMasterNode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|discoveryConfig
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|unicastHostsOrdinals
operator|==
literal|null
condition|)
block|{
name|discoveryConfig
operator|=
operator|new
name|ClusterDiscoveryConfiguration
operator|.
name|UnicastZen
argument_list|(
name|numberOfNodes
argument_list|,
name|nodeSettings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|discoveryConfig
operator|=
operator|new
name|ClusterDiscoveryConfiguration
operator|.
name|UnicastZen
argument_list|(
name|numberOfNodes
argument_list|,
name|nodeSettings
argument_list|,
name|unicastHostsOrdinals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getNodeClusterState
name|ClusterState
name|getNodeClusterState
parameter_list|(
name|String
name|node
parameter_list|)
block|{
return|return
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
return|;
block|}
DECL|method|assertNoMaster
name|void
name|assertNoMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNoMaster
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoMaster
name|void
name|assertNoMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|,
name|TimeValue
name|maxWaitTime
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNoMaster
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
name|maxWaitTime
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoMaster
name|void
name|assertNoMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|ClusterBlock
name|expectedBlocks
parameter_list|,
name|TimeValue
name|maxWaitTime
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|state
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|final
name|DiscoveryNodes
name|nodes
init|=
name|state
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] still has ["
operator|+
name|nodes
operator|.
name|getMasterNode
argument_list|()
operator|+
literal|"] as master"
argument_list|,
name|nodes
operator|.
name|getMasterNode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedBlocks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClusterBlockLevel
name|level
range|:
name|expectedBlocks
operator|.
name|levels
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] does have level ["
operator|+
name|level
operator|+
literal|"] in it's blocks"
argument_list|,
name|state
operator|.
name|getBlocks
argument_list|()
operator|.
name|hasGlobalBlock
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|maxWaitTime
operator|.
name|getMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDifferentMaster
name|void
name|assertDifferentMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|,
specifier|final
name|String
name|oldMasterNode
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|ClusterState
name|state
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|String
name|masterNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|masterNode
operator|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] master is [{}]"
argument_list|,
name|node
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"node ["
operator|+
name|node
operator|+
literal|"] still has ["
operator|+
name|masterNode
operator|+
literal|"] as master"
argument_list|,
name|oldMasterNode
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|masterNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMaster
name|void
name|assertMaster
parameter_list|(
name|String
name|masterNode
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ClusterState
name|state
init|=
name|getNodeClusterState
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|String
name|failMsgSuffix
init|=
literal|"cluster_state:\n"
operator|+
name|state
decl_stmt|;
name|assertThat
argument_list|(
literal|"wrong node count on ["
operator|+
name|node
operator|+
literal|"]. "
operator|+
name|failMsgSuffix
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|otherMasterNodeName
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
operator|!=
literal|null
condition|?
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|assertThat
argument_list|(
literal|"wrong master on node ["
operator|+
name|node
operator|+
literal|"]. "
operator|+
name|failMsgSuffix
argument_list|,
name|otherMasterNodeName
argument_list|,
name|equalTo
argument_list|(
name|masterNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addRandomDisruptionScheme
specifier|public
name|ServiceDisruptionScheme
name|addRandomDisruptionScheme
parameter_list|()
block|{
comment|// TODO: add partial partitions
name|NetworkDisruption
name|p
decl_stmt|;
specifier|final
name|DisruptedLinks
name|disruptedLinks
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|disruptedLinks
operator|=
name|TwoPartitions
operator|.
name|random
argument_list|(
name|random
argument_list|()
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disruptedLinks
operator|=
name|Bridge
operator|.
name|random
argument_list|(
name|random
argument_list|()
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NetworkLinkDisruptionType
name|disruptionType
decl_stmt|;
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|disruptionType
operator|=
operator|new
name|NetworkDisruption
operator|.
name|NetworkUnresponsive
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|disruptionType
operator|=
operator|new
name|NetworkDisconnect
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|disruptionType
operator|=
name|NetworkDisruption
operator|.
name|NetworkDelay
operator|.
name|random
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
specifier|final
name|ServiceDisruptionScheme
name|scheme
decl_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|scheme
operator|=
operator|new
name|SlowClusterStateProcessing
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scheme
operator|=
operator|new
name|NetworkDisruption
argument_list|(
name|disruptedLinks
argument_list|,
name|disruptionType
argument_list|)
expr_stmt|;
block|}
name|setDisruptionScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
return|return
name|scheme
return|;
block|}
DECL|method|addRandomDisruptionType
name|NetworkDisruption
name|addRandomDisruptionType
parameter_list|(
name|TwoPartitions
name|partitions
parameter_list|)
block|{
specifier|final
name|NetworkLinkDisruptionType
name|disruptionType
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|disruptionType
operator|=
operator|new
name|NetworkDisruption
operator|.
name|NetworkUnresponsive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|disruptionType
operator|=
operator|new
name|NetworkDisconnect
argument_list|()
expr_stmt|;
block|}
name|NetworkDisruption
name|partition
init|=
operator|new
name|NetworkDisruption
argument_list|(
name|partitions
argument_list|,
name|disruptionType
argument_list|)
decl_stmt|;
name|setDisruptionScheme
argument_list|(
name|partition
argument_list|)
expr_stmt|;
return|return
name|partition
return|;
block|}
DECL|method|isolateNode
name|TwoPartitions
name|isolateNode
parameter_list|(
name|String
name|isolatedNode
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|side1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|side2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|side1
operator|.
name|add
argument_list|(
name|isolatedNode
argument_list|)
expr_stmt|;
name|side2
operator|.
name|remove
argument_list|(
name|isolatedNode
argument_list|)
expr_stmt|;
return|return
operator|new
name|TwoPartitions
argument_list|(
name|side1
argument_list|,
name|side2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

