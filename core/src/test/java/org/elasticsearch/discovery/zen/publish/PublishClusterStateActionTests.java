begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen.publish
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|publish
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Randomness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|DiscoveryNodesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BytesTransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyIterable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
annotation|@
name|TestLogging
argument_list|(
literal|"discovery.zen.publish:TRACE"
argument_list|)
DECL|class|PublishClusterStateActionTests
specifier|public
class|class
name|PublishClusterStateActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|nodes
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|MockNode
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|MockNode
specifier|public
specifier|static
class|class
name|MockNode
implements|implements
name|PublishClusterStateAction
operator|.
name|NewPendingClusterStateListener
implements|,
name|DiscoveryNodesProvider
block|{
DECL|field|discoveryNode
specifier|public
specifier|final
name|DiscoveryNode
name|discoveryNode
decl_stmt|;
DECL|field|service
specifier|public
specifier|final
name|MockTransportService
name|service
decl_stmt|;
DECL|field|action
specifier|public
name|MockPublishAction
name|action
decl_stmt|;
DECL|field|listener
specifier|public
specifier|final
name|ClusterStateListener
name|listener
decl_stmt|;
DECL|field|clusterState
specifier|public
specifier|volatile
name|ClusterState
name|clusterState
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|MockNode
specifier|public
name|MockNode
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|,
name|MockTransportService
name|service
parameter_list|,
annotation|@
name|Nullable
name|ClusterStateListener
name|listener
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|discoveryNode
operator|=
name|discoveryNode
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|discoveryNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|setAsMaster
specifier|public
name|MockNode
name|setAsMaster
parameter_list|()
block|{
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|resetMasterId
specifier|public
name|MockNode
name|resetMasterId
parameter_list|()
block|{
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|connectTo
specifier|public
name|void
name|connectTo
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|service
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNewClusterState
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|ClusterState
name|newClusterState
init|=
name|action
operator|.
name|pendingStatesQueue
argument_list|()
operator|.
name|getNextClusterStateToProcess
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] received version [{}], uuid [{}]"
argument_list|,
name|discoveryNode
operator|.
name|getName
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|version
argument_list|()
argument_list|,
name|newClusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|ClusterChangedEvent
name|event
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|""
argument_list|,
name|newClusterState
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|listener
operator|.
name|clusterChanged
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
operator|==
literal|null
operator|||
name|newClusterState
operator|.
name|supersedes
argument_list|(
name|clusterState
argument_list|)
condition|)
block|{
name|clusterState
operator|=
name|newClusterState
expr_stmt|;
block|}
name|action
operator|.
name|pendingStatesQueue
argument_list|()
operator|.
name|markAsProcessed
argument_list|(
name|newClusterState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodes
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|clusterState
operator|.
name|nodes
argument_list|()
return|;
block|}
block|}
DECL|method|createMockNode
specifier|public
name|MockNode
name|createMockNode
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMockNode
argument_list|(
name|name
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|method|createMockNode
specifier|public
name|MockNode
name|createMockNode
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMockNode
argument_list|(
name|name
argument_list|,
name|settings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|method|createMockNode
specifier|public
name|MockNode
name|createMockNode
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMockNode
argument_list|(
name|name
argument_list|,
name|settings
argument_list|,
name|version
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createMockNode
specifier|public
name|MockNode
name|createMockNode
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|,
annotation|@
name|Nullable
name|ClusterStateListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
name|settings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|put
argument_list|(
name|TransportService
operator|.
name|TRACE_LOG_INCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|""
argument_list|,
name|TransportService
operator|.
name|TRACE_LOG_EXCLUDE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"NOTHING"
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|MockTransportService
name|service
init|=
name|buildTransportService
argument_list|(
name|settings
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|DiscoveryNodeService
name|discoveryNodeService
init|=
operator|new
name|DiscoveryNodeService
argument_list|(
name|settings
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|discoveryNode
init|=
name|discoveryNodeService
operator|.
name|buildLocalNode
argument_list|(
name|service
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|)
decl_stmt|;
name|MockNode
name|node
init|=
operator|new
name|MockNode
argument_list|(
name|discoveryNode
argument_list|,
name|service
argument_list|,
name|listener
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|node
operator|.
name|action
operator|=
name|buildPublishClusterStateAction
argument_list|(
name|settings
argument_list|,
name|service
argument_list|,
parameter_list|()
lambda|->
name|node
operator|.
name|clusterState
argument_list|,
name|node
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|TransportConnectionListener
name|waitForConnection
init|=
operator|new
name|TransportConnectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"disconnect should not be called "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|node
operator|.
name|service
operator|.
name|addConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
for|for
control|(
name|MockNode
name|curNode
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|curNode
operator|.
name|service
operator|.
name|addConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
name|curNode
operator|.
name|connectTo
argument_list|(
name|node
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
name|node
operator|.
name|connectTo
argument_list|(
name|curNode
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|connectTo
argument_list|(
name|node
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"failed to wait for all nodes to connect"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MockNode
name|curNode
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|curNode
operator|.
name|service
operator|.
name|removeConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|service
operator|.
name|removeConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|node
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Node with the name "
operator|+
name|name
operator|+
literal|" already exist"
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
DECL|method|service
specifier|public
name|MockTransportService
name|service
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MockNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
operator|.
name|service
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|action
specifier|public
name|PublishClusterStateAction
name|action
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MockNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
operator|.
name|action
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|MockNode
name|curNode
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|curNode
operator|.
name|action
operator|.
name|close
argument_list|()
expr_stmt|;
name|curNode
operator|.
name|service
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|buildTransportService
specifier|protected
name|MockTransportService
name|buildTransportService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|MockTransportService
name|transportService
init|=
name|MockTransportService
operator|.
name|local
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|version
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
return|return
name|transportService
return|;
block|}
DECL|method|buildPublishClusterStateAction
specifier|protected
name|MockPublishAction
name|buildPublishClusterStateAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|MockTransportService
name|transportService
parameter_list|,
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewPendingClusterStateListener
name|listener
parameter_list|)
block|{
name|DiscoverySettings
name|discoverySettings
init|=
operator|new
name|DiscoverySettings
argument_list|(
name|settings
argument_list|,
operator|new
name|ClusterSettings
argument_list|(
name|settings
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|MockPublishAction
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|clusterStateSupplier
argument_list|,
name|listener
argument_list|,
name|discoverySettings
argument_list|,
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
DECL|method|testSimpleClusterStatePublishing
specifier|public
name|void
name|testSimpleClusterStatePublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|setAsMaster
argument_list|()
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
comment|// Initial cluster state
name|ClusterState
name|clusterState
init|=
name|nodeA
operator|.
name|clusterState
decl_stmt|;
comment|// cluster state update - add nodeB
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromFull
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromDiff
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeB
operator|.
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// cluster state update - remove block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromDiff
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeB
operator|.
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adding new node - this node should get full cluster state while nodeB should still be getting diffs
name|MockNode
name|nodeC
init|=
name|createMockNode
argument_list|(
literal|"nodeC"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
comment|// cluster state update 3 - register node C
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|nodeC
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromDiff
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// First state
name|assertSameStateFromFull
argument_list|(
name|nodeC
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// cluster state update 4 - update settings
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|transientSettings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromDiff
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeB
operator|.
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameStateFromDiff
argument_list|(
name|nodeC
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeC
operator|.
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// cluster state update - skipping one version change - should request full cluster state
name|previousClusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromFull
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromFull
argument_list|(
name|nodeC
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodeC
operator|.
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
comment|// node A steps down from being master
name|nodeA
operator|.
name|resetMasterId
argument_list|()
expr_stmt|;
name|nodeB
operator|.
name|resetMasterId
argument_list|()
expr_stmt|;
name|nodeC
operator|.
name|resetMasterId
argument_list|()
expr_stmt|;
comment|// node B becomes the master and sends a version of the cluster state that goes back
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|nodeA
operator|.
name|discoveryNode
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|put
argument_list|(
name|nodeC
operator|.
name|discoveryNode
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|nodeB
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|nodeB
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|previousClusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeB
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromFull
argument_list|(
name|nodeA
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromFull
argument_list|(
name|nodeC
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnexpectedDiffPublishing
specifier|public
name|void
name|testUnexpectedDiffPublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't send cluster state to myself"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|setAsMaster
argument_list|()
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
comment|// Initial cluster state with both states - the second node still shouldn't get diff even though it's present in the previous cluster state
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodeA
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|previousClusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromFull
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromDiff
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisablingDiffPublishing
specifier|public
name|void
name|testDisablingDiffPublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|noDiffPublishingSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_DIFF_ENABLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|noDiffPublishingSettings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't send cluster state to myself"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|noDiffPublishingSettings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Initial cluster state
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeA
operator|.
name|discoveryNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|nodeA
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|nodeA
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// cluster state update - add nodeB
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test not waiting on publishing works correctly (i.e., publishing times out)      */
DECL|method|testSimultaneousClusterStatePublishing
specifier|public
name|void
name|testSimultaneousClusterStatePublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfNodes
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|numberOfIterations
init|=
name|scaledRandomIntBetween
argument_list|(
literal|5
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_DIFF_ENABLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockNode
name|master
init|=
name|createMockNode
argument_list|(
literal|"node0"
argument_list|,
name|settings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|assertProperMetaDataForVersion
argument_list|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
argument_list|,
name|event
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|setAsMaster
argument_list|()
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoveryNodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|master
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numberOfNodes
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
literal|"node"
operator|+
name|i
decl_stmt|;
specifier|final
name|MockNode
name|node
init|=
name|createMockNode
argument_list|(
name|name
argument_list|,
name|settings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|assertProperMetaDataForVersion
argument_list|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
argument_list|,
name|event
operator|.
name|state
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|discoveryNodesBuilder
operator|.
name|put
argument_list|(
name|node
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
block|}
name|AssertingAckListener
index|[]
name|listeners
init|=
operator|new
name|AssertingAckListener
index|[
name|numberOfIterations
index|]
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|discoveryNodesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|EMPTY_META_DATA
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousState
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIterations
condition|;
name|i
operator|++
control|)
block|{
name|previousState
operator|=
name|clusterState
expr_stmt|;
name|metaData
operator|=
name|buildMetaDataForVersion
argument_list|(
name|metaData
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|listeners
index|[
name|i
index|]
operator|=
name|publishState
argument_list|(
name|master
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIterations
condition|;
name|i
operator|++
control|)
block|{
name|listeners
index|[
name|i
index|]
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|// set the master cs
name|master
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
for|for
control|(
name|MockNode
name|node
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|assertSameState
argument_list|(
name|node
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node
operator|.
name|discoveryNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSerializationFailureDuringDiffPublishing
specifier|public
name|void
name|testSerializationFailureDuringDiffPublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't send cluster state to myself"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|setAsMaster
argument_list|()
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
comment|// Initial cluster state with both states - the second node still shouldn't get diff even though it's present in the previous cluster state
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodeA
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|previousClusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|assertSameStateFromFull
argument_list|(
name|nodeB
operator|.
name|clusterState
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|unserializableClusterState
init|=
operator|new
name|ClusterState
argument_list|(
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|clusterState
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|diff
parameter_list|(
name|ClusterState
name|previousState
parameter_list|)
block|{
return|return
operator|new
name|Diff
argument_list|<
name|ClusterState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|apply
parameter_list|(
name|ClusterState
name|part
parameter_list|)
block|{
name|fail
argument_list|(
literal|"this diff shouldn't be applied"
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Simulated failure of diff serialization"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|publishStateAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|unserializableClusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"cluster state published despite of diff errors"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Discovery
operator|.
name|FailedToCommitClusterStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"failed to serialize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFailToPublishWithLessThanMinMasterNodes
specifier|public
name|void
name|testFailToPublishWithLessThanMinMasterNodes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|masterNodes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNode
name|master
init|=
name|createMockNode
argument_list|(
literal|"master"
argument_list|)
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoveryNodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|master
operator|.
name|discoveryNode
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|masterNodes
condition|;
name|i
operator|++
control|)
block|{
name|discoveryNodesBuilder
operator|.
name|put
argument_list|(
name|createMockNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|dataNodes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|Settings
name|dataSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_MASTER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
condition|;
name|i
operator|++
control|)
block|{
name|discoveryNodesBuilder
operator|.
name|put
argument_list|(
name|createMockNode
argument_list|(
literal|"data_"
operator|+
name|i
argument_list|,
name|dataSettings
argument_list|)
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
block|}
name|discoveryNodesBuilder
operator|.
name|localNodeId
argument_list|(
name|master
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|master
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|discoveryNodesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|EMPTY_META_DATA
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousState
init|=
name|master
operator|.
name|clusterState
decl_stmt|;
try|try
block|{
name|publishState
argument_list|(
name|master
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousState
argument_list|,
name|masterNodes
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"cluster state publishing didn't fail despite of not having enough nodes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Discovery
operator|.
name|FailedToCommitClusterStateException
name|expected
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to publish as expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPublishingWithSendingErrors
specifier|public
name|void
name|testPublishingWithSendingErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|goodNodes
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|errorNodes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|timeOutNodes
init|=
name|randomBoolean
argument_list|()
condition|?
literal|0
else|:
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// adding timeout nodes will force timeout errors
specifier|final
name|int
name|numberOfMasterNodes
init|=
name|goodNodes
operator|+
name|errorNodes
operator|+
name|timeOutNodes
operator|+
literal|1
decl_stmt|;
comment|// master
specifier|final
name|boolean
name|expectingToCommit
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// make sure we have a reasonable timeout if we expect to timeout, o.w. one that will make the test "hang"
name|settings
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|COMMIT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|expectingToCommit
operator|==
literal|false
operator|&&
name|timeOutNodes
operator|>
literal|0
condition|?
literal|"100ms"
else|:
literal|"1h"
argument_list|)
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"5ms"
argument_list|)
expr_stmt|;
comment|// test is about committing
name|MockNode
name|master
init|=
name|createMockNode
argument_list|(
literal|"master"
argument_list|,
name|settings
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// randomize things a bit
name|int
index|[]
name|nodeTypes
init|=
operator|new
name|int
index|[
name|goodNodes
operator|+
name|errorNodes
operator|+
name|timeOutNodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|goodNodes
condition|;
name|i
operator|++
control|)
block|{
name|nodeTypes
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|goodNodes
init|;
name|i
operator|<
name|goodNodes
operator|+
name|errorNodes
condition|;
name|i
operator|++
control|)
block|{
name|nodeTypes
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|goodNodes
operator|+
name|errorNodes
init|;
name|i
operator|<
name|nodeTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodeTypes
index|[
name|i
index|]
operator|=
literal|2
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeTypes
argument_list|)
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoveryNodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|master
operator|.
name|discoveryNode
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MockNode
name|mockNode
init|=
name|createMockNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
decl_stmt|;
name|discoveryNodesBuilder
operator|.
name|put
argument_list|(
name|mockNode
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|nodeTypes
index|[
name|i
index|]
condition|)
block|{
case|case
literal|1
case|:
name|mockNode
operator|.
name|action
operator|.
name|errorOnSend
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|mockNode
operator|.
name|action
operator|.
name|timeoutOnSend
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|int
name|dataNodes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// data nodes don't matter
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MockNode
name|mockNode
init|=
name|createMockNode
argument_list|(
literal|"data_"
operator|+
name|i
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_MASTER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|discoveryNodesBuilder
operator|.
name|put
argument_list|(
name|mockNode
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// we really don't care - just chaos monkey
name|mockNode
operator|.
name|action
operator|.
name|errorOnCommit
operator|.
name|set
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|mockNode
operator|.
name|action
operator|.
name|errorOnSend
operator|.
name|set
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|mockNode
operator|.
name|action
operator|.
name|timeoutOnCommit
operator|.
name|set
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|mockNode
operator|.
name|action
operator|.
name|timeoutOnSend
operator|.
name|set
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|minMasterNodes
decl_stmt|;
specifier|final
name|String
name|expectedBehavior
decl_stmt|;
if|if
condition|(
name|expectingToCommit
condition|)
block|{
name|minMasterNodes
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|goodNodes
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// count master
name|expectedBehavior
operator|=
literal|"succeed"
expr_stmt|;
block|}
else|else
block|{
name|minMasterNodes
operator|=
name|randomIntBetween
argument_list|(
name|goodNodes
operator|+
literal|2
argument_list|,
name|numberOfMasterNodes
argument_list|)
expr_stmt|;
comment|// +2 because of master
name|expectedBehavior
operator|=
name|timeOutNodes
operator|>
literal|0
condition|?
literal|"timeout"
else|:
literal|"fail"
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> expecting commit to {}. good nodes [{}], errors [{}], timeouts [{}]. min_master_nodes [{}]"
argument_list|,
name|expectedBehavior
argument_list|,
name|goodNodes
operator|+
literal|1
argument_list|,
name|errorNodes
argument_list|,
name|timeOutNodes
argument_list|,
name|minMasterNodes
argument_list|)
expr_stmt|;
name|discoveryNodesBuilder
operator|.
name|localNodeId
argument_list|(
name|master
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|master
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|discoveryNodesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|EMPTY_META_DATA
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousState
init|=
name|master
operator|.
name|clusterState
decl_stmt|;
try|try
block|{
name|publishState
argument_list|(
name|master
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousState
argument_list|,
name|minMasterNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectingToCommit
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
literal|"cluster state publishing didn't fail despite of not have enough nodes"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Discovery
operator|.
name|FailedToCommitClusterStateException
name|exception
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to publish as expected"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectingToCommit
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|timeOutNodes
operator|>
literal|0
condition|?
literal|"timed out"
else|:
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIncomingClusterStateValidation
specifier|public
name|void
name|testIncomingClusterStateValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNode
name|node
init|=
name|createMockNode
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing acceptances of any master when having no master"
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|node
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|state
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// now set a master node
name|node
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|node
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing rejection of another master"
argument_list|)
expr_stmt|;
try|try
block|{
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|state
argument_list|,
name|node
operator|.
name|clusterState
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node accepted state from another master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|OK
parameter_list|)
block|{
name|assertThat
argument_list|(
name|OK
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cluster state from a different master than the current one, rejecting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> test state from the current master is accepted"
argument_list|)
expr_stmt|;
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|node
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"master"
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|node
operator|.
name|clusterState
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing rejection of another cluster name"
argument_list|)
expr_stmt|;
try|try
block|{
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|node
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|node
operator|.
name|clusterState
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node accepted state with another cluster name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|OK
parameter_list|)
block|{
name|assertThat
argument_list|(
name|OK
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"received state from a node that is not part of the cluster"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing rejection of a cluster state with wrong local node"
argument_list|)
expr_stmt|;
try|try
block|{
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|node
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"_non_existing_"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|state
argument_list|,
name|node
operator|.
name|clusterState
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node accepted state with non-existence local node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|OK
parameter_list|)
block|{
name|assertThat
argument_list|(
name|OK
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"received state with a local node that does not match the current local node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|MockNode
name|otherNode
init|=
name|createMockNode
argument_list|(
literal|"otherNode"
argument_list|)
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|node
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|otherNode
operator|.
name|discoveryNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|otherNode
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|state
argument_list|,
name|node
operator|.
name|clusterState
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node accepted state with existent but wrong local node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|OK
parameter_list|)
block|{
name|assertThat
argument_list|(
name|OK
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"received state with a local node that does not match the current local node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing acceptance of an old cluster state"
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|incomingState
init|=
name|node
operator|.
name|clusterState
decl_stmt|;
name|node
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|incomingState
argument_list|,
name|node
operator|.
name|clusterState
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"received cluster state from current master superseded by last seen cluster state; received version [%d] with uuid [%s], last seen version [%d] with uuid [%s]"
argument_list|,
name|incomingState
operator|.
name|version
argument_list|()
argument_list|,
name|incomingState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|node
operator|.
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|node
operator|.
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
literal|"java.lang.IllegalStateException: "
operator|+
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// an older version from a *new* master is also OK!
name|ClusterState
name|previousState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"_new_master_"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// remove the master of the node (but still have a previous cluster state with it)!
name|node
operator|.
name|resetMasterId
argument_list|()
expr_stmt|;
name|node
operator|.
name|action
operator|.
name|validateIncomingState
argument_list|(
name|state
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
block|}
DECL|method|testOutOfOrderCommitMessages
specifier|public
name|void
name|testOutOfOrderCommitMessages
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockNode
name|node
init|=
name|createMockNode
argument_list|(
literal|"node"
argument_list|)
operator|.
name|setAsMaster
argument_list|()
decl_stmt|;
specifier|final
name|CapturingTransportChannel
name|channel
init|=
operator|new
name|CapturingTransportChannel
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ClusterState
argument_list|>
name|states
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numOfStates
init|=
name|scaledRandomIntBetween
argument_list|(
literal|3
argument_list|,
literal|25
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numOfStates
condition|;
name|i
operator|++
control|)
block|{
name|states
operator|.
name|add
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|node
operator|.
name|clusterState
argument_list|)
operator|.
name|version
argument_list|(
name|i
argument_list|)
operator|.
name|stateUUID
argument_list|(
name|ClusterState
operator|.
name|UNKNOWN_UUID
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ClusterState
name|finalState
init|=
name|states
operator|.
name|get
argument_list|(
name|numOfStates
operator|-
literal|1
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> publishing states"
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterState
name|state
range|:
name|states
control|)
block|{
name|node
operator|.
name|action
operator|.
name|handleIncomingClusterStateRequest
argument_list|(
operator|new
name|BytesTransportRequest
argument_list|(
name|PublishClusterStateAction
operator|.
name|serializeFullClusterState
argument_list|(
name|state
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|channel
operator|.
name|response
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|TransportResponse
operator|)
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|channel
operator|.
name|error
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> committing states"
argument_list|)
expr_stmt|;
name|long
name|largestVersionSeen
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|Randomness
operator|.
name|shuffle
argument_list|(
name|states
argument_list|)
expr_stmt|;
for|for
control|(
name|ClusterState
name|state
range|:
name|states
control|)
block|{
name|node
operator|.
name|action
operator|.
name|handleCommitRequest
argument_list|(
operator|new
name|PublishClusterStateAction
operator|.
name|CommitClusterStateRequest
argument_list|(
name|state
operator|.
name|stateUUID
argument_list|()
argument_list|)
argument_list|,
name|channel
argument_list|)
expr_stmt|;
if|if
condition|(
name|largestVersionSeen
operator|<
name|state
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|channel
operator|.
name|response
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|TransportResponse
operator|)
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|channel
operator|.
name|error
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|channel
operator|.
name|error
operator|.
name|get
argument_list|()
throw|;
block|}
name|largestVersionSeen
operator|=
name|state
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// older cluster states will be rejected
name|assertNotNull
argument_list|(
name|channel
operator|.
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|channel
operator|.
name|error
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|//now check the last state held
name|assertSameState
argument_list|(
name|node
operator|.
name|clusterState
argument_list|,
name|finalState
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that cluster is committed or times out. It should never be the case that we fail      * an update due to a commit timeout, but it ends up being committed anyway      */
DECL|method|testTimeoutOrCommit
specifier|public
name|void
name|testTimeoutOrCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|COMMIT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1ms"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// short but so we will sometime commit sometime timeout
name|MockNode
name|master
init|=
name|createMockNode
argument_list|(
literal|"master"
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|MockNode
name|node
init|=
name|createMockNode
argument_list|(
literal|"node"
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|master
operator|.
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|master
operator|.
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|node
operator|.
name|discoveryNode
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|master
operator|.
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> publishing version [{}], UUID [{}]"
argument_list|,
name|state
operator|.
name|version
argument_list|()
argument_list|,
name|state
operator|.
name|stateUUID
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
decl_stmt|;
try|try
block|{
name|publishState
argument_list|(
name|master
operator|.
name|action
argument_list|,
name|state
argument_list|,
name|master
operator|.
name|clusterState
argument_list|,
literal|2
argument_list|)
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Discovery
operator|.
name|FailedToCommitClusterStateException
name|OK
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> publishing [{}], verifying..."
argument_list|,
name|success
condition|?
literal|"succeeded"
else|:
literal|"failed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|assertSameState
argument_list|(
name|node
operator|.
name|clusterState
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|node
operator|.
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|state
operator|.
name|stateUUID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|buildMetaDataForVersion
specifier|private
name|MetaData
name|buildMetaDataForVersion
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|long
name|version
parameter_list|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|metaData
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
name|indices
operator|.
name|put
argument_list|(
literal|"test"
operator|+
name|version
argument_list|,
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
operator|+
name|version
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
operator|(
name|int
operator|)
name|version
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
operator|.
name|transientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|indices
argument_list|(
name|indices
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|assertProperMetaDataForVersion
specifier|private
name|void
name|assertProperMetaDataForVersion
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|long
name|version
parameter_list|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|version
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
operator|.
name|getNumberOfShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
operator|+
operator|(
name|version
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|publishStateAndWait
specifier|public
name|void
name|publishStateAndWait
parameter_list|(
name|PublishClusterStateAction
name|action
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|publishState
argument_list|(
name|action
argument_list|,
name|state
argument_list|,
name|previousState
argument_list|)
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|publishState
specifier|public
name|AssertingAckListener
name|publishState
parameter_list|(
name|PublishClusterStateAction
name|action
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|minimumMasterNodes
init|=
name|randomIntBetween
argument_list|(
operator|-
literal|1
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|publishState
argument_list|(
name|action
argument_list|,
name|state
argument_list|,
name|previousState
argument_list|,
name|minimumMasterNodes
argument_list|)
return|;
block|}
DECL|method|publishState
specifier|public
name|AssertingAckListener
name|publishState
parameter_list|(
name|PublishClusterStateAction
name|action
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|,
name|int
name|minMasterNodes
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|AssertingAckListener
name|assertingAckListener
init|=
operator|new
name|AssertingAckListener
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ClusterChangedEvent
name|changedEvent
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test update"
argument_list|,
name|state
argument_list|,
name|previousState
argument_list|)
decl_stmt|;
name|action
operator|.
name|publish
argument_list|(
name|changedEvent
argument_list|,
name|minMasterNodes
argument_list|,
name|assertingAckListener
argument_list|)
expr_stmt|;
return|return
name|assertingAckListener
return|;
block|}
DECL|class|AssertingAckListener
specifier|public
specifier|static
class|class
name|AssertingAckListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
DECL|field|errors
specifier|private
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|timeoutOccurred
specifier|private
specifier|final
name|AtomicBoolean
name|timeoutOccurred
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|countDown
specifier|private
specifier|final
name|CountDownLatch
name|countDown
decl_stmt|;
DECL|method|AssertingAckListener
specifier|public
name|AssertingAckListener
parameter_list|(
name|int
name|nodeCount
parameter_list|)
block|{
name|countDown
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|nodeCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|node
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|countDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
name|timeoutOccurred
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Fast forward the counter - no reason to wait here
name|long
name|currentCount
init|=
name|countDown
operator|.
name|getCount
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentCount
condition|;
name|i
operator|++
control|)
block|{
name|countDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|await
specifier|public
name|void
name|await
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertThat
argument_list|(
name|awaitErrors
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
argument_list|,
name|emptyIterable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitErrors
specifier|public
name|List
argument_list|<
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|awaitErrors
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|countDown
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|timeoutOccurred
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
DECL|method|assertSameState
name|void
name|assertSameState
parameter_list|(
name|ClusterState
name|actual
parameter_list|,
name|ClusterState
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|reason
init|=
literal|"\n--> actual ClusterState: "
operator|+
name|actual
operator|.
name|prettyPrint
argument_list|()
operator|+
literal|"\n--> expected ClusterState:"
operator|+
name|expected
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"unequal UUIDs"
operator|+
name|reason
argument_list|,
name|actual
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|stateUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"unequal versions"
operator|+
name|reason
argument_list|,
name|actual
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSameStateFromDiff
name|void
name|assertSameStateFromDiff
parameter_list|(
name|ClusterState
name|actual
parameter_list|,
name|ClusterState
name|expected
parameter_list|)
block|{
name|assertSameState
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actual
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSameStateFromFull
name|void
name|assertSameStateFromFull
parameter_list|(
name|ClusterState
name|actual
parameter_list|,
name|ClusterState
name|expected
parameter_list|)
block|{
name|assertSameState
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|actual
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MockPublishAction
specifier|static
class|class
name|MockPublishAction
extends|extends
name|PublishClusterStateAction
block|{
DECL|field|timeoutOnSend
name|AtomicBoolean
name|timeoutOnSend
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|errorOnSend
name|AtomicBoolean
name|errorOnSend
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|timeoutOnCommit
name|AtomicBoolean
name|timeoutOnCommit
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|errorOnCommit
name|AtomicBoolean
name|errorOnCommit
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|MockPublishAction
specifier|public
name|MockPublishAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|Supplier
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateSupplier
parameter_list|,
name|NewPendingClusterStateListener
name|listener
parameter_list|,
name|DiscoverySettings
name|discoverySettings
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|clusterStateSupplier
argument_list|,
name|listener
argument_list|,
name|discoverySettings
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleIncomingClusterStateRequest
specifier|protected
name|void
name|handleIncomingClusterStateRequest
parameter_list|(
name|BytesTransportRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|errorOnSend
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"forced error on incoming cluster state"
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeoutOnSend
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|handleIncomingClusterStateRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleCommitRequest
specifier|protected
name|void
name|handleCommitRequest
parameter_list|(
name|PublishClusterStateAction
operator|.
name|CommitClusterStateRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
block|{
if|if
condition|(
name|errorOnCommit
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"forced error on incoming commit"
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeoutOnCommit
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|handleCommitRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CapturingTransportChannel
specifier|static
class|class
name|CapturingTransportChannel
implements|implements
name|TransportChannel
block|{
DECL|field|response
name|AtomicReference
argument_list|<
name|TransportResponse
argument_list|>
name|response
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|error
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|response
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|error
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|action
specifier|public
name|String
name|action
parameter_list|()
block|{
return|return
literal|"_noop_"
return|;
block|}
annotation|@
name|Override
DECL|method|getProfileName
specifier|public
name|String
name|getProfileName
parameter_list|()
block|{
return|return
literal|"_noop_"
return|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|response
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|TransportResponse
name|response
parameter_list|,
name|TransportResponseOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|response
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|public
name|void
name|sendResponse
parameter_list|(
name|Throwable
name|error
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|error
operator|.
name|set
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRequestId
specifier|public
name|long
name|getRequestId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getChannelType
specifier|public
name|String
name|getChannelType
parameter_list|()
block|{
return|return
literal|"capturing"
return|;
block|}
block|}
block|}
end_class

end_unit

