begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|MockTcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayService
operator|.
name|STATE_NOT_RECOVERED_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_class
DECL|class|UnicastZenPingTests
specifier|public
class|class
name|UnicastZenPingTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
comment|// close in reverse order as opened
DECL|field|closeables
specifier|private
name|Stack
argument_list|<
name|Closeable
argument_list|>
name|closeables
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ThreadFactory
name|threadFactory
init|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
literal|"["
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
decl_stmt|;
name|executorService
operator|=
name|EsExecutors
operator|.
name|newScaling
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|threadFactory
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
expr_stmt|;
name|closeables
operator|=
operator|new
name|Stack
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// JDK stack is broken, it does not iterate in the expected order (http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4475301)
specifier|final
name|List
argument_list|<
name|Closeable
argument_list|>
name|reverse
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|closeables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reverse
operator|.
name|add
argument_list|(
name|closeables
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminate
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|EMPTY_HOSTS_PROVIDER
specifier|private
specifier|static
specifier|final
name|UnicastHostsProvider
name|EMPTY_HOSTS_PROVIDER
init|=
name|Collections
operator|::
name|emptyList
decl_stmt|;
DECL|method|testSimplePings
specifier|public
name|void
name|testSimplePings
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// use ephemeral ports
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
name|TransportSettings
operator|.
name|PORT
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Settings
name|settingsMismatch
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"mismatch"
argument_list|)
operator|.
name|put
argument_list|(
name|TransportSettings
operator|.
name|PORT
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NetworkService
name|networkService
init|=
operator|new
name|NetworkService
argument_list|(
name|settings
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BiFunction
argument_list|<
name|Settings
argument_list|,
name|Version
argument_list|,
name|Transport
argument_list|>
name|supplier
init|=
parameter_list|(
name|s
parameter_list|,
name|v
parameter_list|)
lambda|->
operator|new
name|MockTcpTransport
argument_list|(
name|s
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|networkService
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|NetworkHandle
name|handleA
init|=
name|startServices
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
literal|"UZP_A"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|supplier
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|handleA
operator|.
name|transportService
argument_list|)
expr_stmt|;
name|NetworkHandle
name|handleB
init|=
name|startServices
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
literal|"UZP_B"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|supplier
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|handleB
operator|.
name|transportService
argument_list|)
expr_stmt|;
name|NetworkHandle
name|handleC
init|=
name|startServices
argument_list|(
name|settingsMismatch
argument_list|,
name|threadPool
argument_list|,
literal|"UZP_C"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|supplier
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|handleC
operator|.
name|transportService
argument_list|)
expr_stmt|;
comment|// just fake that no versions are compatible with this node
name|Version
name|previousVersion
init|=
name|VersionUtils
operator|.
name|getPreviousVersion
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|versionD
init|=
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|previousVersion
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|,
name|previousVersion
argument_list|)
decl_stmt|;
name|NetworkHandle
name|handleD
init|=
name|startServices
argument_list|(
name|settingsMismatch
argument_list|,
name|threadPool
argument_list|,
literal|"UZP_D"
argument_list|,
name|versionD
argument_list|,
name|supplier
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|handleD
operator|.
name|transportService
argument_list|)
expr_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
name|randomPositiveLong
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|hostsSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"discovery.zen.ping.unicast.hosts"
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|handleA
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|handleA
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|handleB
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|handleB
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|handleC
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|handleC
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|NetworkAddress
operator|.
name|format
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|handleD
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|handleD
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|hostsSettingsMismatch
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|hostsSettings
argument_list|)
operator|.
name|put
argument_list|(
name|settingsMismatch
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|UnicastZenPing
name|zenPingA
init|=
operator|new
name|UnicastZenPing
argument_list|(
name|hostsSettings
argument_list|,
name|threadPool
argument_list|,
name|handleA
operator|.
name|transportService
argument_list|,
name|EMPTY_HOSTS_PROVIDER
argument_list|)
decl_stmt|;
name|zenPingA
operator|.
name|start
argument_list|(
operator|new
name|PingContextProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|handleA
operator|.
name|node
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"UZP_A"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|clusterState
parameter_list|()
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|STATE_NOT_RECOVERED_BLOCK
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|zenPingA
argument_list|)
expr_stmt|;
name|UnicastZenPing
name|zenPingB
init|=
operator|new
name|UnicastZenPing
argument_list|(
name|hostsSettings
argument_list|,
name|threadPool
argument_list|,
name|handleB
operator|.
name|transportService
argument_list|,
name|EMPTY_HOSTS_PROVIDER
argument_list|)
decl_stmt|;
name|zenPingB
operator|.
name|start
argument_list|(
operator|new
name|PingContextProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|handleB
operator|.
name|node
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"UZP_B"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|clusterState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|zenPingB
argument_list|)
expr_stmt|;
name|UnicastZenPing
name|zenPingC
init|=
operator|new
name|UnicastZenPing
argument_list|(
name|hostsSettingsMismatch
argument_list|,
name|threadPool
argument_list|,
name|handleC
operator|.
name|transportService
argument_list|,
name|EMPTY_HOSTS_PROVIDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|versionD
return|;
block|}
block|}
decl_stmt|;
name|zenPingC
operator|.
name|start
argument_list|(
operator|new
name|PingContextProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|handleC
operator|.
name|node
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"UZP_C"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|clusterState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|zenPingC
argument_list|)
expr_stmt|;
name|UnicastZenPing
name|zenPingD
init|=
operator|new
name|UnicastZenPing
argument_list|(
name|hostsSettingsMismatch
argument_list|,
name|threadPool
argument_list|,
name|handleD
operator|.
name|transportService
argument_list|,
name|EMPTY_HOSTS_PROVIDER
argument_list|)
decl_stmt|;
name|zenPingD
operator|.
name|start
argument_list|(
operator|new
name|PingContextProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|handleD
operator|.
name|node
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"UZP_D"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|clusterState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|zenPingD
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"ping from UZP_A"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ZenPing
operator|.
name|PingResponse
argument_list|>
name|pingResponses
init|=
name|zenPingA
operator|.
name|pingAndWait
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pingResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ZenPing
operator|.
name|PingResponse
name|ping
init|=
name|pingResponses
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ping
operator|.
name|node
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"UZP_B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ping
operator|.
name|getClusterStateVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|state
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertCountersMoreThan
argument_list|(
name|handleA
argument_list|,
name|handleB
argument_list|,
name|handleC
argument_list|,
name|handleD
argument_list|)
expr_stmt|;
comment|// ping again, this time from B,
name|logger
operator|.
name|info
argument_list|(
literal|"ping from UZP_B"
argument_list|)
expr_stmt|;
name|pingResponses
operator|=
name|zenPingB
operator|.
name|pingAndWait
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pingResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ping
operator|=
name|pingResponses
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ping
operator|.
name|node
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"UZP_A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ping
operator|.
name|getClusterStateVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ElectMasterService
operator|.
name|MasterCandidate
operator|.
name|UNRECOVERED_CLUSTER_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertCountersMoreThan
argument_list|(
name|handleB
argument_list|,
name|handleA
argument_list|,
name|handleC
argument_list|,
name|handleD
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"ping from UZP_C"
argument_list|)
expr_stmt|;
name|pingResponses
operator|=
name|zenPingC
operator|.
name|pingAndWait
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pingResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertCountersMoreThan
argument_list|(
name|handleC
argument_list|,
name|handleA
argument_list|,
name|handleB
argument_list|,
name|handleD
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"ping from UZP_D"
argument_list|)
expr_stmt|;
name|pingResponses
operator|=
name|zenPingD
operator|.
name|pingAndWait
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pingResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertCountersMoreThan
argument_list|(
name|handleD
argument_list|,
name|handleA
argument_list|,
name|handleB
argument_list|,
name|handleC
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownHostNotCached
specifier|public
name|void
name|testUnknownHostNotCached
parameter_list|()
block|{
comment|// use ephemeral ports
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
name|TransportSettings
operator|.
name|PORT
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|NetworkService
name|networkService
init|=
operator|new
name|NetworkService
argument_list|(
name|settings
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TransportAddress
index|[]
argument_list|>
name|addresses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|BiFunction
argument_list|<
name|Settings
argument_list|,
name|Version
argument_list|,
name|Transport
argument_list|>
name|supplier
init|=
parameter_list|(
name|s
parameter_list|,
name|v
parameter_list|)
lambda|->
operator|new
name|MockTcpTransport
argument_list|(
name|s
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|networkService
argument_list|,
name|v
argument_list|)
block|{
block|@Override             public TransportAddress[] addressesFromString(String address
decl_stmt|,
name|int
name|perAddressLimit
decl_stmt|)
throws|throws
name|UnknownHostException
block|{
name|final
name|TransportAddress
index|[]
name|transportAddresses
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|transportAddresses
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
name|address
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|transportAddresses
return|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|final
name|NetworkHandle
name|handleA
init|=
name|startServices
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
literal|"UZP_A"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|supplier
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|closeables
operator|.
name|push
argument_list|(
name|handleA
operator|.
name|transportService
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|NetworkHandle
name|handleB
init|=
name|startServices
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
literal|"UZP_B"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|supplier
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|closeables
operator|.
name|push
argument_list|(
name|handleB
operator|.
name|transportService
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|NetworkHandle
name|handleC
init|=
name|startServices
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
literal|"UZP_C"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|supplier
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|closeables
operator|.
name|push
argument_list|(
name|handleC
operator|.
name|transportService
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|addresses
operator|.
name|put
argument_list|(
literal|"UZP_A"
argument_list|,
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|TransportAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|handleA
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|handleA
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|addresses
operator|.
name|put
argument_list|(
literal|"UZP_C"
argument_list|,
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|TransportAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|handleC
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|handleC
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Settings
name|hostsSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"discovery.zen.ping.unicast.hosts"
argument_list|,
literal|"UZP_A"
argument_list|,
literal|"UZP_B"
argument_list|,
literal|"UZP_C"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
name|randomPositiveLong
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|UnicastZenPing
name|zenPingA
init|=
operator|new
name|UnicastZenPing
argument_list|(
name|hostsSettings
argument_list|,
name|threadPool
argument_list|,
name|handleA
operator|.
name|transportService
argument_list|,
name|EMPTY_HOSTS_PROVIDER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|zenPingA
operator|.
name|start
argument_list|(
operator|new
name|PingContextProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|handleA
operator|.
name|node
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"UZP_A"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|clusterState
parameter_list|()
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|STATE_NOT_RECOVERED_BLOCK
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|closeables
operator|.
name|push
argument_list|(
name|zenPingA
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|UnicastZenPing
name|zenPingB
init|=
operator|new
name|UnicastZenPing
argument_list|(
name|hostsSettings
argument_list|,
name|threadPool
argument_list|,
name|handleB
operator|.
name|transportService
argument_list|,
name|EMPTY_HOSTS_PROVIDER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|zenPingB
operator|.
name|start
argument_list|(
operator|new
name|PingContextProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|handleB
operator|.
name|node
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"UZP_B"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|clusterState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|closeables
operator|.
name|push
argument_list|(
name|zenPingB
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|UnicastZenPing
name|zenPingC
init|=
operator|new
name|UnicastZenPing
argument_list|(
name|hostsSettings
argument_list|,
name|threadPool
argument_list|,
name|handleC
operator|.
name|transportService
argument_list|,
name|EMPTY_HOSTS_PROVIDER
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|zenPingC
operator|.
name|start
argument_list|(
operator|new
name|PingContextProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|handleC
operator|.
name|node
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"UZP_C"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|clusterState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|closeables
operator|.
name|push
argument_list|(
name|zenPingC
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// the presence of an unresolvable host should not prevent resolvable hosts from being pinged
end_comment

begin_block
block|{
specifier|final
name|Collection
argument_list|<
name|ZenPing
operator|.
name|PingResponse
argument_list|>
name|pingResponses
init|=
name|zenPingA
operator|.
name|pingAndWait
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pingResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ZenPing
operator|.
name|PingResponse
name|ping
init|=
name|pingResponses
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ping
operator|.
name|node
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"UZP_C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ping
operator|.
name|getClusterStateVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|state
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertCountersMoreThan
argument_list|(
name|handleA
argument_list|,
name|handleC
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|handleA
operator|.
name|counters
operator|.
name|get
argument_list|(
name|handleB
operator|.
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_decl_stmt
specifier|final
name|HashMap
argument_list|<
name|TransportAddress
argument_list|,
name|Integer
argument_list|>
name|moreThan
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_comment
comment|// we should see at least one ping to UZP_B, and one more ping than we have already seen to UZP_C
end_comment

begin_expr_stmt
name|moreThan
operator|.
name|put
argument_list|(
name|handleB
operator|.
name|address
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|moreThan
operator|.
name|put
argument_list|(
name|handleC
operator|.
name|address
argument_list|,
name|handleA
operator|.
name|counters
operator|.
name|get
argument_list|(
name|handleC
operator|.
name|address
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// now allow UZP_B to be resolvable
end_comment

begin_expr_stmt
name|addresses
operator|.
name|put
argument_list|(
literal|"UZP_B"
argument_list|,
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|TransportAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|handleB
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|handleB
operator|.
name|address
operator|.
name|address
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// now we should see pings to UZP_B; this establishes that host resolutions are not cached
end_comment

begin_block
block|{
specifier|final
name|Collection
argument_list|<
name|ZenPing
operator|.
name|PingResponse
argument_list|>
name|secondPingResponses
init|=
name|zenPingA
operator|.
name|pingAndWait
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondPingResponses
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|secondPingResponses
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|node
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ids
argument_list|,
name|equalTo
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"UZP_B"
argument_list|,
literal|"UZP_C"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCountersMoreThan
argument_list|(
name|moreThan
argument_list|,
name|handleA
argument_list|,
name|handleB
argument_list|,
name|handleC
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
unit|}      public
DECL|method|testPortLimit
name|void
name|testPortLimit
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|NetworkService
name|networkService
init|=
operator|new
name|NetworkService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Transport
name|transport
init|=
operator|new
name|MockTcpTransport
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|networkService
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transport
argument_list|)
expr_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|idGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|int
name|limitPortCounts
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoveryNodes
init|=
name|UnicastZenPing
operator|.
name|resolveDiscoveryNodes
argument_list|(
name|executorService
argument_list|,
name|logger
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
name|limitPortCounts
argument_list|,
name|transportService
argument_list|,
parameter_list|()
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|discoveryNodes
argument_list|,
name|hasSize
argument_list|(
name|limitPortCounts
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|DiscoveryNode
name|discoveryNode
range|:
name|discoveryNodes
control|)
block|{
name|assertTrue
argument_list|(
name|discoveryNode
operator|.
name|getAddress
argument_list|()
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|isLoopbackAddress
argument_list|()
argument_list|)
expr_stmt|;
name|ports
operator|.
name|add
argument_list|(
name|discoveryNode
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ports
argument_list|,
name|equalTo
argument_list|(
name|IntStream
operator|.
name|range
argument_list|(
literal|9300
argument_list|,
literal|9300
operator|+
name|limitPortCounts
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|m
lambda|->
name|m
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testUnknownHost
specifier|public
name|void
name|testUnknownHost
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Logger
name|logger
init|=
name|mock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NetworkService
name|networkService
init|=
operator|new
name|NetworkService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|hostname
init|=
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|UnknownHostException
name|unknownHostException
init|=
operator|new
name|UnknownHostException
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
specifier|final
name|Transport
name|transport
init|=
operator|new
name|MockTcpTransport
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|networkService
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|,
name|int
name|perAddressLimit
parameter_list|)
throws|throws
name|UnknownHostException
block|{
throw|throw
name|unknownHostException
throw|;
block|}
block|}
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transport
argument_list|)
expr_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|idGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoveryNodes
init|=
name|UnicastZenPing
operator|.
name|resolveDiscoveryNodes
argument_list|(
name|executorService
argument_list|,
name|logger
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|hostname
argument_list|)
argument_list|,
literal|1
argument_list|,
name|transportService
argument_list|,
parameter_list|()
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|discoveryNodes
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logger
argument_list|)
operator|.
name|warn
argument_list|(
literal|"failed to resolve host ["
operator|+
name|hostname
operator|+
literal|"]"
argument_list|,
name|unknownHostException
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testResolveTimeout
specifier|public
name|void
name|testResolveTimeout
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Logger
name|logger
init|=
name|mock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NetworkService
name|networkService
init|=
operator|new
name|NetworkService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Transport
name|transport
init|=
operator|new
name|MockTcpTransport
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|networkService
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|,
name|int
name|perAddressLimit
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
literal|"hostname1"
operator|.
name|equals
argument_list|(
name|address
argument_list|)
condition|)
block|{
return|return
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|TransportAddress
argument_list|(
name|TransportAddress
operator|.
name|META_ADDRESS
argument_list|,
literal|9300
argument_list|)
block|}
return|;
block|}
elseif|else
if|if
condition|(
literal|"hostname2"
operator|.
name|equals
argument_list|(
name|address
argument_list|)
condition|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|TransportAddress
argument_list|(
name|TransportAddress
operator|.
name|META_ADDRESS
argument_list|,
literal|9300
argument_list|)
block|}
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
name|address
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transport
argument_list|)
expr_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|idGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|TimeValue
name|resolveTimeout
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoveryNodes
init|=
name|UnicastZenPing
operator|.
name|resolveDiscoveryNodes
argument_list|(
name|executorService
argument_list|,
name|logger
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hostname1"
argument_list|,
literal|"hostname2"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|transportService
argument_list|,
parameter_list|()
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|,
name|resolveTimeout
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|discoveryNodes
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logger
argument_list|)
operator|.
name|trace
argument_list|(
literal|"resolved host [{}] to {}"
argument_list|,
literal|"hostname1"
argument_list|,
operator|new
name|TransportAddress
index|[]
block|{
operator|new
name|TransportAddress
argument_list|(
name|TransportAddress
operator|.
name|META_ADDRESS
argument_list|,
literal|9300
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logger
argument_list|)
operator|.
name|warn
argument_list|(
literal|"timed out after [{}] resolving host [{}]"
argument_list|,
name|resolveTimeout
argument_list|,
literal|"hostname2"
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testInvalidHosts
specifier|public
name|void
name|testInvalidHosts
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Logger
name|logger
init|=
name|mock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NetworkService
name|networkService
init|=
operator|new
name|NetworkService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Transport
name|transport
init|=
operator|new
name|MockTcpTransport
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|networkService
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transport
argument_list|)
expr_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|closeables
operator|.
name|push
argument_list|(
name|transportService
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|idGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|discoveryNodes
init|=
name|UnicastZenPing
operator|.
name|resolveDiscoveryNodes
argument_list|(
name|executorService
argument_list|,
name|logger
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"127.0.0.1:9300:9300"
argument_list|,
literal|"127.0.0.1:9301"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|transportService
argument_list|,
parameter_list|()
lambda|->
name|Integer
operator|.
name|toString
argument_list|(
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|discoveryNodes
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// only one of the two is valid and will be used
name|assertThat
argument_list|(
name|discoveryNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|discoveryNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|9301
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logger
argument_list|)
operator|.
name|warn
argument_list|(
name|eq
argument_list|(
literal|"failed to resolve host [127.0.0.1:9300:9300]"
argument_list|)
argument_list|,
name|Matchers
operator|.
name|any
argument_list|(
name|ExecutionException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// assert that we tried to ping each of the configured nodes at least once
end_comment

begin_function
DECL|method|assertCountersMoreThan
specifier|private
name|void
name|assertCountersMoreThan
parameter_list|(
specifier|final
name|NetworkHandle
name|that
parameter_list|,
specifier|final
name|NetworkHandle
modifier|...
name|handles
parameter_list|)
block|{
specifier|final
name|HashMap
argument_list|<
name|TransportAddress
argument_list|,
name|Integer
argument_list|>
name|moreThan
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NetworkHandle
name|handle
range|:
name|handles
control|)
block|{
assert|assert
name|handle
operator|!=
name|that
assert|;
name|moreThan
operator|.
name|put
argument_list|(
name|handle
operator|.
name|address
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertCountersMoreThan
argument_list|(
name|moreThan
argument_list|,
name|that
argument_list|,
name|handles
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertCountersMoreThan
specifier|private
name|void
name|assertCountersMoreThan
parameter_list|(
specifier|final
name|Map
argument_list|<
name|TransportAddress
argument_list|,
name|Integer
argument_list|>
name|moreThan
parameter_list|,
specifier|final
name|NetworkHandle
name|that
parameter_list|,
specifier|final
name|NetworkHandle
modifier|...
name|handles
parameter_list|)
block|{
for|for
control|(
specifier|final
name|NetworkHandle
name|handle
range|:
name|handles
control|)
block|{
assert|assert
name|handle
operator|!=
name|that
assert|;
name|assertThat
argument_list|(
name|that
operator|.
name|counters
operator|.
name|get
argument_list|(
name|handle
operator|.
name|address
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|moreThan
operator|.
name|get
argument_list|(
name|handle
operator|.
name|address
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|startServices
specifier|private
name|NetworkHandle
name|startServices
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|,
specifier|final
name|ThreadPool
name|threadPool
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|,
specifier|final
name|Version
name|version
parameter_list|,
specifier|final
name|BiFunction
argument_list|<
name|Settings
argument_list|,
name|Version
argument_list|,
name|Transport
argument_list|>
name|supplier
parameter_list|)
block|{
specifier|final
name|Transport
name|transport
init|=
name|supplier
operator|.
name|apply
argument_list|(
name|settings
argument_list|,
name|version
argument_list|)
decl_stmt|;
specifier|final
name|TransportService
name|transportService
init|=
operator|new
name|TransportService
argument_list|(
name|settings
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|TransportAddress
argument_list|,
name|AtomicInteger
argument_list|>
name|counters
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
name|transportService
operator|.
name|addConnectionListener
argument_list|(
operator|new
name|TransportConnectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|counters
operator|.
name|computeIfAbsent
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
expr_stmt|;
name|counters
operator|.
name|get
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
specifier|final
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
name|nodeId
argument_list|,
name|transportService
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|setLocalNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
operator|new
name|NetworkHandle
argument_list|(
name|transport
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|transportService
argument_list|,
name|node
argument_list|,
name|counters
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|NetworkHandle
specifier|private
specifier|static
class|class
name|NetworkHandle
block|{
DECL|field|address
specifier|public
specifier|final
name|TransportAddress
name|address
decl_stmt|;
DECL|field|transportService
specifier|public
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|node
specifier|public
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|counters
specifier|public
specifier|final
name|ConcurrentMap
argument_list|<
name|TransportAddress
argument_list|,
name|AtomicInteger
argument_list|>
name|counters
decl_stmt|;
DECL|method|NetworkHandle
specifier|public
name|NetworkHandle
parameter_list|(
specifier|final
name|TransportAddress
name|address
parameter_list|,
specifier|final
name|TransportService
name|transportService
parameter_list|,
specifier|final
name|DiscoveryNode
name|discoveryNode
parameter_list|,
specifier|final
name|ConcurrentMap
argument_list|<
name|TransportAddress
argument_list|,
name|AtomicInteger
argument_list|>
name|counters
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|discoveryNode
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

