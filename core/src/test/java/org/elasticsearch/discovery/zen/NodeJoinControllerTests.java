begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NotMasterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|FailedRerouteAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BaseFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|elect
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|membership
operator|.
name|MembershipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|shuffle
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createClusterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|setState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
annotation|@
name|TestLogging
argument_list|(
literal|"discovery.zen:TRACE"
argument_list|)
DECL|class|NodeJoinControllerTests
specifier|public
class|class
name|NodeJoinControllerTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|private
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|nodeJoinController
specifier|private
name|NodeJoinController
name|nodeJoinController
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
literal|"ShardReplicationTests"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clusterService
operator|=
name|createClusterService
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
specifier|final
name|DiscoveryNodes
name|initialNodes
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|localNode
init|=
name|initialNodes
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
comment|// make sure we have a master
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|initialNodes
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nodeJoinController
operator|=
operator|new
name|NodeJoinController
argument_list|(
name|clusterService
argument_list|,
operator|new
name|NoopRoutingService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|ElectMasterService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
operator|new
name|DiscoverySettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
argument_list|)
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleJoinAccumulation
specifier|public
name|void
name|testSimpleJoinAccumulation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nodeId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|joinNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|nodeJoinController
operator|.
name|startAccumulatingJoins
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|pendingJoins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|pendingJoins
operator|.
name|add
argument_list|(
name|joinNodeAsync
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodeJoinController
operator|.
name|stopAccumulatingJoins
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|boolean
name|hadSyncJoin
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|joinNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|hadSyncJoin
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hadSyncJoin
condition|)
block|{
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|joinFuture
range|:
name|pendingJoins
control|)
block|{
name|assertThat
argument_list|(
name|joinFuture
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|joinFuture
range|:
name|pendingJoins
control|)
block|{
name|joinFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertNodesInCurrentState
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailingJoinsWhenNotMaster
specifier|public
name|void
name|testFailingJoinsWhenNotMaster
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
comment|// remove current master flag
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nodeId
init|=
literal|0
decl_stmt|;
try|try
block|{
name|joinNode
argument_list|(
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"failed to fail node join when not a master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NotMasterException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> testing joins fail post accumulation"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|pendingJoins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeJoinController
operator|.
name|startAccumulatingJoins
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|joinNodeAsync
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|pendingJoins
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodeJoinController
operator|.
name|stopAccumulatingJoins
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|pendingJoins
control|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"failed to fail accumulated node join when not a master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NotMasterException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSimpleMasterElectionWithoutRequiredJoins
specifier|public
name|void
name|testSimpleMasterElectionWithoutRequiredJoins
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nodeId
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|requiredJoins
init|=
literal|0
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using requiredJoins [{}]"
argument_list|,
name|requiredJoins
argument_list|)
expr_stmt|;
comment|// initial (failing) joins shouldn't count
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
try|try
block|{
name|joinNode
argument_list|(
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"failed to fail node join when not a master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NotMasterException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeJoinController
operator|.
name|startAccumulatingJoins
argument_list|()
expr_stmt|;
specifier|final
name|SimpleFuture
name|electionFuture
init|=
operator|new
name|SimpleFuture
argument_list|(
literal|"master election"
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|masterElection
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error from waitToBeElectedAsMaster"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|markAsFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|nodeJoinController
operator|.
name|waitToBeElectedAsMaster
argument_list|(
name|requiredJoins
argument_list|,
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|30
argument_list|)
argument_list|,
operator|new
name|NodeJoinController
operator|.
name|ElectionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onElectedAsMaster
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"callback called with elected as master, but state disagrees"
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|markAsDone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error while waiting to be elected as master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|markAsFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|masterElection
operator|.
name|start
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> requiredJoins is set to 0. verifying election finished"
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleMasterElection
specifier|public
name|void
name|testSimpleMasterElection
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nodeId
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|requiredJoins
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using requiredJoins [{}]"
argument_list|,
name|requiredJoins
argument_list|)
expr_stmt|;
comment|// initial (failing) joins shouldn't count
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
try|try
block|{
name|joinNode
argument_list|(
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"failed to fail node join when not a master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NotMasterException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeJoinController
operator|.
name|startAccumulatingJoins
argument_list|()
expr_stmt|;
specifier|final
name|SimpleFuture
name|electionFuture
init|=
operator|new
name|SimpleFuture
argument_list|(
literal|"master election"
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|masterElection
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error from waitToBeElectedAsMaster"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|markAsFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|nodeJoinController
operator|.
name|waitToBeElectedAsMaster
argument_list|(
name|requiredJoins
argument_list|,
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|30
argument_list|)
argument_list|,
operator|new
name|NodeJoinController
operator|.
name|ElectionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onElectedAsMaster
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"callback called with elected as master, but state disagrees"
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|markAsDone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error while waiting to be elected as master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|markAsFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|masterElection
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"election finished immediately but required joins is ["
operator|+
name|requiredJoins
operator|+
literal|"]"
argument_list|,
name|electionFuture
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|initialJoins
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|requiredJoins
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|SimpleFuture
argument_list|>
name|pendingJoins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesToJoin
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialJoins
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|nodesToJoin
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|// data nodes shouldn't count
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requiredJoins
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|nodesToJoin
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add
name|shuffle
argument_list|(
name|nodesToJoin
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> joining [{}] unique master nodes. Total of [{}] join requests"
argument_list|,
name|initialJoins
argument_list|,
name|nodesToJoin
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodesToJoin
control|)
block|{
name|pendingJoins
operator|.
name|add
argument_list|(
name|joinNodeAsync
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> asserting master election didn't finish yet"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"election finished after ["
operator|+
name|initialJoins
operator|+
literal|"] master nodes but required joins is ["
operator|+
name|requiredJoins
operator|+
literal|"]"
argument_list|,
name|electionFuture
operator|.
name|isDone
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalJoins
init|=
name|requiredJoins
operator|-
name|initialJoins
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|nodesToJoin
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|finalJoins
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|nodesToJoin
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requiredJoins
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|nodesToJoin
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|shuffle
argument_list|(
name|nodesToJoin
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> joining [{}] nodes, with repetition a total of [{}]"
argument_list|,
name|finalJoins
argument_list|,
name|nodesToJoin
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodesToJoin
control|)
block|{
name|pendingJoins
operator|.
name|add
argument_list|(
name|joinNodeAsync
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> waiting for master election to with no exception"
argument_list|)
expr_stmt|;
name|electionFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> waiting on all joins to be processed"
argument_list|)
expr_stmt|;
for|for
control|(
name|SimpleFuture
name|future
range|:
name|pendingJoins
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"waiting on {}"
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// throw any exception
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"--> testing accumulation stopped"
argument_list|)
expr_stmt|;
name|nodeJoinController
operator|.
name|startAccumulatingJoins
argument_list|()
expr_stmt|;
name|nodeJoinController
operator|.
name|stopAccumulatingJoins
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMasterElectionTimeout
specifier|public
name|void
name|testMasterElectionTimeout
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nodeId
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|requiredJoins
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> using requiredJoins [{}]"
argument_list|,
name|requiredJoins
argument_list|)
expr_stmt|;
comment|// initial (failing) joins shouldn't count
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
try|try
block|{
name|joinNode
argument_list|(
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"failed to fail node join when not a master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NotMasterException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeJoinController
operator|.
name|startAccumulatingJoins
argument_list|()
expr_stmt|;
specifier|final
name|int
name|initialJoins
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|requiredJoins
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|SimpleFuture
argument_list|>
name|pendingJoins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodesToJoin
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialJoins
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
operator|++
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|nodesToJoin
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|shuffle
argument_list|(
name|nodesToJoin
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> joining [{}] nodes, with repetition a total of [{}]"
argument_list|,
name|initialJoins
argument_list|,
name|nodesToJoin
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodesToJoin
control|)
block|{
name|pendingJoins
operator|.
name|add
argument_list|(
name|joinNodeAsync
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeJoinController
operator|.
name|waitToBeElectedAsMaster
argument_list|(
name|requiredJoins
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|NodeJoinController
operator|.
name|ElectionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onElectedAsMaster
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"callback called with elected as master, but state disagrees"
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> verifying election timed out"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchTimeoutException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> verifying all joins are failed"
argument_list|)
expr_stmt|;
for|for
control|(
name|SimpleFuture
name|future
range|:
name|pendingJoins
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"waiting on {}"
argument_list|,
name|future
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// throw any exception
name|fail
argument_list|(
literal|"failed to fail node join ["
operator|+
name|future
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NotMasterException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNewClusterStateOnExistingNodeJoin
specifier|public
name|void
name|testNewClusterStateOnExistingNodeJoin
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DiscoveryNode
name|other_node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"other_node"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|nodesBuilder
operator|.
name|put
argument_list|(
name|other_node
argument_list|)
expr_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|clusterService
operator|.
name|state
argument_list|()
expr_stmt|;
name|joinNode
argument_list|(
name|other_node
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed to publish a new state upon existing join"
argument_list|,
name|clusterService
operator|.
name|state
argument_list|()
operator|!=
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalConcurrentJoins
specifier|public
name|void
name|testNormalConcurrentJoins
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|3
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|threads
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|backgroundExceptions
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iterations
init|=
name|rarely
argument_list|()
condition|?
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
else|:
literal|1
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error in join thread"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|backgroundExceptions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} joining"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|joinNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"t_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for joins to complete"
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertNodesInCurrentState
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|testElectionWithConcurrentJoins
specifier|public
name|void
name|testElectionWithConcurrentJoins
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|nodeJoinController
operator|.
name|startAccumulatingJoins
argument_list|()
expr_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|3
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|requiredJoins
init|=
name|randomInt
argument_list|(
name|threads
operator|.
name|length
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|threads
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|backgroundExceptions
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iterations
init|=
name|rarely
argument_list|()
condition|?
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
else|:
literal|1
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error in join thread"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|backgroundExceptions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} joining"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|joinNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"t_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting to be elected as master (required joins [{}])"
argument_list|,
name|requiredJoins
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nodeJoinController
operator|.
name|waitToBeElectedAsMaster
argument_list|(
name|requiredJoins
argument_list|,
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|30
argument_list|)
argument_list|,
operator|new
name|NodeJoinController
operator|.
name|ElectionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onElectedAsMaster
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"callback called with elected as master, but state disagrees"
argument_list|,
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|isLocalNodeElectedMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error while waiting to be elected as master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|failure
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|ExceptionsHelper
operator|.
name|reThrowIfNotNull
argument_list|(
name|failure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for joins to complete"
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertNodesInCurrentState
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|class|NoopRoutingService
specifier|static
class|class
name|NoopRoutingService
extends|extends
name|RoutingService
block|{
DECL|method|NoopRoutingService
specifier|public
name|NoopRoutingService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
operator|new
name|NoopAllocationService
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performReroute
specifier|protected
name|void
name|performReroute
parameter_list|(
name|String
name|reason
parameter_list|)
block|{          }
block|}
DECL|class|NoopAllocationService
specifier|static
class|class
name|NoopAllocationService
extends|extends
name|AllocationService
block|{
DECL|method|NoopAllocationService
specifier|public
name|NoopAllocationService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyStartedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyStartedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|ShardRouting
argument_list|>
name|startedShards
parameter_list|,
name|boolean
name|withReroute
parameter_list|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|applyFailedShards
specifier|public
name|RoutingAllocation
operator|.
name|Result
name|applyFailedShards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|FailedRerouteAllocation
operator|.
name|FailedShard
argument_list|>
name|failedShards
parameter_list|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reroute
specifier|protected
name|RoutingAllocation
operator|.
name|Result
name|reroute
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|reason
parameter_list|,
name|boolean
name|debug
parameter_list|)
block|{
return|return
operator|new
name|RoutingAllocation
operator|.
name|Result
argument_list|(
literal|false
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|assertNodesInCurrentState
specifier|protected
name|void
name|assertNodesInCurrentState
parameter_list|(
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|expectedNodes
parameter_list|)
block|{
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"assert for [{}] in:\n{}"
argument_list|,
name|expectedNodes
argument_list|,
name|state
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|state
operator|.
name|nodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|expectedNodes
control|)
block|{
name|assertThat
argument_list|(
literal|"missing "
operator|+
name|node
operator|+
literal|"\n"
operator|+
name|discoveryNodes
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|discoveryNodes
operator|.
name|get
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|discoveryNodes
operator|.
name|getSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedNodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|SimpleFuture
specifier|static
class|class
name|SimpleFuture
extends|extends
name|BaseFuture
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|description
specifier|final
name|String
name|description
decl_stmt|;
DECL|method|SimpleFuture
name|SimpleFuture
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|method|markAsDone
specifier|public
name|void
name|markAsDone
parameter_list|()
block|{
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|markAsFailed
specifier|public
name|void
name|markAsFailed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"future ["
operator|+
name|description
operator|+
literal|"]"
return|;
block|}
block|}
DECL|field|joinId
specifier|final
specifier|static
name|AtomicInteger
name|joinId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|joinNodeAsync
specifier|private
name|SimpleFuture
name|joinNodeAsync
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|SimpleFuture
name|future
init|=
operator|new
name|SimpleFuture
argument_list|(
literal|"join of "
operator|+
name|node
operator|+
literal|" (id ["
operator|+
name|joinId
operator|.
name|incrementAndGet
argument_list|()
operator|+
literal|"]"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"starting {}"
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|nodeJoinController
operator|.
name|handleJoinRequest
argument_list|(
name|node
argument_list|,
operator|new
name|MembershipAction
operator|.
name|JoinCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} completed"
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|future
operator|.
name|markAsDone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error for {}"
argument_list|,
name|t
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|future
operator|.
name|markAsFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
DECL|method|joinNode
specifier|private
name|void
name|joinNode
parameter_list|(
specifier|final
name|DiscoveryNode
name|node
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|joinNodeAsync
argument_list|(
name|node
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|newNode
specifier|protected
name|DiscoveryNode
name|newNode
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|newNode
argument_list|(
name|i
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newNode
specifier|protected
name|DiscoveryNode
name|newNode
parameter_list|(
name|int
name|i
parameter_list|,
name|boolean
name|master
parameter_list|)
block|{
name|Set
argument_list|<
name|DiscoveryNode
operator|.
name|Role
argument_list|>
name|roles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|master
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|prefix
init|=
name|master
condition|?
literal|"master_"
else|:
literal|"data_"
decl_stmt|;
return|return
operator|new
name|DiscoveryNode
argument_list|(
name|prefix
operator|+
name|i
argument_list|,
name|i
operator|+
literal|""
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"test_"
operator|+
name|i
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|roles
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

