begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.zen
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
operator|.
name|shouldIgnoreOrRejectNewClusterState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ZenDiscoveryUnitTest
specifier|public
class|class
name|ZenDiscoveryUnitTest
extends|extends
name|ESTestCase
block|{
DECL|method|testShouldIgnoreNewClusterState
specifier|public
name|void
name|testShouldIgnoreNewClusterState
parameter_list|()
block|{
name|ClusterName
name|clusterName
init|=
operator|new
name|ClusterName
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|currentNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
name|currentNodes
operator|.
name|masterNodeId
argument_list|(
literal|"a"
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"a"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|newNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
name|newNodes
operator|.
name|masterNodeId
argument_list|(
literal|"a"
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"a"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
operator|.
name|Builder
name|currentState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
name|currentState
operator|.
name|nodes
argument_list|(
name|currentNodes
argument_list|)
expr_stmt|;
name|ClusterState
operator|.
name|Builder
name|newState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
decl_stmt|;
name|newState
operator|.
name|nodes
argument_list|(
name|newNodes
argument_list|)
expr_stmt|;
name|currentState
operator|.
name|version
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|newState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should ignore, because new state's version is lower to current state's version"
argument_list|,
name|shouldIgnoreOrRejectNewClusterState
argument_list|(
name|logger
argument_list|,
name|currentState
operator|.
name|build
argument_list|()
argument_list|,
name|newState
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|currentState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|newState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"should not ignore, because new state's version is equal to current state's version"
argument_list|,
name|shouldIgnoreOrRejectNewClusterState
argument_list|(
name|logger
argument_list|,
name|currentState
operator|.
name|build
argument_list|()
argument_list|,
name|newState
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|currentState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|newState
operator|.
name|version
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"should not ignore, because new state's version is higher to current state's version"
argument_list|,
name|shouldIgnoreOrRejectNewClusterState
argument_list|(
name|logger
argument_list|,
name|currentState
operator|.
name|build
argument_list|()
argument_list|,
name|newState
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|currentNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
expr_stmt|;
name|currentNodes
operator|.
name|masterNodeId
argument_list|(
literal|"b"
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"b"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
comment|// version isn't taken into account, so randomize it to ensure this.
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|currentState
operator|.
name|version
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|newState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|newState
operator|.
name|version
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|currentState
operator|.
name|nodes
argument_list|(
name|currentNodes
argument_list|)
expr_stmt|;
try|try
block|{
name|shouldIgnoreOrRejectNewClusterState
argument_list|(
name|logger
argument_list|,
name|currentState
operator|.
name|build
argument_list|()
argument_list|,
name|newState
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should ignore, because current state's master is not equal to new state's master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cluster state from a different master than the current one, rejecting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
expr_stmt|;
name|currentNodes
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|currentState
operator|.
name|nodes
argument_list|(
name|currentNodes
argument_list|)
expr_stmt|;
comment|// version isn't taken into account, so randomize it to ensure this.
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|currentState
operator|.
name|version
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|newState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentState
operator|.
name|version
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|newState
operator|.
name|version
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"should not ignore, because current state doesn't have a master"
argument_list|,
name|shouldIgnoreOrRejectNewClusterState
argument_list|(
name|logger
argument_list|,
name|currentState
operator|.
name|build
argument_list|()
argument_list|,
name|newState
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

