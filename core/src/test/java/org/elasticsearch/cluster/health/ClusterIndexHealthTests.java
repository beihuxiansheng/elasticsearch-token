begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.health
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTableGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ClusterIndexHealthTests
specifier|public
class|class
name|ClusterIndexHealthTests
extends|extends
name|ESTestCase
block|{
DECL|method|testClusterIndexHealth
specifier|public
name|void
name|testClusterIndexHealth
parameter_list|()
block|{
name|RoutingTableGenerator
name|routingTableGenerator
init|=
operator|new
name|RoutingTableGenerator
argument_list|()
decl_stmt|;
name|int
name|numberOfShards
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|numberOfReplicas
init|=
name|randomInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numberOfShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTableGenerator
operator|.
name|ShardCounter
name|counter
init|=
operator|new
name|RoutingTableGenerator
operator|.
name|ShardCounter
argument_list|()
decl_stmt|;
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|routingTableGenerator
operator|.
name|genIndexRoutingTable
argument_list|(
name|indexMetaData
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|ClusterIndexHealth
name|indexHealth
init|=
operator|new
name|ClusterIndexHealth
argument_list|(
name|indexMetaData
argument_list|,
name|indexRoutingTable
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"index status: {}, expected {}"
argument_list|,
name|indexHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|counter
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertIndexHealth
argument_list|(
name|indexHealth
argument_list|,
name|counter
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIndexHealth
specifier|private
name|void
name|assertIndexHealth
parameter_list|(
name|ClusterIndexHealth
name|indexHealth
parameter_list|,
name|RoutingTableGenerator
operator|.
name|ShardCounter
name|counter
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getNumberOfShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getNumberOfReplicas
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|active
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|relocating
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getInitializingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|initializing
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getUnassignedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|unassigned
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexHealth
operator|.
name|getShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|totalShards
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ClusterShardHealth
name|shardHealth
range|:
name|indexHealth
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|totalShards
operator|+=
name|shardHealth
operator|.
name|getActiveShards
argument_list|()
operator|+
name|shardHealth
operator|.
name|getInitializingShards
argument_list|()
operator|+
name|shardHealth
operator|.
name|getUnassignedShards
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|totalShards
argument_list|,
name|equalTo
argument_list|(
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
operator|*
operator|(
literal|1
operator|+
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

