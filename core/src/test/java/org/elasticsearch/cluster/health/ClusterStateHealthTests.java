begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.health
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|TransportClusterHealthAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|LocalClusterUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTableGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenIntMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|gateway
operator|.
name|TestGatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|CapturingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|createClusterService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|setState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|ClusterStateHealthTests
specifier|public
class|class
name|ClusterStateHealthTests
extends|extends
name|ESTestCase
block|{
DECL|field|indexNameExpressionResolver
specifier|private
specifier|final
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
init|=
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
name|TransportService
name|transportService
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupThreadPool
specifier|public
specifier|static
name|void
name|setupThreadPool
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
literal|"ClusterStateHealthTests"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clusterService
operator|=
name|createClusterService
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|clusterService
operator|.
name|getSettings
argument_list|()
argument_list|,
operator|new
name|CapturingTransport
argument_list|()
argument_list|,
name|threadPool
argument_list|,
name|TransportService
operator|.
name|NOOP_TRANSPORT_INTERCEPTOR
argument_list|,
name|x
lambda|->
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|close
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|terminateThreadPool
specifier|public
specifier|static
name|void
name|terminateThreadPool
parameter_list|()
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testClusterHealthWaitsForClusterStateApplication
specifier|public
name|void
name|testClusterHealthWaitsForClusterStateApplication
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|CountDownLatch
name|applyLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|listenerCalled
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|setState
argument_list|(
name|clusterService
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|addStateApplier
argument_list|(
name|event
lambda|->
block|{
name|listenerCalled
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|applyLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> submit task to restore master"
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"restore master"
argument_list|,
operator|new
name|LocalClusterUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterTasksResult
argument_list|<
name|LocalClusterUpdateTask
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|newState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|currentState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unexpected failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for listener to be called and cluster state being blocked"
argument_list|)
expr_stmt|;
name|listenerCalled
operator|.
name|await
argument_list|()
expr_stmt|;
name|TransportClusterHealthAction
name|action
init|=
operator|new
name|TransportClusterHealthAction
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
operator|new
name|ActionFilters
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
name|indexNameExpressionResolver
argument_list|,
operator|new
name|TestGatewayAllocator
argument_list|()
argument_list|)
decl_stmt|;
name|PlainActionFuture
argument_list|<
name|ClusterHealthResponse
argument_list|>
name|listener
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|action
operator|.
name|execute
argument_list|(
operator|new
name|ClusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> realising task to restore master"
argument_list|)
expr_stmt|;
name|applyLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|testClusterHealth
specifier|public
name|void
name|testClusterHealth
parameter_list|()
throws|throws
name|IOException
block|{
name|RoutingTableGenerator
name|routingTableGenerator
init|=
operator|new
name|RoutingTableGenerator
argument_list|()
decl_stmt|;
name|RoutingTableGenerator
operator|.
name|ShardCounter
name|counter
init|=
operator|new
name|RoutingTableGenerator
operator|.
name|ShardCounter
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
literal|4
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|int
name|numberOfShards
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|numberOfReplicas
init|=
name|randomInt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numberOfShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|routingTableGenerator
operator|.
name|genIndexRoutingTable
argument_list|(
name|indexMetaData
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|routingTable
operator|.
name|add
argument_list|(
name|indexRoutingTable
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|clusterState
argument_list|,
name|IndicesOptions
operator|.
name|strictExpand
argument_list|()
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|ClusterStateHealth
name|clusterStateHealth
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|,
name|concreteIndices
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"cluster status: {}, expected {}"
argument_list|,
name|clusterStateHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|counter
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|clusterStateHealth
operator|=
name|maybeSerialize
argument_list|(
name|clusterStateHealth
argument_list|)
expr_stmt|;
name|assertClusterHealth
argument_list|(
name|clusterStateHealth
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterHealthOnIndexCreation
specifier|public
name|void
name|testClusterHealthOnIndexCreation
parameter_list|()
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test-idx"
decl_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[]
block|{
name|indexName
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ClusterState
argument_list|>
name|clusterStates
init|=
name|simulateIndexCreationStates
argument_list|(
name|indexName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// make sure cluster health is always YELLOW, up until the last state where it should be GREEN
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterStates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ClusterStateHealth
name|health
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testClusterHealthOnIndexCreationWithFailedAllocations
specifier|public
name|void
name|testClusterHealthOnIndexCreationWithFailedAllocations
parameter_list|()
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test-idx"
decl_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[]
block|{
name|indexName
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ClusterState
argument_list|>
name|clusterStates
init|=
name|simulateIndexCreationStates
argument_list|(
name|indexName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// make sure cluster health is YELLOW up until the final cluster state, which contains primary shard
comment|// failed allocations that should make the cluster health RED
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterStates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ClusterStateHealth
name|health
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testClusterHealthOnClusterRecovery
specifier|public
name|void
name|testClusterHealthOnClusterRecovery
parameter_list|()
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test-idx"
decl_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[]
block|{
name|indexName
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ClusterState
argument_list|>
name|clusterStates
init|=
name|simulateClusterRecoveryStates
argument_list|(
name|indexName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// make sure cluster health is YELLOW up until the final cluster state, when it turns GREEN
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterStates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ClusterStateHealth
name|health
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testClusterHealthOnClusterRecoveryWithFailures
specifier|public
name|void
name|testClusterHealthOnClusterRecoveryWithFailures
parameter_list|()
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test-idx"
decl_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[]
block|{
name|indexName
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ClusterState
argument_list|>
name|clusterStates
init|=
name|simulateClusterRecoveryStates
argument_list|(
name|indexName
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// make sure cluster health is YELLOW up until the final cluster state, which contains primary shard
comment|// failed allocations that should make the cluster health RED
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterStates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ClusterStateHealth
name|health
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testClusterHealthOnClusterRecoveryWithPreviousAllocationIds
specifier|public
name|void
name|testClusterHealthOnClusterRecoveryWithPreviousAllocationIds
parameter_list|()
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test-idx"
decl_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[]
block|{
name|indexName
block|}
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ClusterState
argument_list|>
name|clusterStates
init|=
name|simulateClusterRecoveryStates
argument_list|(
name|indexName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// because there were previous allocation ids, we should be RED until the primaries are started,
comment|// then move to YELLOW, and the last state should be GREEN when all shards have been started
specifier|final
name|ClusterState
name|clusterState
init|=
name|clusterStates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ClusterStateHealth
name|health
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|clusterStates
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// if the inactive primaries are due solely to recovery (not failed allocation or previously being allocated),
comment|// then cluster health is YELLOW, otherwise RED
if|if
condition|(
name|primaryInactiveDueToRecovery
argument_list|(
name|indexName
argument_list|,
name|clusterState
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertThat
argument_list|(
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testClusterHealthOnClusterRecoveryWithPreviousAllocationIdsAndAllocationFailures
specifier|public
name|void
name|testClusterHealthOnClusterRecoveryWithPreviousAllocationIdsAndAllocationFailures
parameter_list|()
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test-idx"
decl_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[]
block|{
name|indexName
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|ClusterState
name|clusterState
range|:
name|simulateClusterRecoveryStates
argument_list|(
name|indexName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
control|)
block|{
specifier|final
name|ClusterStateHealth
name|health
init|=
operator|new
name|ClusterStateHealth
argument_list|(
name|clusterState
argument_list|,
name|indices
argument_list|)
decl_stmt|;
comment|// if the inactive primaries are due solely to recovery (not failed allocation or previously being allocated)
comment|// then cluster health is YELLOW, otherwise RED
if|if
condition|(
name|primaryInactiveDueToRecovery
argument_list|(
name|indexName
argument_list|,
name|clusterState
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"clusterState is:\n"
operator|+
name|clusterState
argument_list|,
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"clusterState is:\n"
operator|+
name|clusterState
argument_list|,
name|health
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|maybeSerialize
name|ClusterStateHealth
name|maybeSerialize
parameter_list|(
name|ClusterStateHealth
name|clusterStateHealth
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|clusterStateHealth
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|clusterStateHealth
operator|=
operator|new
name|ClusterStateHealth
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterStateHealth
return|;
block|}
DECL|method|simulateIndexCreationStates
specifier|private
name|List
argument_list|<
name|ClusterState
argument_list|>
name|simulateIndexCreationStates
parameter_list|(
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|boolean
name|withPrimaryAllocationFailures
parameter_list|)
block|{
specifier|final
name|int
name|numberOfShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfReplicas
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numberOfShards
argument_list|)
decl_stmt|;
comment|// initial index creation and new routing table info
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numberOfShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test_cluster"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|generateClusterStates
argument_list|(
name|clusterState
argument_list|,
name|indexName
argument_list|,
name|numberOfReplicas
argument_list|,
name|withPrimaryAllocationFailures
argument_list|)
return|;
block|}
DECL|method|simulateClusterRecoveryStates
specifier|private
name|List
argument_list|<
name|ClusterState
argument_list|>
name|simulateClusterRecoveryStates
parameter_list|(
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|boolean
name|withPreviousAllocationIds
parameter_list|,
specifier|final
name|boolean
name|withPrimaryAllocationFailures
parameter_list|)
block|{
specifier|final
name|int
name|numberOfShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfReplicas
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numberOfShards
argument_list|)
decl_stmt|;
comment|// initial index creation and new routing table info
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numberOfShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numberOfReplicas
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|withPreviousAllocationIds
condition|)
block|{
specifier|final
name|IndexMetaData
operator|.
name|Builder
name|idxMetaWithAllocationIds
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
name|boolean
name|atLeastOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfShards
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|atLeastOne
operator|==
literal|false
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
name|idxMetaWithAllocationIds
operator|.
name|putInSyncAllocationIds
argument_list|(
name|i
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|atLeastOne
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|indexMetaData
operator|=
name|idxMetaWithAllocationIds
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|final
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsRecovery
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test_cluster"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|generateClusterStates
argument_list|(
name|clusterState
argument_list|,
name|indexName
argument_list|,
name|numberOfReplicas
argument_list|,
name|withPrimaryAllocationFailures
argument_list|)
return|;
block|}
DECL|method|generateClusterStates
specifier|private
name|List
argument_list|<
name|ClusterState
argument_list|>
name|generateClusterStates
parameter_list|(
specifier|final
name|ClusterState
name|originalClusterState
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|int
name|numberOfReplicas
parameter_list|,
specifier|final
name|boolean
name|withPrimaryAllocationFailures
parameter_list|)
block|{
comment|// generate random node ids
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodeIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
name|randomIntBetween
argument_list|(
name|numberOfReplicas
operator|+
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|nodeIds
operator|.
name|add
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ClusterState
argument_list|>
name|clusterStates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|originalClusterState
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|originalClusterState
decl_stmt|;
comment|// initialize primaries
name|RoutingTable
name|routingTable
init|=
name|originalClusterState
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|IndexRoutingTable
operator|.
name|Builder
name|newIndexRoutingTable
init|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardEntry
range|:
name|indexRoutingTable
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|getShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
operator|.
name|initialize
argument_list|(
name|randomFrom
argument_list|(
name|nodeIds
argument_list|)
argument_list|,
literal|null
argument_list|,
name|shardRouting
operator|.
name|getExpectedShardSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|routingTable
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|routingTable
argument_list|)
operator|.
name|add
argument_list|(
name|newIndexRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// some primaries started
name|indexRoutingTable
operator|=
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableOpenIntMap
operator|.
name|Builder
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|allocationIds
init|=
name|ImmutableOpenIntMap
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardEntry
range|:
name|indexRoutingTable
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|getShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
specifier|final
name|ShardRouting
name|newShardRouting
init|=
name|shardRouting
operator|.
name|moveToStarted
argument_list|()
decl_stmt|;
name|allocationIds
operator|.
name|fPut
argument_list|(
name|newShardRouting
operator|.
name|getId
argument_list|()
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|newShardRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|newShardRouting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|routingTable
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|routingTable
argument_list|)
operator|.
name|add
argument_list|(
name|newIndexRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|IndexMetaData
operator|.
name|Builder
name|idxMetaBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|IntObjectCursor
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|allocationIds
operator|.
name|build
argument_list|()
control|)
block|{
name|idxMetaBuilder
operator|.
name|putInSyncAllocationIds
argument_list|(
name|entry
operator|.
name|key
argument_list|,
name|entry
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|idxMetaBuilder
argument_list|)
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaDataBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
if|if
condition|(
name|withPrimaryAllocationFailures
condition|)
block|{
name|boolean
name|alreadyFailedPrimary
init|=
literal|false
decl_stmt|;
comment|// some primaries failed to allocate
name|indexRoutingTable
operator|=
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardEntry
range|:
name|indexRoutingTable
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|getShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|&&
operator|(
name|shardRouting
operator|.
name|started
argument_list|()
operator|==
literal|false
operator|||
name|alreadyFailedPrimary
operator|==
literal|false
operator|)
condition|)
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
operator|.
name|moveToUnassigned
argument_list|(
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|ALLOCATION_FAILED
argument_list|,
literal|"unlucky shard"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|alreadyFailedPrimary
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|routingTable
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|routingTable
argument_list|)
operator|.
name|add
argument_list|(
name|newIndexRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clusterStates
return|;
block|}
comment|// all primaries started
name|indexRoutingTable
operator|=
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|allocationIds
operator|=
name|ImmutableOpenIntMap
operator|.
expr|<
name|Set
argument_list|<
name|String
argument_list|>
operator|>
name|builder
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardEntry
range|:
name|indexRoutingTable
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|getShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|&&
name|shardRouting
operator|.
name|started
argument_list|()
operator|==
literal|false
condition|)
block|{
specifier|final
name|ShardRouting
name|newShardRouting
init|=
name|shardRouting
operator|.
name|moveToStarted
argument_list|()
decl_stmt|;
name|allocationIds
operator|.
name|fPut
argument_list|(
name|newShardRouting
operator|.
name|getId
argument_list|()
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|newShardRouting
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|newShardRouting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|routingTable
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|routingTable
argument_list|)
operator|.
name|add
argument_list|(
name|newIndexRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|idxMetaBuilder
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|IntObjectCursor
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|allocationIds
operator|.
name|build
argument_list|()
control|)
block|{
name|idxMetaBuilder
operator|.
name|putInSyncAllocationIds
argument_list|(
name|entry
operator|.
name|key
argument_list|,
name|entry
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|metaDataBuilder
operator|=
name|MetaData
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|idxMetaBuilder
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaDataBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// initialize replicas
name|indexRoutingTable
operator|=
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardEntry
range|:
name|indexRoutingTable
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
specifier|final
name|String
name|primaryNodeId
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|allocatedNodes
operator|.
name|add
argument_list|(
name|primaryNodeId
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|getShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// give the replica a different node id than the primary
name|String
name|replicaNodeId
init|=
name|randomFrom
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|nodeIds
argument_list|,
name|allocatedNodes
argument_list|)
argument_list|)
decl_stmt|;
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
operator|.
name|initialize
argument_list|(
name|replicaNodeId
argument_list|,
literal|null
argument_list|,
name|shardRouting
operator|.
name|getExpectedShardSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|allocatedNodes
operator|.
name|add
argument_list|(
name|replicaNodeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|routingTable
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|routingTable
argument_list|)
operator|.
name|add
argument_list|(
name|newIndexRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// some replicas started
name|indexRoutingTable
operator|=
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardEntry
range|:
name|indexRoutingTable
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|getShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|routingTable
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|routingTable
argument_list|)
operator|.
name|add
argument_list|(
name|newIndexRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// all replicas started
name|boolean
name|replicaStateChanged
init|=
literal|false
decl_stmt|;
name|indexRoutingTable
operator|=
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|newIndexRoutingTable
operator|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexRoutingTable
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardEntry
range|:
name|indexRoutingTable
operator|.
name|getShards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|shardEntry
operator|.
name|value
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shardRouting
range|:
name|shardRoutingTable
operator|.
name|getShards
argument_list|()
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
operator|&&
name|shardRouting
operator|.
name|started
argument_list|()
operator|==
literal|false
condition|)
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
operator|.
name|moveToStarted
argument_list|()
argument_list|)
expr_stmt|;
name|replicaStateChanged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|newIndexRoutingTable
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// all of the replicas may have moved to started in the previous phase already
if|if
condition|(
name|replicaStateChanged
condition|)
block|{
name|routingTable
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|routingTable
argument_list|)
operator|.
name|add
argument_list|(
name|newIndexRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterStates
operator|.
name|add
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterStates
return|;
block|}
comment|// returns true if the inactive primaries in the index are only due to cluster recovery
comment|// (not because of allocation of existing shard or previously having allocation ids assigned)
DECL|method|primaryInactiveDueToRecovery
specifier|private
name|boolean
name|primaryInactiveDueToRecovery
parameter_list|(
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|ClusterState
name|clusterState
parameter_list|)
block|{
for|for
control|(
specifier|final
name|IntObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|shardRouting
range|:
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|shards
argument_list|()
control|)
block|{
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|shardRouting
operator|.
name|value
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryShard
operator|.
name|active
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|inSyncAllocationIds
argument_list|(
name|shardRouting
operator|.
name|key
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|primaryShard
operator|.
name|recoverySource
argument_list|()
operator|!=
literal|null
operator|&&
name|primaryShard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|RecoverySource
operator|.
name|Type
operator|.
name|EXISTING_STORE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|primaryShard
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getNumFailedAllocations
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|primaryShard
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getLastAllocationStatus
argument_list|()
operator|==
name|UnassignedInfo
operator|.
name|AllocationStatus
operator|.
name|DECIDERS_NO
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertClusterHealth
specifier|private
name|void
name|assertClusterHealth
parameter_list|(
name|ClusterStateHealth
name|clusterStateHealth
parameter_list|,
name|RoutingTableGenerator
operator|.
name|ShardCounter
name|counter
parameter_list|)
block|{
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|active
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|primaryActive
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getInitializingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|initializing
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|relocating
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getUnassignedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|counter
operator|.
name|unassigned
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateHealth
operator|.
name|getActiveShardsPercent
argument_list|()
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|100.0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

