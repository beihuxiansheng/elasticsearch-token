begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|NodeAllocationResult
operator|.
name|ShardStoreInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_comment
comment|/**  * Unit tests for the {@link NodeAllocationResult} class.  */
end_comment

begin_class
DECL|class|NodeAllocationResultTests
specifier|public
class|class
name|NodeAllocationResultTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Decision
name|decision
init|=
name|randomFrom
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
name|Decision
operator|.
name|NO
argument_list|)
decl_stmt|;
name|NodeAllocationResult
name|explanation
init|=
operator|new
name|NodeAllocationResult
argument_list|(
name|node
argument_list|,
name|decision
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|explanation
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|NodeAllocationResult
name|readExplanation
init|=
operator|new
name|NodeAllocationResult
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertNodeExplanationEquals
argument_list|(
name|explanation
argument_list|,
name|readExplanation
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardStore
specifier|public
name|void
name|testShardStore
parameter_list|()
throws|throws
name|IOException
block|{
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Decision
name|decision
init|=
name|randomFrom
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
name|Decision
operator|.
name|NO
argument_list|)
decl_stmt|;
name|long
name|matchingBytes
init|=
operator|(
name|long
operator|)
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|ShardStoreInfo
name|shardStoreInfo
init|=
operator|new
name|ShardStoreInfo
argument_list|(
name|matchingBytes
argument_list|)
decl_stmt|;
name|NodeAllocationResult
name|explanation
init|=
operator|new
name|NodeAllocationResult
argument_list|(
name|node
argument_list|,
name|shardStoreInfo
argument_list|,
name|decision
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|explanation
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|NodeAllocationResult
name|readExplanation
init|=
operator|new
name|NodeAllocationResult
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertNodeExplanationEquals
argument_list|(
name|explanation
argument_list|,
name|readExplanation
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchingBytes
argument_list|,
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getMatchingBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|isInSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|hasMatchingSyncId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|allocId
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|boolean
name|inSync
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|shardStoreInfo
operator|=
operator|new
name|ShardStoreInfo
argument_list|(
name|allocId
argument_list|,
name|inSync
argument_list|,
name|randomBoolean
argument_list|()
condition|?
operator|new
name|Exception
argument_list|(
literal|"bad stuff"
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|explanation
operator|=
operator|new
name|NodeAllocationResult
argument_list|(
name|node
argument_list|,
name|shardStoreInfo
argument_list|,
name|decision
argument_list|)
expr_stmt|;
name|output
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|explanation
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|readExplanation
operator|=
operator|new
name|NodeAllocationResult
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertNodeExplanationEquals
argument_list|(
name|explanation
argument_list|,
name|readExplanation
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inSync
argument_list|,
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|isInSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getMatchingBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|hasMatchingSyncId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocId
argument_list|,
name|explanation
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNodeExplanationEquals
specifier|private
name|void
name|assertNodeExplanationEquals
parameter_list|(
name|NodeAllocationResult
name|expl1
parameter_list|,
name|NodeAllocationResult
name|expl2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expl1
operator|.
name|getNode
argument_list|()
argument_list|,
name|expl2
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expl1
operator|.
name|getCanAllocateDecision
argument_list|()
argument_list|,
name|expl2
operator|.
name|getCanAllocateDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Float
operator|.
name|compare
argument_list|(
name|expl1
operator|.
name|getWeightRanking
argument_list|()
argument_list|,
name|expl2
operator|.
name|getWeightRanking
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expl1
operator|.
name|getShardStoreInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expl1
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|isInSync
argument_list|()
argument_list|,
name|expl2
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|isInSync
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expl1
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getAllocationId
argument_list|()
argument_list|,
name|expl2
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expl1
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getMatchingBytes
argument_list|()
argument_list|,
name|expl2
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|getMatchingBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expl1
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|hasMatchingSyncId
argument_list|()
argument_list|,
name|expl2
operator|.
name|getShardStoreInfo
argument_list|()
operator|.
name|hasMatchingSyncId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|expl2
operator|.
name|getShardStoreInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

