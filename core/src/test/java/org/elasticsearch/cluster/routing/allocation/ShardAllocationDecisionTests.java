begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Unit tests for the {@link ShardAllocationDecision} class.  */
end_comment

begin_class
DECL|class|ShardAllocationDecisionTests
specifier|public
class|class
name|ShardAllocationDecisionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testDecisionNotTaken
specifier|public
name|void
name|testDecisionNotTaken
parameter_list|()
block|{
name|ShardAllocationDecision
name|shardAllocationDecision
init|=
name|ShardAllocationDecision
operator|.
name|DECISION_NOT_TAKEN
decl_stmt|;
name|assertFalse
argument_list|(
name|shardAllocationDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|shardAllocationDecision
operator|.
name|getFinalDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|shardAllocationDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|shardAllocationDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|shardAllocationDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|shardAllocationDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|shardAllocationDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|shardAllocationDecision
operator|.
name|getFinalDecisionSafe
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDecision
specifier|public
name|void
name|testNoDecision
parameter_list|()
block|{
specifier|final
name|AllocationStatus
name|allocationStatus
init|=
name|randomFrom
argument_list|(
name|AllocationStatus
operator|.
name|DELAYED_ALLOCATION
argument_list|,
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|)
decl_stmt|;
name|ShardAllocationDecision
name|noDecision
init|=
name|ShardAllocationDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|"something is wrong"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|noDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|noDecision
operator|.
name|getFinalDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocationStatus
argument_list|,
name|noDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"something is wrong"
argument_list|,
name|noDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Decision
argument_list|>
name|nodeDecisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
name|Decision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
name|Decision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|noDecision
operator|=
name|ShardAllocationDecision
operator|.
name|no
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
literal|"something is wrong"
argument_list|,
name|nodeDecisions
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|noDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|,
name|noDecision
operator|.
name|getFinalDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|noDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"something is wrong"
argument_list|,
name|noDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeDecisions
argument_list|,
name|noDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// test bad values
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ShardAllocationDecision
operator|.
name|no
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrottleDecision
specifier|public
name|void
name|testThrottleDecision
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Decision
argument_list|>
name|nodeDecisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
name|Decision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|)
expr_stmt|;
name|ShardAllocationDecision
name|throttleDecision
init|=
name|ShardAllocationDecision
operator|.
name|throttle
argument_list|(
literal|"too much happening"
argument_list|,
name|nodeDecisions
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|throttleDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|THROTTLE
argument_list|,
name|throttleDecision
operator|.
name|getFinalDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|,
name|throttleDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"too much happening"
argument_list|,
name|throttleDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeDecisions
argument_list|,
name|throttleDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|throttleDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|throttleDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testYesDecision
specifier|public
name|void
name|testYesDecision
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Decision
argument_list|>
name|nodeDecisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
name|Decision
operator|.
name|YES
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
name|Decision
operator|.
name|NO
argument_list|)
expr_stmt|;
name|String
name|allocId
init|=
name|randomBoolean
argument_list|()
condition|?
literal|"allocId"
else|:
literal|null
decl_stmt|;
name|ShardAllocationDecision
name|yesDecision
init|=
name|ShardAllocationDecision
operator|.
name|yes
argument_list|(
literal|"node1"
argument_list|,
literal|"node was very kind"
argument_list|,
name|allocId
argument_list|,
name|nodeDecisions
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|yesDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|,
name|yesDecision
operator|.
name|getFinalDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|yesDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node was very kind"
argument_list|,
name|yesDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeDecisions
argument_list|,
name|yesDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node1"
argument_list|,
name|yesDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocId
argument_list|,
name|yesDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCachedDecisions
specifier|public
name|void
name|testCachedDecisions
parameter_list|()
block|{
name|List
argument_list|<
name|AllocationStatus
argument_list|>
name|cachableStatuses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|,
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|,
name|AllocationStatus
operator|.
name|DELAYED_ALLOCATION
argument_list|)
decl_stmt|;
for|for
control|(
name|AllocationStatus
name|allocationStatus
range|:
name|cachableStatuses
control|)
block|{
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
condition|)
block|{
name|ShardAllocationDecision
name|cached
init|=
name|ShardAllocationDecision
operator|.
name|throttle
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ShardAllocationDecision
name|another
init|=
name|ShardAllocationDecision
operator|.
name|throttle
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|another
argument_list|)
expr_stmt|;
name|ShardAllocationDecision
name|notCached
init|=
name|ShardAllocationDecision
operator|.
name|throttle
argument_list|(
literal|"abc"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|another
operator|=
name|ShardAllocationDecision
operator|.
name|throttle
argument_list|(
literal|"abc"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|notCached
argument_list|,
name|another
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ShardAllocationDecision
name|cached
init|=
name|ShardAllocationDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ShardAllocationDecision
name|another
init|=
name|ShardAllocationDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|another
argument_list|)
expr_stmt|;
name|ShardAllocationDecision
name|notCached
init|=
name|ShardAllocationDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|another
operator|=
name|ShardAllocationDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|notCached
argument_list|,
name|another
argument_list|)
expr_stmt|;
block|}
block|}
comment|// yes decisions are not precomputed and cached
name|Map
argument_list|<
name|String
argument_list|,
name|Decision
argument_list|>
name|dummyMap
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|ShardAllocationDecision
name|first
init|=
name|ShardAllocationDecision
operator|.
name|yes
argument_list|(
literal|"node1"
argument_list|,
literal|"abc"
argument_list|,
literal|"alloc1"
argument_list|,
name|dummyMap
argument_list|)
decl_stmt|;
name|ShardAllocationDecision
name|second
init|=
name|ShardAllocationDecision
operator|.
name|yes
argument_list|(
literal|"node1"
argument_list|,
literal|"abc"
argument_list|,
literal|"alloc1"
argument_list|,
name|dummyMap
argument_list|)
decl_stmt|;
comment|// same fields for the ShardAllocationDecision, but should be different instances
name|assertNotSame
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

