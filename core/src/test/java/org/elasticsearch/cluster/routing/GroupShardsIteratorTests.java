begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|GroupShardsIteratorTests
specifier|public
class|class
name|GroupShardsIteratorTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSize
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|List
argument_list|<
name|ShardIterator
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"na"
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Index
argument_list|(
literal|"foo_1"
argument_list|,
literal|"na"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GroupShardsIterator
name|iter
init|=
operator|new
name|GroupShardsIterator
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|iter
operator|.
name|totalSizeWith1ForEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|iter
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|iter
operator|.
name|totalSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterate
specifier|public
name|void
name|testIterate
parameter_list|()
block|{
name|List
argument_list|<
name|ShardIterator
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"foo"
argument_list|,
literal|"na"
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Index
argument_list|(
literal|"foo_2"
argument_list|,
literal|"na"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|PlainShardIterator
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newRouting
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|list
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ShardIterator
argument_list|>
name|actualIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|GroupShardsIterator
name|iter
init|=
operator|new
name|GroupShardsIterator
argument_list|(
name|list
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardIterator
name|shardsIterator
range|:
name|iter
control|)
block|{
name|actualIterators
operator|.
name|add
argument_list|(
name|shardsIterator
argument_list|)
expr_stmt|;
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|actualIterators
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|actualIterators
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|newRouting
specifier|public
name|ShardRouting
name|newRouting
parameter_list|(
name|Index
name|index
parameter_list|,
name|int
name|id
parameter_list|,
name|boolean
name|started
parameter_list|)
block|{
name|ShardRouting
name|shardRouting
init|=
name|ShardRouting
operator|.
name|newUnassigned
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
argument_list|,
literal|true
argument_list|,
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
argument_list|,
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|INDEX_CREATED
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|shardRouting
operator|=
name|ShardRoutingHelper
operator|.
name|initialize
argument_list|(
name|shardRouting
argument_list|,
literal|"some node"
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
condition|)
block|{
name|shardRouting
operator|=
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
return|return
name|shardRouting
return|;
block|}
empty_stmt|;
block|}
end_class

end_unit

