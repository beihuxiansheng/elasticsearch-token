begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.operation.hash.murmur3
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|operation
operator|.
name|hash
operator|.
name|murmur3
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|Murmur3HashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_class
DECL|class|Murmur3HashFunctionTests
specifier|public
class|class
name|Murmur3HashFunctionTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
comment|// Make sure that we agree with guava
name|Murmur3HashFunction
name|murmur3
init|=
operator|new
name|Murmur3HashFunction
argument_list|()
decl_stmt|;
name|HashFunction
name|guavaMurmur3
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|id
init|=
name|RandomStrings
operator|.
name|randomRealisticUnicodeOfCodepointLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
comment|//final String id = "0";
specifier|final
name|int
name|hash1
init|=
name|guavaMurmur3
operator|.
name|newHasher
argument_list|()
operator|.
name|putUnencodedChars
argument_list|(
name|id
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|hash2
init|=
name|murmur3
operator|.
name|hash
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hash1
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

