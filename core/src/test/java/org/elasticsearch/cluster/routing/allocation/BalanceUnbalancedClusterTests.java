begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_comment
comment|/**  * see issue #9023  */
end_comment

begin_class
DECL|class|BalanceUnbalancedClusterTests
specifier|public
class|class
name|BalanceUnbalancedClusterTests
extends|extends
name|CatAllocationTestCase
block|{
annotation|@
name|Override
DECL|method|getCatPath
specifier|protected
name|Path
name|getCatPath
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tmp
init|=
name|createTempDir
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|getDataPath
argument_list|(
literal|"/org/elasticsearch/cluster/routing/issue_9023.zip"
argument_list|)
argument_list|)
init|)
block|{
name|TestUtil
operator|.
name|unzip
argument_list|(
name|stream
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
operator|.
name|resolve
argument_list|(
literal|"issue_9023"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|allocateNew
specifier|protected
name|ClusterState
name|allocateNew
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|String
name|index
init|=
literal|"tweets-2014-12-29:00"
decl_stmt|;
name|AllocationService
name|strategy
init|=
name|createAllocationService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|5
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|initialRoutingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|state
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|initialRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|clusterState
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexShardRoutingTable
name|table
range|:
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
control|)
block|{
for|for
control|(
name|ShardRouting
name|r
range|:
name|table
control|)
block|{
name|String
name|s
init|=
name|r
operator|.
name|currentNodeId
argument_list|()
decl_stmt|;
name|Integer
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|count
range|:
name|counts
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// we have 10 shards and 4 nodes so 2 nodes have 3 shards and 2 nodes have 2 shards
name|assertTrue
argument_list|(
literal|"Node: "
operator|+
name|count
operator|.
name|getKey
argument_list|()
operator|+
literal|" has shard mismatch: "
operator|+
name|count
operator|.
name|getValue
argument_list|()
argument_list|,
name|count
operator|.
name|getValue
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node: "
operator|+
name|count
operator|.
name|getKey
argument_list|()
operator|+
literal|" has shard mismatch: "
operator|+
name|count
operator|.
name|getValue
argument_list|()
argument_list|,
name|count
operator|.
name|getValue
argument_list|()
operator|<=
literal|3
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
block|}
end_class

end_unit

