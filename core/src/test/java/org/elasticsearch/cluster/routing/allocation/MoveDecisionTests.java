begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|ShardAllocationDecision
operator|.
name|WeightedDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
operator|.
name|MoveDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Unit tests for the {@link MoveDecision} class.  */
end_comment

begin_class
DECL|class|MoveDecisionTests
specifier|public
class|class
name|MoveDecisionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCachedDecisions
specifier|public
name|void
name|testCachedDecisions
parameter_list|()
block|{
comment|// cached stay decision
name|MoveDecision
name|stay1
init|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MoveDecision
name|stay2
init|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
comment|// not in explain mode, so should use cached decision
name|stay1
operator|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
comment|// cached cannot move decision
name|stay1
operator|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|NO
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|NO
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
comment|// final decision is YES, so shouldn't use cached decision
name|stay1
operator|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|YES
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|YES
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stay1
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|,
name|stay2
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// final decision is NO, but in explain mode, so shouldn't use cached decision
name|stay1
operator|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|NO
argument_list|,
literal|true
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|NO
argument_list|,
literal|true
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|stay1
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|,
name|stay2
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stay1
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stay1
operator|.
name|getFinalExplanation
argument_list|()
argument_list|,
name|stay2
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStayDecision
specifier|public
name|void
name|testStayDecision
parameter_list|()
block|{
name|MoveDecision
name|stay
init|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|stay
operator|.
name|cannotRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stay
operator|.
name|move
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stay
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stay
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stay
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|NO
argument_list|,
name|stay
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
name|stay
operator|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stay
operator|.
name|cannotRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stay
operator|.
name|move
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stay
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stay
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stay
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|NO
argument_list|,
name|stay
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecisionWithExplain
specifier|public
name|void
name|testDecisionWithExplain
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|WeightedDecision
argument_list|>
name|nodeDecisions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|WeightedDecision
argument_list|(
name|randomFrom
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
name|Decision
operator|.
name|YES
argument_list|)
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|WeightedDecision
argument_list|(
name|randomFrom
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
name|Decision
operator|.
name|YES
argument_list|)
argument_list|,
name|randomFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MoveDecision
name|decision
init|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|NO
argument_list|,
literal|true
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|,
name|nodeDecisions
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|decision
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|decision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|decision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|decision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|decision
operator|=
name|MoveDecision
operator|.
name|decision
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Type
operator|.
name|YES
argument_list|,
literal|true
argument_list|,
literal|"node1"
argument_list|,
literal|"node2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|decision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

