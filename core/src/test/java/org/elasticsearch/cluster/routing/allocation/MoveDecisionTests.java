begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_comment
comment|/**  * Unit tests for the {@link MoveDecision} class.  */
end_comment

begin_class
DECL|class|MoveDecisionTests
specifier|public
class|class
name|MoveDecisionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCachedDecisions
specifier|public
name|void
name|testCachedDecisions
parameter_list|()
block|{
comment|// cached stay decision
name|MoveDecision
name|stay1
init|=
name|MoveDecision
operator|.
name|stay
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MoveDecision
name|stay2
init|=
name|MoveDecision
operator|.
name|stay
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
comment|// not in explain mode, so should use cached decision
name|stay1
operator|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
comment|// cached cannot move decision
name|stay1
operator|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
comment|// final decision is YES, so shouldn't use cached decision
name|DiscoveryNode
name|node1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|stay1
operator|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|YES
argument_list|,
name|node1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|YES
argument_list|,
name|node1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stay1
operator|.
name|getTargetNode
argument_list|()
argument_list|,
name|stay2
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// final decision is NO, but in explain mode, so shouldn't use cached decision
name|stay1
operator|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|stay2
operator|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|stay1
argument_list|,
name|stay2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|stay1
operator|.
name|getAllocationDecision
argument_list|()
argument_list|,
name|stay2
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stay1
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stay1
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|stay2
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStayDecision
specifier|public
name|void
name|testStayDecision
parameter_list|()
block|{
name|MoveDecision
name|stay
init|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stay
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stay
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stay
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stay
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|stay
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_ATTEMPT
argument_list|,
name|stay
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|stay
operator|=
name|MoveDecision
operator|.
name|stay
argument_list|(
name|Decision
operator|.
name|YES
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stay
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stay
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stay
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stay
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard can remain on its current node"
argument_list|,
name|stay
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_ATTEMPT
argument_list|,
name|stay
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecisionWithNodeExplanations
specifier|public
name|void
name|testDecisionWithNodeExplanations
parameter_list|()
block|{
name|DiscoveryNode
name|node1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node2
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Decision
name|nodeDecision
init|=
name|randomFrom
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
name|Decision
operator|.
name|YES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node1
argument_list|,
name|nodeDecision
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node2
argument_list|,
name|nodeDecision
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MoveDecision
name|decision
init|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|NO
argument_list|,
literal|null
argument_list|,
name|nodeDecisions
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|decision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|decision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|decision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|decision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// both nodes have the same decision type but node2 has a higher weight ranking, so node2 comes first
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|decision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|decision
operator|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|YES
argument_list|,
name|node2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|decision
operator|.
name|getTargetNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|node1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node2
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Type
name|finalDecision
init|=
name|randomFrom
argument_list|(
name|Type
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|assignedNode
init|=
name|finalDecision
operator|==
name|Type
operator|.
name|YES
condition|?
name|node1
else|:
literal|null
decl_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node1
argument_list|,
name|Decision
operator|.
name|NO
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node2
argument_list|,
name|finalDecision
operator|==
name|Type
operator|.
name|YES
condition|?
name|Decision
operator|.
name|YES
else|:
name|randomFrom
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
name|Decision
operator|.
name|YES
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MoveDecision
name|moveDecision
init|=
name|MoveDecision
operator|.
name|cannotRemain
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|AllocationDecision
operator|.
name|fromDecisionType
argument_list|(
name|finalDecision
argument_list|)
argument_list|,
name|assignedNode
argument_list|,
name|nodeDecisions
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|moveDecision
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|MoveDecision
name|readDecision
init|=
operator|new
name|MoveDecision
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|moveDecision
operator|.
name|canRemain
argument_list|()
argument_list|,
name|readDecision
operator|.
name|canRemain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moveDecision
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moveDecision
operator|.
name|forceMove
argument_list|()
argument_list|,
name|readDecision
operator|.
name|forceMove
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moveDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moveDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moveDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
comment|// node2 should have the highest sort order
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|readDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

