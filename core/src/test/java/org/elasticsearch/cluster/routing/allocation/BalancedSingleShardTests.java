begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ClusterStateCreationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
operator|.
name|Balancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
operator|.
name|NodeRebalanceDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
operator|.
name|RebalanceDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_comment
comment|/**  * Tests for balancing a single shard, see {@link Balancer#decideRebalance(ShardRouting)}.  */
end_comment

begin_class
DECL|class|BalancedSingleShardTests
specifier|public
class|class
name|BalancedSingleShardTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|method|testRebalanceNonStartedShardNotAllowed
specifier|public
name|void
name|testRebalanceNonStartedShardNotAllowed
parameter_list|()
block|{
name|BalancedShardsAllocator
name|allocator
init|=
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
argument_list|)
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|allocator
operator|.
name|decideRebalance
argument_list|(
name|shard
argument_list|,
name|newRoutingAllocation
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|clusterState
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|RebalanceDecision
operator|.
name|NOT_TAKEN
argument_list|,
name|rebalanceDecision
argument_list|)
expr_stmt|;
block|}
DECL|method|testRebalanceNotAllowedDuringPendingAsyncFetch
specifier|public
name|void
name|testRebalanceNotAllowedDuringPendingAsyncFetch
parameter_list|()
block|{
name|BalancedShardsAllocator
name|allocator
init|=
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|routingAllocation
init|=
name|newRoutingAllocation
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|routingAllocation
operator|.
name|setHasPendingAsyncFetch
argument_list|()
expr_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|allocator
operator|.
name|decideRebalance
argument_list|(
name|shard
argument_list|,
name|routingAllocation
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rebalanceDecision
operator|.
name|getCanRebalanceDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|NO
argument_list|,
name|rebalanceDecision
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rebalanceDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot rebalance due to in-flight shard store fetches"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rebalanceDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rebalanceDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertAssignedNodeRemainsSame
argument_list|(
name|allocator
argument_list|,
name|routingAllocation
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRebalancingNotAllowedDueToCanRebalance
specifier|public
name|void
name|testRebalancingNotAllowedDueToCanRebalance
parameter_list|()
block|{
specifier|final
name|Decision
name|canRebalanceDecision
init|=
name|randomFrom
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|)
decl_stmt|;
name|AllocationDecider
name|noRebalanceDecider
init|=
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canRebalance
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|allocation
operator|.
name|decision
argument_list|(
name|canRebalanceDecision
argument_list|,
literal|"TEST"
argument_list|,
literal|"foobar"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|BalancedShardsAllocator
name|allocator
init|=
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|ShardRouting
name|shard
init|=
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|routingAllocation
init|=
name|newRoutingAllocation
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|noRebalanceDecider
argument_list|)
argument_list|)
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|allocator
operator|.
name|decideRebalance
argument_list|(
name|shard
argument_list|,
name|routingAllocation
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|canRebalanceDecision
operator|.
name|type
argument_list|()
argument_list|,
name|rebalanceDecision
operator|.
name|getCanRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRebalanceDecision
operator|.
name|type
argument_list|()
argument_list|,
name|rebalanceDecision
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebalancing is not allowed"
argument_list|,
name|rebalanceDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rebalanceDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rebalanceDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rebalanceDecision
operator|.
name|getCanRebalanceDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Decision
name|subDecision
range|:
name|rebalanceDecision
operator|.
name|getCanRebalanceDecision
argument_list|()
operator|.
name|getDecisions
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
operator|(
operator|(
name|Decision
operator|.
name|Single
operator|)
name|subDecision
operator|)
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertAssignedNodeRemainsSame
argument_list|(
name|allocator
argument_list|,
name|routingAllocation
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|testRebalancePossible
specifier|public
name|void
name|testRebalancePossible
parameter_list|()
block|{
name|AllocationDecider
name|canAllocateDecider
init|=
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|Decision
operator|.
name|YES
return|;
block|}
block|}
decl_stmt|;
name|Tuple
argument_list|<
name|ClusterState
argument_list|,
name|RebalanceDecision
argument_list|>
name|rebalance
init|=
name|setupStateAndRebalance
argument_list|(
name|canAllocateDecider
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|rebalance
operator|.
name|v1
argument_list|()
decl_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|rebalance
operator|.
name|v2
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|YES
argument_list|,
name|rebalanceDecision
operator|.
name|getCanRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rebalanceDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
operator|-
literal|1
argument_list|,
name|rebalanceDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRebalancingNotAllowedDueToCanAllocate
specifier|public
name|void
name|testRebalancingNotAllowedDueToCanAllocate
parameter_list|()
block|{
name|AllocationDecider
name|canAllocateDecider
init|=
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|Decision
operator|.
name|NO
return|;
block|}
block|}
decl_stmt|;
name|Tuple
argument_list|<
name|ClusterState
argument_list|,
name|RebalanceDecision
argument_list|>
name|rebalance
init|=
name|setupStateAndRebalance
argument_list|(
name|canAllocateDecider
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|rebalance
operator|.
name|v1
argument_list|()
decl_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|rebalance
operator|.
name|v2
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|YES
argument_list|,
name|rebalanceDecision
operator|.
name|getCanRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|NO
argument_list|,
name|rebalanceDecision
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rebalanceDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot rebalance shard, no other node exists that would form a more balanced"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
operator|-
literal|1
argument_list|,
name|rebalanceDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rebalanceDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDontBalanceShardWhenThresholdNotMet
specifier|public
name|void
name|testDontBalanceShardWhenThresholdNotMet
parameter_list|()
block|{
name|AllocationDecider
name|canAllocateDecider
init|=
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|Decision
operator|.
name|YES
return|;
block|}
block|}
decl_stmt|;
comment|// ridiculously high threshold setting so we won't rebalance
name|Settings
name|balancerSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|THRESHOLD_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|1000f
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Tuple
argument_list|<
name|ClusterState
argument_list|,
name|RebalanceDecision
argument_list|>
name|rebalance
init|=
name|setupStateAndRebalance
argument_list|(
name|canAllocateDecider
argument_list|,
name|balancerSettings
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|rebalance
operator|.
name|v1
argument_list|()
decl_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|rebalance
operator|.
name|v2
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|YES
argument_list|,
name|rebalanceDecision
operator|.
name|getCanRebalanceDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|NO
argument_list|,
name|rebalanceDecision
operator|.
name|getFinalDecisionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rebalanceDecision
operator|.
name|getFinalExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
operator|-
literal|1
argument_list|,
name|rebalanceDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rebalanceDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleShardBalanceProducesSameResultsAsBalanceStep
specifier|public
name|void
name|testSingleShardBalanceProducesSameResultsAsBalanceStep
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|indices
init|=
block|{
literal|"idx1"
block|,
literal|"idx2"
block|}
decl_stmt|;
comment|// Create a cluster state with 2 indices, each with 1 started primary shard, and only
comment|// one node initially so that all primary shards get allocated to the same node.  We are only
comment|// using 2 indices (i.e. 2 total primary shards) because if we have any more than 2 started shards
comment|// in the routing table, then we have no guarantees about the order in which the 3 or more shards
comment|// are selected to be rebalanced to the new node, and hence the node to which they are rebalanced
comment|// is not deterministic.  Using only two shards guarantees that only one of those two shards will
comment|// be rebalanced, and so we pick the one that was chosen to be rebalanced and execute the single-shard
comment|// rebalance step on it to make sure it gets assigned to the same node.
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|1
argument_list|,
name|indices
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// add new nodes so one of the primaries can be rebalanced
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numAddedNodes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// randomly select a subset of the newly added nodes to set filter allocation on (but not all)
name|int
name|excludeNodesSize
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numAddedNodes
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludeNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAddedNodes
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|discoveryNode
init|=
name|newNode
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|nodesBuilder
operator|.
name|add
argument_list|(
name|discoveryNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|excludeNodesSize
condition|)
block|{
name|excludeNodes
operator|.
name|add
argument_list|(
name|discoveryNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|AllocationDecider
name|allocationDecider
init|=
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canAllocate
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
if|if
condition|(
name|excludeNodes
operator|.
name|contains
argument_list|(
name|node
operator|.
name|nodeId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Decision
operator|.
name|NO
return|;
block|}
return|return
name|Decision
operator|.
name|YES
return|;
block|}
block|}
decl_stmt|;
name|AllocationDecider
name|rebalanceDecider
init|=
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canRebalance
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|Decision
operator|.
name|YES
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|AllocationDecider
argument_list|>
name|allocationDeciders
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rebalanceDecider
argument_list|,
name|allocationDecider
argument_list|)
decl_stmt|;
name|RoutingAllocation
name|routingAllocation
init|=
name|newRoutingAllocation
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|allocationDeciders
argument_list|)
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
comment|// allocate and get the node that is now relocating
name|BalancedShardsAllocator
name|allocator
init|=
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|allocate
argument_list|(
name|routingAllocation
argument_list|)
expr_stmt|;
name|ShardRouting
name|shardToRebalance
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingAllocation
operator|.
name|routingNodes
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|relocatingShards
init|=
name|routingNode
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocatingShards
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|shardToRebalance
operator|=
name|randomFrom
argument_list|(
name|relocatingShards
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|routingAllocation
operator|=
name|newRoutingAllocation
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|allocationDeciders
argument_list|)
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|routingAllocation
operator|.
name|debugDecision
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ShardRouting
name|shard
init|=
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|activePrimary
argument_list|(
name|shardToRebalance
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|allocator
operator|.
name|decideRebalance
argument_list|(
name|shard
argument_list|,
name|routingAllocation
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|shardToRebalance
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|rebalanceDecision
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure all excluded nodes returned a NO decision
for|for
control|(
name|String
name|exludedNode
range|:
name|excludeNodes
control|)
block|{
name|NodeRebalanceDecision
name|nodeRebalanceDecision
init|=
name|rebalanceDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|get
argument_list|(
name|exludedNode
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|NO
argument_list|,
name|nodeRebalanceDecision
operator|.
name|getCanAllocateDecision
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupStateAndRebalance
specifier|private
name|Tuple
argument_list|<
name|ClusterState
argument_list|,
name|RebalanceDecision
argument_list|>
name|setupStateAndRebalance
parameter_list|(
name|AllocationDecider
name|allocationDecider
parameter_list|,
name|Settings
name|balancerSettings
parameter_list|,
name|boolean
name|rebalanceExpected
parameter_list|)
block|{
name|AllocationDecider
name|rebalanceDecider
init|=
operator|new
name|AllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Decision
name|canRebalance
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
name|Decision
operator|.
name|YES
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|AllocationDecider
argument_list|>
name|allocationDeciders
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rebalanceDecider
argument_list|,
name|allocationDecider
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numShards
init|=
name|randomIntBetween
argument_list|(
literal|8
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|BalancedShardsAllocator
name|allocator
init|=
operator|new
name|BalancedShardsAllocator
argument_list|(
name|balancerSettings
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterStateCreationUtils
operator|.
name|state
argument_list|(
literal|"idx"
argument_list|,
literal|2
argument_list|,
name|numShards
argument_list|)
decl_stmt|;
comment|// add a new node so shards can be rebalanced there
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
name|nodesBuilder
operator|.
name|add
argument_list|(
name|newNode
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ShardRouting
name|shard
init|=
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|routingAllocation
init|=
name|newRoutingAllocation
argument_list|(
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|allocationDeciders
argument_list|)
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|RebalanceDecision
name|rebalanceDecision
init|=
name|allocator
operator|.
name|decideRebalance
argument_list|(
name|shard
argument_list|,
name|routingAllocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|rebalanceExpected
operator|==
literal|false
condition|)
block|{
name|assertAssignedNodeRemainsSame
argument_list|(
name|allocator
argument_list|,
name|routingAllocation
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|clusterState
argument_list|,
name|rebalanceDecision
argument_list|)
return|;
block|}
DECL|method|newRoutingAllocation
specifier|private
name|RoutingAllocation
name|newRoutingAllocation
parameter_list|(
name|AllocationDeciders
name|deciders
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|RoutingAllocation
name|allocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
name|deciders
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
argument_list|,
name|state
argument_list|,
name|ClusterInfo
operator|.
name|EMPTY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|debugDecision
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|allocation
return|;
block|}
DECL|method|assertAssignedNodeRemainsSame
specifier|private
name|void
name|assertAssignedNodeRemainsSame
parameter_list|(
name|BalancedShardsAllocator
name|allocator
parameter_list|,
name|RoutingAllocation
name|routingAllocation
parameter_list|,
name|ShardRouting
name|originalRouting
parameter_list|)
block|{
name|allocator
operator|.
name|allocate
argument_list|(
name|routingAllocation
argument_list|)
expr_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|routingAllocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
comment|// make sure the previous node id is the same as the current one after rerouting
name|assertEquals
argument_list|(
name|originalRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|routingNodes
operator|.
name|activePrimary
argument_list|(
name|originalRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

