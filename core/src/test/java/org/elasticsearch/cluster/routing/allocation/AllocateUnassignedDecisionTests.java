begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_comment
comment|/**  * Unit tests for the {@link AllocateUnassignedDecision} class.  */
end_comment

begin_class
DECL|class|AllocateUnassignedDecisionTests
specifier|public
class|class
name|AllocateUnassignedDecisionTests
extends|extends
name|ESTestCase
block|{
DECL|field|node1
specifier|private
name|DiscoveryNode
name|node1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
DECL|field|node2
specifier|private
name|DiscoveryNode
name|node2
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
DECL|method|testDecisionNotTaken
specifier|public
name|void
name|testDecisionNotTaken
parameter_list|()
block|{
name|AllocateUnassignedDecision
name|allocateUnassignedDecision
init|=
name|AllocateUnassignedDecision
operator|.
name|NOT_TAKEN
decl_stmt|;
name|assertFalse
argument_list|(
name|allocateUnassignedDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allocateUnassignedDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allocateUnassignedDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allocateUnassignedDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allocateUnassignedDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allocateUnassignedDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|allocateUnassignedDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDecision
specifier|public
name|void
name|testNoDecision
parameter_list|()
block|{
specifier|final
name|AllocationStatus
name|allocationStatus
init|=
name|randomFrom
argument_list|(
name|AllocationStatus
operator|.
name|DELAYED_ALLOCATION
argument_list|,
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|)
decl_stmt|;
name|AllocateUnassignedDecision
name|noDecision
init|=
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|noDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|fromAllocationStatus
argument_list|(
name|allocationStatus
argument_list|)
argument_list|,
name|noDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocationStatus
argument_list|,
name|noDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
condition|)
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because information about existing shard data is still being retrieved from "
operator|+
literal|"some of the nodes"
argument_list|,
name|noDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|DELAYED_ALLOCATION
condition|)
block|{
name|assertThat
argument_list|(
name|noDecision
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot allocate because the cluster is still waiting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|noDecision
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"cannot allocate because a previous copy of the primary shard existed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node1
argument_list|,
name|Decision
operator|.
name|NO
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node2
argument_list|,
name|Decision
operator|.
name|NO
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|reuseStore
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|noDecision
operator|=
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|nodeDecisions
argument_list|,
name|reuseStore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|noDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|noDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|noDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reuseStore
condition|)
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because allocation is not permitted to any of the nodes that hold an in-sync shard copy"
argument_list|,
name|noDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"cannot allocate because allocation is not permitted to any of the nodes"
argument_list|,
name|noDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|nodeDecisions
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|,
name|noDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
comment|// node1 should be sorted first b/c of better weight ranking
name|assertEquals
argument_list|(
literal|"node1"
argument_list|,
name|noDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|noDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// test bad values
name|expectThrows
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrottleDecision
specifier|public
name|void
name|testThrottleDecision
parameter_list|()
block|{
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node1
argument_list|,
name|Decision
operator|.
name|NO
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node2
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateUnassignedDecision
name|throttleDecision
init|=
name|AllocateUnassignedDecision
operator|.
name|throttle
argument_list|(
name|nodeDecisions
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|throttleDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|THROTTLED
argument_list|,
name|throttleDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|,
name|throttleDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|throttleDecision
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"allocation temporarily throttled"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeDecisions
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|,
name|throttleDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
comment|// node2 should be sorted first b/c a THROTTLE is higher than a NO decision
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|throttleDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|throttleDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|throttleDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testYesDecision
specifier|public
name|void
name|testYesDecision
parameter_list|()
block|{
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node1
argument_list|,
name|Decision
operator|.
name|NO
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node2
argument_list|,
name|Decision
operator|.
name|YES
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|allocId
init|=
name|randomBoolean
argument_list|()
condition|?
literal|"allocId"
else|:
literal|null
decl_stmt|;
name|AllocateUnassignedDecision
name|yesDecision
init|=
name|AllocateUnassignedDecision
operator|.
name|yes
argument_list|(
name|node2
argument_list|,
name|allocId
argument_list|,
name|nodeDecisions
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|yesDecision
operator|.
name|isDecisionTaken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
argument_list|,
name|yesDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|yesDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can allocate the shard"
argument_list|,
name|yesDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeDecisions
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|,
name|yesDecision
operator|.
name|getNodeDecisions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|yesDecision
operator|.
name|getTargetNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocId
argument_list|,
name|yesDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// node1 should be sorted first b/c YES decisions are the highest
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|yesDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCachedDecisions
specifier|public
name|void
name|testCachedDecisions
parameter_list|()
block|{
name|List
argument_list|<
name|AllocationStatus
argument_list|>
name|cachableStatuses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|AllocationStatus
operator|.
name|DECIDERS_NO
argument_list|,
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
argument_list|,
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|,
name|AllocationStatus
operator|.
name|DELAYED_ALLOCATION
argument_list|)
decl_stmt|;
for|for
control|(
name|AllocationStatus
name|allocationStatus
range|:
name|cachableStatuses
control|)
block|{
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
condition|)
block|{
name|AllocateUnassignedDecision
name|cached
init|=
name|AllocateUnassignedDecision
operator|.
name|throttle
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|AllocateUnassignedDecision
name|another
init|=
name|AllocateUnassignedDecision
operator|.
name|throttle
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|another
argument_list|)
expr_stmt|;
name|AllocateUnassignedDecision
name|notCached
init|=
name|AllocateUnassignedDecision
operator|.
name|throttle
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|another
operator|=
name|AllocateUnassignedDecision
operator|.
name|throttle
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|notCached
argument_list|,
name|another
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AllocateUnassignedDecision
name|cached
init|=
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AllocateUnassignedDecision
name|another
init|=
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|another
argument_list|)
expr_stmt|;
name|AllocateUnassignedDecision
name|notCached
init|=
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|another
operator|=
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|allocationStatus
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|notCached
argument_list|,
name|another
argument_list|)
expr_stmt|;
block|}
block|}
comment|// yes decisions are not precomputed and cached
name|AllocateUnassignedDecision
name|first
init|=
name|AllocateUnassignedDecision
operator|.
name|yes
argument_list|(
name|node1
argument_list|,
literal|"abc"
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|AllocateUnassignedDecision
name|second
init|=
name|AllocateUnassignedDecision
operator|.
name|yes
argument_list|(
name|node1
argument_list|,
literal|"abc"
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
comment|// same fields for the ShardAllocationDecision, but should be different instances
name|assertNotSame
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|DiscoveryNode
name|node1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node2
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|Decision
operator|.
name|Type
name|finalDecision
init|=
name|randomFrom
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|assignedNode
init|=
name|finalDecision
operator|==
name|Decision
operator|.
name|Type
operator|.
name|YES
condition|?
name|node1
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|NodeAllocationResult
argument_list|>
name|nodeDecisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node1
argument_list|,
name|Decision
operator|.
name|NO
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDecisions
operator|.
name|add
argument_list|(
operator|new
name|NodeAllocationResult
argument_list|(
name|node2
argument_list|,
name|finalDecision
operator|==
name|Decision
operator|.
name|Type
operator|.
name|YES
condition|?
name|Decision
operator|.
name|YES
else|:
name|randomFrom
argument_list|(
name|Decision
operator|.
name|NO
argument_list|,
name|Decision
operator|.
name|THROTTLE
argument_list|,
name|Decision
operator|.
name|YES
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateUnassignedDecision
name|decision
decl_stmt|;
if|if
condition|(
name|finalDecision
operator|==
name|Decision
operator|.
name|Type
operator|.
name|YES
condition|)
block|{
name|decision
operator|=
name|AllocateUnassignedDecision
operator|.
name|yes
argument_list|(
name|assignedNode
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
else|:
literal|null
argument_list|,
name|nodeDecisions
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decision
operator|=
name|AllocateUnassignedDecision
operator|.
name|no
argument_list|(
name|randomFrom
argument_list|(
name|AllocationStatus
operator|.
name|DELAYED_ALLOCATION
argument_list|,
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
argument_list|)
argument_list|,
name|nodeDecisions
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|decision
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|AllocateUnassignedDecision
name|readDecision
init|=
operator|new
name|AllocateUnassignedDecision
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|decision
operator|.
name|getTargetNode
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getTargetNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getAllocationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decision
operator|.
name|getExplanation
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getExplanation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decision
operator|.
name|getAllocationId
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getAllocationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|,
name|readDecision
operator|.
name|getAllocationDecision
argument_list|()
argument_list|)
expr_stmt|;
comment|// node2 should have the highest sort order
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|readDecision
operator|.
name|getNodeDecisions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

