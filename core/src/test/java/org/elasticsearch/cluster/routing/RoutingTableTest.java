begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|RoutingTableTest
specifier|public
class|class
name|RoutingTableTest
extends|extends
name|ESAllocationTestCase
block|{
DECL|field|TEST_INDEX_1
specifier|private
specifier|static
specifier|final
name|String
name|TEST_INDEX_1
init|=
literal|"test1"
decl_stmt|;
DECL|field|TEST_INDEX_2
specifier|private
specifier|static
specifier|final
name|String
name|TEST_INDEX_2
init|=
literal|"test2"
decl_stmt|;
DECL|field|emptyRoutingTable
specifier|private
name|RoutingTable
name|emptyRoutingTable
decl_stmt|;
DECL|field|testRoutingTable
specifier|private
name|RoutingTable
name|testRoutingTable
decl_stmt|;
DECL|field|numberOfShards
specifier|private
name|int
name|numberOfShards
decl_stmt|;
DECL|field|numberOfReplicas
specifier|private
name|int
name|numberOfReplicas
decl_stmt|;
DECL|field|shardsPerIndex
specifier|private
name|int
name|shardsPerIndex
decl_stmt|;
DECL|field|totalNumberOfShards
specifier|private
name|int
name|totalNumberOfShards
decl_stmt|;
DECL|field|DEFAULT_SETTINGS
specifier|private
specifier|final
specifier|static
name|Settings
name|DEFAULT_SETTINGS
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|ALLOCATION_SERVICE
specifier|private
specifier|final
name|AllocationService
name|ALLOCATION_SERVICE
init|=
name|createAllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_initial_primaries_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|clusterState
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|numberOfShards
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|numberOfReplicas
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardsPerIndex
operator|=
name|this
operator|.
name|numberOfShards
operator|*
operator|(
name|this
operator|.
name|numberOfReplicas
operator|+
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|totalNumberOfShards
operator|=
name|this
operator|.
name|shardsPerIndex
operator|*
literal|2
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Setup test with "
operator|+
name|this
operator|.
name|numberOfShards
operator|+
literal|" shards and "
operator|+
name|this
operator|.
name|numberOfReplicas
operator|+
literal|" replicas."
argument_list|)
expr_stmt|;
name|this
operator|.
name|emptyRoutingTable
operator|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|createIndexMetaData
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|createIndexMetaData
argument_list|(
name|TEST_INDEX_2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|testRoutingTable
operator|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|TEST_INDEX_1
argument_list|)
operator|.
name|initializeAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|TEST_INDEX_2
argument_list|)
operator|.
name|initializeAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|TEST_INDEX_2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|testRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**      * puts primary shard routings into initializing state      */
DECL|method|initPrimaries
specifier|private
name|void
name|initPrimaries
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"adding "
operator|+
operator|(
name|this
operator|.
name|numberOfReplicas
operator|+
literal|1
operator|)
operator|+
literal|" nodes and performing rerouting"
argument_list|)
expr_stmt|;
name|Builder
name|discoBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|numberOfReplicas
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|discoBuilder
operator|=
name|discoBuilder
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|rerouteResult
init|=
name|ALLOCATION_SERVICE
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|this
operator|.
name|testRoutingTable
operator|=
name|rerouteResult
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|rerouteResult
operator|.
name|changed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|rerouteResult
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|startInitializingShards
specifier|private
name|void
name|startInitializingShards
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|this
operator|.
name|testRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"start primary shards for index "
operator|+
name|index
argument_list|)
expr_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|rerouteResult
init|=
name|ALLOCATION_SERVICE
operator|.
name|applyStartedShards
argument_list|(
name|this
operator|.
name|clusterState
argument_list|,
name|this
operator|.
name|clusterState
operator|.
name|routingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|index
argument_list|,
name|INITIALIZING
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|rerouteResult
operator|.
name|routingTable
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|testRoutingTable
operator|=
name|rerouteResult
operator|.
name|routingTable
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndexMetaData
specifier|private
name|IndexMetaData
operator|.
name|Builder
name|createIndexMetaData
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
operator|new
name|IndexMetaData
operator|.
name|Builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|DEFAULT_SETTINGS
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|this
operator|.
name|numberOfReplicas
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testAllShards
specifier|public
name|void
name|testAllShards
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|allShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allShards
argument_list|(
literal|"not_existing"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected when calling allShards() with non existing index name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testHasIndex
specifier|public
name|void
name|testHasIndex
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|hasIndex
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|hasIndex
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndex
specifier|public
name|void
name|testIndex
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|index
argument_list|(
name|TEST_INDEX_1
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|,
name|is
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|index
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndicesRouting
specifier|public
name|void
name|testIndicesRouting
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|indicesRouting
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|getIndicesRouting
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|getIndicesRouting
argument_list|()
argument_list|,
name|this
operator|.
name|testRoutingTable
operator|.
name|indicesRouting
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShardsWithState
specifier|public
name|void
name|testShardsWithState
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
operator|-
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|initializingExpected
init|=
name|this
operator|.
name|numberOfShards
operator|+
name|this
operator|.
name|numberOfShards
operator|*
name|this
operator|.
name|numberOfReplicas
decl_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|initializingExpected
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
operator|-
name|initializingExpected
operator|-
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|initializingExpected
operator|=
literal|2
operator|*
name|this
operator|.
name|numberOfShards
operator|*
name|this
operator|.
name|numberOfReplicas
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|initializingExpected
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
operator|-
name|initializingExpected
operator|-
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
comment|// now start all replicas too
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testActivePrimaryShardsGrouped
specifier|public
name|void
name|testActivePrimaryShardsGrouped
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|testRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
literal|"not_exists"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Calling with non-existing index name should raise IndexMissingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testAllActiveShardsGrouped
specifier|public
name|void
name|testAllActiveShardsGrouped
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|testRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
literal|"not_exists"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Calling with non-existing index should be ignored at the moment"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAllAssignedShardsGrouped
specifier|public
name|void
name|testAllAssignedShardsGrouped
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|testRoutingTable
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|testRoutingTable
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
literal|"not_exists"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Calling with non-existing index should be ignored at the moment"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

