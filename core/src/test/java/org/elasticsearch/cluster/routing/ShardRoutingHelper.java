begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_comment
comment|/**  * A helper class that allows access to package private APIs for testing.  */
end_comment

begin_class
DECL|class|ShardRoutingHelper
specifier|public
class|class
name|ShardRoutingHelper
block|{
DECL|method|relocate
specifier|public
specifier|static
name|ShardRouting
name|relocate
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
return|return
name|relocate
argument_list|(
name|routing
argument_list|,
name|nodeId
argument_list|,
name|ShardRouting
operator|.
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
return|;
block|}
DECL|method|relocate
specifier|public
specifier|static
name|ShardRouting
name|relocate
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|long
name|expectedByteSize
parameter_list|)
block|{
return|return
name|routing
operator|.
name|relocate
argument_list|(
name|nodeId
argument_list|,
name|expectedByteSize
argument_list|)
return|;
block|}
DECL|method|moveToStarted
specifier|public
specifier|static
name|ShardRouting
name|moveToStarted
parameter_list|(
name|ShardRouting
name|routing
parameter_list|)
block|{
return|return
name|routing
operator|.
name|moveToStarted
argument_list|()
return|;
block|}
DECL|method|initialize
specifier|public
specifier|static
name|ShardRouting
name|initialize
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
return|return
name|initialize
argument_list|(
name|routing
argument_list|,
name|nodeId
argument_list|,
name|ShardRouting
operator|.
name|UNAVAILABLE_EXPECTED_SHARD_SIZE
argument_list|)
return|;
block|}
DECL|method|initialize
specifier|public
specifier|static
name|ShardRouting
name|initialize
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|long
name|expectedSize
parameter_list|)
block|{
return|return
name|routing
operator|.
name|initialize
argument_list|(
name|nodeId
argument_list|,
literal|null
argument_list|,
name|expectedSize
argument_list|)
return|;
block|}
DECL|method|reinit
specifier|public
specifier|static
name|ShardRouting
name|reinit
parameter_list|(
name|ShardRouting
name|routing
parameter_list|)
block|{
return|return
name|routing
operator|.
name|reinitializeShard
argument_list|()
return|;
block|}
DECL|method|reinit
specifier|public
specifier|static
name|ShardRouting
name|reinit
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|UnassignedInfo
operator|.
name|Reason
name|reason
parameter_list|)
block|{
return|return
name|routing
operator|.
name|reinitializeShard
argument_list|()
operator|.
name|updateUnassignedInfo
argument_list|(
operator|new
name|UnassignedInfo
argument_list|(
name|reason
argument_list|,
literal|"test_reinit"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|moveToUnassigned
specifier|public
specifier|static
name|ShardRouting
name|moveToUnassigned
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|UnassignedInfo
name|info
parameter_list|)
block|{
return|return
name|routing
operator|.
name|moveToUnassigned
argument_list|(
name|info
argument_list|)
return|;
block|}
DECL|method|newWithRestoreSource
specifier|public
specifier|static
name|ShardRouting
name|newWithRestoreSource
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|RestoreSource
name|restoreSource
parameter_list|)
block|{
return|return
operator|new
name|ShardRouting
argument_list|(
name|routing
operator|.
name|shardId
argument_list|()
argument_list|,
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|routing
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|restoreSource
argument_list|,
name|routing
operator|.
name|primary
argument_list|()
argument_list|,
name|routing
operator|.
name|state
argument_list|()
argument_list|,
name|routing
operator|.
name|unassignedInfo
argument_list|()
argument_list|,
name|routing
operator|.
name|allocationId
argument_list|()
argument_list|,
name|routing
operator|.
name|getExpectedShardSize
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

