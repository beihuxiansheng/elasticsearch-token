begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
operator|.
name|AllocationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|Decision
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link AllocationDecision} enum.  */
end_comment

begin_class
DECL|class|AllocationDecisionTests
specifier|public
class|class
name|AllocationDecisionTests
extends|extends
name|ESTestCase
block|{
comment|/**      * Tests serialization and deserialization.      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|AllocationDecision
name|allocationDecision
init|=
name|randomFrom
argument_list|(
name|AllocationDecision
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|allocationDecision
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocationDecision
argument_list|,
name|AllocationDecision
operator|.
name|readFrom
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the order of values in the enum, because we depend on the natural enum sort order for sorting node decisions.      * See {@link AbstractAllocationDecision#getNodeDecisions()}.      */
DECL|method|testValuesOrder
specifier|public
name|void
name|testValuesOrder
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AllocationDecision
operator|.
name|YES
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AllocationDecision
operator|.
name|THROTTLED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|AllocationDecision
operator|.
name|NO
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|AllocationDecision
operator|.
name|WORSE_BALANCE
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|AllocationDecision
operator|.
name|AWAITING_INFO
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|AllocationDecision
operator|.
name|ALLOCATION_DELAYED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|AllocationDecision
operator|.
name|NO_ATTEMPT
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|AllocationDecision
index|[]
name|decisions
init|=
name|AllocationDecision
operator|.
name|values
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|decisions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|YES
argument_list|,
name|decisions
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|THROTTLED
argument_list|,
name|decisions
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO
argument_list|,
name|decisions
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|WORSE_BALANCE
argument_list|,
name|decisions
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|AWAITING_INFO
argument_list|,
name|decisions
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|ALLOCATION_DELAYED
argument_list|,
name|decisions
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
argument_list|,
name|decisions
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AllocationDecision
operator|.
name|NO_ATTEMPT
argument_list|,
name|decisions
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests getting a {@link AllocationDecision} from {@link Type}.      */
DECL|method|testFromDecisionType
specifier|public
name|void
name|testFromDecisionType
parameter_list|()
block|{
name|Type
name|type
init|=
name|randomFrom
argument_list|(
name|Type
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|AllocationDecision
name|allocationDecision
init|=
name|AllocationDecision
operator|.
name|fromDecisionType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|AllocationDecision
name|expected
init|=
name|type
operator|==
name|Type
operator|.
name|NO
condition|?
name|AllocationDecision
operator|.
name|NO
else|:
name|type
operator|==
name|Type
operator|.
name|THROTTLE
condition|?
name|AllocationDecision
operator|.
name|THROTTLED
else|:
name|AllocationDecision
operator|.
name|YES
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|allocationDecision
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests getting a {@link AllocationDecision} from {@link AllocationStatus}.      */
DECL|method|testFromAllocationStatus
specifier|public
name|void
name|testFromAllocationStatus
parameter_list|()
block|{
name|AllocationStatus
name|allocationStatus
init|=
name|rarely
argument_list|()
condition|?
literal|null
else|:
name|randomFrom
argument_list|(
name|AllocationStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|AllocationDecision
name|allocationDecision
init|=
name|AllocationDecision
operator|.
name|fromAllocationStatus
argument_list|(
name|allocationStatus
argument_list|)
decl_stmt|;
name|AllocationDecision
name|expected
decl_stmt|;
if|if
condition|(
name|allocationStatus
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|AllocationDecision
operator|.
name|YES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|DECIDERS_THROTTLED
condition|)
block|{
name|expected
operator|=
name|AllocationDecision
operator|.
name|THROTTLED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|FETCHING_SHARD_DATA
condition|)
block|{
name|expected
operator|=
name|AllocationDecision
operator|.
name|AWAITING_INFO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|DELAYED_ALLOCATION
condition|)
block|{
name|expected
operator|=
name|AllocationDecision
operator|.
name|ALLOCATION_DELAYED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|NO_VALID_SHARD_COPY
condition|)
block|{
name|expected
operator|=
name|AllocationDecision
operator|.
name|NO_VALID_SHARD_COPY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationStatus
operator|==
name|AllocationStatus
operator|.
name|NO_ATTEMPT
condition|)
block|{
name|expected
operator|=
name|AllocationDecision
operator|.
name|NO_ATTEMPT
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|AllocationDecision
operator|.
name|NO
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|allocationDecision
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

