begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|RoutingTableTests
specifier|public
class|class
name|RoutingTableTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|field|TEST_INDEX_1
specifier|private
specifier|static
specifier|final
name|String
name|TEST_INDEX_1
init|=
literal|"test1"
decl_stmt|;
DECL|field|TEST_INDEX_2
specifier|private
specifier|static
specifier|final
name|String
name|TEST_INDEX_2
init|=
literal|"test2"
decl_stmt|;
DECL|field|emptyRoutingTable
specifier|private
name|RoutingTable
name|emptyRoutingTable
decl_stmt|;
DECL|field|numberOfShards
specifier|private
name|int
name|numberOfShards
decl_stmt|;
DECL|field|numberOfReplicas
specifier|private
name|int
name|numberOfReplicas
decl_stmt|;
DECL|field|shardsPerIndex
specifier|private
name|int
name|shardsPerIndex
decl_stmt|;
DECL|field|totalNumberOfShards
specifier|private
name|int
name|totalNumberOfShards
decl_stmt|;
DECL|field|DEFAULT_SETTINGS
specifier|private
specifier|static
specifier|final
name|Settings
name|DEFAULT_SETTINGS
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|ALLOCATION_SERVICE
specifier|private
specifier|final
name|AllocationService
name|ALLOCATION_SERVICE
init|=
name|createAllocationService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|// don't limit recoveries
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_initial_primaries_recoveries"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|clusterState
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|numberOfShards
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|numberOfReplicas
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardsPerIndex
operator|=
name|this
operator|.
name|numberOfShards
operator|*
operator|(
name|this
operator|.
name|numberOfReplicas
operator|+
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|totalNumberOfShards
operator|=
name|this
operator|.
name|shardsPerIndex
operator|*
literal|2
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Setup test with {} shards and {} replicas."
argument_list|,
name|this
operator|.
name|numberOfShards
argument_list|,
name|this
operator|.
name|numberOfReplicas
argument_list|)
expr_stmt|;
name|this
operator|.
name|emptyRoutingTable
operator|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|createIndexMetaData
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|createIndexMetaData
argument_list|(
name|TEST_INDEX_2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|testRoutingTable
init|=
operator|new
name|RoutingTable
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|TEST_INDEX_1
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|IndexRoutingTable
operator|.
name|Builder
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|TEST_INDEX_2
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|initializeAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|TEST_INDEX_2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|testRoutingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**      * puts primary shard routings into initializing state      */
DECL|method|initPrimaries
specifier|private
name|void
name|initPrimaries
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"adding {} nodes and performing rerouting"
argument_list|,
name|this
operator|.
name|numberOfReplicas
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Builder
name|discoBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|numberOfReplicas
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|discoBuilder
operator|=
name|discoBuilder
operator|.
name|add
argument_list|(
name|newNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|rerouteResult
init|=
name|ALLOCATION_SERVICE
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|rerouteResult
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|this
operator|.
name|clusterState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|rerouteResult
expr_stmt|;
block|}
DECL|method|startInitializingShards
specifier|private
name|void
name|startInitializingShards
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"start primary shards for index {}"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterState
operator|=
name|ALLOCATION_SERVICE
operator|.
name|applyStartedShards
argument_list|(
name|this
operator|.
name|clusterState
argument_list|,
name|this
operator|.
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|index
argument_list|,
name|INITIALIZING
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndexMetaData
specifier|private
name|IndexMetaData
operator|.
name|Builder
name|createIndexMetaData
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
operator|new
name|IndexMetaData
operator|.
name|Builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|DEFAULT_SETTINGS
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|this
operator|.
name|numberOfReplicas
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
return|;
block|}
DECL|method|testAllShards
specifier|public
name|void
name|testAllShards
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|allShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"not_existing"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected when calling allShards() with non existing index name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testHasIndex
specifier|public
name|void
name|testHasIndex
parameter_list|()
block|{
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndex
specifier|public
name|void
name|testIndex
parameter_list|()
block|{
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|TEST_INDEX_1
argument_list|)
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
name|TEST_INDEX_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndicesRouting
specifier|public
name|void
name|testIndicesRouting
parameter_list|()
block|{
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|getIndicesRouting
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|getIndicesRouting
argument_list|()
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardsWithState
specifier|public
name|void
name|testShardsWithState
parameter_list|()
block|{
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
operator|-
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|initializingExpected
init|=
name|this
operator|.
name|numberOfShards
operator|+
name|this
operator|.
name|numberOfShards
operator|*
name|this
operator|.
name|numberOfReplicas
decl_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|initializingExpected
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
operator|-
name|initializingExpected
operator|-
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|initializingExpected
operator|=
literal|2
operator|*
name|this
operator|.
name|numberOfShards
operator|*
name|this
operator|.
name|numberOfReplicas
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|initializingExpected
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
operator|-
name|initializingExpected
operator|-
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
comment|// now start all replicas too
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testActivePrimaryShardsGrouped
specifier|public
name|void
name|testActivePrimaryShardsGrouped
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|activePrimaryShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
literal|"not_exists"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Calling with non-existing index name should raise IndexMissingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testAllActiveShardsGrouped
specifier|public
name|void
name|testAllActiveShardsGrouped
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allActiveShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
literal|"not_exists"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Calling with non-existing index should be ignored at the moment"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllAssignedShardsGrouped
specifier|public
name|void
name|testAllAssignedShardsGrouped
parameter_list|()
block|{
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
operator|*
name|this
operator|.
name|numberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
literal|"not_exists"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Calling with non-existing index should be ignored at the moment"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllShardsForMultipleIndices
specifier|public
name|void
name|testAllShardsForMultipleIndices
parameter_list|()
block|{
name|assertThat
argument_list|(
name|this
operator|.
name|emptyRoutingTable
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|initPrimaries
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|shardsPerIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startInitializingShards
argument_list|(
name|TEST_INDEX_2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
name|TEST_INDEX_2
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|this
operator|.
name|totalNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
operator|new
name|String
index|[]
block|{
name|TEST_INDEX_1
block|,
literal|"not_exists"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Calling with non-existing index should be ignored at the moment"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRoutingTableBuiltMoreThanOnce
specifier|public
name|void
name|testRoutingTableBuiltMoreThanOnce
parameter_list|()
block|{
name|RoutingTable
operator|.
name|Builder
name|b
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Ok the first time
try|try
block|{
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot be reused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|add
argument_list|(
operator|(
name|IndexRoutingTable
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot be reused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|updateNumberOfReplicas
argument_list|(
literal|1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot be reused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|b
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot be reused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testValidations
specifier|public
name|void
name|testValidations
parameter_list|()
block|{
specifier|final
name|String
name|indexName
init|=
literal|"test"
decl_stmt|;
specifier|final
name|int
name|numShards
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numReplicas
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numReplicas
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RoutingTableGenerator
name|routingTableGenerator
init|=
operator|new
name|RoutingTableGenerator
argument_list|()
decl_stmt|;
specifier|final
name|RoutingTableGenerator
operator|.
name|ShardCounter
name|counter
init|=
operator|new
name|RoutingTableGenerator
operator|.
name|ShardCounter
argument_list|()
decl_stmt|;
specifier|final
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|routingTableGenerator
operator|.
name|genIndexRoutingTable
argument_list|(
name|indexMetaData
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|indexMetaData
operator|=
name|updateActiveAllocations
argument_list|(
name|indexRoutingTable
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// test no validation errors
name|assertTrue
argument_list|(
name|indexRoutingTable
operator|.
name|validate
argument_list|(
name|metaData
argument_list|)
argument_list|)
expr_stmt|;
comment|// test wrong number of shards causes validation errors
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numShards
operator|+
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numReplicas
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|MetaData
name|metaData2
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexRoutingTable
operator|.
name|validate
argument_list|(
name|metaData2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test wrong number of replicas causes validation errors
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numReplicas
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|MetaData
name|metaData3
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexRoutingTable
operator|.
name|validate
argument_list|(
name|metaData3
argument_list|)
argument_list|)
expr_stmt|;
comment|// test wrong number of shards and replicas causes validation errors
name|indexMetaData
operator|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numShards
operator|+
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numReplicas
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|MetaData
name|metaData4
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|indexRoutingTable
operator|.
name|validate
argument_list|(
name|metaData4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** reverse engineer the in sync aid based on the given indexRoutingTable **/
DECL|method|updateActiveAllocations
specifier|public
specifier|static
name|IndexMetaData
name|updateActiveAllocations
parameter_list|(
name|IndexRoutingTable
name|indexRoutingTable
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
name|IndexMetaData
operator|.
name|Builder
name|imdBuilder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexShardRoutingTable
name|shardTable
range|:
name|indexRoutingTable
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|shardTable
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|insyncAids
init|=
name|shardTable
operator|.
name|activeShards
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|shr
lambda|->
name|shr
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|shardTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryShard
operator|.
name|initializing
argument_list|()
operator|&&
name|primaryShard
operator|.
name|relocating
argument_list|()
operator|==
literal|false
operator|&&
name|RecoverySource
operator|.
name|isInitialRecovery
argument_list|(
name|primaryShard
operator|.
name|recoverySource
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// simulate a primary was initialized based on aid
name|insyncAids
operator|.
name|add
argument_list|(
name|primaryShard
operator|.
name|allocationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|imdBuilder
operator|.
name|putInSyncAllocationIds
argument_list|(
name|shardRouting
operator|.
name|id
argument_list|()
argument_list|,
name|insyncAids
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|imdBuilder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

