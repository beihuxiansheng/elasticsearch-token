begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|EmptyClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|FailedRerouteAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|StartedRerouteAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cluster
operator|.
name|TestClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|STARTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|RoutingServiceTests
specifier|public
class|class
name|RoutingServiceTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|field|routingService
specifier|private
name|TestRoutingService
name|routingService
decl_stmt|;
annotation|@
name|Before
DECL|method|createRoutingService
specifier|public
name|void
name|createRoutingService
parameter_list|()
block|{
name|routingService
operator|=
operator|new
name|TestRoutingService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdownRoutingService
specifier|public
name|void
name|shutdownRoutingService
parameter_list|()
throws|throws
name|Exception
block|{
name|routingService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testReroute
specifier|public
name|void
name|testReroute
parameter_list|()
block|{
name|assertThat
argument_list|(
name|routingService
operator|.
name|hasReroutedAndClear
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|routingService
operator|.
name|reroute
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingService
operator|.
name|hasReroutedAndClear
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDelayedUnassigned
specifier|public
name|void
name|testNoDelayedUnassigned
parameter_list|()
throws|throws
name|Exception
block|{
name|AllocationService
name|allocation
init|=
name|createAllocationService
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
argument_list|,
literal|"0"
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove node2 and reroute
name|ClusterState
name|prevState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|newState
init|=
name|clusterState
decl_stmt|;
name|assertThat
argument_list|(
name|routingService
operator|.
name|getRegisteredNextDelaySetting
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|routingService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|newState
argument_list|,
name|prevState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingService
operator|.
name|getRegisteredNextDelaySetting
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingService
operator|.
name|hasReroutedAndClear
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestLogging
argument_list|(
literal|"_root:DEBUG"
argument_list|)
DECL|method|testDelayedUnassignedScheduleReroute
specifier|public
name|void
name|testDelayedUnassignedScheduleReroute
parameter_list|()
throws|throws
name|Exception
block|{
name|AllocationService
name|allocation
init|=
name|createAllocationService
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
argument_list|,
literal|"100ms"
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no shards should be unassigned"
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|nodeId
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allShards
init|=
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// we need to find the node with the replica otherwise we will not reroute
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|allShards
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|nodeId
operator|=
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
comment|// remove node2 and reroute
name|ClusterState
name|prevState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// We need to update the routing service's last attempted run to
comment|// signal that the GatewayAllocator tried to allocated it but
comment|// it was delayed
name|RoutingNodes
operator|.
name|UnassignedShards
name|unassigned
init|=
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|unassigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShardRouting
name|next
init|=
name|unassigned
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|routingService
operator|.
name|setUnassignedShardsAllocatedTimestamp
argument_list|(
name|next
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getTimestampInMillis
argument_list|()
operator|+
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|newState
init|=
name|clusterState
decl_stmt|;
name|routingService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|newState
argument_list|,
name|prevState
argument_list|)
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertTrue
argument_list|(
literal|"routing service should have run a reroute"
argument_list|,
name|routingService
operator|.
name|hasReroutedAndClear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the registration has been reset
name|assertThat
argument_list|(
name|routingService
operator|.
name|getRegisteredNextDelaySetting
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This tests that a new delayed reroute is scheduled right after a delayed reroute was run      */
DECL|method|testDelayedUnassignedScheduleRerouteAfterDelayedReroute
specifier|public
name|void
name|testDelayedUnassignedScheduleRerouteAfterDelayedReroute
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ThreadPool
name|testThreadPool
init|=
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|DelayedShardsMockGatewayAllocator
name|mockGatewayAllocator
init|=
operator|new
name|DelayedShardsMockGatewayAllocator
argument_list|()
decl_stmt|;
name|AllocationService
name|allocation
init|=
operator|new
name|AllocationService
argument_list|(
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|,
name|randomAllocationDeciders
argument_list|(
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|,
operator|new
name|NodeSettingsService
argument_list|(
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|,
name|getRandom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ShardsAllocators
argument_list|(
name|Settings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|,
name|mockGatewayAllocator
argument_list|)
argument_list|,
name|EmptyClusterInfoService
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"short_delay"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
argument_list|,
literal|"100ms"
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"long_delay"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
argument_list|,
literal|"10s"
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"short_delay"
argument_list|)
argument_list|)
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"long_delay"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node0"
argument_list|,
name|singletonMap
argument_list|(
literal|"data"
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node0"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node0"
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// allocate shards
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// start primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// start replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"all shards should be started"
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// find replica of short_delay
name|ShardRouting
name|shortDelayReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"short_delay"
argument_list|)
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|shortDelayReplica
operator|=
name|shardRouting
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|shortDelayReplica
argument_list|)
expr_stmt|;
comment|// find replica of long_delay
name|ShardRouting
name|longDelayReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"long_delay"
argument_list|)
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|longDelayReplica
operator|=
name|shardRouting
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|longDelayReplica
argument_list|)
expr_stmt|;
comment|// remove node of shortDelayReplica and node of longDelayReplica and reroute
name|ClusterState
name|prevState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|shortDelayReplica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|longDelayReplica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// make sure both replicas are marked as delayed (i.e. not reallocated)
name|mockGatewayAllocator
operator|.
name|setShardsToDelay
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|shortDelayReplica
argument_list|,
name|longDelayReplica
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// check that shortDelayReplica and longDelayReplica have been marked unassigned
name|RoutingNodes
operator|.
name|UnassignedShards
name|unassigned
init|=
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|unassigned
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update shortDelayReplica and longDelayReplica variables with new shard routing
name|ShardRouting
name|shortDelayUnassignedReplica
init|=
literal|null
decl_stmt|;
name|ShardRouting
name|longDelayUnassignedReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shr
range|:
name|unassigned
control|)
block|{
if|if
condition|(
name|shr
operator|.
name|getIndex
argument_list|()
operator|.
name|equals
argument_list|(
literal|"short_delay"
argument_list|)
condition|)
block|{
name|shortDelayUnassignedReplica
operator|=
name|shr
expr_stmt|;
block|}
else|else
block|{
name|longDelayUnassignedReplica
operator|=
name|shr
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|shortDelayReplica
operator|.
name|isSameShard
argument_list|(
name|shortDelayUnassignedReplica
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|longDelayReplica
operator|.
name|isSameShard
argument_list|(
name|longDelayUnassignedReplica
argument_list|)
argument_list|)
expr_stmt|;
comment|// manually trigger a clusterChanged event on routingService
name|ClusterState
name|newState
init|=
name|clusterState
decl_stmt|;
comment|// create fake cluster service
name|TestClusterService
name|clusterService
init|=
operator|new
name|TestClusterService
argument_list|(
name|newState
argument_list|,
name|testThreadPool
argument_list|)
decl_stmt|;
comment|// create routing service, also registers listener on cluster service
name|RoutingService
name|routingService
init|=
operator|new
name|RoutingService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|testThreadPool
argument_list|,
name|clusterService
argument_list|,
name|allocation
argument_list|)
decl_stmt|;
name|routingService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// just so performReroute does not prematurely return
comment|// ensure routing service has proper timestamp before triggering
name|routingService
operator|.
name|setUnassignedShardsAllocatedTimestamp
argument_list|(
name|shortDelayUnassignedReplica
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getTimestampInMillis
argument_list|()
operator|+
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// next (delayed) reroute should only delay longDelayReplica/longDelayUnassignedReplica
name|mockGatewayAllocator
operator|.
name|setShardsToDelay
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|longDelayUnassignedReplica
argument_list|)
argument_list|)
expr_stmt|;
comment|// register listener on cluster state so we know when cluster state has been changed
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|addLast
argument_list|(
name|event
lambda|->
name|latch
operator|.
name|countDown
argument_list|()
argument_list|)
expr_stmt|;
comment|// instead of clusterService calling clusterChanged, we call it directly here
name|routingService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|newState
argument_list|,
name|prevState
argument_list|)
argument_list|)
expr_stmt|;
comment|// cluster service should have updated state and called routingService with clusterChanged
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// verify the registration has been set to the delay of longDelayReplica/longDelayUnassignedReplica
name|assertThat
argument_list|(
name|routingService
operator|.
name|getRegisteredNextDelaySetting
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminate
argument_list|(
name|testThreadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDelayedUnassignedDoesNotRerouteForNegativeDelays
specifier|public
name|void
name|testDelayedUnassignedDoesNotRerouteForNegativeDelays
parameter_list|()
throws|throws
name|Exception
block|{
name|AllocationService
name|allocation
init|=
name|createAllocationService
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
argument_list|,
literal|"100ms"
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove node2 and reroute
name|ClusterState
name|prevState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocation
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Set it in the future so the delay will be negative
name|routingService
operator|.
name|setUnassignedShardsAllocatedTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
name|newState
init|=
name|clusterState
decl_stmt|;
name|routingService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|newState
argument_list|,
name|prevState
argument_list|)
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertThat
argument_list|(
name|routingService
operator|.
name|hasReroutedAndClear
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the registration has been updated
name|assertThat
argument_list|(
name|routingService
operator|.
name|getRegisteredNextDelaySetting
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|TestRoutingService
specifier|private
class|class
name|TestRoutingService
extends|extends
name|RoutingService
block|{
DECL|field|rerouted
specifier|private
name|AtomicBoolean
name|rerouted
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|TestRoutingService
specifier|public
name|TestRoutingService
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|hasReroutedAndClear
specifier|public
name|boolean
name|hasReroutedAndClear
parameter_list|()
block|{
return|return
name|rerouted
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|performReroute
specifier|protected
name|void
name|performReroute
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> performing fake reroute [{}]"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|rerouted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Mocks behavior in ReplicaShardAllocator to remove delayed shards from list of unassigned shards so they don't get reassigned yet.      * It does not implement the full logic but shards that are to be delayed need to be explicitly set using the method setShardsToDelay(...).      */
DECL|class|DelayedShardsMockGatewayAllocator
specifier|private
specifier|static
class|class
name|DelayedShardsMockGatewayAllocator
extends|extends
name|GatewayAllocator
block|{
DECL|field|delayedShards
specifier|volatile
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|delayedShards
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|method|DelayedShardsMockGatewayAllocator
specifier|public
name|DelayedShardsMockGatewayAllocator
parameter_list|()
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyStartedShards
specifier|public
name|void
name|applyStartedShards
parameter_list|(
name|StartedRerouteAllocation
name|allocation
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|applyFailedShards
specifier|public
name|void
name|applyFailedShards
parameter_list|(
name|FailedRerouteAllocation
name|allocation
parameter_list|)
block|{}
comment|/**          * Explicitly set which shards should be delayed in the next allocateUnassigned calls          */
DECL|method|setShardsToDelay
specifier|public
name|void
name|setShardsToDelay
parameter_list|(
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|delayedShards
parameter_list|)
block|{
name|this
operator|.
name|delayedShards
operator|=
name|delayedShards
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocateUnassigned
specifier|public
name|boolean
name|allocateUnassigned
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
specifier|final
name|RoutingNodes
name|routingNodes
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
specifier|final
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|unassignedIterator
init|=
name|routingNodes
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|unassignedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ShardRouting
name|shard
init|=
name|unassignedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardToDelay
range|:
name|delayedShards
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|isSameShard
argument_list|(
name|shardToDelay
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|unassignedIterator
operator|.
name|removeAndIgnore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
block|}
block|}
end_class

end_unit

