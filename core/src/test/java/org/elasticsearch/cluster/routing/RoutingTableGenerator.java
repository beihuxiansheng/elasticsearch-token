begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterShardHealth
operator|.
name|getInactivePrimaryHealth
import|;
end_import

begin_class
DECL|class|RoutingTableGenerator
specifier|public
class|class
name|RoutingTableGenerator
block|{
DECL|field|node_id
specifier|private
specifier|static
name|int
name|node_id
init|=
literal|1
decl_stmt|;
DECL|method|genShardRouting
specifier|private
name|ShardRouting
name|genShardRouting
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|,
name|boolean
name|primary
parameter_list|)
block|{
name|ShardRoutingState
name|state
decl_stmt|;
name|int
name|stateRandomizer
init|=
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|40
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateRandomizer
operator|>
literal|5
condition|)
block|{
name|state
operator|=
name|ShardRoutingState
operator|.
name|STARTED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stateRandomizer
operator|>
literal|3
condition|)
block|{
name|state
operator|=
name|ShardRoutingState
operator|.
name|RELOCATING
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|ShardRoutingState
operator|.
name|INITIALIZING
expr_stmt|;
block|}
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|STARTED
case|:
return|return
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|,
literal|"node_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|node_id
operator|++
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
return|;
case|case
name|INITIALIZING
case|:
return|return
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|,
literal|"node_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|node_id
operator|++
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
return|;
case|case
name|RELOCATING
case|:
return|return
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|,
literal|"node_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|node_id
operator|++
argument_list|)
argument_list|,
literal|"node_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|node_id
operator|++
argument_list|)
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Unknown state: "
operator|+
name|state
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|genShardRoutingTable
specifier|public
name|IndexShardRoutingTable
name|genShardRoutingTable
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|int
name|shardId
parameter_list|,
name|ShardCounter
name|counter
parameter_list|)
block|{
specifier|final
name|String
name|index
init|=
name|indexMetaData
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|IndexShardRoutingTable
operator|.
name|Builder
name|builder
init|=
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
name|ShardRouting
name|shardRouting
init|=
name|genShardRouting
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|counter
operator|.
name|update
argument_list|(
name|shardRouting
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|replicas
init|=
name|indexMetaData
operator|.
name|getNumberOfReplicas
argument_list|()
init|;
name|replicas
operator|>
literal|0
condition|;
name|replicas
operator|--
control|)
block|{
name|shardRouting
operator|=
name|genShardRouting
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|counter
operator|.
name|update
argument_list|(
name|shardRouting
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addShard
argument_list|(
name|shardRouting
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|genIndexRoutingTable
specifier|public
name|IndexRoutingTable
name|genIndexRoutingTable
parameter_list|(
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|ShardCounter
name|counter
parameter_list|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|builder
init|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shard
init|=
literal|0
init|;
name|shard
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|shard
operator|++
control|)
block|{
name|builder
operator|.
name|addIndexShard
argument_list|(
name|genShardRoutingTable
argument_list|(
name|indexMetaData
argument_list|,
name|shard
argument_list|,
name|counter
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|class|ShardCounter
specifier|public
specifier|static
class|class
name|ShardCounter
block|{
DECL|field|active
specifier|public
name|int
name|active
decl_stmt|;
DECL|field|relocating
specifier|public
name|int
name|relocating
decl_stmt|;
DECL|field|initializing
specifier|public
name|int
name|initializing
decl_stmt|;
DECL|field|unassigned
specifier|public
name|int
name|unassigned
decl_stmt|;
DECL|field|primaryActive
specifier|public
name|int
name|primaryActive
decl_stmt|;
DECL|field|primaryInactive
specifier|public
name|int
name|primaryInactive
decl_stmt|;
DECL|field|inactivePrimaryCausesRed
specifier|private
name|boolean
name|inactivePrimaryCausesRed
init|=
literal|false
decl_stmt|;
DECL|method|status
specifier|public
name|ClusterHealthStatus
name|status
parameter_list|()
block|{
if|if
condition|(
name|primaryInactive
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|inactivePrimaryCausesRed
condition|)
block|{
return|return
name|ClusterHealthStatus
operator|.
name|RED
return|;
block|}
else|else
block|{
return|return
name|ClusterHealthStatus
operator|.
name|YELLOW
return|;
block|}
block|}
if|if
condition|(
name|unassigned
operator|>
literal|0
operator|||
name|initializing
operator|>
literal|0
condition|)
block|{
return|return
name|ClusterHealthStatus
operator|.
name|YELLOW
return|;
block|}
return|return
name|ClusterHealthStatus
operator|.
name|GREEN
return|;
block|}
DECL|method|update
specifier|public
name|void
name|update
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|active
argument_list|()
condition|)
block|{
name|active
operator|++
expr_stmt|;
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|primaryActive
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|shardRouting
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|relocating
operator|++
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
condition|)
block|{
name|primaryInactive
operator|++
expr_stmt|;
if|if
condition|(
name|inactivePrimaryCausesRed
operator|==
literal|false
condition|)
block|{
name|inactivePrimaryCausesRed
operator|=
name|getInactivePrimaryHealth
argument_list|(
name|shardRouting
argument_list|,
name|indexMetaData
argument_list|)
operator|==
name|ClusterHealthStatus
operator|.
name|RED
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shardRouting
operator|.
name|initializing
argument_list|()
condition|)
block|{
name|initializing
operator|++
expr_stmt|;
block|}
else|else
block|{
name|unassigned
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

