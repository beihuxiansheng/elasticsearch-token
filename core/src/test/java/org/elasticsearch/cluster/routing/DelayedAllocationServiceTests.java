begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|DelayedAllocationService
operator|.
name|CLUSTER_UPDATE_TASK_SOURCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|STARTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|DelayedAllocationServiceTests
specifier|public
class|class
name|DelayedAllocationServiceTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|field|delayedAllocationService
specifier|private
name|TestDelayAllocationService
name|delayedAllocationService
decl_stmt|;
DECL|field|allocationService
specifier|private
name|MockAllocationService
name|allocationService
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|threadPool
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
annotation|@
name|Before
DECL|method|createDelayedAllocationService
specifier|public
name|void
name|createDelayedAllocationService
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|clusterService
operator|=
name|mock
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
expr_stmt|;
name|allocationService
operator|=
name|createAllocationService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|DelayedShardsMockGatewayAllocator
argument_list|()
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|=
operator|new
name|TestDelayAllocationService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|allocationService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clusterService
argument_list|)
operator|.
name|addFirst
argument_list|(
name|delayedAllocationService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdownThreadPool
specifier|public
name|void
name|shutdownThreadPool
parameter_list|()
throws|throws
name|Exception
block|{
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDelayedUnassigned
specifier|public
name|void
name|testNoDelayedUnassigned
parameter_list|()
throws|throws
name|Exception
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"0"
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|prevState
init|=
name|clusterState
decl_stmt|;
comment|// remove node2 and reroute
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
name|boolean
name|nodeAvailableForAllocation
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeAvailableForAllocation
condition|)
block|{
name|nodes
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|newState
init|=
name|clusterState
decl_stmt|;
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|unassignedShards
init|=
name|newState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAvailableForAllocation
condition|)
block|{
name|assertThat
argument_list|(
name|unassignedShards
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|unassignedShards
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|unassignedShards
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|isDelayed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|newState
argument_list|,
name|prevState
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|clusterService
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelayedUnassignedScheduleReroute
specifier|public
name|void
name|testDelayedUnassignedScheduleReroute
parameter_list|()
throws|throws
name|Exception
block|{
name|TimeValue
name|delaySetting
init|=
name|timeValueMillis
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|delaySetting
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|long
name|baseTimestampNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|allocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|baseTimestampNanos
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no shards should be unassigned"
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|nodeId
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allShards
init|=
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// we need to find the node with the replica otherwise we will not reroute
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|allShards
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|nodeId
operator|=
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
comment|// remove node that has replica and reroute
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|stateWithDelayedShard
init|=
name|clusterState
decl_stmt|;
comment|// make sure the replica is marked as delayed (i.e. not reallocated)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UnassignedInfo
operator|.
name|getNumberOfDelayedUnassigned
argument_list|(
name|stateWithDelayedShard
argument_list|)
argument_list|)
expr_stmt|;
name|ShardRouting
name|delayedShard
init|=
name|stateWithDelayedShard
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|baseTimestampNanos
argument_list|,
name|delayedShard
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getUnassignedTimeInNanos
argument_list|()
argument_list|)
expr_stmt|;
comment|// mock ClusterService.submitStateUpdateTask() method
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|ClusterStateUpdateTask
argument_list|>
name|clusterStateUpdateTask
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|clusterStateUpdateTask
operator|.
name|set
argument_list|(
operator|(
name|ClusterStateUpdateTask
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|clusterService
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
name|eq
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|)
argument_list|,
name|any
argument_list|(
name|ClusterStateUpdateTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|delayUntilClusterChangeEvent
init|=
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|randomInt
argument_list|(
operator|(
name|int
operator|)
name|delaySetting
operator|.
name|nanos
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
name|long
name|clusterChangeEventTimestampNanos
init|=
name|baseTimestampNanos
operator|+
name|delayUntilClusterChangeEvent
decl_stmt|;
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"fake node left"
argument_list|,
name|stateWithDelayedShard
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that delayed reroute task was created and registered with the proper settings
name|DelayedAllocationService
operator|.
name|DelayedRerouteTask
name|delayedRerouteTask
init|=
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|delayedRerouteTask
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delayedRerouteTask
operator|.
name|cancelScheduling
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delayedRerouteTask
operator|.
name|baseTimestampNanos
argument_list|,
name|equalTo
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delayedRerouteTask
operator|.
name|nextDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|delaySetting
operator|.
name|nanos
argument_list|()
operator|-
operator|(
name|clusterChangeEventTimestampNanos
operator|-
name|baseTimestampNanos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that submitStateUpdateTask() was invoked on the cluster service mock
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clusterService
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
name|eq
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clusterStateUpdateTask
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// advance the time on the allocation service to a timestamp that happened after the delayed scheduling
name|long
name|nanoTimeForReroute
init|=
name|clusterChangeEventTimestampNanos
operator|+
name|delaySetting
operator|.
name|nanos
argument_list|()
operator|+
name|timeValueMillis
argument_list|(
name|randomInt
argument_list|(
literal|200
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
name|allocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|nanoTimeForReroute
argument_list|)
expr_stmt|;
comment|// apply cluster state
name|ClusterState
name|stateWithRemovedDelay
init|=
name|clusterStateUpdateTask
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
name|stateWithDelayedShard
argument_list|)
decl_stmt|;
comment|// check that shard is not delayed anymore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UnassignedInfo
operator|.
name|getNumberOfDelayedUnassigned
argument_list|(
name|stateWithRemovedDelay
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that task is now removed
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// simulate calling listener (cluster change event)
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|nanoTimeForReroute
operator|+
name|timeValueMillis
argument_list|(
name|randomInt
argument_list|(
literal|200
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|,
name|stateWithRemovedDelay
argument_list|,
name|stateWithDelayedShard
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that no new task is scheduled
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that no further cluster state update was submitted
name|verifyNoMoreInteractions
argument_list|(
name|clusterService
argument_list|)
expr_stmt|;
block|}
comment|/**      * This tests that a new delayed reroute is scheduled right after a delayed reroute was run      */
DECL|method|testDelayedUnassignedScheduleRerouteAfterDelayedReroute
specifier|public
name|void
name|testDelayedUnassignedScheduleRerouteAfterDelayedReroute
parameter_list|()
throws|throws
name|Exception
block|{
name|TimeValue
name|shortDelaySetting
init|=
name|timeValueMillis
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|TimeValue
name|longDelaySetting
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"short_delay"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|shortDelaySetting
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"long_delay"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|longDelaySetting
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"short_delay"
argument_list|)
argument_list|)
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"long_delay"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node0"
argument_list|,
name|singleton
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node0"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node0"
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// allocate shards
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// start primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// start replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"all shards should be started"
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// find replica of short_delay
name|ShardRouting
name|shortDelayReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"short_delay"
argument_list|)
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|shortDelayReplica
operator|=
name|shardRouting
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|shortDelayReplica
argument_list|)
expr_stmt|;
comment|// find replica of long_delay
name|ShardRouting
name|longDelayReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"long_delay"
argument_list|)
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|longDelayReplica
operator|=
name|shardRouting
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|longDelayReplica
argument_list|)
expr_stmt|;
specifier|final
name|long
name|baseTimestampNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// remove node of shortDelayReplica and node of longDelayReplica and reroute
name|ClusterState
name|clusterStateBeforeNodeLeft
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|shortDelayReplica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|longDelayReplica
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// make sure both replicas are marked as delayed (i.e. not reallocated)
name|allocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|baseTimestampNanos
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|ClusterState
name|stateWithDelayedShards
init|=
name|clusterState
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|UnassignedInfo
operator|.
name|getNumberOfDelayedUnassigned
argument_list|(
name|stateWithDelayedShards
argument_list|)
argument_list|)
expr_stmt|;
name|RoutingNodes
operator|.
name|UnassignedShards
operator|.
name|UnassignedIterator
name|iter
init|=
name|stateWithDelayedShards
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|baseTimestampNanos
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getUnassignedTimeInNanos
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|baseTimestampNanos
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getUnassignedTimeInNanos
argument_list|()
argument_list|)
expr_stmt|;
comment|// mock ClusterService.submitStateUpdateTask() method
name|CountDownLatch
name|latch1
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|ClusterStateUpdateTask
argument_list|>
name|clusterStateUpdateTask1
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|clusterStateUpdateTask1
operator|.
name|set
argument_list|(
operator|(
name|ClusterStateUpdateTask
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|latch1
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|clusterService
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
name|eq
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|)
argument_list|,
name|any
argument_list|(
name|ClusterStateUpdateTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|delayUntilClusterChangeEvent
init|=
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|randomInt
argument_list|(
operator|(
name|int
operator|)
name|shortDelaySetting
operator|.
name|nanos
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
name|long
name|clusterChangeEventTimestampNanos
init|=
name|baseTimestampNanos
operator|+
name|delayUntilClusterChangeEvent
decl_stmt|;
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"fake node left"
argument_list|,
name|stateWithDelayedShards
argument_list|,
name|clusterStateBeforeNodeLeft
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that delayed reroute task was created and registered with the proper settings
name|DelayedAllocationService
operator|.
name|DelayedRerouteTask
name|firstDelayedRerouteTask
init|=
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|firstDelayedRerouteTask
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|firstDelayedRerouteTask
operator|.
name|cancelScheduling
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstDelayedRerouteTask
operator|.
name|baseTimestampNanos
argument_list|,
name|equalTo
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstDelayedRerouteTask
operator|.
name|nextDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|UnassignedInfo
operator|.
name|findNextDelayedAllocation
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|,
name|stateWithDelayedShards
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstDelayedRerouteTask
operator|.
name|nextDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shortDelaySetting
operator|.
name|nanos
argument_list|()
operator|-
operator|(
name|clusterChangeEventTimestampNanos
operator|-
name|baseTimestampNanos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that submitStateUpdateTask() was invoked on the cluster service mock
name|assertTrue
argument_list|(
name|latch1
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clusterService
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
name|eq
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clusterStateUpdateTask1
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// advance the time on the allocation service to a timestamp that happened after the delayed scheduling
name|long
name|nanoTimeForReroute
init|=
name|clusterChangeEventTimestampNanos
operator|+
name|shortDelaySetting
operator|.
name|nanos
argument_list|()
operator|+
name|timeValueMillis
argument_list|(
name|randomInt
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
name|allocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|nanoTimeForReroute
argument_list|)
expr_stmt|;
comment|// apply cluster state
name|ClusterState
name|stateWithOnlyOneDelayedShard
init|=
name|clusterStateUpdateTask1
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
name|stateWithDelayedShards
argument_list|)
decl_stmt|;
comment|// check that shard is not delayed anymore
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UnassignedInfo
operator|.
name|getNumberOfDelayedUnassigned
argument_list|(
name|stateWithOnlyOneDelayedShard
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that task is now removed
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// mock ClusterService.submitStateUpdateTask() method again
name|CountDownLatch
name|latch2
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicReference
argument_list|<
name|ClusterStateUpdateTask
argument_list|>
name|clusterStateUpdateTask2
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|doAnswer
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|clusterStateUpdateTask2
operator|.
name|set
argument_list|(
operator|(
name|ClusterStateUpdateTask
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|latch2
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|clusterService
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
name|eq
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|)
argument_list|,
name|any
argument_list|(
name|ClusterStateUpdateTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// simulate calling listener (cluster change event)
name|delayUntilClusterChangeEvent
operator|=
name|timeValueMillis
argument_list|(
name|randomInt
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
name|clusterChangeEventTimestampNanos
operator|=
name|nanoTimeForReroute
operator|+
name|delayUntilClusterChangeEvent
expr_stmt|;
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|,
name|stateWithOnlyOneDelayedShard
argument_list|,
name|stateWithDelayedShards
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that new delayed reroute task was created and registered with the proper settings
name|DelayedAllocationService
operator|.
name|DelayedRerouteTask
name|secondDelayedRerouteTask
init|=
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|secondDelayedRerouteTask
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|secondDelayedRerouteTask
operator|.
name|cancelScheduling
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|secondDelayedRerouteTask
operator|.
name|baseTimestampNanos
argument_list|,
name|equalTo
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|secondDelayedRerouteTask
operator|.
name|nextDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|UnassignedInfo
operator|.
name|findNextDelayedAllocation
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|,
name|stateWithOnlyOneDelayedShard
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|secondDelayedRerouteTask
operator|.
name|nextDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|longDelaySetting
operator|.
name|nanos
argument_list|()
operator|-
operator|(
name|clusterChangeEventTimestampNanos
operator|-
name|baseTimestampNanos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that submitStateUpdateTask() was invoked on the cluster service mock
name|assertTrue
argument_list|(
name|latch2
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|clusterService
argument_list|)
operator|.
name|submitStateUpdateTask
argument_list|(
name|eq
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clusterStateUpdateTask2
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// advance the time on the allocation service to a timestamp that happened after the delayed scheduling
name|nanoTimeForReroute
operator|=
name|clusterChangeEventTimestampNanos
operator|+
name|longDelaySetting
operator|.
name|nanos
argument_list|()
operator|+
name|timeValueMillis
argument_list|(
name|randomInt
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
name|allocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|nanoTimeForReroute
argument_list|)
expr_stmt|;
comment|// apply cluster state
name|ClusterState
name|stateWithNoDelayedShards
init|=
name|clusterStateUpdateTask2
operator|.
name|get
argument_list|()
operator|.
name|execute
argument_list|(
name|stateWithOnlyOneDelayedShard
argument_list|)
decl_stmt|;
comment|// check that shard is not delayed anymore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UnassignedInfo
operator|.
name|getNumberOfDelayedUnassigned
argument_list|(
name|stateWithNoDelayedShards
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that task is now removed
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// simulate calling listener (cluster change event)
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|nanoTimeForReroute
operator|+
name|timeValueMillis
argument_list|(
name|randomInt
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
name|CLUSTER_UPDATE_TASK_SOURCE
argument_list|,
name|stateWithNoDelayedShards
argument_list|,
name|stateWithOnlyOneDelayedShard
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that no new task is scheduled
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that no further cluster state update was submitted
name|verifyNoMoreInteractions
argument_list|(
name|clusterService
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelayedUnassignedScheduleRerouteRescheduledOnShorterDelay
specifier|public
name|void
name|testDelayedUnassignedScheduleRerouteRescheduledOnShorterDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|TimeValue
name|delaySetting
init|=
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|TimeValue
name|shorterDelaySetting
init|=
name|timeValueMillis
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|delaySetting
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|shorterDelaySetting
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node4"
argument_list|)
argument_list|)
operator|.
name|localNodeId
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|long
name|nodeLeftTimestampNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|allocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|nodeLeftTimestampNanos
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting primaries
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// starting replicas
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no shards should be unassigned"
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|nodeIdOfFooReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|clusterState
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"foo"
argument_list|)
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|nodeIdOfFooReplica
operator|=
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|nodeIdOfFooReplica
argument_list|)
expr_stmt|;
comment|// remove node that has replica and reroute
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|nodeIdOfFooReplica
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"fake node left"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|stateWithDelayedShard
init|=
name|clusterState
decl_stmt|;
comment|// make sure the replica is marked as delayed (i.e. not reallocated)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UnassignedInfo
operator|.
name|getNumberOfDelayedUnassigned
argument_list|(
name|stateWithDelayedShard
argument_list|)
argument_list|)
expr_stmt|;
name|ShardRouting
name|delayedShard
init|=
name|stateWithDelayedShard
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|nodeLeftTimestampNanos
argument_list|,
name|delayedShard
operator|.
name|unassignedInfo
argument_list|()
operator|.
name|getUnassignedTimeInNanos
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|delayUntilClusterChangeEvent
init|=
name|TimeValue
operator|.
name|timeValueNanos
argument_list|(
name|randomInt
argument_list|(
operator|(
name|int
operator|)
name|shorterDelaySetting
operator|.
name|nanos
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|nanos
argument_list|()
decl_stmt|;
name|long
name|clusterChangeEventTimestampNanos
init|=
name|nodeLeftTimestampNanos
operator|+
name|delayUntilClusterChangeEvent
decl_stmt|;
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"fake node left"
argument_list|,
name|stateWithDelayedShard
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that delayed reroute task was created and registered with the proper settings
name|DelayedAllocationService
operator|.
name|DelayedRerouteTask
name|delayedRerouteTask
init|=
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|delayedRerouteTask
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delayedRerouteTask
operator|.
name|cancelScheduling
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delayedRerouteTask
operator|.
name|baseTimestampNanos
argument_list|,
name|equalTo
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delayedRerouteTask
operator|.
name|nextDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|delaySetting
operator|.
name|nanos
argument_list|()
operator|-
operator|(
name|clusterChangeEventTimestampNanos
operator|-
name|nodeLeftTimestampNanos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// update settings with shorter delay
name|ClusterState
name|stateWithShorterDelay
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|stateWithDelayedShard
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|stateWithDelayedShard
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|updateSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|shorterDelaySetting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"apply shorter delay"
argument_list|,
name|stateWithShorterDelay
argument_list|,
name|stateWithDelayedShard
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// node leaves with replica shard of index bar that has shorter delay
name|String
name|nodeIdOfBarReplica
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|stateWithDelayedShard
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|allShards
argument_list|(
literal|"bar"
argument_list|)
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
name|nodeIdOfBarReplica
operator|=
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|nodeIdOfBarReplica
argument_list|)
expr_stmt|;
comment|// remove node that has replica and reroute
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|stateWithDelayedShard
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|stateWithDelayedShard
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|nodeIdOfBarReplica
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|stateWithShorterDelay
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"fake node left"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|delayedAllocationService
operator|.
name|setNanoTimeOverride
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
expr_stmt|;
name|delayedAllocationService
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"fake node left"
argument_list|,
name|stateWithShorterDelay
argument_list|,
name|stateWithDelayedShard
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that delayed reroute task was replaced by shorter reroute task
name|DelayedAllocationService
operator|.
name|DelayedRerouteTask
name|shorterDelayedRerouteTask
init|=
name|delayedAllocationService
operator|.
name|delayedRerouteTask
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|shorterDelayedRerouteTask
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|shorterDelayedRerouteTask
argument_list|,
name|delayedRerouteTask
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|delayedRerouteTask
operator|.
name|cancelScheduling
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// existing task was cancelled
name|assertFalse
argument_list|(
name|shorterDelayedRerouteTask
operator|.
name|cancelScheduling
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delayedRerouteTask
operator|.
name|baseTimestampNanos
argument_list|,
name|equalTo
argument_list|(
name|clusterChangeEventTimestampNanos
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shorterDelayedRerouteTask
operator|.
name|nextDelay
operator|.
name|nanos
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|shorterDelaySetting
operator|.
name|nanos
argument_list|()
operator|-
operator|(
name|clusterChangeEventTimestampNanos
operator|-
name|nodeLeftTimestampNanos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestDelayAllocationService
specifier|private
specifier|static
class|class
name|TestDelayAllocationService
extends|extends
name|DelayedAllocationService
block|{
DECL|field|nanoTimeOverride
specifier|private
specifier|volatile
name|long
name|nanoTimeOverride
init|=
operator|-
literal|1L
decl_stmt|;
DECL|method|TestDelayAllocationService
specifier|public
name|TestDelayAllocationService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|AllocationService
name|allocationService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|allocationService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertClusterStateThread
specifier|protected
name|void
name|assertClusterStateThread
parameter_list|()
block|{
comment|// do not check this in the unit tests
block|}
DECL|method|setNanoTimeOverride
specifier|public
name|void
name|setNanoTimeOverride
parameter_list|(
name|long
name|nanoTime
parameter_list|)
block|{
name|this
operator|.
name|nanoTimeOverride
operator|=
name|nanoTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|currentNanoTime
specifier|protected
name|long
name|currentNanoTime
parameter_list|()
block|{
return|return
name|nanoTimeOverride
operator|==
operator|-
literal|1L
condition|?
name|super
operator|.
name|currentNanoTime
argument_list|()
else|:
name|nanoTimeOverride
return|;
block|}
block|}
block|}
end_class

end_unit

