begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation.decider
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiskUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|MockInternalClusterInfoService
operator|.
name|DevNullClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|MoveAllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|gateway
operator|.
name|NoopGatewayAllocator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|RELOCATING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|STARTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|UNASSIGNED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|DiskThresholdDeciderTests
specifier|public
class|class
name|DiskThresholdDeciderTests
extends|extends
name|ESAllocationTestCase
block|{
DECL|method|testDiskThreshold
specifier|public
name|void
name|testDiskThreshold
parameter_list|()
block|{
name|Settings
name|diskSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.7
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.8
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usagesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node1"
argument_list|,
literal|"node1"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// 90% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"node2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|35
argument_list|)
argument_list|)
expr_stmt|;
comment|// 65% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node3"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node3"
argument_list|,
literal|"node3"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
comment|// 40% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node4"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node4"
argument_list|,
literal|"node4"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
comment|// 20% used
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|usagesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][p]"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
comment|// 10 bytes
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][r]"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
init|=
name|shardSizesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
argument_list|)
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterInfoService
name|cis
init|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
comment|// noop
block|}
block|}
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding two nodes"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Primary shard should be initializing, replica should not
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards (primaries)"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that we're able to start the primary
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that node1 didn't get any shards because its disk usage is too high
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards (replicas)"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that the replica couldn't be started since node1 doesn't have enough space
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node3"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that the replica is initialized now that node3 is available with enough space
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards (replicas)"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that the replica couldn't be started since node1 doesn't have enough space
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> changing decider settings"
argument_list|)
expr_stmt|;
comment|// Set the low threshold to 60 instead of 70
comment|// Set the high threshold to 70 instead of 80
comment|// node2 now should not have new shards allocated to it, but shards can remain
name|diskSettings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"60%"
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.7
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|deciders
operator|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|strategy
operator|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shards remain started
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> changing settings again"
argument_list|)
expr_stmt|;
comment|// Set the low threshold to 50 instead of 60
comment|// Set the high threshold to 60 instead of 70
comment|// node2 now should not have new shards allocated to it, and shards cannot remain
name|diskSettings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.5
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.6
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|deciders
operator|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|strategy
operator|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shards remain started
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shard hasn't been moved off of node2 yet because there's nowhere for it to go
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node4"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shards remain started
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> apply INITIALIZING shards"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node4 is available now, so the shard is moved off of node2
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node4"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDiskThresholdWithAbsoluteSizes
specifier|public
name|void
name|testDiskThresholdWithAbsoluteSizes
parameter_list|()
block|{
name|Settings
name|diskSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"30b"
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"9b"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usagesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node1"
argument_list|,
literal|"n1"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// 90% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// 90% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node3"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node3"
argument_list|,
literal|"n3"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
comment|// 40% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node4"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node4"
argument_list|,
literal|"n4"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
comment|// 20% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node5"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node5"
argument_list|,
literal|"n5"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|85
argument_list|)
argument_list|)
expr_stmt|;
comment|// 15% used
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|usagesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][p]"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
comment|// 10 bytes
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][r]"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
init|=
name|shardSizesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
argument_list|)
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterInfoService
name|cis
init|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
comment|// noop
block|}
block|}
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node1 and node2 node"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Primary should initialize, even though both nodes are over the limit initialize
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nodeWithPrimary
decl_stmt|,
name|nodeWithoutPrimary
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|nodeWithPrimary
operator|=
literal|"node1"
expr_stmt|;
name|nodeWithoutPrimary
operator|=
literal|"node2"
expr_stmt|;
block|}
else|else
block|{
name|nodeWithPrimary
operator|=
literal|"node2"
expr_stmt|;
name|nodeWithoutPrimary
operator|=
literal|"node1"
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> nodeWithPrimary: {}"
argument_list|,
name|nodeWithPrimary
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> nodeWithoutPrimary: {}"
argument_list|,
name|nodeWithoutPrimary
argument_list|)
expr_stmt|;
comment|// Make node without the primary now habitable to replicas
name|usagesBuilder
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|usages
argument_list|)
expr_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
name|nodeWithoutPrimary
argument_list|,
operator|new
name|DiskUsage
argument_list|(
name|nodeWithoutPrimary
argument_list|,
literal|""
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|35
argument_list|)
argument_list|)
expr_stmt|;
comment|// 65% used
name|usages
operator|=
name|usagesBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo2
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
argument_list|)
decl_stmt|;
name|cis
operator|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo2
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
comment|// noop
block|}
block|}
expr_stmt|;
name|strategy
operator|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Now the replica should be able to initialize
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards (primaries)"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that we're able to start the primary and replica, since they were both initializing
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that node1 got a single shard (the primary), even though its disk usage is too high
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that node2 got a single shard (a replica)
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that one replica is still unassigned
comment|//assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(1));
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node3"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that the replica is initialized now that node3 is available with enough space
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards (replicas)"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that all replicas could be started
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> changing decider settings"
argument_list|)
expr_stmt|;
comment|// Set the low threshold to 60 instead of 70
comment|// Set the high threshold to 70 instead of 80
comment|// node2 now should not have new shards allocated to it, but shards can remain
name|diskSettings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"40b"
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"30b"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|deciders
operator|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|strategy
operator|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shards remain started
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> changing settings again"
argument_list|)
expr_stmt|;
comment|// Set the low threshold to 50 instead of 60
comment|// Set the high threshold to 60 instead of 70
comment|// node2 now should not have new shards allocated to it, and shards cannot remain
name|diskSettings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"50b"
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"40b"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|deciders
operator|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|strategy
operator|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shards remain started
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shard hasn't been moved off of node2 yet because there's nowhere for it to go
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node4"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shards remain started
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// One shard is relocating off of node1
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|RELOCATING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> apply INITIALIZING shards"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// primary shard already has been relocated away
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nodeWithPrimary
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// node with increased space still has its shard
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|nodeWithoutPrimary
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node4"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node5"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node5"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shards remain started on node3 and node4
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// One shard is relocating off of node2 now
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|RELOCATING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Initializing on node5
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> apply INITIALIZING shards"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> final cluster state:"
argument_list|)
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Node1 still has no shards because it has no space for them
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node5 is available now, so the shard is moved off of node2
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node4"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node5"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDiskThresholdWithShardSizes
specifier|public
name|void
name|testDiskThresholdWithShardSizes
parameter_list|()
block|{
name|Settings
name|diskSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.7
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"71%"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usagesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node1"
argument_list|,
literal|"n1"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|31
argument_list|)
argument_list|)
expr_stmt|;
comment|// 69% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// 99% used
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|usagesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][p]"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
comment|// 10 bytes
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
init|=
name|shardSizesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
argument_list|)
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterInfoService
name|cis
init|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
comment|// noop
block|}
block|}
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node1"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
comment|// node2 is added because DiskThresholdDecider automatically ignore single-node clusters
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards (primaries)"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Shard can't be allocated to node1 (or node2) because it would cause too much usage
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// No shards are started, no nodes have enough disk for allocation
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownDiskUsage
specifier|public
name|void
name|testUnknownDiskUsage
parameter_list|()
block|{
name|Settings
name|diskSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.7
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.85
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usagesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"node2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// 50% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node3"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node3"
argument_list|,
literal|"node3"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 100% used
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|usagesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][p]"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
comment|// 10 bytes
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][r]"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
comment|// 10 bytes
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
init|=
name|shardSizesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
argument_list|)
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterInfoService
name|cis
init|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
comment|// noop
block|}
block|}
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node1"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
comment|// node3 is added because DiskThresholdDecider automatically ignore single-node clusters
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Shard can be allocated to node1, even though it only has 25% free,
comment|// because it's a primary that's never been allocated before
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards (primaries)"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// A single shard is started on node1, even though it normally would not
comment|// be allowed, because it's a primary that hasn't been allocated, and node1
comment|// is still below the high watermark (unlike node3)
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAverageUsage
specifier|public
name|void
name|testAverageUsage
parameter_list|()
block|{
name|RoutingNode
name|rn
init|=
operator|new
name|RoutingNode
argument_list|(
literal|"node1"
argument_list|,
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
decl_stmt|;
name|DiskThresholdDecider
name|decider
init|=
operator|new
name|DiskThresholdDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usages
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// 50% used
name|usages
operator|.
name|put
argument_list|(
literal|"node3"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node3"
argument_list|,
literal|"n3"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 100% used
name|DiskUsage
name|node1Usage
init|=
name|decider
operator|.
name|averageUsage
argument_list|(
name|rn
argument_list|,
name|usages
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|node1Usage
operator|.
name|getTotalBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node1Usage
operator|.
name|getFreeBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|25L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFreeDiskPercentageAfterShardAssigned
specifier|public
name|void
name|testFreeDiskPercentageAfterShardAssigned
parameter_list|()
block|{
name|RoutingNode
name|rn
init|=
operator|new
name|RoutingNode
argument_list|(
literal|"node1"
argument_list|,
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
decl_stmt|;
name|DiskThresholdDecider
name|decider
init|=
operator|new
name|DiskThresholdDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|usages
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// 50% used
name|usages
operator|.
name|put
argument_list|(
literal|"node3"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node3"
argument_list|,
literal|"n3"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// 100% used
name|Double
name|after
init|=
name|decider
operator|.
name|freeDiskPercentageAfterShardAssigned
argument_list|(
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
argument_list|,
literal|11L
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|after
argument_list|,
name|equalTo
argument_list|(
literal|19.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testShardRelocationsTakenIntoAccount
specifier|public
name|void
name|testShardRelocationsTakenIntoAccount
parameter_list|()
block|{
name|Settings
name|diskSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_INCLUDE_RELOCATIONS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.7
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0.8
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usagesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node1"
argument_list|,
literal|"n1"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
comment|// 60% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
comment|// 60% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node3"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node3"
argument_list|,
literal|"n3"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
comment|// 60% used
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|usagesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][p]"
argument_list|,
literal|14L
argument_list|)
expr_stmt|;
comment|// 14 bytes
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][r]"
argument_list|,
literal|14L
argument_list|)
expr_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test2][0][p]"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// 1 bytes
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test2][0][r]"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
init|=
name|shardSizesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
argument_list|)
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterInfoService
name|cis
init|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
comment|// noop
block|}
block|}
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding two nodes"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// shards should be initializing
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start the shards"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
comment|// Assert that we're able to start the primary and replicas
name|assertThat
argument_list|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node3"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|AllocationCommand
name|relocate1
init|=
operator|new
name|MoveAllocationCommand
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"node2"
argument_list|,
literal|"node3"
argument_list|)
decl_stmt|;
name|AllocationCommands
name|cmds
init|=
operator|new
name|AllocationCommands
argument_list|(
name|relocate1
argument_list|)
decl_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
name|cmds
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logShardStates
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|AllocationCommand
name|relocate2
init|=
operator|new
name|MoveAllocationCommand
argument_list|(
literal|"test2"
argument_list|,
literal|0
argument_list|,
literal|"node2"
argument_list|,
literal|"node3"
argument_list|)
decl_stmt|;
name|cmds
operator|=
operator|new
name|AllocationCommands
argument_list|(
name|relocate2
argument_list|)
expr_stmt|;
try|try
block|{
comment|// The shard for the "test" index is already being relocated to
comment|// node3, which will put it over the low watermark when it
comment|// completes, with shard relocations taken into account this should
comment|// throw an exception about not being able to complete
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
name|cmds
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to reroute the shard"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"can't allocated because there isn't enough room: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"the node is above the low watermark and has more than allowed [70.0%] used disk, free: [26.0%]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCanRemainWithShardRelocatingAway
specifier|public
name|void
name|testCanRemainWithShardRelocatingAway
parameter_list|()
block|{
name|Settings
name|diskSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_INCLUDE_RELOCATIONS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"60%"
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"70%"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// We have an index with 2 primary shards each taking 40 bytes. Each node has 100 bytes available
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usagesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node1"
argument_list|,
literal|"n1"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
comment|// 80% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0% used
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|usagesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][0][p]"
argument_list|,
literal|40L
argument_list|)
expr_stmt|;
name|shardSizesBuilder
operator|.
name|put
argument_list|(
literal|"[test][1][p]"
argument_list|,
literal|40L
argument_list|)
expr_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
init|=
name|shardSizesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
argument_list|)
decl_stmt|;
name|DiskThresholdDecider
name|diskThresholdDecider
init|=
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|2
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|discoveryNode1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|MASTER_DATA_ROLES
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|discoveryNode2
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|MASTER_DATA_ROLES
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|discoveryNode1
argument_list|)
operator|.
name|put
argument_list|(
name|discoveryNode2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|baseClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Two shards consuming each 80% of disk space while 70% is allowed, so shard 0 isn't allowed here
name|ShardRouting
name|firstRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|ShardRouting
name|secondRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|RoutingNode
name|firstRoutingNode
init|=
operator|new
name|RoutingNode
argument_list|(
literal|"node1"
argument_list|,
name|discoveryNode1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|firstRouting
argument_list|,
name|secondRouting
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|builder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|firstRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|firstRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|firstRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|secondRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|secondRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|baseClusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|routingAllocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
literal|null
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|clusterState
argument_list|)
argument_list|,
name|discoveryNodes
argument_list|,
name|clusterInfo
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|Decision
name|decision
init|=
name|diskThresholdDecider
operator|.
name|canRemain
argument_list|(
name|firstRouting
argument_list|,
name|firstRoutingNode
argument_list|,
name|routingAllocation
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|decision
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two shards consuming each 80% of disk space while 70% is allowed, but one is relocating, so shard 0 can stay
name|firstRouting
operator|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"node1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|secondRouting
operator|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|"node1"
argument_list|,
literal|"node2"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
expr_stmt|;
name|firstRoutingNode
operator|=
operator|new
name|RoutingNode
argument_list|(
literal|"node1"
argument_list|,
name|discoveryNode1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|firstRouting
argument_list|,
name|secondRouting
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|firstRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|firstRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|firstRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|secondRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|secondRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|baseClusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingAllocation
operator|=
operator|new
name|RoutingAllocation
argument_list|(
literal|null
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|clusterState
argument_list|)
argument_list|,
name|discoveryNodes
argument_list|,
name|clusterInfo
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|decision
operator|=
name|diskThresholdDecider
operator|.
name|canRemain
argument_list|(
name|firstRouting
argument_list|,
name|firstRoutingNode
argument_list|,
name|routingAllocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|decision
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creating AllocationService instance and the services it depends on...
name|ClusterInfoService
name|cis
init|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
comment|// noop
block|}
block|}
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|diskThresholdDecider
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
decl_stmt|;
comment|// Ensure that the reroute call doesn't alter the routing table, since the first primary is relocating away
comment|// and therefor we will have sufficient disk space on node1.
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|changed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RELOCATING
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testForSingleDataNode
specifier|public
name|void
name|testForSingleDataNode
parameter_list|()
block|{
name|Settings
name|diskSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_INCLUDE_RELOCATIONS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"60%"
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"70%"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usagesBuilder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node1"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node1"
argument_list|,
literal|"n1"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node2"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node2"
argument_list|,
literal|"n2"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
comment|// 80% used
name|usagesBuilder
operator|.
name|put
argument_list|(
literal|"node3"
argument_list|,
operator|new
name|DiskUsage
argument_list|(
literal|"node3"
argument_list|,
literal|"n3"
argument_list|,
literal|"/dev/null"
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0% used
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|usages
init|=
name|usagesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// We have an index with 1 primary shards each taking 40 bytes. Each node has 100 bytes available
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|shardSizes
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|shardSizes
operator|.
name|put
argument_list|(
literal|"[test][0][p]"
argument_list|,
literal|40L
argument_list|)
expr_stmt|;
name|shardSizes
operator|.
name|put
argument_list|(
literal|"[test][1][p]"
argument_list|,
literal|40L
argument_list|)
expr_stmt|;
specifier|final
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|DevNullClusterInfo
argument_list|(
name|usages
argument_list|,
name|usages
argument_list|,
name|shardSizes
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|DiskThresholdDecider
name|diskThresholdDecider
init|=
operator|new
name|DiskThresholdDecider
argument_list|(
name|diskSettings
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|2
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding one master node, one data node"
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|discoveryNode1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|""
argument_list|,
literal|"node1"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|singleton
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|discoveryNode2
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|""
argument_list|,
literal|"node2"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|singleton
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|discoveryNode1
argument_list|)
operator|.
name|put
argument_list|(
name|discoveryNode2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|baseClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Two shards consumes 80% of disk space in data node, but we have only one data node, shards should remain.
name|ShardRouting
name|firstRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"node2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|ShardRouting
name|secondRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|"node2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
decl_stmt|;
name|RoutingNode
name|firstRoutingNode
init|=
operator|new
name|RoutingNode
argument_list|(
literal|"node2"
argument_list|,
name|discoveryNode2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|firstRouting
argument_list|,
name|secondRouting
argument_list|)
argument_list|)
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|builder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|firstRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|firstRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|firstRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|secondRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|secondRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|baseClusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingAllocation
name|routingAllocation
init|=
operator|new
name|RoutingAllocation
argument_list|(
literal|null
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|clusterState
argument_list|)
argument_list|,
name|discoveryNodes
argument_list|,
name|clusterInfo
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|Decision
name|decision
init|=
name|diskThresholdDecider
operator|.
name|canRemain
argument_list|(
name|firstRouting
argument_list|,
name|firstRoutingNode
argument_list|,
name|routingAllocation
argument_list|)
decl_stmt|;
comment|// Two shards should start happily
name|assertThat
argument_list|(
name|decision
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterInfoService
name|cis
init|=
operator|new
name|ClusterInfoService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calling fake getClusterInfo"
argument_list|)
expr_stmt|;
return|return
name|clusterInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{             }
block|}
decl_stmt|;
name|AllocationDeciders
name|deciders
init|=
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SameShardAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|diskThresholdDecider
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.node_concurrent_recoveries"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"always"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.cluster_concurrent_rebalance"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|deciders
argument_list|,
name|NoopGatewayAllocator
operator|.
name|INSTANCE
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|cis
argument_list|)
decl_stmt|;
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add another datanode, it should relocate.
name|logger
operator|.
name|info
argument_list|(
literal|"--> adding node3"
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|discoveryNode3
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|""
argument_list|,
literal|"node3"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|singleton
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|ClusterState
name|updateClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|discoveryNode3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|firstRouting
operator|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"node2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|secondRouting
operator|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|"node2"
argument_list|,
literal|"node3"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|)
expr_stmt|;
name|firstRoutingNode
operator|=
operator|new
name|RoutingNode
argument_list|(
literal|"node2"
argument_list|,
name|discoveryNode2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|firstRouting
argument_list|,
name|secondRouting
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|firstRouting
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|firstRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|firstRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|secondRouting
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|addShard
argument_list|(
name|secondRouting
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|updateClusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingAllocation
operator|=
operator|new
name|RoutingAllocation
argument_list|(
literal|null
argument_list|,
operator|new
name|RoutingNodes
argument_list|(
name|clusterState
argument_list|)
argument_list|,
name|discoveryNodes
argument_list|,
name|clusterInfo
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|decision
operator|=
name|diskThresholdDecider
operator|.
name|canRemain
argument_list|(
name|firstRouting
argument_list|,
name|firstRoutingNode
argument_list|,
name|routingAllocation
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|decision
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Decision
operator|.
name|Type
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RELOCATING
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getShards
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|primaryShard
argument_list|()
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|logShardStates
specifier|public
name|void
name|logShardStates
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|RoutingNodes
name|rn
init|=
name|state
operator|.
name|getRoutingNodes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> counts: total: {}, unassigned: {}, initializing: {}, relocating: {}, started: {}"
argument_list|,
name|rn
operator|.
name|shards
argument_list|(
name|shard
lambda|->
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|UNASSIGNED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|RELOCATING
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> unassigned: {}, initializing: {}, relocating: {}, started: {}"
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|UNASSIGNED
argument_list|)
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|rn
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

