begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|SameShardAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ShardRoutingTests
specifier|public
class|class
name|ShardRoutingTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|testFrozenAfterRead
specifier|public
name|void
name|testFrozenAfterRead
parameter_list|()
throws|throws
name|IOException
block|{
name|ShardRouting
name|routing
init|=
operator|new
name|ShardRouting
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|"node_1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|routing
operator|.
name|moveToPrimary
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|routing
operator|.
name|primary
argument_list|)
expr_stmt|;
name|routing
operator|.
name|moveFromPrimary
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|routing
operator|.
name|primary
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|routing
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ShardRouting
name|newRouting
init|=
name|ShardRouting
operator|.
name|readShardRoutingEntry
argument_list|(
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|newRouting
operator|.
name|moveToPrimary
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testFrozenOnRoutingTable
specifier|public
name|void
name|testFrozenOnRoutingTable
parameter_list|()
block|{
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|2
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|routing
range|:
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|()
control|)
block|{
name|long
name|version
init|=
name|routing
operator|.
name|version
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|routing
operator|.
name|isFrozen
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|routing
operator|.
name|moveToPrimary
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|routing
operator|.
name|moveToStarted
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|routing
operator|.
name|moveFromPrimary
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|routing
operator|.
name|assignToNode
argument_list|(
literal|"boom"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|routing
operator|.
name|cancelRelocation
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|routing
operator|.
name|moveToUnassigned
argument_list|(
operator|new
name|UnassignedInfo
argument_list|(
name|UnassignedInfo
operator|.
name|Reason
operator|.
name|REPLICA_ADDED
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|routing
operator|.
name|relocate
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|routing
operator|.
name|reinitializeShard
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be frozen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
name|version
argument_list|,
name|routing
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

