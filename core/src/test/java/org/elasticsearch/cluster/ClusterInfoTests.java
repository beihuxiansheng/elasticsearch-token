begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|ClusterInfoTests
specifier|public
class|class
name|ClusterInfoTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterInfo
name|clusterInfo
init|=
operator|new
name|ClusterInfo
argument_list|(
name|randomDiskUsage
argument_list|()
argument_list|,
name|randomDiskUsage
argument_list|()
argument_list|,
name|randomShardSizes
argument_list|()
argument_list|,
name|randomRoutingToDataPath
argument_list|()
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|clusterInfo
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|ClusterInfo
name|result
init|=
operator|new
name|ClusterInfo
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|clusterInfo
operator|.
name|getNodeLeastAvailableDiskUsages
argument_list|()
argument_list|,
name|result
operator|.
name|getNodeLeastAvailableDiskUsages
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterInfo
operator|.
name|getNodeMostAvailableDiskUsages
argument_list|()
argument_list|,
name|result
operator|.
name|getNodeMostAvailableDiskUsages
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterInfo
operator|.
name|shardSizes
argument_list|,
name|result
operator|.
name|shardSizes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterInfo
operator|.
name|routingToDataPath
argument_list|,
name|result
operator|.
name|routingToDataPath
argument_list|)
expr_stmt|;
block|}
DECL|method|randomDiskUsage
specifier|private
specifier|static
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|randomDiskUsage
parameter_list|()
block|{
name|int
name|numEntries
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|DiskUsage
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|numEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|randomAlphaOfLength
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|DiskUsage
name|diskUsage
init|=
operator|new
name|DiskUsage
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|4
argument_list|)
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|4
argument_list|)
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|4
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|diskUsage
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|randomShardSizes
specifier|private
specifier|static
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|randomShardSizes
parameter_list|()
block|{
name|int
name|numEntries
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|numEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|randomAlphaOfLength
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|long
name|shardSize
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|shardSize
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|randomRoutingToDataPath
specifier|private
specifier|static
name|ImmutableOpenMap
argument_list|<
name|ShardRouting
argument_list|,
name|String
argument_list|>
name|randomRoutingToDataPath
parameter_list|()
block|{
name|int
name|numEntries
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardRouting
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|numEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|32
argument_list|)
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|32
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|ShardRouting
name|shardRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|UNASSIGNED
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|shardRouting
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

