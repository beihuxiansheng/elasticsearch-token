begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|DiscoveryNodeServiceTests
specifier|public
class|class
name|DiscoveryNodeServiceTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBuildLocalNode
specifier|public
name|void
name|testBuildLocalNode
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedAttributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numCustomSettings
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCustomSettings
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"node.attr.attr"
operator|+
name|i
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
expr_stmt|;
name|expectedAttributes
operator|.
name|put
argument_list|(
literal|"attr"
operator|+
name|i
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|DiscoveryNode
operator|.
name|Role
argument_list|>
name|selectedRoles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DiscoveryNode
operator|.
name|Role
name|role
range|:
name|DiscoveryNode
operator|.
name|Role
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|//test default true for every role
name|selectedRoles
operator|.
name|add
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|isRoleEnabled
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"node."
operator|+
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|isRoleEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRoleEnabled
condition|)
block|{
name|selectedRoles
operator|.
name|add
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DiscoveryNodeService
name|discoveryNodeService
init|=
operator|new
name|DiscoveryNodeService
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|discoveryNode
init|=
name|discoveryNodeService
operator|.
name|buildLocalNode
argument_list|(
name|LocalTransportAddress
operator|.
name|buildUnique
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|discoveryNode
operator|.
name|getRoles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|selectedRoles
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|discoveryNode
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedAttributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildAttributesWithCustomAttributeServiceProvider
specifier|public
name|void
name|testBuildAttributesWithCustomAttributeServiceProvider
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedAttributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numCustomSettings
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCustomSettings
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"node.attr.attr"
operator|+
name|i
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
expr_stmt|;
name|expectedAttributes
operator|.
name|put
argument_list|(
literal|"attr"
operator|+
name|i
argument_list|,
literal|"value"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|DiscoveryNodeService
name|discoveryNodeService
init|=
operator|new
name|DiscoveryNodeService
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numCustomAttributes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customAttributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCustomAttributes
condition|;
name|i
operator|++
control|)
block|{
name|customAttributes
operator|.
name|put
argument_list|(
literal|"custom-"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expectedAttributes
operator|.
name|putAll
argument_list|(
name|customAttributes
argument_list|)
expr_stmt|;
name|discoveryNodeService
operator|.
name|addCustomAttributeProvider
argument_list|(
parameter_list|()
lambda|->
name|customAttributes
argument_list|)
expr_stmt|;
name|DiscoveryNode
name|discoveryNode
init|=
name|discoveryNodeService
operator|.
name|buildLocalNode
argument_list|(
name|LocalTransportAddress
operator|.
name|buildUnique
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|discoveryNode
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedAttributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

