begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|ProcessClusterEventTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PrioritizedEsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_class
DECL|class|TaskBatcherTests
specifier|public
class|class
name|TaskBatcherTests
extends|extends
name|TaskExecutorTests
block|{
DECL|field|taskBatcher
specifier|protected
name|TestTaskBatcher
name|taskBatcher
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpBatchingTaskExecutor
specifier|public
name|void
name|setUpBatchingTaskExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|taskBatcher
operator|=
operator|new
name|TestTaskBatcher
argument_list|(
name|logger
argument_list|,
name|threadExecutor
argument_list|)
expr_stmt|;
block|}
DECL|class|TestTaskBatcher
class|class
name|TestTaskBatcher
extends|extends
name|TaskBatcher
block|{
DECL|method|TestTaskBatcher
name|TestTaskBatcher
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|PrioritizedEsThreadPoolExecutor
name|threadExecutor
parameter_list|)
block|{
name|super
argument_list|(
name|logger
argument_list|,
name|threadExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|protected
name|void
name|run
parameter_list|(
name|Object
name|batchingKey
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|BatchedTask
argument_list|>
name|tasks
parameter_list|,
name|String
name|tasksSummary
parameter_list|)
block|{
name|List
argument_list|<
name|UpdateTask
argument_list|>
name|updateTasks
init|=
operator|(
name|List
operator|)
name|tasks
decl_stmt|;
operator|(
operator|(
name|TestExecutor
operator|)
name|batchingKey
operator|)
operator|.
name|execute
argument_list|(
name|updateTasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|t
lambda|->
name|t
operator|.
name|task
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateTasks
operator|.
name|forEach
argument_list|(
name|updateTask
lambda|->
name|updateTask
operator|.
name|listener
operator|.
name|processed
argument_list|(
name|updateTask
operator|.
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|protected
name|void
name|onTimeout
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|BatchedTask
argument_list|>
name|tasks
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|tasks
operator|.
name|forEach
argument_list|(
name|task
lambda|->
operator|(
operator|(
name|UpdateTask
operator|)
name|task
operator|)
operator|.
name|listener
operator|.
name|onFailure
argument_list|(
name|task
operator|.
name|source
argument_list|,
operator|new
name|ProcessClusterEventTimeoutException
argument_list|(
name|timeout
argument_list|,
name|task
operator|.
name|source
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|UpdateTask
class|class
name|UpdateTask
extends|extends
name|BatchedTask
block|{
DECL|field|listener
specifier|final
name|TestListener
name|listener
decl_stmt|;
DECL|method|UpdateTask
name|UpdateTask
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|source
parameter_list|,
name|Object
name|task
parameter_list|,
name|TestListener
name|listener
parameter_list|,
name|TestExecutor
argument_list|<
name|?
argument_list|>
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|,
name|source
argument_list|,
name|executor
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|describeTasks
specifier|public
name|String
name|describeTasks
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|BatchedTask
argument_list|>
name|tasks
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestExecutor
argument_list|<
name|Object
argument_list|>
operator|)
name|batchingKey
operator|)
operator|.
name|describeTasks
argument_list|(
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BatchedTask
operator|::
name|getTask
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|submitTask
specifier|protected
name|void
name|submitTask
parameter_list|(
name|String
name|source
parameter_list|,
name|TestTask
name|testTask
parameter_list|)
block|{
name|submitTask
argument_list|(
name|source
argument_list|,
name|testTask
argument_list|,
name|testTask
argument_list|,
name|testTask
argument_list|,
name|testTask
argument_list|)
expr_stmt|;
block|}
DECL|method|submitTask
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|submitTask
parameter_list|(
name|String
name|source
parameter_list|,
name|T
name|task
parameter_list|,
name|ClusterStateTaskConfig
name|config
parameter_list|,
name|TestExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|,
name|TestListener
name|listener
parameter_list|)
block|{
name|submitTasks
argument_list|(
name|source
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|task
argument_list|,
name|listener
argument_list|)
argument_list|,
name|config
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|submitTasks
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|submitTasks
parameter_list|(
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|TestListener
argument_list|>
name|tasks
parameter_list|,
specifier|final
name|ClusterStateTaskConfig
name|config
parameter_list|,
specifier|final
name|TestExecutor
argument_list|<
name|T
argument_list|>
name|executor
parameter_list|)
block|{
name|List
argument_list|<
name|TestTaskBatcher
operator|.
name|UpdateTask
argument_list|>
name|safeTasks
init|=
name|tasks
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|taskBatcher
operator|.
block|new UpdateTask(config.priority(
argument_list|)
decl_stmt|,
name|source
decl_stmt|,
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|,
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|,
name|executor
decl_stmt|)
block|)
function|.collect
parameter_list|(
function|Collectors.toList
parameter_list|()
block|)
class|;
end_class

begin_expr_stmt
name|taskBatcher
operator|.
name|submitTasks
argument_list|(
name|safeTasks
argument_list|,
name|config
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Override
DECL|method|testTimedOutTaskCleanedUp
specifier|public
name|void
name|testTimedOutTaskCleanedUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|testTimedOutTaskCleanedUp
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|taskBatcher
operator|.
name|tasksPerBatchingKey
init|)
block|{
name|assertTrue
argument_list|(
literal|"expected empty map but was "
operator|+
name|taskBatcher
operator|.
name|tasksPerBatchingKey
argument_list|,
name|taskBatcher
operator|.
name|tasksPerBatchingKey
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testOneExecutorDoesntStarveAnother
specifier|public
name|void
name|testOneExecutorDoesntStarveAnother
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|executionOrder
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|allowProcessing
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|startedProcessing
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
class|class
name|TaskExecutor
implements|implements
name|TestExecutor
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tasks
parameter_list|)
block|{
name|executionOrder
operator|.
name|addAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
comment|// do this first, so startedProcessing can be used as a notification that this is done.
name|startedProcessing
operator|.
name|release
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|allowProcessing
operator|.
name|acquire
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|TaskExecutor
name|executorA
init|=
operator|new
name|TaskExecutor
argument_list|()
decl_stmt|;
name|TaskExecutor
name|executorB
init|=
operator|new
name|TaskExecutor
argument_list|()
decl_stmt|;
specifier|final
name|ClusterStateTaskConfig
name|config
init|=
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|NORMAL
argument_list|)
decl_stmt|;
specifier|final
name|TestListener
name|noopListener
init|=
parameter_list|(
name|source
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
decl_stmt|;
comment|// this blocks the cluster state queue, so we can set it up right
name|submitTask
argument_list|(
literal|"0"
argument_list|,
literal|"A0"
argument_list|,
name|config
argument_list|,
name|executorA
argument_list|,
name|noopListener
argument_list|)
expr_stmt|;
comment|// wait to be processed
name|startedProcessing
operator|.
name|acquire
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|executionOrder
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// these will be the first batch
name|submitTask
argument_list|(
literal|"1"
argument_list|,
literal|"A1"
argument_list|,
name|config
argument_list|,
name|executorA
argument_list|,
name|noopListener
argument_list|)
expr_stmt|;
name|submitTask
argument_list|(
literal|"2"
argument_list|,
literal|"A2"
argument_list|,
name|config
argument_list|,
name|executorA
argument_list|,
name|noopListener
argument_list|)
expr_stmt|;
comment|// release the first 0 task, but not the second
name|allowProcessing
operator|.
name|release
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|startedProcessing
operator|.
name|acquire
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|executionOrder
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A0"
argument_list|,
literal|"A1"
argument_list|,
literal|"A2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// setup the queue with pending tasks for another executor same priority
name|submitTask
argument_list|(
literal|"3"
argument_list|,
literal|"B3"
argument_list|,
name|config
argument_list|,
name|executorB
argument_list|,
name|noopListener
argument_list|)
expr_stmt|;
name|submitTask
argument_list|(
literal|"4"
argument_list|,
literal|"B4"
argument_list|,
name|config
argument_list|,
name|executorB
argument_list|,
name|noopListener
argument_list|)
expr_stmt|;
name|submitTask
argument_list|(
literal|"5"
argument_list|,
literal|"A5"
argument_list|,
name|config
argument_list|,
name|executorA
argument_list|,
name|noopListener
argument_list|)
expr_stmt|;
name|submitTask
argument_list|(
literal|"6"
argument_list|,
literal|"A6"
argument_list|,
name|config
argument_list|,
name|executorA
argument_list|,
name|noopListener
argument_list|)
expr_stmt|;
comment|// now release the processing
name|allowProcessing
operator|.
name|release
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// wait for last task to be processed
name|startedProcessing
operator|.
name|acquire
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|executionOrder
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A0"
argument_list|,
literal|"A1"
argument_list|,
literal|"A2"
argument_list|,
literal|"B3"
argument_list|,
literal|"B4"
argument_list|,
literal|"A5"
argument_list|,
literal|"A6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|TaskExecutor
specifier|static
class|class
name|TaskExecutor
implements|implements
name|TestExecutor
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|tasks
name|List
argument_list|<
name|Integer
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|tasks
parameter_list|)
block|{
name|this
operator|.
name|tasks
operator|.
name|addAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|// test that for a single thread, tasks are executed in the order
end_comment

begin_comment
comment|// that they are submitted
end_comment

begin_function
DECL|method|testTasksAreExecutedInOrder
specifier|public
name|void
name|testTasksAreExecutedInOrder
parameter_list|()
throws|throws
name|BrokenBarrierException
throws|,
name|InterruptedException
block|{
name|int
name|numberOfThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|TaskExecutor
index|[]
name|executors
init|=
operator|new
name|TaskExecutor
index|[
name|numberOfThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|executors
index|[
name|i
index|]
operator|=
operator|new
name|TaskExecutor
argument_list|()
expr_stmt|;
block|}
name|int
name|tasksSubmittedPerThread
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|CopyOnWriteArrayList
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|updateLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfThreads
operator|*
name|tasksSubmittedPerThread
argument_list|)
decl_stmt|;
specifier|final
name|TestListener
name|listener
init|=
operator|new
name|TestListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"unexpected failure: [{}]"
argument_list|,
name|source
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failures
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|source
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|updateLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processed
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|updateLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|1
operator|+
name|numberOfThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tasksSubmittedPerThread
condition|;
name|j
operator|++
control|)
block|{
name|submitTask
argument_list|(
literal|"["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|j
operator|+
literal|"]"
argument_list|,
name|j
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|randomFrom
argument_list|(
name|Priority
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|executors
index|[
name|index
index|]
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all threads to be ready
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait for all threads to finish
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|updateLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|failures
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|tasksSubmittedPerThread
argument_list|,
name|executors
index|[
name|i
index|]
operator|.
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tasksSubmittedPerThread
condition|;
name|j
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|executors
index|[
name|i
index|]
operator|.
name|tasks
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cluster state update task executed out of order"
argument_list|,
name|j
argument_list|,
operator|(
name|int
operator|)
name|executors
index|[
name|i
index|]
operator|.
name|tasks
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testSingleBatchSubmission
specifier|public
name|void
name|testSingleBatchSubmission
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|TestListener
argument_list|>
name|tasks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numOfTasks
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numOfTasks
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfTasks
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
literal|null
operator|!=
name|tasks
operator|.
name|put
argument_list|(
name|randomInt
argument_list|(
literal|1024
argument_list|)
argument_list|,
operator|new
name|TestListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|processed
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|)
block|)
function|;
end_function

begin_expr_stmt
unit|}          TestExecutor
operator|<
name|Integer
operator|>
name|executor
operator|=
name|taskList
lambda|->
block|{
name|assertThat
argument_list|(
name|taskList
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|taskList
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|tasks
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|submitTasks
argument_list|(
literal|"test"
argument_list|,
name|tasks
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
argument_list|,
name|executor
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testDuplicateSubmission
name|void
name|testDuplicateSubmission
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
init|(
name|BlockingTask
name|blockingTask
init|=
operator|new
name|BlockingTask
argument_list|(
name|Priority
operator|.
name|IMMEDIATE
argument_list|)
init|)
block|{
name|submitTask
argument_list|(
literal|"blocking"
argument_list|,
name|blockingTask
argument_list|)
expr_stmt|;
name|TestExecutor
argument_list|<
name|SimpleTask
argument_list|>
name|executor
init|=
name|tasks
lambda|->
block|{}
decl_stmt|;
name|SimpleTask
name|task
init|=
operator|new
name|SimpleTask
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TestListener
name|listener
init|=
operator|new
name|TestListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|processed
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|submitTask
argument_list|(
literal|"first time"
argument_list|,
name|task
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|NORMAL
argument_list|)
argument_list|,
name|executor
argument_list|,
name|listener
argument_list|)
expr_stmt|;
specifier|final
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|submitTask
argument_list|(
literal|"second time"
argument_list|,
name|task
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|NORMAL
argument_list|)
argument_list|,
name|executor
argument_list|,
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"task [1] with source [second time] is already queued"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|submitTask
argument_list|(
literal|"third time a charm"
argument_list|,
operator|new
name|SimpleTask
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|NORMAL
argument_list|)
argument_list|,
name|executor
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|latch
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|SimpleTask
specifier|private
specifier|static
class|class
name|SimpleTask
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|method|SimpleTask
specifier|private
name|SimpleTask
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

