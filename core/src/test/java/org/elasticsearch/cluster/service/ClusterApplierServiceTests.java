begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|LocalNodeMasterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|NodeConnectionsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|MockLogAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ClusterServiceUtils
operator|.
name|setState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|ClusterApplierServiceTests
specifier|public
class|class
name|ClusterApplierServiceTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|protected
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterApplierService
specifier|protected
name|TimedClusterApplierService
name|clusterApplierService
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createThreadPool
specifier|public
specifier|static
name|void
name|createThreadPool
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|ClusterApplierServiceTests
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|stopThreadPool
specifier|public
specifier|static
name|void
name|stopThreadPool
parameter_list|()
block|{
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clusterApplierService
operator|=
name|createTimedClusterService
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|clusterApplierService
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|createTimedClusterService
name|TimedClusterApplierService
name|createTimedClusterService
parameter_list|(
name|boolean
name|makeMaster
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|TimedClusterApplierService
name|timedClusterApplierService
init|=
operator|new
name|TimedClusterApplierService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"ClusterApplierServiceTests"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|timedClusterApplierService
operator|.
name|setNodeConnectionsService
argument_list|(
operator|new
name|NodeConnectionsService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|connectToNodes
parameter_list|(
name|DiscoveryNodes
name|discoveryNodes
parameter_list|)
block|{
comment|// skip
block|}
annotation|@
name|Override
specifier|public
name|void
name|disconnectFromNodesExcept
parameter_list|(
name|DiscoveryNodes
name|nodesToKeep
parameter_list|)
block|{
comment|// skip
block|}
block|}
argument_list|)
expr_stmt|;
name|timedClusterApplierService
operator|.
name|setInitialState
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"ClusterApplierServiceTests"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|makeMaster
condition|?
name|localNode
operator|.
name|getId
argument_list|()
else|:
literal|null
argument_list|)
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|timedClusterApplierService
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|timedClusterApplierService
return|;
block|}
annotation|@
name|TestLogging
argument_list|(
literal|"org.elasticsearch.cluster.service:TRACE"
argument_list|)
comment|// To ensure that we log cluster state events on TRACE level
DECL|method|testClusterStateUpdateLogging
specifier|public
name|void
name|testClusterStateUpdateLogging
parameter_list|()
throws|throws
name|Exception
block|{
name|MockLogAppender
name|mockAppender
init|=
operator|new
name|MockLogAppender
argument_list|()
decl_stmt|;
name|mockAppender
operator|.
name|start
argument_list|()
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test1"
argument_list|,
name|clusterApplierService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|,
literal|"*processing [test1]: took [1s] no change in cluster state"
argument_list|)
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test2"
argument_list|,
name|clusterApplierService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|,
literal|"*failed to execute cluster state applier in [2s]*"
argument_list|)
argument_list|)
expr_stmt|;
name|Logger
name|clusterLogger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
literal|"org.elasticsearch.cluster.service"
argument_list|)
decl_stmt|;
name|Loggers
operator|.
name|addAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|clusterApplierService
operator|.
name|currentTimeOverride
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|clusterApplierService
operator|.
name|runOnApplierThread
argument_list|(
literal|"test1"
argument_list|,
name|currentState
lambda|->
name|clusterApplierService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
operator|.
name|nanos
argument_list|()
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
expr|@
name|Override
specifier|public
name|void
name|onFailure
argument_list|(
name|String
name|source
argument_list|,
name|Exception
name|e
argument_list|)
block|{
name|fail
argument_list|()
block|;                     }
block|}
block|)
function|;
name|clusterApplierService
operator|.
name|runOnApplierThread
argument_list|(
literal|"test2"
argument_list|,
name|currentState
lambda|->
block|{
name|clusterApplierService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|2
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Testing handling of exceptions in the cluster state task"
argument_list|)
throw|;
block|}
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Additional update task to make sure all previous logging made it to the loggerName
comment|// We don't check logging for this on since there is no guarantee that it will occur before our check
name|clusterApplierService
operator|.
name|runOnApplierThread
argument_list|(
literal|"test3"
argument_list|,
name|currentState
lambda|->
block|{}
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
parameter_list|()
constructor_decl|;
block|}
end_class

begin_finally
finally|finally
block|{
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
end_finally

begin_expr_stmt
name|mockAppender
operator|.
name|assertAllExpectationsMatched
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}      @
name|TestLogging
argument_list|(
literal|"org.elasticsearch.cluster.service:WARN"
argument_list|)
comment|// To ensure that we log cluster state events on WARN level
DECL|method|testLongClusterStateUpdateLogging
specifier|public
name|void
name|testLongClusterStateUpdateLogging
argument_list|()
throws|throws
name|Exception
block|{
name|MockLogAppender
name|mockAppender
operator|=
operator|new
name|MockLogAppender
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|mockAppender
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|UnseenEventExpectation
argument_list|(
literal|"test1 shouldn't see because setting is too low"
argument_list|,
name|clusterApplierService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
literal|"*cluster state applier task [test1] took [*] above the warn threshold of *"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test2"
argument_list|,
name|clusterApplierService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
literal|"*cluster state applier task [test2] took [32s] above the warn threshold of *"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test4"
argument_list|,
name|clusterApplierService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
literal|"*cluster state applier task [test3] took [34s] above the warn threshold of *"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Logger
name|clusterLogger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
literal|"org.elasticsearch.cluster.service"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Loggers
operator|.
name|addAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
end_expr_stmt

begin_try
try|try
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|processedFirstTask
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|clusterApplierService
operator|.
name|currentTimeOverride
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|clusterApplierService
operator|.
name|runOnApplierThread
argument_list|(
literal|"test1"
argument_list|,
name|currentState
lambda|->
name|clusterApplierService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
operator|.
name|nanos
argument_list|()
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|processedFirstTask
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
expr|@
name|Override
specifier|public
name|void
name|onFailure
argument_list|(
name|String
name|source
argument_list|,
name|Exception
name|e
argument_list|)
block|{
name|fail
argument_list|()
block|;                     }
block|}
end_try

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|processedFirstTask
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clusterApplierService
operator|.
name|runOnApplierThread
argument_list|(
literal|"test2"
argument_list|,
name|currentState
lambda|->
block|{
name|clusterApplierService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|32
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Testing handling of exceptions in the cluster state task"
argument_list|)
throw|;
block|}
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clusterApplierService
operator|.
name|runOnApplierThread
argument_list|(
literal|"test3"
argument_list|,
name|currentState
lambda|->
name|clusterApplierService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|34
argument_list|)
operator|.
name|nanos
argument_list|()
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
expr|@
name|Override
specifier|public
name|void
name|onFailure
argument_list|(
name|String
name|source
argument_list|,
name|Exception
name|e
argument_list|)
block|{
name|fail
argument_list|()
block|;                     }
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Additional update task to make sure all previous logging made it to the loggerName
end_comment

begin_comment
comment|// We don't check logging for this on since there is no guarantee that it will occur before our check
end_comment

begin_expr_stmt
name|clusterApplierService
operator|.
name|runOnApplierThread
argument_list|(
literal|"test4"
argument_list|,
name|currentState
lambda|->
block|{}
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_block
unit|} finally
block|{
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|mockAppender
operator|.
name|assertAllExpectationsMatched
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testLocalNodeMasterListenerCallbacks
name|void
name|testLocalNodeMasterListenerCallbacks
parameter_list|()
throws|throws
name|Exception
block|{
name|TimedClusterApplierService
name|timedClusterApplierService
init|=
name|createTimedClusterService
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|isMaster
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|timedClusterApplierService
operator|.
name|addLocalNodeMasterListener
argument_list|(
operator|new
name|LocalNodeMasterListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMaster
parameter_list|()
block|{
name|isMaster
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|offMaster
parameter_list|()
block|{
name|isMaster
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executorName
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
name|timedClusterApplierService
operator|.
name|state
argument_list|()
decl_stmt|;
name|DiscoveryNodes
name|nodes
init|=
name|state
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodes
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|nodes
operator|.
name|getLocalNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|timedClusterApplierService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isMaster
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|state
operator|.
name|nodes
argument_list|()
expr_stmt|;
name|nodesBuilder
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodes
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|timedClusterApplierService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isMaster
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|nodesBuilder
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodes
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|nodes
operator|.
name|getLocalNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setState
argument_list|(
name|timedClusterApplierService
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isMaster
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|timedClusterApplierService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testClusterStateApplierCantSampleClusterState
specifier|public
name|void
name|testClusterStateApplierCantSampleClusterState
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|applierCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|clusterApplierService
operator|.
name|addStateApplier
argument_list|(
name|event
lambda|->
block|{
try|try
block|{
name|applierCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clusterApplierService
operator|.
name|state
argument_list|()
expr_stmt|;
name|error
operator|.
name|set
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"successfully sampled state"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"should not be called by a cluster state applier"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|error
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|clusterApplierService
operator|.
name|onNewClusterState
argument_list|(
literal|"test"
argument_list|,
parameter_list|()
lambda|->
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterApplierService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
expr|@
name|Override
specifier|public
name|void
name|onFailure
argument_list|(
name|String
name|source
argument_list|,
name|Exception
name|e
argument_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
block|;                 }
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|applierCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testClusterStateApplierCanCreateAnObserver
name|void
name|testClusterStateApplierCanCreateAnObserver
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|applierCalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|clusterApplierService
operator|.
name|addStateApplier
argument_list|(
name|event
lambda|->
block|{
try|try
block|{
name|applierCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterStateObserver
name|observer
init|=
operator|new
name|ClusterStateObserver
argument_list|(
name|event
operator|.
name|state
argument_list|()
argument_list|,
name|clusterApplierService
argument_list|,
literal|null
argument_list|,
name|logger
argument_list|,
name|threadPool
operator|.
name|getThreadContext
argument_list|()
argument_list|)
decl_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{                      }
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{                      }
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{                      }
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|error
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|clusterApplierService
operator|.
name|onNewClusterState
argument_list|(
literal|"test"
argument_list|,
parameter_list|()
lambda|->
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterApplierService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
expr|@
name|Override
specifier|public
name|void
name|onFailure
argument_list|(
name|String
name|source
argument_list|,
name|Exception
name|e
argument_list|)
block|{
name|error
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
block|;                 }
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|applierCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_class
unit|}      static
DECL|class|TimedClusterApplierService
class|class
name|TimedClusterApplierService
extends|extends
name|ClusterApplierService
block|{
DECL|field|currentTimeOverride
specifier|public
specifier|volatile
name|Long
name|currentTimeOverride
init|=
literal|null
decl_stmt|;
DECL|method|TimedClusterApplierService
name|TimedClusterApplierService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterSettings
name|clusterSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|clusterSettings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|currentTimeInNanos
specifier|protected
name|long
name|currentTimeInNanos
parameter_list|()
block|{
if|if
condition|(
name|currentTimeOverride
operator|!=
literal|null
condition|)
block|{
return|return
name|currentTimeOverride
return|;
block|}
return|return
name|super
operator|.
name|currentTimeInNanos
argument_list|()
return|;
block|}
block|}
end_class

unit|}
end_unit

