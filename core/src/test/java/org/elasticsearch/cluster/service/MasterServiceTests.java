begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.service
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateTaskListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|LocalClusterUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BaseFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|MockLogAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasKey
import|;
end_import

begin_class
DECL|class|MasterServiceTests
specifier|public
class|class
name|MasterServiceTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|private
specifier|static
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|masterService
specifier|private
name|TimedMasterService
name|masterService
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createThreadPool
specifier|public
specifier|static
name|void
name|createThreadPool
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|MasterServiceTests
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|stopThreadPool
specifier|public
specifier|static
name|void
name|stopThreadPool
parameter_list|()
block|{
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|threadPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|masterService
operator|=
name|createTimedMasterService
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|masterService
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|createTimedMasterService
specifier|private
name|TimedMasterService
name|createTimedMasterService
parameter_list|(
name|boolean
name|makeMaster
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|DiscoveryNode
name|localNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|TimedMasterService
name|timedMasterService
init|=
operator|new
name|TimedMasterService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
name|MasterServiceTests
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|ClusterState
name|initialClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
name|MasterServiceTests
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|makeMaster
condition|?
name|localNode
operator|.
name|getId
argument_list|()
else|:
literal|null
argument_list|)
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|ClusterState
argument_list|>
name|clusterStateRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|initialClusterState
argument_list|)
decl_stmt|;
name|timedMasterService
operator|.
name|setClusterStatePublisher
argument_list|(
parameter_list|(
name|event
parameter_list|,
name|ackListener
parameter_list|)
lambda|->
name|clusterStateRef
operator|.
name|set
argument_list|(
name|event
operator|.
name|state
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timedMasterService
operator|.
name|setClusterStateSupplier
argument_list|(
name|clusterStateRef
operator|::
name|get
argument_list|)
expr_stmt|;
name|timedMasterService
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|timedMasterService
return|;
block|}
DECL|method|testMasterAwareExecution
specifier|public
name|void
name|testMasterAwareExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|TimedMasterService
name|nonMaster
init|=
name|createTimedMasterService
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|boolean
index|[]
name|taskFailed
init|=
block|{
literal|false
block|}
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch1
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nonMaster
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|latch1
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|taskFailed
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|latch1
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch1
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cluster state update task was executed on a non-master"
argument_list|,
name|taskFailed
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskFailed
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch2
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nonMaster
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test"
argument_list|,
operator|new
name|LocalClusterUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterTasksResult
argument_list|<
name|LocalClusterUpdateTask
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|taskFailed
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|latch2
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|unchanged
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|taskFailed
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|latch2
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch2
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"non-master cluster state update task was not executed"
argument_list|,
name|taskFailed
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|nonMaster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * test that a listener throwing an exception while handling a    * notification does not prevent publication notification to the    * executor    */
DECL|method|testClusterStateTaskListenerThrowingExceptionIsOkay
specifier|public
name|void
name|testClusterStateTaskListenerThrowingExceptionIsOkay
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|published
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"testClusterStateTaskListenerThrowingExceptionIsOkay"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|NORMAL
argument_list|)
argument_list|,
operator|new
name|ClusterStateTaskExecutor
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterTasksResult
argument_list|<
name|Object
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
name|ClusterState
name|newClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ClusterTasksResult
operator|.
name|builder
argument_list|()
operator|.
name|successes
argument_list|(
name|tasks
argument_list|)
operator|.
name|build
argument_list|(
name|newClusterState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStatePublished
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|)
block|{
name|published
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|source
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|published
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestLogging
argument_list|(
literal|"org.elasticsearch.cluster.service:TRACE"
argument_list|)
comment|// To ensure that we log cluster state events on TRACE level
DECL|method|testClusterStateUpdateLogging
specifier|public
name|void
name|testClusterStateUpdateLogging
parameter_list|()
throws|throws
name|Exception
block|{
name|MockLogAppender
name|mockAppender
init|=
operator|new
name|MockLogAppender
argument_list|()
decl_stmt|;
name|mockAppender
operator|.
name|start
argument_list|()
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test1"
argument_list|,
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|,
literal|"*processing [test1]: took [1s] no change in cluster state"
argument_list|)
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test2"
argument_list|,
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|,
literal|"*failed to execute cluster state update in [2s]*"
argument_list|)
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test3"
argument_list|,
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|,
literal|"*processing [test3]: took [3s] done publishing updated cluster state (version: *, uuid: *)"
argument_list|)
argument_list|)
expr_stmt|;
name|Logger
name|clusterLogger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Loggers
operator|.
name|addAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|masterService
operator|.
name|currentTimeOverride
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test1"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|masterService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test2"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|masterService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|2
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Testing handling of exceptions in the cluster state task"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test3"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|masterService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|3
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Additional update task to make sure all previous logging made it to the loggerName
comment|// We don't check logging for this on since there is no guarantee that it will occur before our check
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test4"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|mockAppender
operator|.
name|assertAllExpectationsMatched
argument_list|()
expr_stmt|;
block|}
DECL|method|testClusterStateBatchedUpdates
specifier|public
name|void
name|testClusterStateBatchedUpdates
parameter_list|()
throws|throws
name|BrokenBarrierException
throws|,
name|InterruptedException
block|{
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
class|class
name|Task
block|{
specifier|private
name|AtomicBoolean
name|state
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
name|Task
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
else|else
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Task
name|task
init|=
operator|(
name|Task
operator|)
name|o
decl_stmt|;
return|return
name|id
operator|==
name|task
operator|.
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
name|int
name|numberOfThreads
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|int
name|taskSubmissionsPerThread
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|int
name|numberOfExecutors
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|numberOfThreads
operator|/
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
name|numberOfExecutors
argument_list|)
decl_stmt|;
class|class
name|TaskExecutor
implements|implements
name|ClusterStateTaskExecutor
argument_list|<
name|Task
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Set
argument_list|<
name|Task
argument_list|>
argument_list|>
name|taskGroups
decl_stmt|;
specifier|private
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|batches
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|published
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|TaskExecutor
parameter_list|(
name|List
argument_list|<
name|Set
argument_list|<
name|Task
argument_list|>
argument_list|>
name|taskGroups
parameter_list|)
block|{
name|this
operator|.
name|taskGroups
operator|=
name|taskGroups
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterTasksResult
argument_list|<
name|Task
argument_list|>
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Set
argument_list|<
name|Task
argument_list|>
name|expectedSet
range|:
name|taskGroups
control|)
block|{
name|long
name|count
init|=
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|expectedSet
operator|::
name|contains
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"batched set should be executed together or not at all. Expected "
operator|+
name|expectedSet
operator|+
literal|"s. Executing "
operator|+
name|tasks
argument_list|,
name|count
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expectedSet
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tasks
operator|.
name|forEach
argument_list|(
name|Task
operator|::
name|execute
argument_list|)
expr_stmt|;
name|counter
operator|.
name|addAndGet
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
name|maybeUpdatedClusterState
init|=
name|currentState
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|maybeUpdatedClusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|batches
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
return|return
name|ClusterTasksResult
operator|.
expr|<
name|Task
operator|>
name|builder
argument_list|()
operator|.
name|successes
argument_list|(
name|tasks
argument_list|)
operator|.
name|build
argument_list|(
name|maybeUpdatedClusterState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStatePublished
parameter_list|(
name|ClusterChangedEvent
name|clusterChangedEvent
parameter_list|)
block|{
name|published
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|processedStates
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Set
argument_list|<
name|Task
argument_list|>
argument_list|>
name|taskGroups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskExecutor
argument_list|>
name|executors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfExecutors
condition|;
name|i
operator|++
control|)
block|{
name|executors
operator|.
name|add
argument_list|(
operator|new
name|TaskExecutor
argument_list|(
name|taskGroups
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// randomly assign tasks to executors
name|List
argument_list|<
name|Tuple
argument_list|<
name|TaskExecutor
argument_list|,
name|Set
argument_list|<
name|Task
argument_list|>
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|taskId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|taskSubmissionsPerThread
condition|;
name|j
operator|++
control|)
block|{
name|TaskExecutor
name|executor
init|=
name|randomFrom
argument_list|(
name|executors
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
init|;
name|t
operator|>=
literal|0
condition|;
name|t
operator|--
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|Task
argument_list|(
name|taskId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|taskGroups
operator|.
name|add
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|assignments
operator|.
name|add
argument_list|(
name|Tuple
operator|.
name|tuple
argument_list|(
name|executor
argument_list|,
name|tasks
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|TaskExecutor
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|totalTaskCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|TaskExecutor
argument_list|,
name|Set
argument_list|<
name|Task
argument_list|>
argument_list|>
name|assignment
range|:
name|assignments
control|)
block|{
specifier|final
name|int
name|taskCount
init|=
name|assignment
operator|.
name|v2
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|counts
operator|.
name|merge
argument_list|(
name|assignment
operator|.
name|v1
argument_list|()
argument_list|,
name|taskCount
argument_list|,
parameter_list|(
name|previous
parameter_list|,
name|count
parameter_list|)
lambda|->
name|previous
operator|+
name|count
argument_list|)
expr_stmt|;
name|totalTaskCount
operator|+=
name|taskCount
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|updateLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|totalTaskCount
argument_list|)
decl_stmt|;
specifier|final
name|ClusterStateTaskListener
name|listener
init|=
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|processedStates
operator|.
name|computeIfAbsent
argument_list|(
name|source
argument_list|,
name|key
lambda|->
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|updateLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|submittedTasksPerThread
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|1
operator|+
name|numberOfThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|taskSubmissionsPerThread
condition|;
name|j
operator|++
control|)
block|{
name|Tuple
argument_list|<
name|TaskExecutor
argument_list|,
name|Set
argument_list|<
name|Task
argument_list|>
argument_list|>
name|assignment
init|=
name|assignments
operator|.
name|get
argument_list|(
name|index
operator|*
name|taskSubmissionsPerThread
operator|+
name|j
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|assignment
operator|.
name|v2
argument_list|()
decl_stmt|;
name|submittedTasksPerThread
operator|.
name|computeIfAbsent
argument_list|(
name|threadName
argument_list|,
name|key
lambda|->
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
operator|.
name|addAndGet
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TaskExecutor
name|executor
init|=
name|assignment
operator|.
name|v1
argument_list|()
decl_stmt|;
if|if
condition|(
name|tasks
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
name|threadName
argument_list|,
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|randomFrom
argument_list|(
name|Priority
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|executor
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Task
argument_list|,
name|ClusterStateTaskListener
argument_list|>
name|taskListeners
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|taskListeners
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|listener
argument_list|)
argument_list|)
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTasks
argument_list|(
name|threadName
argument_list|,
name|taskListeners
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|randomFrom
argument_list|(
name|Priority
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all threads to be ready
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait for all threads to finish
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait until all the cluster state updates have been processed
name|updateLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// and until all of the publication callbacks have completed
name|semaphore
operator|.
name|acquire
argument_list|(
name|numberOfExecutors
argument_list|)
expr_stmt|;
comment|// assert the number of executed tasks is correct
name|assertEquals
argument_list|(
name|totalTaskCount
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert each executor executed the correct number of tasks
for|for
control|(
name|TaskExecutor
name|executor
range|:
name|executors
control|)
block|{
if|if
condition|(
name|counts
operator|.
name|containsKey
argument_list|(
name|executor
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|counts
operator|.
name|get
argument_list|(
name|executor
argument_list|)
argument_list|,
name|executor
operator|.
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|executor
operator|.
name|batches
operator|.
name|get
argument_list|()
argument_list|,
name|executor
operator|.
name|published
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assert the correct number of clusterStateProcessed events were triggered
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|processedStates
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|submittedTasksPerThread
argument_list|,
name|hasKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not all tasks submitted by "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" received a processed event"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|submittedTasksPerThread
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBlockingCallInClusterStateTaskListenerFails
specifier|public
name|void
name|testBlockingCallInClusterStateTaskListenerFails
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assumeTrue
argument_list|(
literal|"assertions must be enabled for this test to work"
argument_list|,
name|BaseFuture
operator|.
name|class
operator|.
name|desiredAssertionStatus
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AssertionError
argument_list|>
name|assertionRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"testBlockingCallInClusterStateTaskListenerFails"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|ClusterStateTaskConfig
operator|.
name|build
argument_list|(
name|Priority
operator|.
name|NORMAL
argument_list|)
argument_list|,
parameter_list|(
name|currentState
parameter_list|,
name|tasks
parameter_list|)
lambda|->
block|{
name|ClusterState
name|newClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ClusterStateTaskExecutor
operator|.
name|ClusterTasksResult
operator|.
name|builder
argument_list|()
operator|.
name|successes
argument_list|(
name|tasks
argument_list|)
operator|.
name|build
argument_list|(
name|newClusterState
argument_list|)
return|;
block|}
argument_list|,
operator|new
name|ClusterStateTaskListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|BaseFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|BaseFuture
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{}
decl_stmt|;
try|try
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|future
operator|.
name|get
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertionRef
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|assertionRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertionRef
operator|.
name|get
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Reason: [Blocking operation]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestLogging
argument_list|(
literal|"org.elasticsearch.cluster.service:WARN"
argument_list|)
comment|// To ensure that we log cluster state events on WARN level
DECL|method|testLongClusterStateUpdateLogging
specifier|public
name|void
name|testLongClusterStateUpdateLogging
parameter_list|()
throws|throws
name|Exception
block|{
name|MockLogAppender
name|mockAppender
init|=
operator|new
name|MockLogAppender
argument_list|()
decl_stmt|;
name|mockAppender
operator|.
name|start
argument_list|()
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|UnseenEventExpectation
argument_list|(
literal|"test1 shouldn't see because setting is too low"
argument_list|,
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
literal|"*cluster state update task [test1] took [*] above the warn threshold of *"
argument_list|)
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test2"
argument_list|,
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
literal|"*cluster state update task [test2] took [32s] above the warn threshold of *"
argument_list|)
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test3"
argument_list|,
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
literal|"*cluster state update task [test3] took [33s] above the warn threshold of *"
argument_list|)
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|addExpectation
argument_list|(
operator|new
name|MockLogAppender
operator|.
name|SeenEventExpectation
argument_list|(
literal|"test4"
argument_list|,
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Level
operator|.
name|WARN
argument_list|,
literal|"*cluster state update task [test4] took [34s] above the warn threshold of *"
argument_list|)
argument_list|)
expr_stmt|;
name|Logger
name|clusterLogger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|masterService
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Loggers
operator|.
name|addAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|processedFirstTask
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|masterService
operator|.
name|currentTimeOverride
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test1"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|masterService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|processedFirstTask
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|processedFirstTask
operator|.
name|await
argument_list|()
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test2"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|masterService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|32
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Testing handling of exceptions in the cluster state task"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test3"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|masterService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|33
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test4"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|masterService
operator|.
name|currentTimeOverride
operator|+=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|34
argument_list|)
operator|.
name|nanos
argument_list|()
expr_stmt|;
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Additional update task to make sure all previous logging made it to the loggerName
comment|// We don't check logging for this on since there is no guarantee that it will occur before our check
name|masterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test5"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
name|ClusterState
name|newState
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Loggers
operator|.
name|removeAppender
argument_list|(
name|clusterLogger
argument_list|,
name|mockAppender
argument_list|)
expr_stmt|;
name|mockAppender
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|mockAppender
operator|.
name|assertAllExpectationsMatched
argument_list|()
expr_stmt|;
block|}
DECL|class|TimedMasterService
specifier|static
class|class
name|TimedMasterService
extends|extends
name|MasterService
block|{
DECL|field|currentTimeOverride
specifier|public
specifier|volatile
name|Long
name|currentTimeOverride
init|=
literal|null
decl_stmt|;
DECL|method|TimedMasterService
name|TimedMasterService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|currentTimeInNanos
specifier|protected
name|long
name|currentTimeInNanos
parameter_list|()
block|{
if|if
condition|(
name|currentTimeOverride
operator|!=
literal|null
condition|)
block|{
return|return
name|currentTimeOverride
return|;
block|}
return|return
name|super
operator|.
name|currentTimeInNanos
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the cluster state that the master service uses (and that is provided by the discovery layer)      */
DECL|method|discoveryState
specifier|public
specifier|static
name|ClusterState
name|discoveryState
parameter_list|(
name|MasterService
name|masterService
parameter_list|)
block|{
return|return
name|masterService
operator|.
name|state
argument_list|()
return|;
block|}
block|}
end_class

end_unit

