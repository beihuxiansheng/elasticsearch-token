begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|DiscoveryNodesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|publish
operator|.
name|PublishClusterStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|service
operator|.
name|NodeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|local
operator|.
name|LocalTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyIterable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|ClusterStateDiffPublishingTests
specifier|public
class|class
name|ClusterStateDiffPublishingTests
extends|extends
name|ESTestCase
block|{
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|nodes
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|MockNode
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|MockNode
specifier|public
specifier|static
class|class
name|MockNode
block|{
DECL|field|discoveryNode
specifier|public
specifier|final
name|DiscoveryNode
name|discoveryNode
decl_stmt|;
DECL|field|service
specifier|public
specifier|final
name|MockTransportService
name|service
decl_stmt|;
DECL|field|action
specifier|public
specifier|final
name|PublishClusterStateAction
name|action
decl_stmt|;
DECL|field|nodesProvider
specifier|public
specifier|final
name|MockDiscoveryNodesProvider
name|nodesProvider
decl_stmt|;
DECL|method|MockNode
specifier|public
name|MockNode
parameter_list|(
name|DiscoveryNode
name|discoveryNode
parameter_list|,
name|MockTransportService
name|service
parameter_list|,
name|PublishClusterStateAction
name|action
parameter_list|,
name|MockDiscoveryNodesProvider
name|nodesProvider
parameter_list|)
block|{
name|this
operator|.
name|discoveryNode
operator|=
name|discoveryNode
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|nodesProvider
operator|=
name|nodesProvider
expr_stmt|;
block|}
DECL|method|connectTo
specifier|public
name|void
name|connectTo
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|service
operator|.
name|connectToNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|nodesProvider
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createMockNode
specifier|public
name|MockNode
name|createMockNode
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMockNode
argument_list|(
name|name
argument_list|,
name|settings
argument_list|,
name|version
argument_list|,
operator|new
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Node [{}] onNewClusterState version [{}], uuid [{}]"
argument_list|,
name|name
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
expr_stmt|;
name|newStateProcessed
operator|.
name|onNewClusterStateProcessed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|createMockNode
specifier|public
name|MockNode
name|createMockNode
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
name|MockTransportService
name|service
init|=
name|buildTransportService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|,
name|TransportService
operator|.
name|SETTING_TRACE_LOG_INCLUDE
argument_list|,
literal|""
argument_list|,
name|TransportService
operator|.
name|SETTING_TRACE_LOG_EXCLUDE
argument_list|,
literal|"NOTHING"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|discoveryNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
name|service
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|MockDiscoveryNodesProvider
name|nodesProvider
init|=
operator|new
name|MockDiscoveryNodesProvider
argument_list|(
name|discoveryNode
argument_list|)
decl_stmt|;
name|PublishClusterStateAction
name|action
init|=
name|buildPublishClusterStateAction
argument_list|(
name|settings
argument_list|,
name|service
argument_list|,
name|nodesProvider
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|MockNode
name|node
init|=
operator|new
name|MockNode
argument_list|(
name|discoveryNode
argument_list|,
name|service
argument_list|,
name|action
argument_list|,
name|nodesProvider
argument_list|)
decl_stmt|;
name|nodesProvider
operator|.
name|addNode
argument_list|(
name|discoveryNode
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|TransportConnectionListener
name|waitForConnection
init|=
operator|new
name|TransportConnectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onNodeDisconnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"disconnect should not be called "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|node
operator|.
name|service
operator|.
name|addConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
for|for
control|(
name|MockNode
name|curNode
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|curNode
operator|.
name|service
operator|.
name|addConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
name|curNode
operator|.
name|connectTo
argument_list|(
name|node
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
name|node
operator|.
name|connectTo
argument_list|(
name|curNode
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|connectTo
argument_list|(
name|node
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"failed to wait for all nodes to connect"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MockNode
name|curNode
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|curNode
operator|.
name|service
operator|.
name|removeConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|service
operator|.
name|removeConnectionListener
argument_list|(
name|waitForConnection
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|node
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Node with the name "
operator|+
name|name
operator|+
literal|" already exist"
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
DECL|method|service
specifier|public
name|MockTransportService
name|service
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MockNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
operator|.
name|service
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|action
specifier|public
name|PublishClusterStateAction
name|action
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MockNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
operator|.
name|action
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|MockNode
name|curNode
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|curNode
operator|.
name|action
operator|.
name|close
argument_list|()
expr_stmt|;
name|curNode
operator|.
name|service
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|buildTransportService
specifier|protected
name|MockTransportService
name|buildTransportService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|MockTransportService
name|transportService
init|=
operator|new
name|MockTransportService
argument_list|(
name|settings
argument_list|,
operator|new
name|LocalTransport
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|version
argument_list|,
operator|new
name|NamedWriteableRegistry
argument_list|()
argument_list|)
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|transportService
return|;
block|}
DECL|method|buildPublishClusterStateAction
specifier|protected
name|PublishClusterStateAction
name|buildPublishClusterStateAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|MockTransportService
name|transportService
parameter_list|,
name|MockDiscoveryNodesProvider
name|nodesProvider
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
name|listener
parameter_list|)
block|{
name|DiscoverySettings
name|discoverySettings
init|=
operator|new
name|DiscoverySettings
argument_list|(
name|settings
argument_list|,
operator|new
name|NodeSettingsService
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|PublishClusterStateAction
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|nodesProvider
argument_list|,
name|listener
argument_list|,
name|discoverySettings
argument_list|)
return|;
block|}
DECL|class|MockDiscoveryNodesProvider
specifier|static
class|class
name|MockDiscoveryNodesProvider
implements|implements
name|DiscoveryNodesProvider
block|{
DECL|field|discoveryNodes
specifier|private
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|EMPTY_NODES
decl_stmt|;
DECL|method|MockDiscoveryNodesProvider
specifier|public
name|MockDiscoveryNodesProvider
parameter_list|(
name|DiscoveryNode
name|localNode
parameter_list|)
block|{
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|localNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|localNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|addNode
specifier|public
name|void
name|addNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|node
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodes
specifier|public
name|DiscoveryNodes
name|nodes
parameter_list|()
block|{
return|return
name|discoveryNodes
return|;
block|}
annotation|@
name|Override
DECL|method|nodeService
specifier|public
name|NodeService
name|nodeService
parameter_list|()
block|{
assert|assert
literal|false
assert|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Shouldn't be here"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"cluster:DEBUG,discovery.zen.publish:DEBUG"
argument_list|)
DECL|method|testSimpleClusterStatePublishing
specifier|public
name|void
name|testSimpleClusterStatePublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNewClusterStateListener
name|mockListenerA
init|=
operator|new
name|MockNewClusterStateListener
argument_list|()
decl_stmt|;
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|mockListenerA
argument_list|)
decl_stmt|;
name|MockNewClusterStateListener
name|mockListenerB
init|=
operator|new
name|MockNewClusterStateListener
argument_list|()
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|mockListenerB
argument_list|)
decl_stmt|;
comment|// Initial cluster state
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeA
operator|.
name|discoveryNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|nodeA
operator|.
name|discoveryNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// cluster state update - add nodeB
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - remove block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|EMPTY_CLUSTER_BLOCK
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// Adding new node - this node should get full cluster state while nodeB should still be getting diffs
name|MockNewClusterStateListener
name|mockListenerC
init|=
operator|new
name|MockNewClusterStateListener
argument_list|()
decl_stmt|;
name|MockNode
name|nodeC
init|=
name|createMockNode
argument_list|(
literal|"nodeC"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|mockListenerC
argument_list|)
decl_stmt|;
comment|// cluster state update 3 - register node C
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|nodeC
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mockListenerC
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
comment|// First state
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update 4 - update settings
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|transientSettings
argument_list|(
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|NewClusterStateExpectation
name|expectation
init|=
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|mockListenerC
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - skipping one version change - should request full cluster state
name|previousClusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|expectation
operator|=
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|mockListenerC
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - skipping one version change - should request full cluster state
name|previousClusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|expectation
operator|=
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|mockListenerC
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// node B becomes the master and sends a version of the cluster state that goes back
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|nodeA
operator|.
name|discoveryNode
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|put
argument_list|(
name|nodeC
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|previousClusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|expectation
operator|=
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|mockListenerA
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|mockListenerC
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeB
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"cluster:DEBUG,discovery.zen.publish:DEBUG"
argument_list|)
DECL|method|testUnexpectedDiffPublishing
specifier|public
name|void
name|testUnexpectedDiffPublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't send cluster state to myself"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|MockNewClusterStateListener
name|mockListenerB
init|=
operator|new
name|MockNewClusterStateListener
argument_list|()
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|mockListenerB
argument_list|)
decl_stmt|;
comment|// Initial cluster state with both states - the second node still shouldn't get diff even though it's present in the previous cluster state
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeA
operator|.
name|discoveryNode
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|nodeA
operator|.
name|discoveryNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|previousClusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"cluster:DEBUG,discovery.zen.publish:DEBUG"
argument_list|)
DECL|method|testDisablingDiffPublishing
specifier|public
name|void
name|testDisablingDiffPublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|noDiffPublishingSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_DIFF_ENABLE
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|noDiffPublishingSettings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't send cluster state to myself"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|noDiffPublishingSettings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Got cluster state update, version [{}], guid [{}], from diff [{}]"
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
name|newStateProcessed
operator|.
name|onNewClusterStateProcessed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Initial cluster state
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeA
operator|.
name|discoveryNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|nodeA
operator|.
name|discoveryNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// cluster state update - add nodeB
name|discoveryNodes
operator|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|clusterState
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"cluster:DEBUG,discovery.zen.publish:DEBUG"
argument_list|)
DECL|method|testSimultaneousClusterStatePublishing
specifier|public
name|void
name|testSimultaneousClusterStatePublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfNodes
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|numberOfIterations
init|=
name|randomIntBetween
argument_list|(
literal|50
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_TIMEOUT
argument_list|,
literal|"100ms"
argument_list|)
operator|.
name|put
argument_list|(
name|DiscoverySettings
operator|.
name|PUBLISH_DIFF_ENABLE
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockNode
index|[]
name|nodes
init|=
operator|new
name|MockNode
index|[
name|numberOfNodes
index|]
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoveryNodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
literal|"node"
operator|+
name|i
decl_stmt|;
name|nodes
index|[
name|i
index|]
operator|=
name|createMockNode
argument_list|(
name|name
argument_list|,
name|settings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertProperMetaDataForVersion
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|,
name|clusterState
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|2
condition|)
block|{
comment|// Cause timeouts from time to time
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|randomInt
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|newStateProcessed
operator|.
name|onNewClusterStateProcessed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|discoveryNodesBuilder
operator|.
name|put
argument_list|(
name|nodes
index|[
name|i
index|]
operator|.
name|discoveryNode
argument_list|)
expr_stmt|;
block|}
name|AssertingAckListener
index|[]
name|listeners
init|=
operator|new
name|AssertingAckListener
index|[
name|numberOfIterations
index|]
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|discoveryNodesBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|EMPTY_META_DATA
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousState
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIterations
condition|;
name|i
operator|++
control|)
block|{
name|previousState
operator|=
name|clusterState
expr_stmt|;
name|metaData
operator|=
name|buildMetaDataForVersion
argument_list|(
name|metaData
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|listeners
index|[
name|i
index|]
operator|=
name|publishStateDiff
argument_list|(
name|nodes
index|[
literal|0
index|]
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIterations
condition|;
name|i
operator|++
control|)
block|{
name|listeners
index|[
name|i
index|]
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"cluster:DEBUG,discovery.zen.publish:DEBUG"
argument_list|)
DECL|method|testSerializationFailureDuringDiffPublishing
specifier|public
name|void
name|testSerializationFailureDuringDiffPublishing
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNode
name|nodeA
init|=
name|createMockNode
argument_list|(
literal|"nodeA"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't send cluster state to myself"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|MockNewClusterStateListener
name|mockListenerB
init|=
operator|new
name|MockNewClusterStateListener
argument_list|()
decl_stmt|;
name|MockNode
name|nodeB
init|=
name|createMockNode
argument_list|(
literal|"nodeB"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|mockListenerB
argument_list|)
decl_stmt|;
comment|// Initial cluster state with both states - the second node still shouldn't get diff even though it's present in the previous cluster state
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|nodeA
operator|.
name|discoveryNode
argument_list|)
operator|.
name|put
argument_list|(
name|nodeB
operator|.
name|discoveryNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|nodeA
operator|.
name|discoveryNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|previousClusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|previousClusterState
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishStateDiffAndWait
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|clusterState
argument_list|,
name|previousClusterState
argument_list|)
expr_stmt|;
comment|// cluster state update - add block
name|previousClusterState
operator|=
name|clusterState
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|MetaData
operator|.
name|CLUSTER_READ_ONLY_BLOCK
argument_list|)
argument_list|)
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|mockListenerB
operator|.
name|add
argument_list|(
operator|new
name|NewClusterStateExpectation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|clusterState
operator|.
name|wasReadFromDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ClusterState
name|unserializableClusterState
init|=
operator|new
name|ClusterState
argument_list|(
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|clusterState
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|diff
parameter_list|(
name|ClusterState
name|previousState
parameter_list|)
block|{
return|return
operator|new
name|Diff
argument_list|<
name|ClusterState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|apply
parameter_list|(
name|ClusterState
name|part
parameter_list|)
block|{
name|fail
argument_list|(
literal|"this diff shouldn't be applied"
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Simulated failure of diff serialization"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|errors
init|=
name|publishStateDiff
argument_list|(
name|nodeA
operator|.
name|action
argument_list|,
name|unserializableClusterState
argument_list|,
name|previousClusterState
argument_list|)
operator|.
name|awaitErrors
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|v2
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Simulated failure of diff serialization"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buildMetaDataForVersion
specifier|private
name|MetaData
name|buildMetaDataForVersion
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|long
name|version
parameter_list|)
block|{
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|metaData
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
name|indices
operator|.
name|put
argument_list|(
literal|"test"
operator|+
name|version
argument_list|,
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
operator|+
name|version
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
operator|(
name|int
operator|)
name|version
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
operator|.
name|transientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|indices
argument_list|(
name|indices
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|assertProperMetaDataForVersion
specifier|private
name|void
name|assertProperMetaDataForVersion
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|long
name|version
parameter_list|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|version
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
operator|.
name|numberOfShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test"
operator|+
operator|(
name|version
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|publishStateDiffAndWait
specifier|public
name|void
name|publishStateDiffAndWait
parameter_list|(
name|PublishClusterStateAction
name|action
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|publishStateDiff
argument_list|(
name|action
argument_list|,
name|state
argument_list|,
name|previousState
argument_list|)
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|publishStateDiff
specifier|public
name|AssertingAckListener
name|publishStateDiff
parameter_list|(
name|PublishClusterStateAction
name|action
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|ClusterState
name|previousState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|AssertingAckListener
name|assertingAckListener
init|=
operator|new
name|AssertingAckListener
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ClusterChangedEvent
name|changedEvent
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test update"
argument_list|,
name|state
argument_list|,
name|previousState
argument_list|)
decl_stmt|;
name|action
operator|.
name|publish
argument_list|(
name|changedEvent
argument_list|,
name|assertingAckListener
argument_list|)
expr_stmt|;
return|return
name|assertingAckListener
return|;
block|}
DECL|class|AssertingAckListener
specifier|public
specifier|static
class|class
name|AssertingAckListener
implements|implements
name|Discovery
operator|.
name|AckListener
block|{
DECL|field|errors
specifier|private
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|timeoutOccured
specifier|private
specifier|final
name|AtomicBoolean
name|timeoutOccured
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|countDown
specifier|private
specifier|final
name|CountDownLatch
name|countDown
decl_stmt|;
DECL|method|AssertingAckListener
specifier|public
name|AssertingAckListener
parameter_list|(
name|int
name|nodeCount
parameter_list|)
block|{
name|countDown
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|nodeCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNodeAck
specifier|public
name|void
name|onNodeAck
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|node
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|countDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTimeout
specifier|public
name|void
name|onTimeout
parameter_list|()
block|{
name|timeoutOccured
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Fast forward the counter - no reason to wait here
name|long
name|currentCount
init|=
name|countDown
operator|.
name|getCount
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentCount
condition|;
name|i
operator|++
control|)
block|{
name|countDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|await
specifier|public
name|void
name|await
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertThat
argument_list|(
name|awaitErrors
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
argument_list|,
name|emptyIterable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitErrors
specifier|public
name|List
argument_list|<
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|awaitErrors
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|countDown
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|timeoutOccured
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
block|}
DECL|interface|NewClusterStateExpectation
specifier|public
interface|interface
name|NewClusterStateExpectation
block|{
DECL|method|check
name|void
name|check
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
operator|.
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
function_decl|;
block|}
DECL|class|MockNewClusterStateListener
specifier|public
specifier|static
class|class
name|MockNewClusterStateListener
implements|implements
name|PublishClusterStateAction
operator|.
name|NewClusterStateListener
block|{
DECL|field|expectations
name|CopyOnWriteArrayList
argument_list|<
name|NewClusterStateExpectation
argument_list|>
name|expectations
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onNewClusterState
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NewStateProcessed
name|newStateProcessed
parameter_list|)
block|{
specifier|final
name|NewClusterStateExpectation
name|expectation
decl_stmt|;
try|try
block|{
name|expectation
operator|=
name|expectations
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected cluster state update "
operator|+
name|clusterState
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|expectation
operator|.
name|check
argument_list|(
name|clusterState
argument_list|,
name|newStateProcessed
argument_list|)
expr_stmt|;
name|newStateProcessed
operator|.
name|onNewClusterStateProcessed
argument_list|()
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|NewClusterStateExpectation
name|expectation
parameter_list|)
block|{
name|expectations
operator|.
name|add
argument_list|(
name|expectation
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DelegatingClusterState
specifier|public
specifier|static
class|class
name|DelegatingClusterState
extends|extends
name|ClusterState
block|{
DECL|method|DelegatingClusterState
specifier|public
name|DelegatingClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|super
argument_list|(
name|clusterState
operator|.
name|version
argument_list|()
argument_list|,
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

