begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexTemplateMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoriesMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasMetaData
operator|.
name|newAliasMetaDataBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RandomShardRoutingMutator
operator|.
name|randomChange
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RandomShardRoutingMutator
operator|.
name|randomReason
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|XContentTestUtils
operator|.
name|convertToMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|XContentTestUtils
operator|.
name|differenceBetweenMapsIgnoringArrayOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|)
DECL|class|ClusterStateDiffIT
specifier|public
class|class
name|ClusterStateDiffIT
extends|extends
name|ESIntegTestCase
block|{
DECL|method|testClusterStateDiffSerialization
specifier|public
name|void
name|testClusterStateDiffSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|DiscoveryNode
name|masterNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"master"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"master"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|otherNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"other"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"other"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|masterNode
argument_list|)
operator|.
name|put
argument_list|(
name|otherNode
argument_list|)
operator|.
name|localNodeId
argument_list|(
name|masterNode
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|discoveryNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterStateFromDiffs
init|=
name|ClusterState
operator|.
name|Builder
operator|.
name|fromBytes
argument_list|(
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|clusterState
argument_list|)
argument_list|,
name|otherNode
argument_list|)
decl_stmt|;
name|int
name|iterationCount
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|iterationCount
condition|;
name|iteration
operator|++
control|)
block|{
name|ClusterState
name|previousClusterState
init|=
name|clusterState
decl_stmt|;
name|ClusterState
name|previousClusterStateFromDiffs
init|=
name|clusterStateFromDiffs
decl_stmt|;
name|int
name|changesCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ClusterState
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changesCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|clusterState
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|randomInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|builder
operator|=
name|randomNodes
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|builder
operator|=
name|randomRoutingTable
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|builder
operator|=
name|randomBlocks
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|builder
operator|=
name|randomClusterStateCustoms
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|builder
operator|=
name|randomMetaDataChanges
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Shouldn't be here"
argument_list|)
throw|;
block|}
block|}
name|clusterState
operator|=
name|builder
operator|.
name|incrementVersion
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|<
literal|1
condition|)
block|{
comment|// Update cluster state via full serialization from time to time
name|clusterStateFromDiffs
operator|=
name|ClusterState
operator|.
name|Builder
operator|.
name|fromBytes
argument_list|(
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|clusterState
argument_list|)
argument_list|,
name|previousClusterStateFromDiffs
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Update cluster states using diffs
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|diffBeforeSerialization
init|=
name|clusterState
operator|.
name|diff
argument_list|(
name|previousClusterState
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|os
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|diffBeforeSerialization
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|byte
index|[]
name|diffBytes
init|=
name|os
operator|.
name|bytes
argument_list|()
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|Diff
argument_list|<
name|ClusterState
argument_list|>
name|diff
decl_stmt|;
try|try
init|(
name|StreamInput
name|input
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|diffBytes
argument_list|)
init|)
block|{
name|diff
operator|=
name|previousClusterStateFromDiffs
operator|.
name|readDiffFrom
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|clusterStateFromDiffs
operator|=
name|diff
operator|.
name|apply
argument_list|(
name|previousClusterStateFromDiffs
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Check non-diffable elements
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check nodes
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|previousClusterStateFromDiffs
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|node
range|:
name|clusterStateFromDiffs
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|keys
argument_list|()
control|)
block|{
name|DiscoveryNode
name|node1
init|=
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|node
operator|.
name|value
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node2
init|=
name|clusterStateFromDiffs
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|node
operator|.
name|value
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|node1
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node1
operator|.
name|address
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|address
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node1
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|node2
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check routing table
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|routingTable
argument_list|()
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check cluster blocks
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterStateFromDiffs
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterStateFromDiffs
operator|.
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|blocks
argument_list|()
operator|.
name|disableStatePersistence
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterStateFromDiffs
operator|.
name|blocks
argument_list|()
operator|.
name|disableStatePersistence
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check metadata
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|clusterUUID
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|clusterUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|transientSettings
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|transientSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|persistentSettings
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|persistentSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|templates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|customs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|customs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateFromDiffs
operator|.
name|metaData
argument_list|()
operator|.
name|equalsAliases
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// JSON Serialization test - make sure that both states produce similar JSON
name|assertNull
argument_list|(
name|differenceBetweenMapsIgnoringArrayOrder
argument_list|(
name|convertToMap
argument_list|(
name|clusterStateFromDiffs
argument_list|)
argument_list|,
name|convertToMap
argument_list|(
name|clusterState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Smoke test - we cannot compare bytes to bytes because some elements might get serialized in different order
comment|// however, serialized size should remain the same
name|assertThat
argument_list|(
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|clusterStateFromDiffs
argument_list|)
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|clusterState
argument_list|)
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|error
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cluster state:\n{}\nCluster state from diffs:\n{}"
argument_list|,
name|clusterState
operator|.
name|toString
argument_list|()
argument_list|,
name|clusterStateFromDiffs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|error
throw|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Final cluster state:[{}]"
argument_list|,
name|clusterState
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Randomly updates nodes in the cluster state      */
DECL|method|randomNodes
specifier|private
name|ClusterState
operator|.
name|Builder
name|randomNodes
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeIds
init|=
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|nodeIds
control|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|startsWith
argument_list|(
literal|"node-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodes
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
name|nodeId
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|additionalNodeCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalNodeCount
condition|;
name|i
operator|++
control|)
block|{
name|nodes
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node-"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
return|;
block|}
comment|/**      * Randomly updates routing table in the cluster state      */
DECL|method|randomRoutingTable
specifier|private
name|ClusterState
operator|.
name|Builder
name|randomRoutingTable
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|RoutingTable
operator|.
name|Builder
name|builder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numberOfIndices
init|=
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfIndices
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|randomIndices
init|=
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|numberOfIndices
operator|-
literal|1
argument_list|)
argument_list|,
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|randomIndices
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|add
argument_list|(
name|randomChangeToIndexRoutingTable
argument_list|(
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|additionalIndexCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalIndexCount
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|randomIndexRoutingTable
argument_list|(
literal|"index-"
operator|+
name|randomInt
argument_list|()
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Randomly updates index routing table in the cluster state      */
DECL|method|randomIndexRoutingTable
specifier|private
name|IndexRoutingTable
name|randomIndexRoutingTable
parameter_list|(
name|String
name|index
parameter_list|,
name|String
index|[]
name|nodeIds
parameter_list|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|builder
init|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
operator|new
name|Index
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|shardCount
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardCount
condition|;
name|i
operator|++
control|)
block|{
name|IndexShardRoutingTable
operator|.
name|Builder
name|indexShard
init|=
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
literal|"_na_"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|replicaCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|replicaCount
condition|;
name|j
operator|++
control|)
block|{
name|UnassignedInfo
name|unassignedInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|randomInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|1
condition|)
block|{
name|unassignedInfo
operator|=
operator|new
name|UnassignedInfo
argument_list|(
name|randomReason
argument_list|()
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexShard
operator|.
name|addShard
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|index
argument_list|,
name|i
argument_list|,
name|randomFrom
argument_list|(
name|nodeIds
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|j
operator|==
literal|0
argument_list|,
name|ShardRoutingState
operator|.
name|fromValue
argument_list|(
operator|(
name|byte
operator|)
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|unassignedInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addIndexShard
argument_list|(
name|indexShard
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Randomly updates index routing table in the cluster state      */
DECL|method|randomChangeToIndexRoutingTable
specifier|private
name|IndexRoutingTable
name|randomChangeToIndexRoutingTable
parameter_list|(
name|IndexRoutingTable
name|original
parameter_list|,
name|String
index|[]
name|nodes
parameter_list|)
block|{
name|IndexRoutingTable
operator|.
name|Builder
name|builder
init|=
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
name|original
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexShardRoutingTable
argument_list|>
name|indexShardRoutingTable
range|:
name|original
operator|.
name|shards
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|indexShardRoutingTable
operator|.
name|value
operator|.
name|shards
argument_list|()
control|)
block|{
specifier|final
name|ShardRouting
name|newShardRouting
init|=
operator|new
name|ShardRouting
argument_list|(
name|shardRouting
argument_list|)
decl_stmt|;
name|randomChange
argument_list|(
name|newShardRouting
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addShard
argument_list|(
name|indexShardRoutingTable
operator|.
name|value
argument_list|,
name|newShardRouting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Randomly creates or removes cluster blocks      */
DECL|method|randomBlocks
specifier|private
name|ClusterState
operator|.
name|Builder
name|randomBlocks
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|ClusterBlocks
operator|.
name|Builder
name|builder
init|=
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|blocks
argument_list|(
name|clusterState
operator|.
name|blocks
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|globalBlocksCount
init|=
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|globalBlocksCount
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|ClusterBlock
argument_list|>
name|blocks
init|=
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|globalBlocksCount
operator|-
literal|1
argument_list|)
argument_list|,
name|clusterState
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ClusterBlock
index|[
name|globalBlocksCount
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ClusterBlock
name|block
range|:
name|blocks
control|)
block|{
name|builder
operator|.
name|removeGlobalBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|additionalGlobalBlocksCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalGlobalBlocksCount
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addGlobalBlock
argument_list|(
name|randomGlobalBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|blocks
argument_list|(
name|builder
argument_list|)
return|;
block|}
comment|/**      * Returns a random global block      */
DECL|method|randomGlobalBlock
specifier|private
name|ClusterBlock
name|randomGlobalBlock
parameter_list|()
block|{
switch|switch
condition|(
name|randomInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_ALL
return|;
case|case
literal|1
case|:
return|return
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
return|;
default|default:
return|return
name|GatewayService
operator|.
name|STATE_NOT_RECOVERED_BLOCK
return|;
block|}
block|}
comment|/**      * Random cluster state part generator interface. Used by {@link #randomClusterStateParts(ClusterState, String, RandomClusterPart)}      * method to update cluster state with randomly generated parts      */
DECL|interface|RandomClusterPart
specifier|private
interface|interface
name|RandomClusterPart
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**          * Returns list of parts from metadata          */
DECL|method|parts
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parts
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
function_decl|;
comment|/**          * Puts the part back into metadata          */
DECL|method|put
name|ClusterState
operator|.
name|Builder
name|put
parameter_list|(
name|ClusterState
operator|.
name|Builder
name|builder
parameter_list|,
name|T
name|part
parameter_list|)
function_decl|;
comment|/**          * Remove the part from metadata          */
DECL|method|remove
name|ClusterState
operator|.
name|Builder
name|remove
parameter_list|(
name|ClusterState
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * Returns a random part with the specified name          */
DECL|method|randomCreate
name|T
name|randomCreate
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * Makes random modifications to the part          */
DECL|method|randomChange
name|T
name|randomChange
parameter_list|(
name|T
name|part
parameter_list|)
function_decl|;
block|}
comment|/**      * Takes an existing cluster state and randomly adds, removes or updates a cluster state part using randomPart generator.      * If a new part is added the prefix value is used as a prefix of randomly generated part name.      */
DECL|method|randomClusterStateParts
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ClusterState
name|randomClusterStateParts
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|String
name|prefix
parameter_list|,
name|RandomClusterPart
argument_list|<
name|T
argument_list|>
name|randomPart
parameter_list|)
block|{
name|ClusterState
operator|.
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parts
init|=
name|randomPart
operator|.
name|parts
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|int
name|partCount
init|=
name|parts
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|partCount
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|randomParts
init|=
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|partCount
operator|-
literal|1
argument_list|)
argument_list|,
name|randomPart
operator|.
name|parts
argument_list|(
name|clusterState
argument_list|)
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|randomParts
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomPart
operator|.
name|remove
argument_list|(
name|builder
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomPart
operator|.
name|put
argument_list|(
name|builder
argument_list|,
name|randomPart
operator|.
name|randomChange
argument_list|(
name|parts
operator|.
name|get
argument_list|(
name|part
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|additionalPartCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalPartCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|randomName
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|randomPart
operator|.
name|put
argument_list|(
name|builder
argument_list|,
name|randomPart
operator|.
name|randomCreate
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Makes random metadata changes      */
DECL|method|randomMetaDataChanges
specifier|private
name|ClusterState
operator|.
name|Builder
name|randomMetaDataChanges
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|int
name|changesCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changesCount
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|randomInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|metaData
operator|=
name|randomMetaDataSettings
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|metaData
operator|=
name|randomIndices
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|metaData
operator|=
name|randomTemplates
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|metaData
operator|=
name|randomMetaDataCustoms
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Shouldn't be here"
argument_list|)
throw|;
block|}
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
operator|.
name|version
argument_list|(
name|metaData
operator|.
name|version
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Makes random settings changes      */
DECL|method|randomSettings
specifier|private
name|Settings
name|randomSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
name|int
name|settingsCount
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|settingsCount
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Randomly updates persistent or transient settings of the given metadata      */
DECL|method|randomMetaDataSettings
specifier|private
name|MetaData
name|randomMetaDataSettings
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
operator|.
name|persistentSettings
argument_list|(
name|randomSettings
argument_list|(
name|metaData
operator|.
name|persistentSettings
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
operator|.
name|transientSettings
argument_list|(
name|randomSettings
argument_list|(
name|metaData
operator|.
name|transientSettings
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * Random metadata part generator      */
DECL|interface|RandomPart
specifier|private
interface|interface
name|RandomPart
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**          * Returns list of parts from metadata          */
DECL|method|parts
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parts
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
function_decl|;
comment|/**          * Puts the part back into metadata          */
DECL|method|put
name|MetaData
operator|.
name|Builder
name|put
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|T
name|part
parameter_list|)
function_decl|;
comment|/**          * Remove the part from metadata          */
DECL|method|remove
name|MetaData
operator|.
name|Builder
name|remove
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * Returns a random part with the specified name          */
DECL|method|randomCreate
name|T
name|randomCreate
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/**          * Makes random modifications to the part          */
DECL|method|randomChange
name|T
name|randomChange
parameter_list|(
name|T
name|part
parameter_list|)
function_decl|;
block|}
comment|/**      * Takes an existing cluster state and randomly adds, removes or updates a metadata part using randomPart generator.      * If a new part is added the prefix value is used as a prefix of randomly generated part name.      */
DECL|method|randomParts
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MetaData
name|randomParts
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|prefix
parameter_list|,
name|RandomPart
argument_list|<
name|T
argument_list|>
name|randomPart
parameter_list|)
block|{
name|MetaData
operator|.
name|Builder
name|builder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parts
init|=
name|randomPart
operator|.
name|parts
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|int
name|partCount
init|=
name|parts
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|partCount
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|randomParts
init|=
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|partCount
operator|-
literal|1
argument_list|)
argument_list|,
name|randomPart
operator|.
name|parts
argument_list|(
name|metaData
argument_list|)
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|randomParts
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomPart
operator|.
name|remove
argument_list|(
name|builder
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomPart
operator|.
name|put
argument_list|(
name|builder
argument_list|,
name|randomPart
operator|.
name|randomChange
argument_list|(
name|parts
operator|.
name|get
argument_list|(
name|part
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|additionalPartCount
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalPartCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|randomName
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|randomPart
operator|.
name|put
argument_list|(
name|builder
argument_list|,
name|randomPart
operator|.
name|randomCreate
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Randomly add, deletes or updates indices in the metadata      */
DECL|method|randomIndices
specifier|private
name|MetaData
name|randomIndices
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
name|randomParts
argument_list|(
name|metaData
argument_list|,
literal|"index"
argument_list|,
operator|new
name|RandomPart
argument_list|<
name|IndexMetaData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|parts
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
name|metaData
operator|.
name|indices
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Builder
name|put
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|IndexMetaData
name|part
parameter_list|)
block|{
return|return
name|builder
operator|.
name|put
argument_list|(
name|part
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Builder
name|remove
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|builder
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexMetaData
name|randomCreate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|IndexMetaData
operator|.
name|Builder
name|builder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settingsBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|setRandomIndexSettings
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|settingsBuilder
argument_list|)
expr_stmt|;
name|settingsBuilder
operator|.
name|put
argument_list|(
name|randomSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|numberOfShards
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|randomInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|aliasCount
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliasCount
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|putAlias
argument_list|(
name|randomAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexMetaData
name|randomChange
parameter_list|(
name|IndexMetaData
name|part
parameter_list|)
block|{
name|IndexMetaData
operator|.
name|Builder
name|builder
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|part
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|builder
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|part
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|randomSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
name|part
operator|.
name|getAliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|removeAlias
argument_list|(
name|randomFrom
argument_list|(
name|part
operator|.
name|getAliases
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|builder
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|part
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Shouldn't be here"
argument_list|)
throw|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Randomly adds, deletes or updates index templates in the metadata      */
DECL|method|randomTemplates
specifier|private
name|MetaData
name|randomTemplates
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
name|randomParts
argument_list|(
name|metaData
argument_list|,
literal|"template"
argument_list|,
operator|new
name|RandomPart
argument_list|<
name|IndexTemplateMetaData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexTemplateMetaData
argument_list|>
name|parts
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
name|metaData
operator|.
name|templates
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Builder
name|put
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|IndexTemplateMetaData
name|part
parameter_list|)
block|{
return|return
name|builder
operator|.
name|put
argument_list|(
name|part
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Builder
name|remove
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|builder
operator|.
name|removeTemplate
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexTemplateMetaData
name|randomCreate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|IndexTemplateMetaData
operator|.
name|Builder
name|builder
init|=
name|IndexTemplateMetaData
operator|.
name|builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|builder
operator|.
name|order
argument_list|(
name|randomInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|template
argument_list|(
name|randomName
argument_list|(
literal|"temp"
argument_list|)
argument_list|)
operator|.
name|settings
argument_list|(
name|randomSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|aliasCount
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliasCount
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|putAlias
argument_list|(
name|randomAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexTemplateMetaData
name|randomChange
parameter_list|(
name|IndexTemplateMetaData
name|part
parameter_list|)
block|{
name|IndexTemplateMetaData
operator|.
name|Builder
name|builder
init|=
operator|new
name|IndexTemplateMetaData
operator|.
name|Builder
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|builder
operator|.
name|order
argument_list|(
name|randomInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Generates random alias      */
DECL|method|randomAlias
specifier|private
name|AliasMetaData
name|randomAlias
parameter_list|()
block|{
name|AliasMetaData
operator|.
name|Builder
name|builder
init|=
name|newAliasMetaDataBuilder
argument_list|(
name|randomName
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|filter
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"test"
argument_list|,
name|randomRealisticUnicodeOfCodepointLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|routing
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Randomly adds, deletes or updates repositories in the metadata      */
DECL|method|randomMetaDataCustoms
specifier|private
name|MetaData
name|randomMetaDataCustoms
parameter_list|(
specifier|final
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
name|randomParts
argument_list|(
name|metaData
argument_list|,
literal|"custom"
argument_list|,
operator|new
name|RandomPart
argument_list|<
name|MetaData
operator|.
name|Custom
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MetaData
operator|.
name|Custom
argument_list|>
name|parts
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
name|metaData
operator|.
name|customs
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Builder
name|put
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|MetaData
operator|.
name|Custom
name|part
parameter_list|)
block|{
return|return
name|builder
operator|.
name|putCustom
argument_list|(
name|part
operator|.
name|type
argument_list|()
argument_list|,
name|part
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Builder
name|remove
parameter_list|(
name|MetaData
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|builder
operator|.
name|removeCustom
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Custom
name|randomCreate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|RepositoriesMetaData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaData
operator|.
name|Custom
name|randomChange
parameter_list|(
name|MetaData
operator|.
name|Custom
name|part
parameter_list|)
block|{
return|return
name|part
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Randomly adds, deletes or updates in-progress snapshot and restore records in the cluster state      */
DECL|method|randomClusterStateCustoms
specifier|private
name|ClusterState
operator|.
name|Builder
name|randomClusterStateCustoms
parameter_list|(
specifier|final
name|ClusterState
name|clusterState
parameter_list|)
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|randomClusterStateParts
argument_list|(
name|clusterState
argument_list|,
literal|"custom"
argument_list|,
operator|new
name|RandomClusterPart
argument_list|<
name|ClusterState
operator|.
name|Custom
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|ClusterState
operator|.
name|Custom
argument_list|>
name|parts
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
return|return
name|clusterState
operator|.
name|customs
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
operator|.
name|Builder
name|put
parameter_list|(
name|ClusterState
operator|.
name|Builder
name|builder
parameter_list|,
name|ClusterState
operator|.
name|Custom
name|part
parameter_list|)
block|{
return|return
name|builder
operator|.
name|putCustom
argument_list|(
name|part
operator|.
name|type
argument_list|()
argument_list|,
name|part
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
operator|.
name|Builder
name|remove
parameter_list|(
name|ClusterState
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|builder
operator|.
name|removeCustom
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
operator|.
name|Custom
name|randomCreate
parameter_list|(
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|SnapshotsInProgress
argument_list|(
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|randomName
argument_list|(
literal|"repo"
argument_list|)
argument_list|,
name|randomName
argument_list|(
literal|"snap"
argument_list|)
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|SnapshotsInProgress
operator|.
name|State
operator|.
name|fromValue
argument_list|(
operator|(
name|byte
operator|)
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|,
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
literal|1
case|:
return|return
operator|new
name|RestoreInProgress
argument_list|(
operator|new
name|RestoreInProgress
operator|.
name|Entry
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|randomName
argument_list|(
literal|"repo"
argument_list|)
argument_list|,
name|randomName
argument_list|(
literal|"snap"
argument_list|)
argument_list|)
argument_list|,
name|RestoreInProgress
operator|.
name|State
operator|.
name|fromValue
argument_list|(
operator|(
name|byte
operator|)
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Shouldn't be here"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
operator|.
name|Custom
name|randomChange
parameter_list|(
name|ClusterState
operator|.
name|Custom
name|part
parameter_list|)
block|{
return|return
name|part
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Generates a random name that starts with the given prefix      */
DECL|method|randomName
specifier|private
name|String
name|randomName
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|prefix
operator|+
name|Strings
operator|.
name|randomBase64UUID
argument_list|(
name|getRandom
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

