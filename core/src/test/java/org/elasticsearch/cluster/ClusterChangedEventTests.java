begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexGraveyard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|UUIDs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link ClusterChangedEvent} class.  */
end_comment

begin_class
DECL|class|ClusterChangedEventTests
specifier|public
class|class
name|ClusterChangedEventTests
extends|extends
name|ESTestCase
block|{
DECL|field|TEST_CLUSTER_NAME
specifier|private
specifier|static
specifier|final
name|ClusterName
name|TEST_CLUSTER_NAME
init|=
operator|new
name|ClusterName
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
DECL|field|NODE_ID_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ID_PREFIX
init|=
literal|"node_"
decl_stmt|;
DECL|field|INITIAL_CLUSTER_ID
specifier|private
specifier|static
specifier|final
name|String
name|INITIAL_CLUSTER_ID
init|=
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
comment|// the initial indices which every cluster state test starts out with
DECL|field|initialIndices
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|initialIndices
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Index
argument_list|(
literal|"idx1"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Index
argument_list|(
literal|"idx2"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Index
argument_list|(
literal|"idx3"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Test basic properties of the ClusterChangedEvent class:      *   (1) make sure there are no null values for any of its properties      *   (2) make sure you can't create a ClusterChangedEvent with any null values      */
DECL|method|testBasicProperties
specifier|public
name|void
name|testBasicProperties
parameter_list|()
block|{
name|ClusterState
name|newState
init|=
name|createSimpleClusterState
argument_list|()
decl_stmt|;
name|ClusterState
name|previousState
init|=
name|createSimpleClusterState
argument_list|()
decl_stmt|;
name|ClusterChangedEvent
name|event
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|previousState
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|event
operator|.
name|source
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_na_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newState
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event
operator|.
name|previousState
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|previousState
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"nodesDelta should not be null"
argument_list|,
name|event
operator|.
name|nodesDelta
argument_list|()
argument_list|)
expr_stmt|;
comment|// should not be able to create a ClusterChangedEvent with null values for any of the constructor args
try|try
block|{
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|null
argument_list|,
name|newState
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have created a ClusterChangedEvent from a null source: "
operator|+
name|event
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
literal|null
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have created a ClusterChangedEvent from a null state: "
operator|+
name|event
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have created a ClusterChangedEvent from a null previousState: "
operator|+
name|event
operator|.
name|previousState
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{         }
block|}
comment|/**      * Test whether the ClusterChangedEvent returns the correct value for whether the local node is master,      * based on what was set on the cluster state.      */
DECL|method|testLocalNodeIsMaster
specifier|public
name|void
name|testLocalNodeIsMaster
parameter_list|()
block|{
specifier|final
name|int
name|numNodesInCluster
init|=
literal|3
decl_stmt|;
name|ClusterState
name|previousState
init|=
name|createSimpleClusterState
argument_list|()
decl_stmt|;
name|ClusterState
name|newState
init|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
literal|true
argument_list|,
name|initialIndices
argument_list|)
decl_stmt|;
name|ClusterChangedEvent
name|event
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|previousState
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"local node should be master"
argument_list|,
name|event
operator|.
name|localNodeMaster
argument_list|()
argument_list|)
expr_stmt|;
name|newState
operator|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
literal|false
argument_list|,
name|initialIndices
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"local node should not be master"
argument_list|,
name|event
operator|.
name|localNodeMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the indices created and indices deleted lists between two cluster states      * are correct when there is a change in indices added and deleted.  Also tests metadata      * equality between cluster states.      */
DECL|method|testIndicesMetaDataChanges
specifier|public
name|void
name|testIndicesMetaDataChanges
parameter_list|()
block|{
specifier|final
name|int
name|numNodesInCluster
init|=
literal|3
decl_stmt|;
name|ClusterState
name|previousState
init|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
decl_stmt|;
for|for
control|(
name|TombstoneDeletionQuantity
name|quantity
range|:
name|TombstoneDeletionQuantity
operator|.
name|valuesInRandomizedOrder
argument_list|()
control|)
block|{
specifier|final
name|ClusterState
name|newState
init|=
name|executeIndicesChangesTest
argument_list|(
name|previousState
argument_list|,
name|quantity
argument_list|)
decl_stmt|;
name|previousState
operator|=
name|newState
expr_stmt|;
comment|// serves as the base cluster state for the next iteration
block|}
block|}
comment|/**      * Test that the indices deleted list is correct when the previous cluster state is      * not initialized/recovered.  This should trigger the use of the index tombstones to      * determine the deleted indices.      */
DECL|method|testIndicesDeletionWithNotRecoveredState
specifier|public
name|void
name|testIndicesDeletionWithNotRecoveredState
parameter_list|()
block|{
comment|// test with all the various tombstone deletion quantities
for|for
control|(
name|TombstoneDeletionQuantity
name|quantity
range|:
name|TombstoneDeletionQuantity
operator|.
name|valuesInRandomizedOrder
argument_list|()
control|)
block|{
specifier|final
name|ClusterState
name|previousState
init|=
name|createNonInitializedState
argument_list|(
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|executeIndicesChangesTest
argument_list|(
name|previousState
argument_list|,
name|quantity
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test the index metadata change check.      */
DECL|method|testIndexMetaDataChange
specifier|public
name|void
name|testIndexMetaDataChange
parameter_list|()
block|{
specifier|final
name|int
name|numNodesInCluster
init|=
literal|3
decl_stmt|;
specifier|final
name|ClusterState
name|state
init|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
decl_stmt|;
comment|// test when its not the same IndexMetaData
specifier|final
name|Index
name|index
init|=
name|initialIndices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexMetaData
name|originalIndexMeta
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// make sure the metadata is actually on the cluster state
name|assertNotNull
argument_list|(
literal|"IndexMetaData for "
operator|+
name|index
operator|+
literal|" should exist on the cluster state"
argument_list|,
name|originalIndexMeta
argument_list|)
expr_stmt|;
name|IndexMetaData
name|newIndexMeta
init|=
name|createIndexMetadata
argument_list|(
name|index
argument_list|,
name|originalIndexMeta
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"IndexMetaData with different version numbers must be considered changed"
argument_list|,
name|ClusterChangedEvent
operator|.
name|indexMetaDataChanged
argument_list|(
name|originalIndexMeta
argument_list|,
name|newIndexMeta
argument_list|)
argument_list|)
expr_stmt|;
comment|// test when it doesn't exist
name|newIndexMeta
operator|=
name|createIndexMetadata
argument_list|(
operator|new
name|Index
argument_list|(
literal|"doesntexist"
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"IndexMetaData that didn't previously exist should be considered changed"
argument_list|,
name|ClusterChangedEvent
operator|.
name|indexMetaDataChanged
argument_list|(
name|originalIndexMeta
argument_list|,
name|newIndexMeta
argument_list|)
argument_list|)
expr_stmt|;
comment|// test when its the same IndexMetaData
name|assertFalse
argument_list|(
literal|"IndexMetaData should be the same"
argument_list|,
name|ClusterChangedEvent
operator|.
name|indexMetaDataChanged
argument_list|(
name|originalIndexMeta
argument_list|,
name|originalIndexMeta
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test nodes added/removed/changed checks.      */
DECL|method|testNodesAddedAndRemovedAndChanged
specifier|public
name|void
name|testNodesAddedAndRemovedAndChanged
parameter_list|()
block|{
specifier|final
name|int
name|numNodesInCluster
init|=
literal|4
decl_stmt|;
specifier|final
name|ClusterState
name|originalState
init|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
decl_stmt|;
comment|// test when nodes have not been added or removed between cluster states
name|ClusterState
name|newState
init|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
decl_stmt|;
name|ClusterChangedEvent
name|event
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|originalState
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Nodes should not have been added between cluster states"
argument_list|,
name|event
operator|.
name|nodesAdded
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nodes should not have been removed between cluster states"
argument_list|,
name|event
operator|.
name|nodesRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nodes should not have been changed between cluster states"
argument_list|,
name|event
operator|.
name|nodesChanged
argument_list|()
argument_list|)
expr_stmt|;
comment|// test when nodes have been removed between cluster states
name|newState
operator|=
name|createState
argument_list|(
name|numNodesInCluster
operator|-
literal|1
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|originalState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Nodes should have been removed between cluster states"
argument_list|,
name|event
operator|.
name|nodesRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nodes should not have been added between cluster states"
argument_list|,
name|event
operator|.
name|nodesAdded
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Nodes should have been changed between cluster states"
argument_list|,
name|event
operator|.
name|nodesChanged
argument_list|()
argument_list|)
expr_stmt|;
comment|// test when nodes have been added between cluster states
name|newState
operator|=
name|createState
argument_list|(
name|numNodesInCluster
operator|+
literal|1
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|originalState
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Nodes should not have been removed between cluster states"
argument_list|,
name|event
operator|.
name|nodesRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Nodes should have been added between cluster states"
argument_list|,
name|event
operator|.
name|nodesAdded
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Nodes should have been changed between cluster states"
argument_list|,
name|event
operator|.
name|nodesChanged
argument_list|()
argument_list|)
expr_stmt|;
comment|// test when nodes both added and removed between cluster states
comment|// here we reuse the newState from the previous run which already added extra nodes
name|newState
operator|=
name|nextState
argument_list|(
name|newState
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|originalState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Nodes should have been removed between cluster states"
argument_list|,
name|event
operator|.
name|nodesRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Nodes should have been added between cluster states"
argument_list|,
name|event
operator|.
name|nodesAdded
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Nodes should have been changed between cluster states"
argument_list|,
name|event
operator|.
name|nodesChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the routing table changes checks.      */
DECL|method|testRoutingTableChanges
specifier|public
name|void
name|testRoutingTableChanges
parameter_list|()
block|{
specifier|final
name|int
name|numNodesInCluster
init|=
literal|3
decl_stmt|;
specifier|final
name|ClusterState
name|originalState
init|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
decl_stmt|;
comment|// routing tables and index routing tables are same object
name|ClusterState
name|newState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|originalState
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterChangedEvent
name|event
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|originalState
argument_list|,
name|newState
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"routing tables should be the same object"
argument_list|,
name|event
operator|.
name|routingTableChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"index routing table should be the same object"
argument_list|,
name|event
operator|.
name|indexRoutingTableChanged
argument_list|(
name|initialIndices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// routing tables and index routing tables aren't same object
name|newState
operator|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|originalState
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"routing tables should not be the same object"
argument_list|,
name|event
operator|.
name|routingTableChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"index routing table should not be the same object"
argument_list|,
name|event
operator|.
name|indexRoutingTableChanged
argument_list|(
name|initialIndices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// index routing tables are different because they don't exist
name|newState
operator|=
name|createState
argument_list|(
name|numNodesInCluster
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|initialIndices
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|initialIndices
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|originalState
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"routing tables should not be the same object"
argument_list|,
name|event
operator|.
name|routingTableChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"index routing table should not be the same object"
argument_list|,
name|event
operator|.
name|indexRoutingTableChanged
argument_list|(
name|initialIndices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createSimpleClusterState
specifier|private
specifier|static
name|ClusterState
name|createSimpleClusterState
parameter_list|()
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|TEST_CLUSTER_NAME
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create a basic cluster state with a given set of indices
DECL|method|createState
specifier|private
specifier|static
name|ClusterState
name|createState
parameter_list|(
specifier|final
name|int
name|numNodes
parameter_list|,
specifier|final
name|boolean
name|isLocalMaster
parameter_list|,
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|indices
parameter_list|)
block|{
specifier|final
name|MetaData
name|metaData
init|=
name|createMetaData
argument_list|(
name|indices
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|TEST_CLUSTER_NAME
argument_list|)
operator|.
name|nodes
argument_list|(
name|createDiscoveryNodes
argument_list|(
name|numNodes
argument_list|,
name|isLocalMaster
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|createRoutingTable
argument_list|(
literal|1
argument_list|,
name|metaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create a non-initialized cluster state
DECL|method|createNonInitializedState
specifier|private
specifier|static
name|ClusterState
name|createNonInitializedState
parameter_list|(
specifier|final
name|int
name|numNodes
parameter_list|,
specifier|final
name|boolean
name|isLocalMaster
parameter_list|)
block|{
specifier|final
name|ClusterState
name|withoutBlock
init|=
name|createState
argument_list|(
name|numNodes
argument_list|,
name|isLocalMaster
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|withoutBlock
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addGlobalBlock
argument_list|(
name|GatewayService
operator|.
name|STATE_NOT_RECOVERED_BLOCK
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create a modified cluster state from another one, but with some number of indices added and deleted.
DECL|method|nextState
specifier|private
specifier|static
name|ClusterState
name|nextState
parameter_list|(
specifier|final
name|ClusterState
name|previousState
parameter_list|,
specifier|final
name|boolean
name|changeClusterUUID
parameter_list|,
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|addedIndices
parameter_list|,
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|deletedIndices
parameter_list|,
specifier|final
name|int
name|numNodesToRemove
parameter_list|)
block|{
specifier|final
name|ClusterState
operator|.
name|Builder
name|builder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|previousState
argument_list|)
decl_stmt|;
name|builder
operator|.
name|stateUUID
argument_list|(
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MetaData
operator|.
name|Builder
name|metaBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|previousState
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeClusterUUID
operator|||
name|addedIndices
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|deletedIndices
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// there is some change in metadata cluster state
if|if
condition|(
name|changeClusterUUID
condition|)
block|{
name|metaBuilder
operator|.
name|clusterUUID
argument_list|(
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Index
name|index
range|:
name|addedIndices
control|)
block|{
name|metaBuilder
operator|.
name|put
argument_list|(
name|createIndexMetadata
argument_list|(
name|index
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Index
name|index
range|:
name|deletedIndices
control|)
block|{
name|metaBuilder
operator|.
name|remove
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|IndexGraveyard
operator|.
name|Builder
name|graveyardBuilder
init|=
name|IndexGraveyard
operator|.
name|builder
argument_list|(
name|metaBuilder
operator|.
name|indexGraveyard
argument_list|()
argument_list|)
decl_stmt|;
name|graveyardBuilder
operator|.
name|addTombstone
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|metaBuilder
operator|.
name|indexGraveyard
argument_list|(
name|graveyardBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|metaData
argument_list|(
name|metaBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numNodesToRemove
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|discoveryNodesSize
init|=
name|previousState
operator|.
name|getNodes
argument_list|()
operator|.
name|getSize
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNodes
operator|.
name|Builder
name|nodesBuilder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|previousState
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodesToRemove
operator|&&
name|i
operator|<
name|discoveryNodesSize
condition|;
name|i
operator|++
control|)
block|{
name|nodesBuilder
operator|.
name|remove
argument_list|(
name|NODE_ID_PREFIX
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|nodes
argument_list|(
name|nodesBuilder
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create the discovery nodes for a cluster state.  For our testing purposes, we want
comment|// the first to be master, the second to be master eligible, the third to be a data node,
comment|// and the remainder can be any kinds of nodes (master eligible, data, or both).
DECL|method|createDiscoveryNodes
specifier|private
specifier|static
name|DiscoveryNodes
name|createDiscoveryNodes
parameter_list|(
specifier|final
name|int
name|numNodes
parameter_list|,
specifier|final
name|boolean
name|isLocalMaster
parameter_list|)
block|{
assert|assert
operator|(
name|numNodes
operator|>=
literal|3
operator|)
operator|:
literal|"the initial cluster state for event change tests should have a minimum of 3 nodes "
operator|+
literal|"so there are a minimum of 2 master nodes for testing master change events."
assert|;
specifier|final
name|DiscoveryNodes
operator|.
name|Builder
name|builder
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|localNodeIndex
init|=
name|isLocalMaster
condition|?
literal|0
else|:
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numNodes
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// randomly assign the local node if not master
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|nodeId
init|=
name|NODE_ID_PREFIX
operator|+
name|i
decl_stmt|;
name|Set
argument_list|<
name|DiscoveryNode
operator|.
name|Role
argument_list|>
name|roles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// the master node
name|builder
operator|.
name|masterNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|roles
operator|.
name|add
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
comment|// the alternate master node
name|roles
operator|.
name|add
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
comment|// we need at least one data node
name|roles
operator|.
name|add
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// remaining nodes can be anything (except for master)
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
name|nodeId
argument_list|,
name|roles
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|localNodeIndex
condition|)
block|{
name|builder
operator|.
name|localNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create a new DiscoveryNode
DECL|method|newNode
specifier|private
specifier|static
name|DiscoveryNode
name|newNode
parameter_list|(
specifier|final
name|String
name|nodeId
parameter_list|,
name|Set
argument_list|<
name|DiscoveryNode
operator|.
name|Role
argument_list|>
name|roles
parameter_list|)
block|{
return|return
operator|new
name|DiscoveryNode
argument_list|(
name|nodeId
argument_list|,
name|nodeId
argument_list|,
name|nodeId
argument_list|,
literal|"host"
argument_list|,
literal|"host_address"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|roles
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
comment|// Create the metadata for a cluster state.
DECL|method|createMetaData
specifier|private
specifier|static
name|MetaData
name|createMetaData
parameter_list|(
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|indices
parameter_list|)
block|{
specifier|final
name|MetaData
operator|.
name|Builder
name|builder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|clusterUUID
argument_list|(
name|INITIAL_CLUSTER_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|Index
name|index
range|:
name|indices
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|createIndexMetadata
argument_list|(
name|index
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create the index metadata for a given index.
DECL|method|createIndexMetadata
specifier|private
specifier|static
name|IndexMetaData
name|createIndexMetadata
parameter_list|(
specifier|final
name|Index
name|index
parameter_list|)
block|{
return|return
name|createIndexMetadata
argument_list|(
name|index
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|// Create the index metadata for a given index, with the specified version.
DECL|method|createIndexMetadata
specifier|private
specifier|static
name|IndexMetaData
name|createIndexMetadata
parameter_list|(
specifier|final
name|Index
name|index
parameter_list|,
specifier|final
name|long
name|version
parameter_list|)
block|{
specifier|final
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|,
name|index
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|creationDate
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create the routing table for a cluster state.
DECL|method|createRoutingTable
specifier|private
specifier|static
name|RoutingTable
name|createRoutingTable
parameter_list|(
specifier|final
name|long
name|version
parameter_list|,
specifier|final
name|MetaData
name|metaData
parameter_list|)
block|{
specifier|final
name|RoutingTable
operator|.
name|Builder
name|builder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|version
argument_list|(
name|version
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|indices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|addAsNew
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Create a list of indices to add
DECL|method|addIndices
specifier|private
specifier|static
name|List
argument_list|<
name|Index
argument_list|>
name|addIndices
parameter_list|(
specifier|final
name|int
name|numIndices
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|Index
argument_list|(
literal|"newIdx_"
operator|+
name|id
operator|+
literal|"_"
operator|+
name|i
argument_list|,
name|UUIDs
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|// Create a list of indices to delete from a list that already belongs to a particular cluster state.
DECL|method|delIndices
specifier|private
specifier|static
name|List
argument_list|<
name|Index
argument_list|>
name|delIndices
parameter_list|(
specifier|final
name|int
name|numIndices
parameter_list|,
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|currIndices
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|currIndices
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|// execute the indices changes test by generating random index additions and deletions and
comment|// checking the values on the cluster changed event.
DECL|method|executeIndicesChangesTest
specifier|private
specifier|static
name|ClusterState
name|executeIndicesChangesTest
parameter_list|(
specifier|final
name|ClusterState
name|previousState
parameter_list|,
specifier|final
name|TombstoneDeletionQuantity
name|deletionQuantity
parameter_list|)
block|{
specifier|final
name|int
name|numAdd
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// add random # of indices to the next cluster state
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|stateIndices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|IndexMetaData
argument_list|>
name|iter
init|=
name|previousState
operator|.
name|metaData
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|valuesIt
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|stateIndices
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numDel
decl_stmt|;
switch|switch
condition|(
name|deletionQuantity
condition|)
block|{
case|case
name|DELETE_ALL
case|:
block|{
name|numDel
operator|=
name|stateIndices
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DELETE_NONE
case|:
block|{
name|numDel
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|DELETE_RANDOM
case|:
block|{
name|numDel
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|stateIndices
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unhandled mode ["
operator|+
name|deletionQuantity
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|changeClusterUUID
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Index
argument_list|>
name|addedIndices
init|=
name|addIndices
argument_list|(
name|numAdd
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Index
argument_list|>
name|delIndices
decl_stmt|;
if|if
condition|(
name|changeClusterUUID
condition|)
block|{
name|delIndices
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|delIndices
operator|=
name|delIndices
argument_list|(
name|numDel
argument_list|,
name|stateIndices
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ClusterState
name|newState
init|=
name|nextState
argument_list|(
name|previousState
argument_list|,
name|changeClusterUUID
argument_list|,
name|addedIndices
argument_list|,
name|delIndices
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ClusterChangedEvent
name|event
init|=
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"_na_"
argument_list|,
name|newState
argument_list|,
name|previousState
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|addsFromEvent
init|=
name|event
operator|.
name|indicesCreated
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Index
argument_list|>
name|delsFromEvent
init|=
name|event
operator|.
name|indicesDeleted
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|addsFromEvent
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|addedIndices
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Index
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|delsFromEvent
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|delIndices
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event
operator|.
name|metaDataChanged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|changeClusterUUID
operator|||
name|addedIndices
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|delIndices
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexGraveyard
name|newGraveyard
init|=
name|event
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|indexGraveyard
argument_list|()
decl_stmt|;
specifier|final
name|IndexGraveyard
name|oldGraveyard
init|=
name|event
operator|.
name|previousState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|indexGraveyard
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|IndexGraveyard
operator|.
name|IndexGraveyardDiff
operator|)
name|newGraveyard
operator|.
name|diff
argument_list|(
name|oldGraveyard
argument_list|)
operator|)
operator|.
name|getAdded
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|delIndices
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newState
return|;
block|}
DECL|enum|TombstoneDeletionQuantity
specifier|private
enum|enum
name|TombstoneDeletionQuantity
block|{
DECL|enum constant|DELETE_RANDOM
name|DELETE_RANDOM
block|,
comment|// delete a random number of tombstones from cluster state (not zero and not all)
DECL|enum constant|DELETE_NONE
name|DELETE_NONE
block|,
comment|// delete none of the tombstones from cluster state
DECL|enum constant|DELETE_ALL
name|DELETE_ALL
block|;
comment|// delete all tombstones from cluster state
DECL|method|valuesInRandomizedOrder
specifier|static
name|List
argument_list|<
name|TombstoneDeletionQuantity
argument_list|>
name|valuesInRandomizedOrder
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|TombstoneDeletionQuantity
argument_list|>
name|randomOrderQuantities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|TombstoneDeletionQuantity
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|randomOrderQuantities
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|randomOrderQuantities
return|;
block|}
block|}
block|}
end_class

end_unit

