begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.serialization
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|serialization
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|AbstractDiffable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiffableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|DiffableUtils
operator|.
name|MapDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenIntMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|DiffableTests
specifier|public
class|class
name|DiffableTests
extends|extends
name|ESTestCase
block|{
DECL|method|testJKDMapDiff
specifier|public
name|void
name|testJKDMapDiff
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|JdkMapDriver
argument_list|<
name|TestDiffable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|diffableValues
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TestDiffable
name|createValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|boolean
name|before
parameter_list|)
block|{
return|return
operator|new
name|TestDiffable
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|before
condition|?
name|key
else|:
name|key
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|diff
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|TestDiffable
argument_list|>
name|before
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|TestDiffable
argument_list|>
name|after
parameter_list|)
block|{
return|return
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|useProtoForDiffableSerialization
condition|?
name|DiffableUtils
operator|.
name|readJdkMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|TestDiffable
operator|::
name|readFrom
argument_list|,
name|TestDiffable
operator|::
name|readDiffFrom
argument_list|)
else|:
name|DiffableUtils
operator|.
name|readJdkMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|diffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|()
expr_stmt|;
operator|new
name|JdkMapDriver
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|diffableValues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|createValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|boolean
name|before
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|before
condition|?
name|key
else|:
name|key
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|diff
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|before
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|after
parameter_list|)
block|{
return|return
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|nonDiffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DiffableUtils
operator|.
name|readJdkMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|nonDiffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
DECL|method|testImmutableOpenMapDiff
specifier|public
name|void
name|testImmutableOpenMapDiff
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|ImmutableOpenMapDriver
argument_list|<
name|TestDiffable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|diffableValues
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TestDiffable
name|createValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|boolean
name|before
parameter_list|)
block|{
return|return
operator|new
name|TestDiffable
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|before
condition|?
name|key
else|:
name|key
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|diff
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|TestDiffable
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|TestDiffable
argument_list|>
name|after
parameter_list|)
block|{
return|return
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|useProtoForDiffableSerialization
condition|?
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|TestDiffable
operator|::
name|readFrom
argument_list|,
name|TestDiffable
operator|::
name|readDiffFrom
argument_list|)
else|:
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|diffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|()
expr_stmt|;
operator|new
name|ImmutableOpenMapDriver
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|diffableValues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|createValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|boolean
name|before
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|before
condition|?
name|key
else|:
name|key
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|diff
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|after
parameter_list|)
block|{
return|return
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|nonDiffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DiffableUtils
operator|.
name|readImmutableOpenMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|nonDiffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
DECL|method|testImmutableOpenIntMapDiff
specifier|public
name|void
name|testImmutableOpenIntMapDiff
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|ImmutableOpenIntMapDriver
argument_list|<
name|TestDiffable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|diffableValues
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TestDiffable
name|createValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|boolean
name|before
parameter_list|)
block|{
return|return
operator|new
name|TestDiffable
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|before
condition|?
name|key
else|:
name|key
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|diff
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|TestDiffable
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenIntMap
argument_list|<
name|TestDiffable
argument_list|>
name|after
parameter_list|)
block|{
return|return
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|useProtoForDiffableSerialization
condition|?
name|DiffableUtils
operator|.
name|readImmutableOpenIntMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|TestDiffable
operator|::
name|readFrom
argument_list|,
name|TestDiffable
operator|::
name|readDiffFrom
argument_list|)
else|:
name|DiffableUtils
operator|.
name|readImmutableOpenIntMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|diffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|()
expr_stmt|;
operator|new
name|ImmutableOpenIntMapDriver
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|diffableValues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|createValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|boolean
name|before
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|before
condition|?
name|key
else|:
name|key
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|diff
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|String
argument_list|>
name|before
parameter_list|,
name|ImmutableOpenIntMap
argument_list|<
name|String
argument_list|>
name|after
parameter_list|)
block|{
return|return
name|DiffableUtils
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|keySerializer
argument_list|,
name|nonDiffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MapDiff
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DiffableUtils
operator|.
name|readImmutableOpenIntMapDiff
argument_list|(
name|in
argument_list|,
name|keySerializer
argument_list|,
name|nonDiffableValueSerializer
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|/**      * Class that abstracts over specific map implementation type and value kind (Diffable or not)      * @param<T> map type      * @param<V> value type      */
DECL|class|MapDriver
specifier|public
specifier|abstract
class|class
name|MapDriver
parameter_list|<
name|T
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|keys
specifier|protected
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
name|randomPositiveIntSet
argument_list|()
decl_stmt|;
DECL|field|keysToRemove
specifier|protected
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|keysToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|keysThatAreNotRemoved
specifier|protected
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|keysThatAreNotRemoved
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|keys
argument_list|,
name|keysToRemove
argument_list|)
decl_stmt|;
DECL|field|keysToOverride
specifier|protected
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|keysToOverride
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|keysThatAreNotRemoved
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|keysThatAreNotRemoved
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|keysThatAreNotRemoved
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|keysToAdd
specifier|protected
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|keysToAdd
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|randomPositiveIntSet
argument_list|()
argument_list|,
name|keys
argument_list|)
decl_stmt|;
comment|// make sure keysToAdd does not contain elements in keys
DECL|field|keysUnchanged
specifier|protected
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|keysUnchanged
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|keysThatAreNotRemoved
argument_list|,
name|keysToOverride
argument_list|)
decl_stmt|;
DECL|field|keySerializer
specifier|protected
specifier|final
name|DiffableUtils
operator|.
name|KeySerializer
argument_list|<
name|Integer
argument_list|>
name|keySerializer
init|=
name|randomBoolean
argument_list|()
condition|?
name|DiffableUtils
operator|.
name|getIntKeySerializer
argument_list|()
else|:
name|DiffableUtils
operator|.
name|getVIntKeySerializer
argument_list|()
decl_stmt|;
DECL|field|useProtoForDiffableSerialization
specifier|protected
specifier|final
name|boolean
name|useProtoForDiffableSerialization
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
DECL|method|randomPositiveIntSet
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|randomPositiveIntSet
parameter_list|()
block|{
name|int
name|maxSetSize
init|=
name|randomInt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxSetSize
condition|;
name|i
operator|++
control|)
block|{
comment|// due to duplicates, set size can be smaller than maxSetSize
name|result
operator|.
name|add
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**          * whether we operate on {@link org.elasticsearch.cluster.Diffable} values          */
DECL|method|diffableValues
specifier|protected
specifier|abstract
name|boolean
name|diffableValues
parameter_list|()
function_decl|;
comment|/**          * functions that determines value in "before" or "after" map based on key          */
DECL|method|createValue
specifier|protected
specifier|abstract
name|V
name|createValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|boolean
name|before
parameter_list|)
function_decl|;
comment|/**          * creates map based on JDK-based map          */
DECL|method|createMap
specifier|protected
specifier|abstract
name|T
name|createMap
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|values
parameter_list|)
function_decl|;
comment|/**          * calculates diff between two maps          */
DECL|method|diff
specifier|protected
specifier|abstract
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|,
name|T
argument_list|>
name|diff
parameter_list|(
name|T
name|before
parameter_list|,
name|T
name|after
parameter_list|)
function_decl|;
comment|/**          * reads diff of maps from stream          */
DECL|method|readDiff
specifier|protected
specifier|abstract
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|,
name|T
argument_list|>
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * gets element at key "key" in map "map"          */
DECL|method|get
specifier|protected
specifier|abstract
name|V
name|get
parameter_list|(
name|T
name|map
parameter_list|,
name|Integer
name|key
parameter_list|)
function_decl|;
comment|/**          * returns size of given map          */
DECL|method|size
specifier|protected
specifier|abstract
name|int
name|size
parameter_list|(
name|T
name|map
parameter_list|)
function_decl|;
comment|/**          * executes the actual test          */
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Keys in 'before' map: {}"
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Keys to remove: {}"
argument_list|,
name|keysToRemove
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Keys to override: {}"
argument_list|,
name|keysToOverride
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Keys to add: {}"
argument_list|,
name|keysToAdd
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> creating 'before' map"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|before
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keys
control|)
block|{
name|before
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|createValue
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|T
name|beforeMap
init|=
name|createMap
argument_list|(
name|before
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> creating 'after' map"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|after
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|after
operator|.
name|putAll
argument_list|(
name|before
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keysToRemove
control|)
block|{
name|after
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|key
range|:
name|keysToOverride
control|)
block|{
name|after
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|createValue
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|key
range|:
name|keysToAdd
control|)
block|{
name|after
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|createValue
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|T
name|afterMap
init|=
name|createMap
argument_list|(
name|unmodifiableMap
argument_list|(
name|after
argument_list|)
argument_list|)
decl_stmt|;
name|MapDiff
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|,
name|T
argument_list|>
name|diffMap
init|=
name|diff
argument_list|(
name|beforeMap
argument_list|,
name|afterMap
argument_list|)
decl_stmt|;
comment|// check properties of diffMap
name|assertThat
argument_list|(
operator|new
name|HashSet
argument_list|(
name|diffMap
operator|.
name|getDeletes
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|keysToRemove
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|diffableValues
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|diffMap
operator|.
name|getDiffs
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|keysToOverride
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keysToOverride
control|)
block|{
name|assertThat
argument_list|(
name|diffMap
operator|.
name|getDiffs
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|apply
argument_list|(
name|get
argument_list|(
name|beforeMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|get
argument_list|(
name|afterMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|diffMap
operator|.
name|getUpserts
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|keysToAdd
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keysToAdd
control|)
block|{
name|assertThat
argument_list|(
name|diffMap
operator|.
name|getUpserts
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|get
argument_list|(
name|afterMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertThat
argument_list|(
name|diffMap
operator|.
name|getDiffs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keysToAddAndOverride
init|=
name|Sets
operator|.
name|union
argument_list|(
name|keysToAdd
argument_list|,
name|keysToOverride
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|diffMap
operator|.
name|getUpserts
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|keysToAddAndOverride
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keysToAddAndOverride
control|)
block|{
name|assertThat
argument_list|(
name|diffMap
operator|.
name|getUpserts
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|get
argument_list|(
name|afterMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"--> serializing diff"
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|diffMap
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|in
init|=
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> reading diff back"
argument_list|)
expr_stmt|;
name|diffMap
operator|=
name|readDiff
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|T
name|appliedDiffMap
init|=
name|diffMap
operator|.
name|apply
argument_list|(
name|beforeMap
argument_list|)
decl_stmt|;
comment|// check properties of appliedDiffMap
name|assertThat
argument_list|(
name|size
argument_list|(
name|appliedDiffMap
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|keys
operator|.
name|size
argument_list|()
operator|-
name|keysToRemove
operator|.
name|size
argument_list|()
operator|+
name|keysToAdd
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keysToRemove
control|)
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|appliedDiffMap
argument_list|,
name|key
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|key
range|:
name|keysUnchanged
control|)
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|appliedDiffMap
argument_list|,
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|get
argument_list|(
name|beforeMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|key
range|:
name|keysToOverride
control|)
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|appliedDiffMap
argument_list|,
name|key
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|get
argument_list|(
name|beforeMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
argument_list|(
name|appliedDiffMap
argument_list|,
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|get
argument_list|(
name|afterMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|key
range|:
name|keysToAdd
control|)
block|{
name|assertThat
argument_list|(
name|get
argument_list|(
name|appliedDiffMap
argument_list|,
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|get
argument_list|(
name|afterMap
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|JdkMapDriver
specifier|abstract
class|class
name|JdkMapDriver
parameter_list|<
name|V
parameter_list|>
extends|extends
name|MapDriver
argument_list|<
name|Map
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createMap
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|createMap
parameter_list|(
name|Map
name|values
parameter_list|)
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|protected
name|V
name|get
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|Integer
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|protected
name|int
name|size
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
block|}
DECL|class|ImmutableOpenMapDriver
specifier|abstract
class|class
name|ImmutableOpenMapDriver
parameter_list|<
name|V
parameter_list|>
extends|extends
name|MapDriver
argument_list|<
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createMap
specifier|protected
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|createMap
parameter_list|(
name|Map
name|values
parameter_list|)
block|{
return|return
name|ImmutableOpenMap
operator|.
expr|<
name|Integer
operator|,
name|V
operator|>
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|values
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|protected
name|V
name|get
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|Integer
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|protected
name|int
name|size
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|Integer
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
block|}
DECL|class|ImmutableOpenIntMapDriver
specifier|abstract
class|class
name|ImmutableOpenIntMapDriver
parameter_list|<
name|V
parameter_list|>
extends|extends
name|MapDriver
argument_list|<
name|ImmutableOpenIntMap
argument_list|<
name|V
argument_list|>
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createMap
specifier|protected
name|ImmutableOpenIntMap
argument_list|<
name|V
argument_list|>
name|createMap
parameter_list|(
name|Map
name|values
parameter_list|)
block|{
return|return
name|ImmutableOpenIntMap
operator|.
expr|<
name|V
operator|>
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|values
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|protected
name|V
name|get
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|V
argument_list|>
name|map
parameter_list|,
name|Integer
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|protected
name|int
name|size
parameter_list|(
name|ImmutableOpenIntMap
argument_list|<
name|V
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
block|}
DECL|method|diffableValueSerializer
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|DiffableUtils
operator|.
name|DiffableValueSerializer
argument_list|<
name|K
argument_list|,
name|TestDiffable
argument_list|>
name|diffableValueSerializer
parameter_list|()
block|{
return|return
operator|new
name|DiffableUtils
operator|.
name|DiffableValueSerializer
argument_list|<
name|K
argument_list|,
name|TestDiffable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestDiffable
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestDiffable
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Diff
argument_list|<
name|TestDiffable
argument_list|>
name|readDiff
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|AbstractDiffable
operator|.
name|readDiffFrom
argument_list|(
name|TestDiffable
operator|::
name|readFrom
argument_list|,
name|in
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|nonDiffableValueSerializer
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|DiffableUtils
operator|.
name|NonDiffableValueSerializer
argument_list|<
name|K
argument_list|,
name|String
argument_list|>
name|nonDiffableValueSerializer
parameter_list|()
block|{
return|return
operator|new
name|DiffableUtils
operator|.
name|NonDiffableValueSerializer
argument_list|<
name|K
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|String
name|value
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readString
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|class|TestDiffable
specifier|public
specifier|static
class|class
name|TestDiffable
extends|extends
name|AbstractDiffable
argument_list|<
name|TestDiffable
argument_list|>
block|{
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|TestDiffable
specifier|public
name|TestDiffable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|value
specifier|public
name|String
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|readFrom
specifier|public
specifier|static
name|TestDiffable
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestDiffable
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readDiffFrom
specifier|public
specifier|static
name|Diff
argument_list|<
name|TestDiffable
argument_list|>
name|readDiffFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readDiffFrom
argument_list|(
name|TestDiffable
operator|::
name|readFrom
argument_list|,
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TestDiffable
name|that
init|=
operator|(
name|TestDiffable
operator|)
name|o
decl_stmt|;
return|return
operator|!
operator|(
name|value
operator|!=
literal|null
condition|?
operator|!
name|value
operator|.
name|equals
argument_list|(
name|that
operator|.
name|value
argument_list|)
else|:
name|that
operator|.
name|value
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

