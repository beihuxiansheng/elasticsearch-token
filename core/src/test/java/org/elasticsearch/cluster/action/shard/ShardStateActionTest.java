begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.action.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ShardStateActionTest
specifier|public
class|class
name|ShardStateActionTest
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|testShardFiltering
specifier|public
name|void
name|testShardFiltering
parameter_list|()
block|{
specifier|final
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|,
literal|"test_uuid"
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|2
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
operator|.
name|Builder
name|stateBuilder
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|masterNodeId
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|initShard
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"node1"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|startedShard
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|"node2"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ShardRouting
name|relocatingShard
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|2
argument_list|,
literal|"node1"
argument_list|,
literal|"node2"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|RELOCATING
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|stateBuilder
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|IndexRoutingTable
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|initShard
operator|.
name|shardId
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|addShard
argument_list|(
name|initShard
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|startedShard
operator|.
name|shardId
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|addShard
argument_list|(
name|startedShard
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addIndexShard
argument_list|(
operator|new
name|IndexShardRoutingTable
operator|.
name|Builder
argument_list|(
name|relocatingShard
operator|.
name|shardId
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|addShard
argument_list|(
name|relocatingShard
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
name|stateBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ShardStateAction
operator|.
name|ShardRoutingEntry
argument_list|>
name|listToFilter
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ShardStateAction
operator|.
name|ShardRoutingEntry
argument_list|>
name|expectedToBeApplied
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|listToFilter
operator|.
name|add
argument_list|(
operator|new
name|ShardStateAction
operator|.
name|ShardRoutingEntry
argument_list|(
name|initShard
argument_list|,
name|indexMetaData
operator|.
name|uuid
argument_list|()
operator|+
literal|"_suffix"
argument_list|,
literal|"wrong_uuid"
argument_list|)
argument_list|)
expr_stmt|;
name|listToFilter
operator|.
name|add
argument_list|(
operator|new
name|ShardStateAction
operator|.
name|ShardRoutingEntry
argument_list|(
name|relocatingShard
operator|.
name|buildTargetRelocatingShard
argument_list|()
argument_list|,
name|indexMetaData
operator|.
name|uuid
argument_list|()
argument_list|,
literal|"relocating_to_node"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedToBeApplied
operator|.
name|add
argument_list|(
name|listToFilter
operator|.
name|get
argument_list|(
name|listToFilter
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|listToFilter
operator|.
name|add
argument_list|(
operator|new
name|ShardStateAction
operator|.
name|ShardRoutingEntry
argument_list|(
name|startedShard
argument_list|,
name|indexMetaData
operator|.
name|uuid
argument_list|()
argument_list|,
literal|"started shard"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedToBeApplied
operator|.
name|add
argument_list|(
name|listToFilter
operator|.
name|get
argument_list|(
name|listToFilter
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|listToFilter
operator|.
name|add
argument_list|(
operator|new
name|ShardStateAction
operator|.
name|ShardRoutingEntry
argument_list|(
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|initShard
operator|.
name|index
argument_list|()
operator|+
literal|"_NA"
argument_list|,
name|initShard
operator|.
name|id
argument_list|()
argument_list|,
name|initShard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|initShard
operator|.
name|primary
argument_list|()
argument_list|,
name|initShard
operator|.
name|state
argument_list|()
argument_list|,
name|initShard
operator|.
name|version
argument_list|()
argument_list|)
argument_list|,
name|indexMetaData
operator|.
name|uuid
argument_list|()
argument_list|,
literal|"wrong_uuid"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShardStateAction
operator|.
name|ShardRoutingEntry
argument_list|>
name|toBeApplied
init|=
name|ShardStateAction
operator|.
name|extractShardsToBeApplied
argument_list|(
name|listToFilter
argument_list|,
literal|"for testing"
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
argument_list|,
name|logger
argument_list|)
decl_stmt|;
if|if
condition|(
name|toBeApplied
operator|.
name|size
argument_list|()
operator|!=
name|expectedToBeApplied
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"size mismatch.\n Got: \n ["
operator|+
name|toBeApplied
operator|+
literal|"], \n expected: \n ["
operator|+
name|expectedToBeApplied
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toBeApplied
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ShardStateAction
operator|.
name|ShardRoutingEntry
name|found
init|=
name|toBeApplied
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ShardStateAction
operator|.
name|ShardRoutingEntry
name|expected
init|=
name|expectedToBeApplied
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|found
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

