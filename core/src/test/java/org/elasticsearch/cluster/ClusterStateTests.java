begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ClusterStateTests
specifier|public
class|class
name|ClusterStateTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSupersedes
specifier|public
name|void
name|testSupersedes
parameter_list|()
block|{
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
specifier|final
name|DiscoveryNode
name|node1
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node1"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|version
argument_list|)
decl_stmt|;
specifier|final
name|DiscoveryNode
name|node2
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"node2"
argument_list|,
name|buildNewFakeTransportAddress
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|version
argument_list|)
decl_stmt|;
specifier|final
name|DiscoveryNodes
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|node1
argument_list|)
operator|.
name|add
argument_list|(
name|node2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterName
name|name
init|=
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|ClusterState
name|noMaster1
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|name
argument_list|)
operator|.
name|version
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|noMaster2
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|name
argument_list|)
operator|.
name|version
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|withMaster1a
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|name
argument_list|)
operator|.
name|version
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodes
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|withMaster1b
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|name
argument_list|)
operator|.
name|version
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodes
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|node1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|withMaster2
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|name
argument_list|)
operator|.
name|version
argument_list|(
name|randomInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|nodes
argument_list|)
operator|.
name|masterNodeId
argument_list|(
name|node2
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// states with no master should never supersede anything
name|assertFalse
argument_list|(
name|noMaster1
operator|.
name|supersedes
argument_list|(
name|noMaster2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|noMaster1
operator|.
name|supersedes
argument_list|(
name|withMaster1a
argument_list|)
argument_list|)
expr_stmt|;
comment|// states should never supersede states from another master
name|assertFalse
argument_list|(
name|withMaster1a
operator|.
name|supersedes
argument_list|(
name|withMaster2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|withMaster1a
operator|.
name|supersedes
argument_list|(
name|noMaster1
argument_list|)
argument_list|)
expr_stmt|;
comment|// state from the same master compare by version
name|assertThat
argument_list|(
name|withMaster1a
operator|.
name|supersedes
argument_list|(
name|withMaster1b
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|withMaster1a
operator|.
name|version
argument_list|()
operator|>
name|withMaster1b
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

