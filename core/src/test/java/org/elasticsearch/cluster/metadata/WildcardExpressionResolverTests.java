begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|WildcardExpressionResolverTests
specifier|public
class|class
name|WildcardExpressionResolverTests
extends|extends
name|ESTestCase
block|{
DECL|method|testConvertWildcardsJustIndicesTests
specifier|public
name|void
name|testConvertWildcardsJustIndicesTests
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
name|resolver
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testXXX"
argument_list|,
literal|"ku*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"kuku"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testX*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testX*"
argument_list|,
literal|"kuku"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"kuku"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|,
literal|"kuku"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*"
argument_list|,
literal|"-kuku"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testXXX"
argument_list|,
literal|"+testYYY"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testXXX"
argument_list|,
literal|"-testXXX"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"-testXXX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testXXX"
argument_list|,
literal|"+testY*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testXXX"
argument_list|,
literal|"-testX*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertWildcardsTests
specifier|public
name|void
name|testConvertWildcardsTests
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias1"
argument_list|)
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
name|resolver
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testYY*"
argument_list|,
literal|"alias*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-kuku"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"-kuku"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"+test*"
argument_list|,
literal|"-testYYY"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"+testX*"
argument_list|,
literal|"+testYYY"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"+testYYY"
argument_list|,
literal|"+testX*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConvertWildcardsOpenClosedIndicesTests
specifier|public
name|void
name|testConvertWildcardsOpenClosedIndicesTests
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXY"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYX"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
name|resolver
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testX*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testX*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testX*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// issue #13334
DECL|method|testMultipleWildcards
specifier|public
name|void
name|testMultipleWildcards
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kukuYYY"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
name|resolver
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test*X*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test*X*Y"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"kuku*Y*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"kukuYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*Y*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|,
literal|"kukuYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test*Y*X"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*Y*X"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAll
specifier|public
name|void
name|testAll
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
name|resolver
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|WildcardExpressionResolver
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"_all"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexBuilder
specifier|private
name|IndexMetaData
operator|.
name|Builder
name|indexBuilder
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

