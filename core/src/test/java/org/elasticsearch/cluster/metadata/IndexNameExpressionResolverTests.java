begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayContaining
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayContainingInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyArray
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|IndexNameExpressionResolverTests
specifier|public
class|class
name|IndexNameExpressionResolverTests
extends|extends
name|ESTestCase
block|{
DECL|field|indexNameExpressionResolver
specifier|private
specifier|final
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
init|=
operator|new
name|IndexNameExpressionResolver
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|method|testIndexOptionsStrict
specifier|public
name|void
name|testIndexOptionsStrict
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo-closed"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"barbaz"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesOptions
index|[]
name|indicesOptions
init|=
operator|new
name|IndicesOptions
index|[]
block|{
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
block|,
name|IndicesOptions
operator|.
name|strictExpand
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|IndicesOptions
name|options
range|:
name|indicesOptions
control|)
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoo"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foofoo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"barbaz"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foofoo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"barbaz"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpand
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|"foofoo"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpand
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|"foofoo"
argument_list|,
literal|"foofoo-closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOptionsLenient
specifier|public
name|void
name|testIndexOptionsLenient
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo-closed"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"barbaz"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesOptions
name|lenientExpand
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndicesOptions
index|[]
name|indicesOptions
init|=
operator|new
name|IndicesOptions
index|[]
block|{
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
block|,
name|lenientExpand
block|}
decl_stmt|;
for|for
control|(
name|IndicesOptions
name|options
range|:
name|indicesOptions
control|)
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoo"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foofoo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"barbaz"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foofoo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"barbaz"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foofoo"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|lenientExpand
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|results
argument_list|)
argument_list|,
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|"foofoo"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|lenientExpand
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|,
literal|"foofoo"
argument_list|,
literal|"foofoo-closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOptionsAllowUnavailableDisallowEmpty
specifier|public
name|void
name|testIndexOptionsAllowUnavailableDisallowEmpty
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo-closed"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"barbaz"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesOptions
name|expandOpen
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndicesOptions
name|expand
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndicesOptions
index|[]
name|indicesOptions
init|=
operator|new
name|IndicesOptions
index|[]
block|{
name|expandOpen
block|,
name|expand
block|}
decl_stmt|;
for|for
control|(
name|IndicesOptions
name|options
range|:
name|indicesOptions
control|)
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|expandOpen
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|expand
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOptionsWildcardExpansion
specifier|public
name|void
name|testIndexOptionsWildcardExpansion
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"barbaz"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Only closed
name|IndicesOptions
name|options
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// no wildcards, so wildcard expansion don't apply
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Only open
name|options
operator|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"bar"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Open and closed
name|options
operator|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"bar"
argument_list|,
literal|"foobar"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foobar"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"*"
argument_list|,
literal|"-foo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"-*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|options
operator|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"-*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getResourceId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[-*]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexOptionsNoExpandWildcards
specifier|public
name|void
name|testIndexOptionsNoExpandWildcards
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo-closed"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"barbaz"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//ignore unavailable and allow no indices
block|{
name|IndicesOptions
name|noExpandLenient
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|noExpandLenient
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|//ignore unavailable but don't allow no indices
block|{
name|IndicesOptions
name|noExpandDisallowEmpty
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|noExpandDisallowEmpty
argument_list|)
decl_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//error on unavailable but allow no indices
block|{
name|IndicesOptions
name|noExpandErrorUnavailable
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|noExpandErrorUnavailable
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//error on both unavailable and no indices
block|{
name|IndicesOptions
name|noExpandStrict
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|noExpandStrict
argument_list|)
decl_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoobar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexOptionsSingleIndexNoExpandWildcards
specifier|public
name|void
name|testIndexOptionsSingleIndexNoExpandWildcards
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foofoobar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo-closed"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foofoo"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"barbaz"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//error on both unavailable and no indices + every alias needs to expand to a single index
try|try
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictSingleIndexNoExpandForbidClosed
argument_list|()
argument_list|)
decl_stmt|;
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictSingleIndexNoExpandForbidClosed
argument_list|()
argument_list|)
decl_stmt|;
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"baz*"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictSingleIndexNoExpandForbidClosed
argument_list|()
argument_list|)
decl_stmt|;
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Alias [foofoobar] has more than one indices associated with it"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictSingleIndexNoExpandForbidClosed
argument_list|()
argument_list|)
decl_stmt|;
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Alias [foofoobar] has more than one indices associated with it"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictSingleIndexNoExpandForbidClosed
argument_list|()
argument_list|)
decl_stmt|;
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foofoo-closed"
argument_list|,
literal|"foofoobar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexClosedException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"closed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"foofoo-closed"
argument_list|)
expr_stmt|;
block|}
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictSingleIndexNoExpandForbidClosed
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|,
literal|"barbaz"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"foofoo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOptionsEmptyCluster
specifier|public
name|void
name|testIndexOptionsEmptyCluster
parameter_list|()
block|{
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesOptions
name|options
init|=
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo*"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo*"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo*"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getResourceId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[_all]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexBuilder
specifier|private
name|IndexMetaData
operator|.
name|Builder
name|indexBuilder
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testConcreteIndicesIgnoreIndicesOneMissingIndex
specifier|public
name|void
name|testConcreteIndicesIgnoreIndicesOneMissingIndex
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testZZZ"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IndexNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"no such index"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConcreteIndicesIgnoreIndicesOneMissingIndexOtherFound
specifier|public
name|void
name|testConcreteIndicesIgnoreIndicesOneMissingIndexOtherFound
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testXXX"
argument_list|,
literal|"testZZZ"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcreteIndicesIgnoreIndicesAllMissing
specifier|public
name|void
name|testConcreteIndicesIgnoreIndicesAllMissing
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testMo"
argument_list|,
literal|"testMahdy"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IndexNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"no such index"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConcreteIndicesIgnoreIndicesEmptyRequest
specifier|public
name|void
name|testConcreteIndicesIgnoreIndicesEmptyRequest
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"kuku"
argument_list|,
literal|"testXXX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcreteIndicesWildcardExpansion
specifier|public
name|void
name|testConcreteIndicesWildcardExpansion
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXY"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|CLOSE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYX"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcreteIndicesWildcardWithNegation
specifier|public
name|void
name|testConcreteIndicesWildcardWithNegation
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXY"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"-testXYZ"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"-testXZZ"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"-testYYY"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYX"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"test*"
argument_list|,
literal|"-testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testYYY"
argument_list|,
literal|"testYYX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"-testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"-testXYZ"
argument_list|,
literal|"-testXZZ"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testXXY"
argument_list|,
literal|"-testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXY"
argument_list|,
literal|"-testXYZ"
argument_list|,
literal|"-testXZZ"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"*"
argument_list|,
literal|"--testX*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYX"
argument_list|,
literal|"testYYY"
argument_list|,
literal|"-testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"-testXXX"
argument_list|,
literal|"test*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testYYX"
argument_list|,
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|,
literal|"testXXY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"test*"
argument_list|,
literal|"-testXXX"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testYYX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|,
literal|"testXXY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"+testXXX"
argument_list|,
literal|"+testXXY"
argument_list|,
literal|"+testYYY"
argument_list|,
literal|"-testYYY"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXXY"
argument_list|,
literal|"testYYY"
argument_list|,
literal|"-testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"testYYY"
argument_list|,
literal|"testYYX"
argument_list|,
literal|"testX*"
argument_list|,
literal|"-testXXX"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testYYY"
argument_list|,
literal|"testYYX"
argument_list|,
literal|"testXXY"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"-testXXX"
argument_list|,
literal|"*testY*"
argument_list|,
literal|"-testYYY"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testYYX"
argument_list|,
literal|"testYYY"
argument_list|,
literal|"-testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|indexNames
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|,
literal|"-doesnotexist"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexNames
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|,
literal|"-*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"-testXYZ"
argument_list|,
literal|"-testXZZ"
argument_list|,
literal|"-testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|,
literal|"+testXXX"
argument_list|,
literal|"+testXXY"
argument_list|,
literal|"+testXYY"
argument_list|,
literal|"-testXXY"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testXXY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexNames
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|,
literal|"*"
argument_list|,
literal|"-*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|indexNames
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * test resolving _all pattern (null, empty array or "_all") for random IndicesOptions      */
DECL|method|testConcreteIndicesAllPatternRandom
specifier|public
name|void
name|testConcreteIndicesAllPatternRandom
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|allIndices
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|1
case|:
name|allIndices
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|allIndices
operator|=
operator|new
name|String
index|[]
block|{
name|MetaData
operator|.
name|ALL
block|}
expr_stmt|;
break|break;
block|}
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|indicesOptions
argument_list|)
decl_stmt|;
comment|// with no indices, asking for all indices should return empty list or exception, depending on indices options
if|if
condition|(
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
name|String
index|[]
name|concreteIndices
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|allIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|concreteIndices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkCorrectException
argument_list|(
name|indexNameExpressionResolver
argument_list|,
name|context
argument_list|,
name|allIndices
argument_list|)
expr_stmt|;
block|}
comment|// with existing indices, asking for all indices should return all open/closed indices depending on options
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"aaa"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"aaa_alias1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"bbb"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"bbb_alias1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"ccc"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|CLOSE
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"ccc_alias1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|state
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|indicesOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
operator|||
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
operator|||
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
name|String
index|[]
name|concreteIndices
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|allIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|concreteIndices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expectedNumberOfIndices
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
condition|)
block|{
name|expectedNumberOfIndices
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|expectedNumberOfIndices
operator|+=
literal|1
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|expectedNumberOfIndices
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkCorrectException
argument_list|(
name|indexNameExpressionResolver
argument_list|,
name|context
argument_list|,
name|allIndices
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * check for correct exception type depending on indicesOptions and provided index name list      */
DECL|method|checkCorrectException
specifier|private
name|void
name|checkCorrectException
parameter_list|(
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|,
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
parameter_list|,
name|String
index|[]
name|allIndices
parameter_list|)
block|{
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
name|allIndices
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"wildcard expansion on should trigger IndexMissingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**      * test resolving wildcard pattern that matches no index of alias for random IndicesOptions      */
DECL|method|testConcreteIndicesWildcardNoMatch
specifier|public
name|void
name|testConcreteIndicesWildcardNoMatch
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|IndicesOptions
name|indicesOptions
init|=
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"aaa"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"aaa_alias1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"bbb"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"bbb_alias1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"ccc"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|CLOSE
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"ccc_alias1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|indicesOptions
argument_list|)
decl_stmt|;
comment|// asking for non existing wildcard pattern should return empty list or exception
if|if
condition|(
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
condition|)
block|{
name|String
index|[]
name|concreteIndices
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"Foo*"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|concreteIndices
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"Foo*"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expecting exception when result empty and allowNoIndicec=false"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
block|}
block|}
DECL|method|testIsAllIndicesNull
specifier|public
name|void
name|testIsAllIndicesNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isAllIndices
argument_list|(
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsAllIndicesEmpty
specifier|public
name|void
name|testIsAllIndicesEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isAllIndices
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsAllIndicesExplicitAll
specifier|public
name|void
name|testIsAllIndicesExplicitAll
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isAllIndices
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"_all"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsAllIndicesExplicitAllPlusOther
specifier|public
name|void
name|testIsAllIndicesExplicitAllPlusOther
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isAllIndices
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"_all"
argument_list|,
literal|"other"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsAllIndicesNormalIndexes
specifier|public
name|void
name|testIsAllIndicesNormalIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isAllIndices
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsAllIndicesWildcard
specifier|public
name|void
name|testIsAllIndicesWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isAllIndices
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsExplicitAllIndicesNull
specifier|public
name|void
name|testIsExplicitAllIndicesNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isExplicitAllPattern
argument_list|(
literal|null
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsExplicitAllIndicesEmpty
specifier|public
name|void
name|testIsExplicitAllIndicesEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isExplicitAllPattern
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsExplicitAllIndicesExplicitAll
specifier|public
name|void
name|testIsExplicitAllIndicesExplicitAll
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isExplicitAllPattern
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"_all"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsExplicitAllIndicesExplicitAllPlusOther
specifier|public
name|void
name|testIsExplicitAllIndicesExplicitAllPlusOther
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isExplicitAllPattern
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"_all"
argument_list|,
literal|"other"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsExplicitAllIndicesNormalIndexes
specifier|public
name|void
name|testIsExplicitAllIndicesNormalIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isExplicitAllPattern
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"index1"
argument_list|,
literal|"index2"
argument_list|,
literal|"index3"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsExplicitAllIndicesWildcard
specifier|public
name|void
name|testIsExplicitAllIndicesWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|IndexNameExpressionResolver
operator|.
name|isExplicitAllPattern
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesExplicitList
specifier|public
name|void
name|testIsPatternMatchingAllIndicesExplicitList
parameter_list|()
throws|throws
name|Exception
block|{
comment|//even though it does identify all indices, it's not a pattern but just an explicit list of them
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|concreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|concreteIndices
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesOnlyWildcard
specifier|public
name|void
name|testIsPatternMatchingAllIndicesOnlyWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|indicesOrAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|concreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|indicesOrAliases
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesMatchingTrailingWildcard
specifier|public
name|void
name|testIsPatternMatchingAllIndicesMatchingTrailingWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|indicesOrAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"index*"
block|}
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|concreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|indicesOrAliases
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesNonMatchingTrailingWildcard
specifier|public
name|void
name|testIsPatternMatchingAllIndicesNonMatchingTrailingWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|indicesOrAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"index*"
block|}
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|String
index|[]
name|allConcreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|,
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|allConcreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|indicesOrAliases
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesMatchingSingleExclusion
specifier|public
name|void
name|testIsPatternMatchingAllIndicesMatchingSingleExclusion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|indicesOrAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"-index1"
block|,
literal|"+index1"
block|}
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|concreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|indicesOrAliases
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesNonMatchingSingleExclusion
specifier|public
name|void
name|testIsPatternMatchingAllIndicesNonMatchingSingleExclusion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|indicesOrAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"-index1"
block|}
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|String
index|[]
name|allConcreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|allConcreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|indicesOrAliases
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesMatchingTrailingWildcardAndExclusion
specifier|public
name|void
name|testIsPatternMatchingAllIndicesMatchingTrailingWildcardAndExclusion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|indicesOrAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"index*"
block|,
literal|"-index1"
block|,
literal|"+index1"
block|}
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|concreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|indicesOrAliases
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsPatternMatchingAllIndicesNonMatchingTrailingWildcardAndExclusion
specifier|public
name|void
name|testIsPatternMatchingAllIndicesNonMatchingTrailingWildcardAndExclusion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|indicesOrAliases
init|=
operator|new
name|String
index|[]
block|{
literal|"index*"
block|,
literal|"-index1"
block|}
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|String
index|[]
name|allConcreteIndices
init|=
operator|new
name|String
index|[]
block|{
literal|"index1"
block|,
literal|"index2"
block|,
literal|"index3"
block|}
decl_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
argument_list|(
name|allConcreteIndices
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|indexNameExpressionResolver
operator|.
name|isPatternMatchingAllIndices
argument_list|(
name|metaData
argument_list|,
name|indicesOrAliases
argument_list|,
name|concreteIndices
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOptionsFailClosedIndicesAndAliases
specifier|public
name|void
name|testIndexOptionsFailClosedIndicesAndAliases
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo1-closed"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foobar1-closed"
argument_list|)
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foobar2-closed"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo2-closed"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foobar2-closed"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"foo3"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"foobar2-closed"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpandOpenAndForbidClosed
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo1-closed"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"foo1-closed should be closed, but it is open"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foobar1-closed"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"foo1-closed should be closed, but it is open"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
operator|.
name|allowNoIndices
argument_list|()
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
operator|.
name|expandWildcardsOpen
argument_list|()
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
operator|.
name|expandWildcardsClosed
argument_list|()
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo1-closed"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foobar1-closed"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foo1-closed"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContaining
argument_list|(
literal|"foo1-closed"
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foobar1-closed"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContaining
argument_list|(
literal|"foo1-closed"
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing an alias pointing to three indices:
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpandOpenAndForbidClosed
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foobar2-closed"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"foo2-closed should be closed, but it is open"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
operator|.
name|allowNoIndices
argument_list|()
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
operator|.
name|expandWildcardsOpen
argument_list|()
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
operator|.
name|expandWildcardsClosed
argument_list|()
argument_list|,
name|context
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foobar2-closed"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContaining
argument_list|(
literal|"foo3"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"foobar2-closed"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayWithSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"foo1-closed"
argument_list|,
literal|"foo2-closed"
argument_list|,
literal|"foo3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDedupConcreteIndices
specifier|public
name|void
name|testDedupConcreteIndices
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"index1"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndicesOptions
index|[]
name|indicesOptions
init|=
operator|new
name|IndicesOptions
index|[]
block|{
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
block|,
name|IndicesOptions
operator|.
name|strictExpand
argument_list|()
block|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
block|,
name|IndicesOptions
operator|.
name|strictExpandOpenAndForbidClosed
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|IndicesOptions
name|options
range|:
name|indicesOptions
control|)
block|{
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"index1"
argument_list|,
literal|"index1"
argument_list|,
literal|"alias1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|results
argument_list|,
name|equalTo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"index1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|metaDataBuilder
specifier|private
name|MetaData
name|metaDataBuilder
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|concreteIndex
range|:
name|indices
control|)
block|{
name|mdBuilder
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
name|concreteIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mdBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testFilterClosedIndicesOnAliases
specifier|public
name|void
name|testFilterClosedIndicesOnAliases
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"test-0"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias-0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"test-1"
argument_list|)
operator|.
name|state
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias-1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNameExpressionResolver
operator|.
name|Context
name|context
init|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|strings
init|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"alias-*"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test-0"
block|}
argument_list|,
name|strings
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|IndexNameExpressionResolver
operator|.
name|Context
argument_list|(
name|state
argument_list|,
name|IndicesOptions
operator|.
name|strictExpandOpen
argument_list|()
argument_list|)
expr_stmt|;
name|strings
operator|=
name|indexNameExpressionResolver
operator|.
name|concreteIndexNames
argument_list|(
name|context
argument_list|,
literal|"alias-*"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test-0"
block|}
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
DECL|method|testFilteringAliases
specifier|public
name|void
name|testFilteringAliases
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"test-0"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias-0"
argument_list|)
operator|.
name|filter
argument_list|(
literal|"{ \"term\": \"foo\"}"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"test-1"
argument_list|)
operator|.
name|state
argument_list|(
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias-1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
index|[]
name|strings
init|=
name|indexNameExpressionResolver
operator|.
name|filteringAliases
argument_list|(
name|state
argument_list|,
literal|"test-0"
argument_list|,
literal|"alias-*"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"alias-0"
block|}
argument_list|,
name|strings
argument_list|)
expr_stmt|;
comment|// concrete index supersedes filtering alias
name|strings
operator|=
name|indexNameExpressionResolver
operator|.
name|filteringAliases
argument_list|(
name|state
argument_list|,
literal|"test-0"
argument_list|,
literal|"test-0,alias-*"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|strings
operator|=
name|indexNameExpressionResolver
operator|.
name|filteringAliases
argument_list|(
name|state
argument_list|,
literal|"test-0"
argument_list|,
literal|"test-*,alias-*"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|strings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

