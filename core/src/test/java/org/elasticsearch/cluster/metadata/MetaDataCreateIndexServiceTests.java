begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|EmptyClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|AllocationDeciders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|MaxRetryAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidIndexNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|gateway
operator|.
name|TestGatewayAllocator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_class
DECL|class|MetaDataCreateIndexServiceTests
specifier|public
class|class
name|MetaDataCreateIndexServiceTests
extends|extends
name|ESTestCase
block|{
DECL|method|createClusterState
specifier|private
name|ClusterState
name|createClusterState
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|numReplicas
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|MetaData
operator|.
name|Builder
name|metaBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|name
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numReplicas
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metaBuilder
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetaData
name|metaData
init|=
name|metaBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|routingTableBuilder
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|RoutingTable
name|routingTable
init|=
name|routingTableBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addBlocks
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|clusterState
return|;
block|}
DECL|method|isShrinkable
specifier|public
specifier|static
name|boolean
name|isShrinkable
parameter_list|(
name|int
name|source
parameter_list|,
name|int
name|target
parameter_list|)
block|{
name|int
name|x
init|=
name|source
operator|/
name|target
decl_stmt|;
assert|assert
name|source
operator|>
name|target
operator|:
name|source
operator|+
literal|"<= "
operator|+
name|target
assert|;
return|return
name|target
operator|*
name|x
operator|==
name|source
return|;
block|}
DECL|method|testValidateShrinkIndex
specifier|public
name|void
name|testValidateShrinkIndex
parameter_list|()
block|{
name|int
name|numShards
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|createClusterState
argument_list|(
literal|"source"
argument_list|,
name|numShards
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index [source] already exists"
argument_list|,
name|expectThrows
argument_list|(
name|IndexAlreadyExistsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|state
argument_list|,
literal|"target"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"source"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no such index"
argument_list|,
name|expectThrows
argument_list|(
name|IndexNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|state
argument_list|,
literal|"no such index"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"can't shrink an index with only one shard"
argument_list|,
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|createClusterState
argument_list|(
literal|"source"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
literal|"source"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the number of target shards must be less that the number of source shards"
argument_list|,
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|createClusterState
argument_list|(
literal|"source"
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
literal|"source"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|10
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index source must be read-only to shrink index. use \"index.blocks.write=true\""
argument_list|,
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|createClusterState
argument_list|(
literal|"source"
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
literal|"source"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index source must have all shards allocated on the same node to shrink index"
argument_list|,
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|state
argument_list|,
literal|"source"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the number of source shards [8] must be a must be a multiple of [3]"
argument_list|,
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|createClusterState
argument_list|(
literal|"source"
argument_list|,
literal|8
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
literal|"source"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mappings are not allowed when shrinking indices, all mappings are copied from the source index"
argument_list|,
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|state
argument_list|,
literal|"source"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// create one that won't fail
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|createClusterState
argument_list|(
literal|"source"
argument_list|,
name|numShards
argument_list|,
literal|0
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AllocationService
name|service
init|=
operator|new
name|AllocationService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|MaxRetryAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TestGatewayAllocator
argument_list|()
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|EmptyClusterInfoService
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|service
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// now we start the shard
name|routingTable
operator|=
name|service
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingTable
operator|.
name|index
argument_list|(
literal|"source"
argument_list|)
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|int
name|targetShards
decl_stmt|;
do|do
block|{
name|targetShards
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numShards
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|isShrinkable
argument_list|(
name|numShards
argument_list|,
name|targetShards
argument_list|)
operator|==
literal|false
condition|)
do|;
name|MetaDataCreateIndexService
operator|.
name|validateShrinkIndex
argument_list|(
name|clusterState
argument_list|,
literal|"source"
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"target"
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|targetShards
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testShrinkIndexSettings
specifier|public
name|void
name|testShrinkIndexSettings
parameter_list|()
block|{
name|String
name|indexName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// create one that won't fail
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|createClusterState
argument_list|(
name|indexName
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.blocks.write"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.similarity.default.type"
argument_list|,
literal|"BM25"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.my_analyzer.tokenizer"
argument_list|,
literal|"keyword"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|newNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AllocationService
name|service
init|=
operator|new
name|AllocationService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|AllocationDeciders
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|MaxRetryAllocationDecider
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TestGatewayAllocator
argument_list|()
argument_list|,
operator|new
name|BalancedShardsAllocator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|EmptyClusterInfoService
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|RoutingTable
name|routingTable
init|=
name|service
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// now we start the shard
name|routingTable
operator|=
name|service
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingTable
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|MetaDataCreateIndexService
operator|.
name|prepareShrinkIndexSettings
argument_list|(
name|clusterState
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|builder
argument_list|,
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"similarity settings must be copied"
argument_list|,
literal|"BM25"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.similarity.default.type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"analysis settings must be copied"
argument_list|,
literal|"keyword"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.analysis.analyzer.my_analyzer.tokenizer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node1"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.routing.allocation.initial_recovery._id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|get
argument_list|(
literal|"index.allocation.max_retries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newNode
specifier|private
name|DiscoveryNode
name|newNode
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
return|return
operator|new
name|DiscoveryNode
argument_list|(
name|nodeId
argument_list|,
name|LocalTransportAddress
operator|.
name|buildUnique
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiscoveryNode
operator|.
name|Role
operator|.
name|MASTER
argument_list|,
name|DiscoveryNode
operator|.
name|Role
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|method|testValidateIndexName
specifier|public
name|void
name|testValidateIndexName
parameter_list|()
throws|throws
name|Exception
block|{
name|validateIndexName
argument_list|(
literal|"index?name"
argument_list|,
literal|"must not contain the following characters "
operator|+
name|Strings
operator|.
name|INVALID_FILENAME_CHARS
argument_list|)
expr_stmt|;
name|validateIndexName
argument_list|(
literal|"index#name"
argument_list|,
literal|"must not contain '#'"
argument_list|)
expr_stmt|;
name|validateIndexName
argument_list|(
literal|"_indexname"
argument_list|,
literal|"must not start with '_', '-', or '+'"
argument_list|)
expr_stmt|;
name|validateIndexName
argument_list|(
literal|"-indexname"
argument_list|,
literal|"must not start with '_', '-', or '+'"
argument_list|)
expr_stmt|;
name|validateIndexName
argument_list|(
literal|"+indexname"
argument_list|,
literal|"must not start with '_', '-', or '+'"
argument_list|)
expr_stmt|;
name|validateIndexName
argument_list|(
literal|"INDEXNAME"
argument_list|,
literal|"must be lowercase"
argument_list|)
expr_stmt|;
name|validateIndexName
argument_list|(
literal|".."
argument_list|,
literal|"must not be '.' or '..'"
argument_list|)
expr_stmt|;
block|}
DECL|method|validateIndexName
specifier|private
name|void
name|validateIndexName
parameter_list|(
name|String
name|indexName
parameter_list|,
name|String
name|errorMessage
parameter_list|)
block|{
name|InvalidIndexNameException
name|e
init|=
name|expectThrows
argument_list|(
name|InvalidIndexNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MetaDataCreateIndexService
operator|.
name|validateIndexName
argument_list|(
name|indexName
argument_list|,
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|endsWith
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getCreateIndexService
specifier|private
name|MetaDataCreateIndexService
name|getCreateIndexService
parameter_list|()
block|{
return|return
operator|new
name|MetaDataCreateIndexService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

