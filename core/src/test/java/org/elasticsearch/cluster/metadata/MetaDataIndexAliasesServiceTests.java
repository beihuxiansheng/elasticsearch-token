begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyCollectionOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|MetaDataIndexAliasesServiceTests
specifier|public
class|class
name|MetaDataIndexAliasesServiceTests
extends|extends
name|ESTestCase
block|{
DECL|field|aliasValidator
specifier|private
specifier|final
name|AliasValidator
name|aliasValidator
init|=
operator|new
name|AliasValidator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|field|deleteIndexService
specifier|private
specifier|final
name|MetaDataDeleteIndexService
name|deleteIndexService
init|=
name|mock
argument_list|(
name|MetaDataDeleteIndexService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|service
specifier|private
specifier|final
name|MetaDataIndexAliasesService
name|service
init|=
operator|new
name|MetaDataIndexAliasesService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|aliasValidator
argument_list|,
name|deleteIndexService
argument_list|)
decl_stmt|;
DECL|method|MetaDataIndexAliasesServiceTests
specifier|public
name|MetaDataIndexAliasesServiceTests
parameter_list|()
block|{
comment|// Mock any deletes so we don't need to worry about how MetaDataDeleteIndexService does its job
name|when
argument_list|(
name|deleteIndexService
operator|.
name|deleteIndices
argument_list|(
name|any
argument_list|(
name|ClusterState
operator|.
name|class
argument_list|)
argument_list|,
name|anyCollectionOf
argument_list|(
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|i
lambda|->
block|{
name|ClusterState
name|state
init|=
operator|(
name|ClusterState
operator|)
name|i
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|Index
argument_list|>
name|indices
init|=
operator|(
name|Collection
argument_list|<
name|Index
argument_list|>
operator|)
name|i
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|meta
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Index
name|index
range|:
name|indices
control|)
block|{
name|assertTrue
argument_list|(
literal|"index now found"
argument_list|,
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasConcreteIndex
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We only think about metadata for this test. Not routing or any other fun stuff.
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndRemove
specifier|public
name|void
name|testAddAndRemove
parameter_list|()
block|{
comment|// Create a state with a single index
name|String
name|index
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ClusterState
name|before
init|=
name|createIndex
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|index
argument_list|)
decl_stmt|;
comment|// Add an alias to it
name|ClusterState
name|after
init|=
name|service
operator|.
name|innerExecute
argument_list|(
name|before
argument_list|,
name|singletonList
argument_list|(
operator|new
name|AliasAction
operator|.
name|Add
argument_list|(
name|index
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AliasOrIndex
name|alias
init|=
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|alias
operator|.
name|isAlias
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|alias
operator|.
name|getIndices
argument_list|()
argument_list|,
name|contains
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove the alias from it while adding another one
name|before
operator|=
name|after
expr_stmt|;
name|after
operator|=
name|service
operator|.
name|innerExecute
argument_list|(
name|before
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AliasAction
operator|.
name|Remove
argument_list|(
name|index
argument_list|,
literal|"test"
argument_list|)
argument_list|,
operator|new
name|AliasAction
operator|.
name|Add
argument_list|(
name|index
argument_list|,
literal|"test_2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|alias
operator|=
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|alias
operator|.
name|isAlias
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|alias
operator|.
name|getIndices
argument_list|()
argument_list|,
name|contains
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now just remove on its own
name|before
operator|=
name|after
expr_stmt|;
name|after
operator|=
name|service
operator|.
name|innerExecute
argument_list|(
name|before
argument_list|,
name|singletonList
argument_list|(
operator|new
name|AliasAction
operator|.
name|Remove
argument_list|(
name|index
argument_list|,
literal|"test_2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSwapIndexWithAlias
specifier|public
name|void
name|testSwapIndexWithAlias
parameter_list|()
block|{
comment|// Create "test" and "test_2"
name|ClusterState
name|before
init|=
name|createIndex
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|before
operator|=
name|createIndex
argument_list|(
name|before
argument_list|,
literal|"test_2"
argument_list|)
expr_stmt|;
comment|// Now remove "test" and add an alias to "test" to "test_2" in one go
name|ClusterState
name|after
init|=
name|service
operator|.
name|innerExecute
argument_list|(
name|before
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AliasAction
operator|.
name|Add
argument_list|(
literal|"test_2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|AliasAction
operator|.
name|RemoveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|AliasOrIndex
name|alias
init|=
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|alias
operator|.
name|isAlias
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|alias
operator|.
name|getIndices
argument_list|()
argument_list|,
name|contains
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"test_2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAliasToRemovedIndex
specifier|public
name|void
name|testAddAliasToRemovedIndex
parameter_list|()
block|{
comment|// Create "test"
name|ClusterState
name|before
init|=
name|createIndex
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
comment|// Attempt to add an alias to "test" at the same time as we remove it
name|IndexNotFoundException
name|e
init|=
name|expectThrows
argument_list|(
name|IndexNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|innerExecute
argument_list|(
name|before
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AliasAction
operator|.
name|Add
argument_list|(
literal|"test"
argument_list|,
literal|"alias"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|AliasAction
operator|.
name|RemoveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|e
operator|.
name|getIndex
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveIndexTwice
specifier|public
name|void
name|testRemoveIndexTwice
parameter_list|()
block|{
comment|// Create "test"
name|ClusterState
name|before
init|=
name|createIndex
argument_list|(
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
comment|// Try to remove an index twice. This should just remove the index once....
name|ClusterState
name|after
init|=
name|service
operator|.
name|innerExecute
argument_list|(
name|before
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|AliasAction
operator|.
name|RemoveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|,
operator|new
name|AliasAction
operator|.
name|RemoveIndex
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getAliasAndIndexLookup
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndex
specifier|private
name|ClusterState
name|createIndex
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|state
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

