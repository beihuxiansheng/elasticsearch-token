begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|AutoExpandReplicasTests
specifier|public
class|class
name|AutoExpandReplicasTests
extends|extends
name|ESTestCase
block|{
DECL|method|testParseSettings
specifier|public
name|void
name|testParseSettings
parameter_list|()
block|{
name|AutoExpandReplicas
name|autoExpandReplicas
init|=
name|AutoExpandReplicas
operator|.
name|SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.auto_expand_replicas"
argument_list|,
literal|"0-5"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoExpandReplicas
operator|.
name|getMinReplicas
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|autoExpandReplicas
operator|.
name|getMaxReplicas
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoExpandReplicas
operator|.
name|getMaxReplicas
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|autoExpandReplicas
operator|=
name|AutoExpandReplicas
operator|.
name|SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.auto_expand_replicas"
argument_list|,
literal|"0-all"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|autoExpandReplicas
operator|.
name|getMinReplicas
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|autoExpandReplicas
operator|.
name|getMaxReplicas
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoExpandReplicas
operator|.
name|getMaxReplicas
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|autoExpandReplicas
operator|=
name|AutoExpandReplicas
operator|.
name|SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.auto_expand_replicas"
argument_list|,
literal|"1-all"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|autoExpandReplicas
operator|.
name|getMinReplicas
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|autoExpandReplicas
operator|.
name|getMaxReplicas
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|autoExpandReplicas
operator|.
name|getMaxReplicas
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidValues
specifier|public
name|void
name|testInvalidValues
parameter_list|()
block|{
try|try
block|{
name|AutoExpandReplicas
operator|.
name|SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.auto_expand_replicas"
argument_list|,
literal|"boom"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"failed to parse [index.auto_expand_replicas] form [boom] at index -1"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AutoExpandReplicas
operator|.
name|SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.auto_expand_replicas"
argument_list|,
literal|"1-boom"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"failed to parse [index.auto_expand_replicas] form [1-boom] at index 1"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"For input string: \"boom\""
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AutoExpandReplicas
operator|.
name|SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.auto_expand_replicas"
argument_list|,
literal|"boom-1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"failed to parse [index.auto_expand_replicas] form [boom-1] at index 4"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"For input string: \"boom\""
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AutoExpandReplicas
operator|.
name|SETTING
operator|.
name|get
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.auto_expand_replicas"
argument_list|,
literal|"2-1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"[index.auto_expand_replicas] minReplicas must be =< maxReplicas but wasn't 2> 1"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

