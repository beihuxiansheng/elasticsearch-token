begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|MetaDataMappingServiceTests
specifier|public
class|class
name|MetaDataMappingServiceTests
extends|extends
name|ESSingleNodeTestCase
block|{
comment|// Tests _parent meta field logic, because part of the validation is in MetaDataMappingService
DECL|method|testAddChildTypePointingToAlreadyExistingType
specifier|public
name|void
name|testAddChildTypePointingToAlreadyExistingType
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"type"
argument_list|,
literal|"field"
argument_list|,
literal|"type=keyword"
argument_list|)
expr_stmt|;
comment|// Shouldn't be able the add the _parent field pointing to an already existing type, which isn't a parent type
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"_parent"
argument_list|,
literal|"type=type"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"can't add a _parent field that points to an already existing type, that isn't already a parent"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Tests _parent meta field logic, because part of the validation is in MetaDataMappingService
DECL|method|testAddExtraChildTypePointingToAlreadyParentExistingType
specifier|public
name|void
name|testAddExtraChildTypePointingToAlreadyParentExistingType
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"child1"
argument_list|,
literal|"_parent"
argument_list|,
literal|"type=parent"
argument_list|)
argument_list|)
decl_stmt|;
comment|// adding the extra child type that points to an already existing parent type is allowed:
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"child2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"_parent"
argument_list|,
literal|"type=parent"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentMapper
name|documentMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
literal|"child2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|documentMapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"parent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|documentMapper
operator|.
name|parentFieldMapper
argument_list|()
operator|.
name|active
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

