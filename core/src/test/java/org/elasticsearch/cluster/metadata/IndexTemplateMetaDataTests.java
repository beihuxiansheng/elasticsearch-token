begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasMetaData
operator|.
name|newAliasMetaDataBuilder
import|;
end_import

begin_class
DECL|class|IndexTemplateMetaDataTests
specifier|public
class|class
name|IndexTemplateMetaDataTests
extends|extends
name|ESTestCase
block|{
comment|// bwc for #21009
DECL|method|testIndexTemplateMetaData510
specifier|public
name|void
name|testIndexTemplateMetaData510
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexTemplateMetaData
name|metaData
init|=
name|IndexTemplateMetaData
operator|.
name|builder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|patterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
literal|1
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"setting2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|putAlias
argument_list|(
name|newAliasMetaDataBuilder
argument_list|(
literal|"alias-bar1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexTemplateMetaData
name|multiMetaData
init|=
name|IndexTemplateMetaData
operator|.
name|builder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|patterns
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|order
argument_list|(
literal|1
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"setting2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|putAlias
argument_list|(
name|newAliasMetaDataBuilder
argument_list|(
literal|"alias-bar1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// These bytes were retrieved by Base64 encoding the result of the above with 5_0_0 code
name|String
name|templateBytes
init|=
literal|"A2ZvbwAAAAEDYmFyAghzZXR0aW5nMQEGdmFsdWUxCHNldHRpbmcyAQZ2YWx1ZTIAAQphbGlhcy1iYXIxAAAAAAA="
decl_stmt|;
name|BytesArray
name|bytes
init|=
operator|new
name|BytesArray
argument_list|(
name|Base64
operator|.
name|getDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|templateBytes
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
name|bytes
operator|.
name|streamInput
argument_list|()
init|)
block|{
name|in
operator|.
name|setVersion
argument_list|(
name|Version
operator|.
name|V_5_0_0
argument_list|)
expr_stmt|;
name|IndexTemplateMetaData
name|readMetaData
init|=
name|IndexTemplateMetaData
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metaData
operator|.
name|getName
argument_list|()
argument_list|,
name|readMetaData
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metaData
operator|.
name|getPatterns
argument_list|()
argument_list|,
name|readMetaData
operator|.
name|getPatterns
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metaData
operator|.
name|aliases
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"alias-bar1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metaData
operator|.
name|aliases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|output
operator|.
name|setVersion
argument_list|(
name|Version
operator|.
name|V_5_0_0
argument_list|)
expr_stmt|;
name|readMetaData
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|toBytesRef
argument_list|()
argument_list|,
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
argument_list|)
expr_stmt|;
comment|// test that multi templates are reverse-compatible.
comment|// for the bwc case, if multiple patterns, use only the first pattern seen.
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|multiMetaData
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|toBytesRef
argument_list|()
argument_list|,
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

