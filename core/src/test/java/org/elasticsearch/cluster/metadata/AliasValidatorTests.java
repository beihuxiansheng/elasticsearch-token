begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidAliasNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|AliasValidatorTests
specifier|public
class|class
name|AliasValidatorTests
extends|extends
name|ESTestCase
block|{
DECL|method|testValidatesAliasNames
specifier|public
name|void
name|testValidatesAliasNames
parameter_list|()
block|{
name|AliasValidator
name|validator
init|=
operator|new
name|AliasValidator
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|InvalidAliasNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|validator
operator|.
name|validateAliasStandalone
argument_list|(
literal|"."
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid alias name [.]: must not be '.' or '..'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|InvalidAliasNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|validator
operator|.
name|validateAliasStandalone
argument_list|(
literal|".."
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid alias name [..]: must not be '.' or '..'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|InvalidAliasNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|validator
operator|.
name|validateAliasStandalone
argument_list|(
literal|"_cat"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid alias name [_cat]: must not start with '_', '-', or '+'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|InvalidAliasNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|validator
operator|.
name|validateAliasStandalone
argument_list|(
literal|"-cat"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid alias name [-cat]: must not start with '_', '-', or '+'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|InvalidAliasNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|validator
operator|.
name|validateAliasStandalone
argument_list|(
literal|"+cat"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid alias name [+cat]: must not start with '_', '-', or '+'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|InvalidAliasNameException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|validator
operator|.
name|validateAliasStandalone
argument_list|(
literal|"c*t"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Invalid alias name [c*t]: must not contain the following characters "
argument_list|)
argument_list|)
expr_stmt|;
comment|// Doesn't throw an exception because we allow upper case alias names
name|validator
operator|.
name|validateAliasStandalone
argument_list|(
literal|"CAT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

