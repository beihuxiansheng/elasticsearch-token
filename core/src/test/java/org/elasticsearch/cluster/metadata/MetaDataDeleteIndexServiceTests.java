begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|IndexId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|MetaDataDeleteIndexServiceTests
specifier|public
class|class
name|MetaDataDeleteIndexServiceTests
extends|extends
name|ESTestCase
block|{
DECL|field|allocationService
specifier|private
specifier|final
name|AllocationService
name|allocationService
init|=
name|mock
argument_list|(
name|AllocationService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|service
specifier|private
specifier|final
name|MetaDataDeleteIndexService
name|service
init|=
operator|new
name|MetaDataDeleteIndexService
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|allocationService
argument_list|)
decl_stmt|;
DECL|method|testDeleteMissing
specifier|public
name|void
name|testDeleteMissing
parameter_list|()
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"missing"
argument_list|,
literal|"doesn't matter"
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexNotFoundException
name|e
init|=
name|expectThrows
argument_list|(
name|IndexNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|deleteIndices
argument_list|(
name|state
argument_list|,
name|singleton
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|index
argument_list|,
name|e
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteSnapshotting
specifier|public
name|void
name|testDeleteSnapshotting
parameter_list|()
block|{
name|String
name|index
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|(
literal|"doesn't matter"
argument_list|,
operator|new
name|SnapshotId
argument_list|(
literal|"snapshot name"
argument_list|,
literal|"snapshot uuid"
argument_list|)
argument_list|)
decl_stmt|;
name|SnapshotsInProgress
name|snaps
init|=
operator|new
name|SnapshotsInProgress
argument_list|(
operator|new
name|SnapshotsInProgress
operator|.
name|Entry
argument_list|(
name|snapshot
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|SnapshotsInProgress
operator|.
name|State
operator|.
name|INIT
argument_list|,
name|singletonList
argument_list|(
operator|new
name|IndexId
argument_list|(
name|index
argument_list|,
literal|"doesn't matter"
argument_list|)
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|putCustom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|,
name|snaps
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|service
operator|.
name|deleteIndices
argument_list|(
name|state
argument_list|,
name|singleton
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot delete indices that are being snapshotted: [["
operator|+
name|index
operator|+
literal|"]]. Try again after snapshot finishes "
operator|+
literal|"or cancel the currently running snapshot."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteUnassigned
specifier|public
name|void
name|testDeleteUnassigned
parameter_list|()
block|{
comment|// Create an unassigned index
name|String
name|index
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ClusterState
name|before
init|=
name|clusterState
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// Mock the built reroute
name|when
argument_list|(
name|allocationService
operator|.
name|reroute
argument_list|(
name|any
argument_list|(
name|ClusterState
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|i
lambda|->
name|i
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Remove it
name|ClusterState
name|after
init|=
name|service
operator|.
name|deleteIndices
argument_list|(
name|before
argument_list|,
name|singleton
argument_list|(
name|before
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// It is gone
name|assertNull
argument_list|(
name|after
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|after
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|after
operator|.
name|blocks
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure we actually attempted to reroute
name|verify
argument_list|(
name|allocationService
argument_list|)
operator|.
name|reroute
argument_list|(
name|any
argument_list|(
name|ClusterState
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clusterState
specifier|private
name|ClusterState
name|clusterState
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|VersionUtils
operator|.
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|metaData
argument_list|(
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|(
name|RoutingTable
operator|.
name|builder
argument_list|()
operator|.
name|addAsNew
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|ClusterBlocks
operator|.
name|builder
argument_list|()
operator|.
name|addBlocks
argument_list|(
name|indexMetaData
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

