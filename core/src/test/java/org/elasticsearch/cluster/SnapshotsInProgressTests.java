begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|IndexId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Unit tests for the {@link SnapshotsInProgress} class and its inner classes.  */
end_comment

begin_class
DECL|class|SnapshotsInProgressTests
specifier|public
class|class
name|SnapshotsInProgressTests
extends|extends
name|ESTestCase
block|{
comment|/**      * Makes sure that the indices being waited on before snapshotting commences      * are populated with all shards in the relocating or initializing state.      */
DECL|method|testWaitingIndices
specifier|public
name|void
name|testWaitingIndices
parameter_list|()
block|{
specifier|final
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|(
literal|"repo"
argument_list|,
operator|new
name|SnapshotId
argument_list|(
literal|"snap"
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|idx1Name
init|=
literal|"idx1"
decl_stmt|;
specifier|final
name|String
name|idx2Name
init|=
literal|"idx2"
decl_stmt|;
specifier|final
name|String
name|idx3Name
init|=
literal|"idx3"
decl_stmt|;
specifier|final
name|String
name|idx1UUID
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|String
name|idx2UUID
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|String
name|idx3UUID
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IndexId
argument_list|>
name|indices
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|IndexId
argument_list|(
name|idx1Name
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
operator|new
name|IndexId
argument_list|(
name|idx2Name
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
operator|new
name|IndexId
argument_list|(
name|idx3Name
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|ShardSnapshotStatus
argument_list|>
name|shards
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// test more than one waiting shard in an index
name|shards
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|idx1Name
argument_list|,
name|idx1UUID
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|2
argument_list|)
argument_list|,
name|State
operator|.
name|WAITING
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|idx1Name
argument_list|,
name|idx1UUID
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|2
argument_list|)
argument_list|,
name|State
operator|.
name|WAITING
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|idx1Name
argument_list|,
name|idx1UUID
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|2
argument_list|)
argument_list|,
name|randomNonWaitingState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test exactly one waiting shard in an index
name|shards
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|idx2Name
argument_list|,
name|idx2UUID
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|2
argument_list|)
argument_list|,
name|State
operator|.
name|WAITING
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|idx2Name
argument_list|,
name|idx2UUID
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|2
argument_list|)
argument_list|,
name|randomNonWaitingState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test no waiting shards in an index
name|shards
operator|.
name|put
argument_list|(
operator|new
name|ShardId
argument_list|(
name|idx3Name
argument_list|,
name|idx3UUID
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ShardSnapshotStatus
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|2
argument_list|)
argument_list|,
name|randomNonWaitingState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|State
operator|.
name|INIT
argument_list|,
name|indices
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|,
name|shards
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ShardId
argument_list|>
argument_list|>
name|waitingIndices
init|=
name|entry
operator|.
name|waitingIndices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|waitingIndices
operator|.
name|get
argument_list|(
name|idx1Name
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|waitingIndices
operator|.
name|get
argument_list|(
name|idx2Name
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|waitingIndices
operator|.
name|containsKey
argument_list|(
name|idx3Name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomNonWaitingState
specifier|private
name|State
name|randomNonWaitingState
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|State
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|!=
name|State
operator|.
name|WAITING
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

