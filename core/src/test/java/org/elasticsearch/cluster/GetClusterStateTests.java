begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  * Tests for the get cluster state API.  *  * See: {@link org.elasticsearch.action.admin.cluster.state.TransportClusterStateAction}  *      {@link org.elasticsearch.rest.action.admin.cluster.RestClusterStateAction}  */
end_comment

begin_class
DECL|class|GetClusterStateTests
specifier|public
class|class
name|GetClusterStateTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|method|testGetClusterState
specifier|public
name|void
name|testGetClusterState
parameter_list|()
block|{
name|ClusterStateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getClusterName
argument_list|()
argument_list|)
expr_stmt|;
comment|// assume the cluster state size is 50 bytes or more, just so we aren't testing against size of 0
name|assertThat
argument_list|(
name|response
operator|.
name|getTotalCompressedSize
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|50L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSizeDerivedFromFullClusterState
specifier|public
name|void
name|testSizeDerivedFromFullClusterState
parameter_list|()
block|{
name|ClusterStateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ClusterState
name|clusterState
init|=
name|response
operator|.
name|getState
argument_list|()
decl_stmt|;
specifier|final
name|long
name|totalCompressedSize
init|=
name|response
operator|.
name|getTotalCompressedSize
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// exclude the nodes from being returned, the total size returned should still be
comment|// the same as when no filtering was applied to the cluster state retrieved
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setNodes
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCompressedSize
argument_list|,
name|response
operator|.
name|getTotalCompressedSize
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|clusterState
argument_list|,
name|response
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

