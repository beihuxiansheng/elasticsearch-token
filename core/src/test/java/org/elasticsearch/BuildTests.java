begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch
package|package
name|org
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_class
DECL|class|BuildTests
specifier|public
class|class
name|BuildTests
extends|extends
name|ESTestCase
block|{
comment|/** Asking for the jar metadata should not throw exception in tests, no matter how configured */
DECL|method|testJarMetadata
specifier|public
name|void
name|testJarMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|Build
operator|.
name|getElasticsearchCodebase
argument_list|()
decl_stmt|;
comment|// throws exception if does not exist, or we cannot access it
try|try
init|(
name|InputStream
name|ignored
init|=
name|FileSystemUtils
operator|.
name|openFileURLStream
argument_list|(
name|url
argument_list|)
init|)
block|{}
comment|// these should never be null
name|assertNotNull
argument_list|(
name|Build
operator|.
name|CURRENT
operator|.
name|date
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Build
operator|.
name|CURRENT
operator|.
name|shortHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsAndHashCode
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
name|Build
name|build
init|=
name|Build
operator|.
name|CURRENT
decl_stmt|;
name|Build
name|another
init|=
operator|new
name|Build
argument_list|(
name|build
operator|.
name|shortHash
argument_list|()
argument_list|,
name|build
operator|.
name|date
argument_list|()
argument_list|,
name|build
operator|.
name|isSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|build
argument_list|,
name|another
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|build
operator|.
name|hashCode
argument_list|()
argument_list|,
name|another
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Build
name|differentHash
init|=
operator|new
name|Build
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|build
operator|.
name|date
argument_list|()
argument_list|,
name|build
operator|.
name|isSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|build
argument_list|,
name|differentHash
argument_list|)
expr_stmt|;
name|Build
name|differentDate
init|=
operator|new
name|Build
argument_list|(
name|build
operator|.
name|shortHash
argument_list|()
argument_list|,
literal|"1970-01-01"
argument_list|,
name|build
operator|.
name|isSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|build
argument_list|,
name|differentDate
argument_list|)
expr_stmt|;
name|Build
name|differentSnapshot
init|=
operator|new
name|Build
argument_list|(
name|build
operator|.
name|shortHash
argument_list|()
argument_list|,
name|build
operator|.
name|date
argument_list|()
argument_list|,
operator|!
name|build
operator|.
name|isSnapshot
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|build
argument_list|,
name|differentSnapshot
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

