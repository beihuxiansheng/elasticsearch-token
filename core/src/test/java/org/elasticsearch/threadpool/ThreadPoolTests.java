begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|ThreadPoolTests
specifier|public
class|class
name|ThreadPoolTests
extends|extends
name|ESTestCase
block|{
DECL|method|testIngestThreadPoolNotStartedWithIngestDisabled
specifier|public
name|void
name|testIngestThreadPoolNotStartedWithIngestDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|settings
argument_list|)
expr_stmt|;
for|for
control|(
name|ThreadPool
operator|.
name|Info
name|info
range|:
name|threadPool
operator|.
name|info
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
literal|"ingest"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testIngestThreadPoolStartedWithIngestEnabled
specifier|public
name|void
name|testIngestThreadPoolStartedWithIngestEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.ingest"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|boolean
name|ingestFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ThreadPool
operator|.
name|Info
name|info
range|:
name|threadPool
operator|.
name|info
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ingest"
argument_list|)
condition|)
block|{
name|ingestFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertThat
argument_list|(
name|ingestFound
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

