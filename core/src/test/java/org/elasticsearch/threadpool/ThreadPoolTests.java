begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ThreadPoolTests
specifier|public
class|class
name|ThreadPoolTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBoundedByBelowMin
specifier|public
name|void
name|testBoundedByBelowMin
parameter_list|()
block|{
name|int
name|min
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
name|min
operator|+
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|min
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ThreadPool
operator|.
name|boundedBy
argument_list|(
name|value
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoundedByAboveMax
specifier|public
name|void
name|testBoundedByAboveMax
parameter_list|()
block|{
name|int
name|min
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
name|min
operator|+
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|randomIntBetween
argument_list|(
name|max
operator|+
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ThreadPool
operator|.
name|boundedBy
argument_list|(
name|value
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoundedByBetweenMinAndMax
specifier|public
name|void
name|testBoundedByBetweenMinAndMax
parameter_list|()
block|{
name|int
name|min
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|randomIntBetween
argument_list|(
name|min
operator|+
literal|1
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|randomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ThreadPool
operator|.
name|boundedBy
argument_list|(
name|value
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAbsoluteTime
specifier|public
name|void
name|testAbsoluteTime
parameter_list|()
throws|throws
name|Exception
block|{
name|TestThreadPool
name|threadPool
init|=
operator|new
name|TestThreadPool
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|gotTime
init|=
name|threadPool
operator|.
name|absoluteTimeInMillis
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|gotTime
operator|-
name|currentTime
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"thread pool cached absolute time "
operator|+
name|gotTime
operator|+
literal|" is too far from real current time "
operator|+
name|currentTime
argument_list|,
name|delta
operator|<
literal|10000
argument_list|)
expr_stmt|;
comment|// the delta can be large, we just care it is the same order of magnitude
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

