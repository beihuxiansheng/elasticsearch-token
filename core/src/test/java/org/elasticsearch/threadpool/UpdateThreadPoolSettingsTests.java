begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|UpdateThreadPoolSettingsTests
specifier|public
class|class
name|UpdateThreadPoolSettingsTests
extends|extends
name|ESThreadPoolTestCase
block|{
DECL|method|testCorrectThreadPoolTypePermittedInSettings
specifier|public
name|void
name|testCorrectThreadPoolTypePermittedInSettings
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPoolName
argument_list|()
decl_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|correctThreadPoolType
init|=
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|get
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"testCorrectThreadPoolTypePermittedInSettings"
argument_list|)
operator|.
name|put
argument_list|(
literal|"thread_pool."
operator|+
name|threadPoolName
operator|+
literal|".type"
argument_list|,
name|correctThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ThreadPool
operator|.
name|Info
name|info
init|=
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|threadPoolName
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// we don't report on the "same" thread pool
block|}
else|else
block|{
comment|// otherwise check we have the expected type
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|correctThreadPoolType
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexingThreadPoolsMaxSize
specifier|public
name|void
name|testIndexingThreadPoolsMaxSize
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|name
init|=
name|randomFrom
argument_list|(
name|Names
operator|.
name|BULK
argument_list|,
name|Names
operator|.
name|INDEX
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxSize
init|=
literal|1
operator|+
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
specifier|final
name|int
name|tooBig
init|=
name|randomIntBetween
argument_list|(
literal|1
operator|+
name|maxSize
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// try to create a too big thread pool
specifier|final
name|IllegalArgumentException
name|initial
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|ThreadPool
name|tp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tp
operator|=
operator|new
name|ThreadPool
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"testIndexingThreadPoolsMaxSize"
argument_list|)
operator|.
name|put
argument_list|(
literal|"thread_pool."
operator|+
name|name
operator|+
literal|".size"
argument_list|,
name|tooBig
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|initial
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"Failed to parse value ["
operator|+
name|tooBig
operator|+
literal|"] for setting [thread_pool."
operator|+
name|name
operator|+
literal|".size] must be "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedThreadPoolSize
specifier|private
specifier|static
name|int
name|getExpectedThreadPoolSize
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
condition|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|size
return|;
block|}
block|}
DECL|method|testFixedExecutorType
specifier|public
name|void
name|testFixedExecutorType
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|expectedSize
init|=
name|getExpectedThreadPoolSize
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|threadPoolName
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"testFixedExecutorType"
argument_list|)
operator|.
name|put
argument_list|(
literal|"thread_pool."
operator|+
name|threadPoolName
operator|+
literal|".size"
argument_list|,
name|expectedSize
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep alive does not apply to fixed thread pools
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getKeepAliveTime
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testScalingExecutorType
specifier|public
name|void
name|testScalingExecutorType
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"thread_pool."
operator|+
name|threadPoolName
operator|+
literal|".max"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"testScalingExecutorType"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedMinimum
init|=
literal|"generic"
operator|.
name|equals
argument_list|(
name|threadPoolName
argument_list|)
condition|?
literal|4
else|:
literal|1
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedMinimum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|expectedKeepAlive
init|=
literal|"generic"
operator|.
name|equals
argument_list|(
name|threadPoolName
argument_list|)
condition|?
literal|30
else|:
literal|300
decl_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|seconds
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedKeepAlive
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShutdownNowInterrupts
specifier|public
name|void
name|testShutdownNowInterrupts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"thread_pool."
operator|+
name|threadPoolName
operator|+
literal|".queue_size"
argument_list|,
literal|1000
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"testShutdownNowInterrupts"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|.
name|getSingles
argument_list|()
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|shutDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|oldExecutor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|shutDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|shutDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// if this throws then ThreadPool#shutdownNow did not interrupt
name|assertThat
argument_list|(
name|oldExecutor
operator|.
name|isShutdown
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oldExecutor
operator|.
name|isTerminating
argument_list|()
operator|||
name|oldExecutor
operator|.
name|isTerminated
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCustomThreadPool
specifier|public
name|void
name|testCustomThreadPool
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|ScalingExecutorBuilder
name|scaling
init|=
operator|new
name|ScalingExecutorBuilder
argument_list|(
literal|"my_pool1"
argument_list|,
literal|1
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FixedExecutorBuilder
name|fixed
init|=
operator|new
name|FixedExecutorBuilder
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"my_pool2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"testCustomThreadPool"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|scaling
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
name|ThreadPoolInfo
name|groups
init|=
name|threadPool
operator|.
name|info
argument_list|()
decl_stmt|;
name|boolean
name|foundPool1
init|=
literal|false
decl_stmt|;
name|boolean
name|foundPool2
init|=
literal|false
decl_stmt|;
name|outer
label|:
for|for
control|(
name|ThreadPool
operator|.
name|Info
name|info
range|:
name|groups
control|)
block|{
if|if
condition|(
literal|"my_pool1"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundPool1
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"my_pool2"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundPool2
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getQueueSize
argument_list|()
operator|.
name|singles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Field
name|field
range|:
name|Names
operator|.
name|class
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// This is ok it is a default thread pool
continue|continue
name|outer
continue|;
block|}
block|}
name|fail
argument_list|(
literal|"Unexpected pool name: "
operator|+
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|foundPool1
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|foundPool2
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomThreadPoolName
specifier|private
name|String
name|randomThreadPoolName
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|threadPoolNames
init|=
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|randomFrom
argument_list|(
name|threadPoolNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|threadPoolNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

