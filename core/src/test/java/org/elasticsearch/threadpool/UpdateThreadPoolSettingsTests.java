begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ClusterSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|UpdateThreadPoolSettingsTests
specifier|public
class|class
name|UpdateThreadPoolSettingsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCorrectThreadPoolTypePermittedInSettings
specifier|public
name|void
name|testCorrectThreadPoolTypePermittedInSettings
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPoolName
argument_list|()
decl_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|correctThreadPoolType
init|=
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|get
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testCorrectThreadPoolTypePermittedInSettings"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".type"
argument_list|,
name|correctThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ThreadPool
operator|.
name|Info
name|info
init|=
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
operator|.
name|equals
argument_list|(
name|threadPoolName
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// we don't report on the "same" threadpool
block|}
else|else
block|{
comment|// otherwise check we have the expected type
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|correctThreadPoolType
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testThreadPoolCanNotOverrideThreadPoolType
specifier|public
name|void
name|testThreadPoolCanNotOverrideThreadPoolType
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPoolName
argument_list|()
decl_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|incorrectThreadPoolType
init|=
name|randomIncorrectThreadPoolType
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|correctThreadPoolType
init|=
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|get
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testThreadPoolCanNotOverrideThreadPoolType"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".type"
argument_list|,
name|incorrectThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"setting threadpool."
operator|+
name|threadPoolName
operator|+
literal|".type to "
operator|+
name|incorrectThreadPoolType
operator|.
name|getType
argument_list|()
operator|+
literal|" is not permitted; must be "
operator|+
name|correctThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexingThreadPoolsMaxSize
specifier|public
name|void
name|testIndexingThreadPoolsMaxSize
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPoolName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
operator|new
name|String
index|[]
block|{
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
block|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
block|}
control|)
block|{
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|maxSize
init|=
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// try to create a too-big (maxSize+1) thread pool
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testIndexingThreadPoolsMaxSize"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|name
operator|+
literal|".size"
argument_list|,
name|maxSize
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// confirm it clipped us at the maxSize:
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|name
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setClusterSettings
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
comment|// update it to a tiny size:
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|name
operator|+
literal|".size"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// confirm it worked:
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|name
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to update to too-big size:
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|name
operator|+
literal|".size"
argument_list|,
name|maxSize
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// confirm it clipped us at the maxSize:
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|name
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testUpdateSettingsCanNotChangeThreadPoolType
specifier|public
name|void
name|testUpdateSettingsCanNotChangeThreadPoolType
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPoolName
argument_list|()
decl_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|invalidThreadPoolType
init|=
name|randomIncorrectThreadPoolType
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|validThreadPoolType
init|=
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|get
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testUpdateSettingsCanNotChangeThreadPoolType"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setClusterSettings
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".type"
argument_list|,
name|invalidThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"illegal value can't update [threadpool.] from [{}] to [{"
operator|+
name|threadPoolName
operator|+
literal|".type="
operator|+
name|invalidThreadPoolType
operator|.
name|getType
argument_list|()
operator|+
literal|"}]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"setting threadpool."
operator|+
name|threadPoolName
operator|+
literal|".type to "
operator|+
name|invalidThreadPoolType
operator|.
name|getType
argument_list|()
operator|+
literal|" is not permitted; must be "
operator|+
name|validThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCachedExecutorType
specifier|public
name|void
name|testCachedExecutorType
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|CACHED
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testCachedExecutorType"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|nodeSettings
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setClusterSettings
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|CACHED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".keep_alive"
argument_list|,
literal|"10m"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|CACHED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure keep alive value changed
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|minutes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getKeepAliveTime
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure keep alive value reused
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|minutes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change keep alive
name|Executor
name|oldExecutor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|settings
operator|=
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".keep_alive"
argument_list|,
literal|"1m"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure keep alive value changed
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|minutes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getKeepAliveTime
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure executor didn't change
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|CACHED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|oldExecutor
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the same keep alive
name|settings
operator|=
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".keep_alive"
argument_list|,
literal|"1m"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure keep alive value didn't change
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|minutes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getKeepAliveTime
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure executor didn't change
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|CACHED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|oldExecutor
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExpectedThreadPoolSize
specifier|private
specifier|static
name|int
name|getExpectedThreadPoolSize
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|)
condition|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|size
return|;
block|}
block|}
DECL|method|testFixedExecutorType
specifier|public
name|void
name|testFixedExecutorType
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testFixedExecutorType"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|nodeSettings
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setClusterSettings
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".size"
argument_list|,
literal|"15"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|expectedSize
init|=
name|getExpectedThreadPoolSize
argument_list|(
name|nodeSettings
argument_list|,
name|threadPoolName
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep alive does not apply to fixed thread pools
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getKeepAliveTime
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Put old type back
name|settings
operator|=
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
comment|// Make sure keep alive value is not used
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure keep pool size value were reused
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change size
name|Executor
name|oldExecutor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|settings
operator|=
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".size"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|expectedSize
operator|=
name|getExpectedThreadPoolSize
argument_list|(
name|nodeSettings
argument_list|,
name|threadPoolName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Make sure size values changed
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure executor didn't change
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|oldExecutor
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change queue capacity
name|settings
operator|=
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".queue"
argument_list|,
literal|"500"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testScalingExecutorType
specifier|public
name|void
name|testScalingExecutorType
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Settings
name|nodeSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".size"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testScalingExecutorType"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|nodeSettings
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setClusterSettings
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|minutes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change settings that doesn't require pool replacement
name|Executor
name|oldExecutor
init|=
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".keep_alive"
argument_list|,
literal|"10m"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".min"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".size"
argument_list|,
literal|"15"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|EsThreadPoolExecutor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure keep alive value changed
name|assertThat
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getKeepAlive
argument_list|()
operator|.
name|minutes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|EsThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|)
operator|.
name|getKeepAliveTime
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|oldExecutor
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShutdownNowInterrupts
specifier|public
name|void
name|testShutdownNowInterrupts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".queue_size"
argument_list|,
literal|1000
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testCachedExecutorType"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|nodeSettings
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setClusterSettings
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|.
name|getSingles
argument_list|()
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|oldExecutor
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool."
operator|+
name|threadPoolName
operator|+
literal|".queue_size"
argument_list|,
literal|2000
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|oldExecutor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oldExecutor
operator|.
name|isShutdown
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oldExecutor
operator|.
name|isTerminating
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oldExecutor
operator|.
name|isTerminated
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// should interrupt the thread
name|latch
operator|.
name|await
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// If this throws then ThreadPool#shutdownNow didn't interrupt
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCustomThreadPool
specifier|public
name|void
name|testCustomThreadPool
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool.my_pool1.type"
argument_list|,
literal|"scaling"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.my_pool2.type"
argument_list|,
literal|"fixed"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.my_pool2.size"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"threadpool.my_pool2.queue_size"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"testCustomThreadPool"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
name|ClusterSettings
name|clusterSettings
init|=
operator|new
name|ClusterSettings
argument_list|(
name|nodeSettings
argument_list|,
name|ClusterSettings
operator|.
name|BUILT_IN_CLUSTER_SETTINGS
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setClusterSettings
argument_list|(
name|clusterSettings
argument_list|)
expr_stmt|;
name|ThreadPoolInfo
name|groups
init|=
name|threadPool
operator|.
name|info
argument_list|()
decl_stmt|;
name|boolean
name|foundPool1
init|=
literal|false
decl_stmt|;
name|boolean
name|foundPool2
init|=
literal|false
decl_stmt|;
name|outer
label|:
for|for
control|(
name|ThreadPool
operator|.
name|Info
name|info
range|:
name|groups
control|)
block|{
if|if
condition|(
literal|"my_pool1"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundPool1
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"my_pool2"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundPool2
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getQueueSize
argument_list|()
operator|.
name|singles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Field
name|field
range|:
name|Names
operator|.
name|class
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// This is ok it is a default thread pool
continue|continue
name|outer
continue|;
block|}
block|}
name|fail
argument_list|(
literal|"Unexpected pool name: "
operator|+
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|foundPool1
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|foundPool2
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Updating my_pool2
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"threadpool.my_pool2.size"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|clusterSettings
operator|.
name|applySettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|groups
operator|=
name|threadPool
operator|.
name|info
argument_list|()
expr_stmt|;
name|foundPool1
operator|=
literal|false
expr_stmt|;
name|foundPool2
operator|=
literal|false
expr_stmt|;
name|outer
label|:
for|for
control|(
name|ThreadPool
operator|.
name|Info
name|info
range|:
name|groups
control|)
block|{
if|if
condition|(
literal|"my_pool1"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundPool1
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|SCALING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"my_pool2"
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundPool2
operator|=
literal|true
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|info
operator|.
name|getQueueSize
argument_list|()
operator|.
name|singles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getThreadPoolType
argument_list|()
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Field
name|field
range|:
name|Names
operator|.
name|class
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// This is ok it is a default thread pool
continue|continue
name|outer
continue|;
block|}
block|}
name|fail
argument_list|(
literal|"Unexpected pool name: "
operator|+
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|foundPool1
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|foundPool2
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|terminateThreadPoolIfNeeded
specifier|private
name|void
name|terminateThreadPoolIfNeeded
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|info
specifier|private
name|ThreadPool
operator|.
name|Info
name|info
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|ThreadPool
operator|.
name|Info
name|info
range|:
name|threadPool
operator|.
name|info
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|randomThreadPoolName
specifier|private
name|String
name|randomThreadPoolName
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|threadPoolNames
init|=
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|randomFrom
argument_list|(
name|threadPoolNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|threadPoolNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomIncorrectThreadPoolType
specifier|private
name|ThreadPool
operator|.
name|ThreadPoolType
name|randomIncorrectThreadPoolType
parameter_list|(
name|String
name|threadPoolName
parameter_list|)
block|{
name|Set
argument_list|<
name|ThreadPool
operator|.
name|ThreadPoolType
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|get
argument_list|(
name|threadPoolName
argument_list|)
argument_list|)
expr_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|invalidThreadPoolType
init|=
name|randomFrom
argument_list|(
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ThreadPool
operator|.
name|ThreadPoolType
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|invalidThreadPoolType
return|;
block|}
DECL|method|randomThreadPool
specifier|private
name|String
name|randomThreadPool
parameter_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
name|type
parameter_list|)
block|{
return|return
name|randomFrom
argument_list|(
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|t
lambda|->
name|t
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|t
lambda|->
name|t
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

