begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|FixedThreadPoolTests
specifier|public
class|class
name|FixedThreadPoolTests
extends|extends
name|ESThreadPoolTestCase
block|{
DECL|method|testRejectedExecutionCounter
specifier|public
name|void
name|testRejectedExecutionCounter
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|threadPoolName
init|=
name|randomThreadPool
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|FIXED
argument_list|)
decl_stmt|;
comment|// some of the fixed thread pool are bound by the number of
comment|// cores so we can not exceed that
specifier|final
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|EsExecutors
operator|.
name|numberOfProcessors
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|queueSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
specifier|final
name|long
name|rejections
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|ThreadPool
name|threadPool
init|=
literal|null
decl_stmt|;
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"testRejectedExecutionCounter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"thread_pool."
operator|+
name|threadPoolName
operator|+
literal|".size"
argument_list|,
name|size
argument_list|)
operator|.
name|put
argument_list|(
literal|"thread_pool."
operator|+
name|threadPoolName
operator|+
literal|".queue_size"
argument_list|,
name|queueSize
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
comment|// these tasks will consume the thread pool causing further
comment|// submissions to queue
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|size
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|block
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|block
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// wait for the submitted tasks to be consumed by the thread
comment|// pool
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// these tasks will fill the thread pool queue
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queueSize
condition|;
name|i
operator|++
control|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{}
argument_list|)
expr_stmt|;
block|}
comment|// these tasks will be rejected
name|long
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rejections
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|threadPoolName
argument_list|)
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|e
parameter_list|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
name|block
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|counter
argument_list|,
name|equalTo
argument_list|(
name|rejections
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
argument_list|(
name|threadPool
argument_list|,
name|threadPoolName
argument_list|)
operator|.
name|getRejected
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rejections
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminateThreadPoolIfNeeded
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

