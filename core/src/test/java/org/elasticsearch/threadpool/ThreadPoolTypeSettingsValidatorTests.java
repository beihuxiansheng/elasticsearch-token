begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|settings
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|ThreadPoolTypeSettingsValidatorTests
specifier|public
class|class
name|ThreadPoolTypeSettingsValidatorTests
extends|extends
name|ESTestCase
block|{
DECL|field|validator
specifier|private
name|Validator
name|validator
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|validator
operator|=
name|ThreadPool
operator|.
name|THREAD_POOL_TYPE_SETTINGS_VALIDATOR
expr_stmt|;
block|}
DECL|method|testValidThreadPoolTypeSettings
specifier|public
name|void
name|testValidThreadPoolTypeSettings
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
argument_list|>
name|entry
range|:
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|validateSetting
argument_list|(
name|validator
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInvalidThreadPoolTypeSettings
specifier|public
name|void
name|testInvalidThreadPoolTypeSettings
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ThreadPool
operator|.
name|ThreadPoolType
argument_list|>
name|entry
range|:
name|ThreadPool
operator|.
name|THREAD_POOL_TYPES
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|ThreadPool
operator|.
name|ThreadPoolType
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ThreadPool
operator|.
name|ThreadPoolType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ThreadPool
operator|.
name|ThreadPoolType
name|invalidThreadPoolType
init|=
name|randomFrom
argument_list|(
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ThreadPool
operator|.
name|ThreadPoolType
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedMessage
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"thread pool type for [%s] can only be updated to [%s] but was [%s]"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|invalidThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|validateSetting
argument_list|(
name|validator
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|invalidThreadPoolType
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonThreadPoolTypeSetting
specifier|public
name|void
name|testNonThreadPoolTypeSetting
parameter_list|()
block|{
name|String
name|setting
init|=
name|ThreadPool
operator|.
name|THREADPOOL_GROUP
operator|+
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|+
literal|"foo"
decl_stmt|;
name|String
name|value
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|validator
operator|.
name|validate
argument_list|(
name|setting
argument_list|,
name|value
argument_list|,
name|ClusterState
operator|.
name|PROTO
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSetting
specifier|private
name|String
name|validateSetting
parameter_list|(
name|Validator
name|validator
parameter_list|,
name|String
name|threadPoolName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|validator
operator|.
name|validate
argument_list|(
name|ThreadPool
operator|.
name|THREADPOOL_GROUP
operator|+
name|threadPoolName
operator|+
literal|".type"
argument_list|,
name|value
argument_list|,
name|ClusterState
operator|.
name|PROTO
argument_list|)
return|;
block|}
block|}
end_class

end_unit

