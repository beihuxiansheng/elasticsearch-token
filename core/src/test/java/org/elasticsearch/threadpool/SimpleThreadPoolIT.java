begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.threadpool
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|RegexMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tribe
operator|.
name|TribeIT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|)
DECL|class|SimpleThreadPoolIT
specifier|public
class|class
name|SimpleThreadPoolIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testThreadNames
specifier|public
name|void
name|testThreadNames
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadMXBean
name|threadBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|preNodeStartThreadNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|l
range|:
name|threadBean
operator|.
name|getAllThreadIds
argument_list|()
control|)
block|{
name|ThreadInfo
name|threadInfo
init|=
name|threadBean
operator|.
name|getThreadInfo
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadInfo
operator|!=
literal|null
condition|)
block|{
name|preNodeStartThreadNames
operator|.
name|add
argument_list|(
name|threadInfo
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"pre node threads are {}"
argument_list|,
name|preNodeStartThreadNames
argument_list|)
expr_stmt|;
name|String
name|node
init|=
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"do some indexing, flushing, optimize, and searches"
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|IndexRequestBuilder
index|[]
name|builders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|builders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"str_value"
argument_list|,
literal|"s"
operator|+
name|i
argument_list|)
operator|.
name|array
argument_list|(
literal|"str_values"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"s"
operator|+
operator|(
name|i
operator|*
literal|2
operator|)
block|,
literal|"s"
operator|+
operator|(
name|i
operator|*
literal|2
operator|+
literal|1
operator|)
block|}
argument_list|)
operator|.
name|field
argument_list|(
literal|"l_value"
argument_list|,
name|i
argument_list|)
operator|.
name|array
argument_list|(
literal|"l_values"
argument_list|,
operator|new
name|int
index|[]
block|{
name|i
operator|*
literal|2
block|,
name|i
operator|*
literal|2
operator|+
literal|1
block|}
argument_list|)
operator|.
name|field
argument_list|(
literal|"d_value"
argument_list|,
name|i
argument_list|)
operator|.
name|array
argument_list|(
literal|"d_values"
argument_list|,
operator|new
name|double
index|[]
block|{
name|i
operator|*
literal|2
block|,
name|i
operator|*
literal|2
operator|+
literal|1
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|int
name|numSearches
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSearches
condition|;
name|i
operator|++
control|)
block|{
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"str_value"
argument_list|,
literal|"s"
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"l_value"
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|threadNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|l
range|:
name|threadBean
operator|.
name|getAllThreadIds
argument_list|()
control|)
block|{
name|ThreadInfo
name|threadInfo
init|=
name|threadBean
operator|.
name|getThreadInfo
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadInfo
operator|!=
literal|null
condition|)
block|{
name|threadNames
operator|.
name|add
argument_list|(
name|threadInfo
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"post node threads are {}"
argument_list|,
name|threadNames
argument_list|)
expr_stmt|;
name|threadNames
operator|.
name|removeAll
argument_list|(
name|preNodeStartThreadNames
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"post node *new* threads are {}"
argument_list|,
name|threadNames
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|threadName
range|:
name|threadNames
control|)
block|{
comment|// ignore some shared threads we know that are created within the same VM, like the shared discovery one
comment|// or the ones that are occasionally come up from ESSingleNodeTestCase
if|if
condition|(
name|threadName
operator|.
name|contains
argument_list|(
literal|"[node_s_0]"
argument_list|)
comment|// TODO: this can't possibly be right! single node and integ test are unrelated!
operator|||
name|threadName
operator|.
name|contains
argument_list|(
literal|"Keep-Alive-Timer"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|nodePrefix
init|=
literal|"("
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|InternalTestCluster
operator|.
name|TRANSPORT_CLIENT_PREFIX
argument_list|)
operator|+
literal|")?("
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|ESIntegTestCase
operator|.
name|SUITE_CLUSTER_NODE_PREFIX
argument_list|)
operator|+
literal|"|"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|ESIntegTestCase
operator|.
name|TEST_CLUSTER_NODE_PREFIX
argument_list|)
operator|+
literal|"|"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|TribeIT
operator|.
name|SECOND_CLUSTER_NODE_PREFIX
argument_list|)
operator|+
literal|")"
decl_stmt|;
name|assertThat
argument_list|(
name|threadName
argument_list|,
name|RegexMatcher
operator|.
name|matches
argument_list|(
literal|"\\["
operator|+
name|nodePrefix
operator|+
literal|"\\d+\\]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testThreadPoolLeakingThreadsWithTribeNode
specifier|public
name|void
name|testThreadPoolLeakingThreadsWithTribeNode
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"thread_pool_leaking_threads_tribe_node"
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"tribe.t1.cluster.name"
argument_list|,
literal|"non_existing_cluster"
argument_list|)
comment|//trigger initialization failure of one of the tribes (doesn't require starting the node)
operator|.
name|put
argument_list|(
literal|"tribe.t1.plugin.mandatory"
argument_list|,
literal|"non_existing"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|Node
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The node startup is supposed to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//all good
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"mandatory plugins [non_existing]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPoolSettingsThroughJson
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getPoolSettingsThroughJson
parameter_list|(
name|ThreadPoolInfo
name|info
parameter_list|,
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|info
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|poolsMap
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
init|)
block|{
name|poolsMap
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
return|return
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|poolsMap
operator|.
name|get
argument_list|(
literal|"thread_pool"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

