begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|tasks
operator|.
name|PendingClusterTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|EnableAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|PendingClusterTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|mockstore
operator|.
name|MockRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_class
DECL|class|AbstractSnapshotIntegTestCase
specifier|public
specifier|abstract
class|class
name|AbstractSnapshotIntegTestCase
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
comment|// Rebalancing is causing some checks after restore to randomly fail
comment|// due to https://github.com/elastic/elasticsearch/issues/9421
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|EnableAllocationDecider
operator|.
name|Rebalance
operator|.
name|NONE
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|pluginList
argument_list|(
name|MockRepository
operator|.
name|Plugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getFailureCount
specifier|public
specifier|static
name|long
name|getFailureCount
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|long
name|failureCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RepositoriesService
name|repositoriesService
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
name|MockRepository
name|mockRepository
init|=
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|failureCount
operator|+=
name|mockRepository
operator|.
name|getFailureCount
argument_list|()
expr_stmt|;
block|}
return|return
name|failureCount
return|;
block|}
DECL|method|numberOfFiles
specifier|public
specifier|static
name|int
name|numberOfFiles
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|dir
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|count
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|stopNode
specifier|public
specifier|static
name|void
name|stopNode
parameter_list|(
specifier|final
name|String
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|settings
lambda|->
name|settings
operator|.
name|get
argument_list|(
literal|"node.name"
argument_list|)
operator|.
name|equals
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForBlock
specifier|public
name|void
name|waitForBlock
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|repository
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RepositoriesService
name|repositoriesService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|MockRepository
name|mockRepository
init|=
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
operator|.
name|millis
argument_list|()
condition|)
block|{
if|if
condition|(
name|mockRepository
operator|.
name|blocked
argument_list|()
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Timeout!!!"
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForCompletion
specifier|public
name|SnapshotInfo
name|waitForCompletion
parameter_list|(
name|String
name|repository
parameter_list|,
name|String
name|snapshot
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotId
name|snapshotId
init|=
operator|new
name|SnapshotId
argument_list|(
name|repository
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
operator|.
name|millis
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SnapshotInfo
argument_list|>
name|snapshotInfos
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
name|repository
argument_list|)
operator|.
name|setSnapshots
argument_list|(
name|snapshot
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getSnapshots
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshotInfos
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
comment|// Make sure that snapshot clean up operations are finished
name|ClusterStateResponse
name|stateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|SnapshotsInProgress
name|snapshotsInProgress
init|=
name|stateResponse
operator|.
name|getState
argument_list|()
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotsInProgress
operator|==
literal|null
operator|||
name|snapshotsInProgress
operator|.
name|snapshot
argument_list|(
name|snapshotId
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|snapshotInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Timeout!!!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|blockNodeWithIndex
specifier|public
specifier|static
name|String
name|blockNodeWithIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
for|for
control|(
name|String
name|node
range|:
name|internalCluster
argument_list|()
operator|.
name|nodesInclude
argument_list|(
literal|"test-idx"
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|.
name|repository
argument_list|(
literal|"test-repo"
argument_list|)
operator|)
operator|.
name|blockOnDataFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
name|fail
argument_list|(
literal|"No nodes for the index "
operator|+
name|index
operator|+
literal|" found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|blockAllDataNodes
specifier|public
specifier|static
name|void
name|blockAllDataNodes
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
for|for
control|(
name|RepositoriesService
name|repositoriesService
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
operator|)
operator|.
name|blockOnDataFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unblockAllDataNodes
specifier|public
specifier|static
name|void
name|unblockAllDataNodes
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
for|for
control|(
name|RepositoriesService
name|repositoriesService
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
operator|)
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForBlockOnAnyDataNode
specifier|public
name|void
name|waitForBlockOnAnyDataNode
parameter_list|(
name|String
name|repository
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
literal|false
operator|==
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|RepositoriesService
name|repositoriesService
operator|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
name|MockRepository
name|mockRepository
init|=
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|mockRepository
operator|.
name|blocked
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
operator|,
name|timeout
operator|.
name|millis
parameter_list|()
operator|,
constructor|TimeUnit.MILLISECONDS
block|)
end_class

begin_block
unit|)
block|{
name|fail
argument_list|(
literal|"Timeout waiting for repository block on any data node!!!"
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
unit|}      public
DECL|method|unblockNode
specifier|static
name|void
name|unblockNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|.
name|repository
argument_list|(
literal|"test-repo"
argument_list|)
operator|)
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertBusyPendingTasks
specifier|protected
name|void
name|assertBusyPendingTasks
parameter_list|(
specifier|final
name|String
name|taskPrefix
parameter_list|,
specifier|final
name|int
name|expectedCount
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|PendingClusterTasksResponse
name|tasks
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PendingClusterTask
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
name|task
operator|.
name|getSource
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|taskPrefix
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|expectedCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Cluster state task that blocks waits for the blockOn task to show up and then blocks execution not letting      * any cluster state update task to be performed unless they have priority higher then passThroughPriority.      *      * This class is useful to testing of cluster state update task batching for lower priority tasks.      */
end_comment

begin_class
DECL|class|BlockingClusterStateListener
specifier|protected
class|class
name|BlockingClusterStateListener
implements|implements
name|ClusterStateListener
block|{
DECL|field|blockOn
specifier|private
specifier|final
name|Predicate
argument_list|<
name|ClusterChangedEvent
argument_list|>
name|blockOn
decl_stmt|;
DECL|field|countOn
specifier|private
specifier|final
name|Predicate
argument_list|<
name|ClusterChangedEvent
argument_list|>
name|countOn
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|passThroughPriority
specifier|private
specifier|final
name|Priority
name|passThroughPriority
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|timedOut
specifier|private
name|boolean
name|timedOut
decl_stmt|;
DECL|field|timeout
specifier|private
specifier|final
name|TimeValue
name|timeout
decl_stmt|;
DECL|field|stopWaitingAt
specifier|private
name|long
name|stopWaitingAt
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|BlockingClusterStateListener
specifier|public
name|BlockingClusterStateListener
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
name|String
name|blockOn
parameter_list|,
name|String
name|countOn
parameter_list|,
name|Priority
name|passThroughPriority
parameter_list|)
block|{
comment|// Waiting for the 70 seconds here to make sure that the last check at 65 sec mark in assertBusyPendingTasks has a chance
comment|// to finish before we timeout on the cluster state block. Otherwise the last check in assertBusyPendingTasks kicks in
comment|// after the cluster state block clean up takes place and it's assert doesn't reflect the actual failure
name|this
argument_list|(
name|clusterService
argument_list|,
name|blockOn
argument_list|,
name|countOn
argument_list|,
name|passThroughPriority
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|70
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockingClusterStateListener
specifier|public
name|BlockingClusterStateListener
parameter_list|(
name|ClusterService
name|clusterService
parameter_list|,
specifier|final
name|String
name|blockOn
parameter_list|,
specifier|final
name|String
name|countOn
parameter_list|,
name|Priority
name|passThroughPriority
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|blockOn
operator|=
name|clusterChangedEvent
lambda|->
name|clusterChangedEvent
operator|.
name|source
argument_list|()
operator|.
name|startsWith
argument_list|(
name|blockOn
argument_list|)
expr_stmt|;
name|this
operator|.
name|countOn
operator|=
name|clusterChangedEvent
lambda|->
name|clusterChangedEvent
operator|.
name|source
argument_list|()
operator|.
name|startsWith
argument_list|(
name|countOn
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|passThroughPriority
operator|=
name|passThroughPriority
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|unblock
specifier|public
name|void
name|unblock
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|blockOn
operator|.
name|test
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"blocking cluster state tasks on [{}]"
argument_list|,
name|event
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|stopWaitingAt
operator|<
literal|0
assert|;
comment|// Make sure we are the first time here
name|stopWaitingAt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
operator|.
name|getMillis
argument_list|()
expr_stmt|;
name|addBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|countOn
operator|.
name|test
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
DECL|method|addBlock
specifier|private
name|void
name|addBlock
parameter_list|()
block|{
comment|// We should block after this task - add blocking cluster state update task
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"test_block"
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|(
name|passThroughPriority
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|stopWaitingAt
condition|)
block|{
for|for
control|(
name|PendingClusterTask
name|task
range|:
name|clusterService
operator|.
name|pendingTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|task
operator|.
name|getSource
argument_list|()
operator|.
name|string
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test_block"
argument_list|)
operator|==
literal|false
operator|&&
name|passThroughPriority
operator|.
name|sameOrAfter
argument_list|(
name|task
operator|.
name|getPriority
argument_list|()
argument_list|)
condition|)
block|{
comment|// There are other higher priority tasks in the queue and let them pass through and then set the block again
name|logger
operator|.
name|info
argument_list|(
literal|"passing through cluster state task {}"
argument_list|,
name|task
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|addBlock
argument_list|()
expr_stmt|;
return|return
name|currentState
return|;
block|}
block|}
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"waiting...."
argument_list|)
expr_stmt|;
if|if
condition|(
name|latch
operator|.
name|await
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|100
argument_list|,
name|timeout
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
comment|// Done waiting - unblock
name|logger
operator|.
name|info
argument_list|(
literal|"unblocked"
argument_list|)
expr_stmt|;
return|return
name|currentState
return|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"done waiting...."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"interrupted...."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|currentState
return|;
block|}
block|}
name|timedOut
operator|=
literal|true
expr_stmt|;
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to execute [{}]"
argument_list|,
name|t
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|count
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|timedOut
specifier|public
name|boolean
name|timedOut
parameter_list|()
block|{
return|return
name|timedOut
return|;
block|}
block|}
end_class

unit|}
end_unit

