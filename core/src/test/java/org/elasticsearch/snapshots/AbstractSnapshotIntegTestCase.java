begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|EnableAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|mockstore
operator|.
name|MockRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|AbstractSnapshotIntegTestCase
specifier|public
specifier|abstract
class|class
name|AbstractSnapshotIntegTestCase
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
comment|// Rebalancing is causing some checks after restore to randomly fail
comment|// due to https://github.com/elastic/elasticsearch/issues/9421
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|EnableAllocationDecider
operator|.
name|Rebalance
operator|.
name|NONE
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|MockRepository
operator|.
name|Plugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getFailureCount
specifier|public
specifier|static
name|long
name|getFailureCount
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|long
name|failureCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RepositoriesService
name|repositoriesService
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataOrMasterNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
name|MockRepository
name|mockRepository
init|=
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|failureCount
operator|+=
name|mockRepository
operator|.
name|getFailureCount
argument_list|()
expr_stmt|;
block|}
return|return
name|failureCount
return|;
block|}
DECL|method|numberOfFiles
specifier|public
specifier|static
name|int
name|numberOfFiles
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|dir
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|count
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|stopNode
specifier|public
specifier|static
name|void
name|stopNode
parameter_list|(
specifier|final
name|String
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|settings
lambda|->
name|settings
operator|.
name|get
argument_list|(
literal|"node.name"
argument_list|)
operator|.
name|equals
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForBlock
specifier|public
name|void
name|waitForBlock
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|repository
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RepositoriesService
name|repositoriesService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|MockRepository
name|mockRepository
init|=
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
operator|.
name|millis
argument_list|()
condition|)
block|{
if|if
condition|(
name|mockRepository
operator|.
name|blocked
argument_list|()
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Timeout!!!"
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForCompletion
specifier|public
name|SnapshotInfo
name|waitForCompletion
parameter_list|(
name|String
name|repository
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
operator|.
name|millis
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|SnapshotInfo
argument_list|>
name|snapshotInfos
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
name|repository
argument_list|)
operator|.
name|setSnapshots
argument_list|(
name|snapshotName
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getSnapshots
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshotInfos
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
comment|// Make sure that snapshot clean up operations are finished
name|ClusterStateResponse
name|stateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|SnapshotsInProgress
name|snapshotsInProgress
init|=
name|stateResponse
operator|.
name|getState
argument_list|()
operator|.
name|custom
argument_list|(
name|SnapshotsInProgress
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotsInProgress
operator|==
literal|null
condition|)
block|{
return|return
name|snapshotInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SnapshotsInProgress
operator|.
name|Entry
name|entry
range|:
name|snapshotsInProgress
operator|.
name|entries
argument_list|()
control|)
block|{
specifier|final
name|Snapshot
name|curr
init|=
name|entry
operator|.
name|snapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|curr
operator|.
name|getRepository
argument_list|()
operator|.
name|equals
argument_list|(
name|repository
argument_list|)
operator|&&
name|curr
operator|.
name|getSnapshotId
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|false
condition|)
block|{
return|return
name|snapshotInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Timeout!!!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|blockMasterFromFinalizingSnapshot
specifier|public
specifier|static
name|String
name|blockMasterFromFinalizingSnapshot
parameter_list|(
specifier|final
name|String
name|repositoryName
parameter_list|)
block|{
specifier|final
name|String
name|masterName
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|masterName
argument_list|)
operator|.
name|repository
argument_list|(
name|repositoryName
argument_list|)
operator|)
operator|.
name|setBlockOnWriteIndexFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|masterName
return|;
block|}
DECL|method|blockNodeWithIndex
specifier|public
specifier|static
name|String
name|blockNodeWithIndex
parameter_list|(
specifier|final
name|String
name|repositoryName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|)
block|{
for|for
control|(
name|String
name|node
range|:
name|internalCluster
argument_list|()
operator|.
name|nodesInclude
argument_list|(
name|indexName
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|.
name|repository
argument_list|(
name|repositoryName
argument_list|)
operator|)
operator|.
name|blockOnDataFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
name|fail
argument_list|(
literal|"No nodes for the index "
operator|+
name|indexName
operator|+
literal|" found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|blockAllDataNodes
specifier|public
specifier|static
name|void
name|blockAllDataNodes
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
for|for
control|(
name|RepositoriesService
name|repositoriesService
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
operator|)
operator|.
name|blockOnDataFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unblockAllDataNodes
specifier|public
specifier|static
name|void
name|unblockAllDataNodes
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
for|for
control|(
name|RepositoriesService
name|repositoriesService
range|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
operator|)
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForBlockOnAnyDataNode
specifier|public
name|void
name|waitForBlockOnAnyDataNode
parameter_list|(
name|String
name|repository
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
literal|false
operator|==
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|RepositoriesService
name|repositoriesService
operator|:
name|internalCluster
argument_list|()
operator|.
name|getDataNodeInstances
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
control|)
block|{
name|MockRepository
name|mockRepository
init|=
operator|(
name|MockRepository
operator|)
name|repositoriesService
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|mockRepository
operator|.
name|blocked
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
operator|,
name|timeout
operator|.
name|millis
parameter_list|()
operator|,
constructor|TimeUnit.MILLISECONDS
block|)
end_class

begin_block
unit|)
block|{
name|fail
argument_list|(
literal|"Timeout waiting for repository block on any data node!!!"
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
unit|}      public
DECL|method|unblockNode
specifier|static
name|void
name|unblockNode
parameter_list|(
specifier|final
name|String
name|repository
parameter_list|,
specifier|final
name|String
name|node
parameter_list|)
block|{
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|node
argument_list|)
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
operator|)
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

