begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ListenableActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|delete
operator|.
name|DeleteSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|mockstore
operator|.
name|MockRepository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  * Tests for snapshot/restore that require at least 2 threads available  * in the thread pool (for example, tests that use the mock repository that  * block on master).  */
end_comment

begin_class
DECL|class|MinThreadsSnapshotRestoreIT
specifier|public
class|class
name|MinThreadsSnapshotRestoreIT
extends|extends
name|AbstractSnapshotIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"thread_pool.snapshot.core"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"thread_pool.snapshot.max"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|MockRepository
operator|.
name|Plugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|testConcurrentSnapshotDeletionsNotAllowed
specifier|public
name|void
name|testConcurrentSnapshotDeletionsNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating repository"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|repo
init|=
literal|"test-repo"
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
name|repo
argument_list|)
operator|.
name|setType
argument_list|(
literal|"mock"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|randomRepoPath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"random"
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"wait_after_unblock"
argument_list|,
literal|200
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> snapshot twice"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test-idx1"
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|index
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
specifier|final
name|String
name|snapshot1
init|=
literal|"test-snap1"
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|String
name|index2
init|=
literal|"test-idx2"
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|index2
argument_list|,
literal|1
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|index2
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
specifier|final
name|String
name|snapshot2
init|=
literal|"test-snap2"
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot2
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|blockedNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|blockedNode
argument_list|)
operator|.
name|repository
argument_list|(
name|repo
argument_list|)
operator|)
operator|.
name|blockOnDataFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start deletion of first snapshot"
argument_list|)
expr_stmt|;
name|ListenableActionFuture
argument_list|<
name|DeleteSnapshotResponse
argument_list|>
name|future
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareDeleteSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot2
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for block to kick in on node [{}]"
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|waitForBlock
argument_list|(
name|blockedNode
argument_list|,
name|repo
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> try deleting the second snapshot, should fail because the first deletion is in progress"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareDeleteSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to delete snapshots concurrently"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentSnapshotExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot delete - another snapshot is currently being deleted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> unblocking blocked node [{}]"
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|unblockNode
argument_list|(
name|repo
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> wait until first snapshot is finished"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|future
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> delete second snapshot, which should now work"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareDeleteSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
name|repo
argument_list|)
operator|.
name|setSnapshots
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getSnapshots
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSnapshottingWithInProgressDeletionNotAllowed
specifier|public
name|void
name|testSnapshottingWithInProgressDeletionNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating repository"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|repo
init|=
literal|"test-repo"
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
name|repo
argument_list|)
operator|.
name|setType
argument_list|(
literal|"mock"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|randomRepoPath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"random"
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"wait_after_unblock"
argument_list|,
literal|200
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> snapshot"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test-idx"
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|index
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
specifier|final
name|String
name|snapshot1
init|=
literal|"test-snap1"
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|blockedNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|blockedNode
argument_list|)
operator|.
name|repository
argument_list|(
name|repo
argument_list|)
operator|)
operator|.
name|blockOnDataFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start deletion of snapshot"
argument_list|)
expr_stmt|;
name|ListenableActionFuture
argument_list|<
name|DeleteSnapshotResponse
argument_list|>
name|future
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareDeleteSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for block to kick in on node [{}]"
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|waitForBlock
argument_list|(
name|blockedNode
argument_list|,
name|repo
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> try creating a second snapshot, should fail because the deletion is in progress"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|snapshot2
init|=
literal|"test-snap2"
decl_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot2
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to create a snapshot while another is being deleted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentSnapshotExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot snapshot while a snapshot deletion is in-progress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> unblocking blocked node [{}]"
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|unblockNode
argument_list|(
name|repo
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> wait until snapshot deletion is finished"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|future
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating second snapshot, which should now work"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot2
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
name|repo
argument_list|)
operator|.
name|setSnapshots
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getSnapshots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRestoreWithInProgressDeletionsNotAllowed
specifier|public
name|void
name|testRestoreWithInProgressDeletionsNotAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating repository"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|repo
init|=
literal|"test-repo"
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
name|repo
argument_list|)
operator|.
name|setType
argument_list|(
literal|"mock"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|randomRepoPath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"random"
argument_list|,
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"wait_after_unblock"
argument_list|,
literal|200
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> snapshot"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test-idx"
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|index
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
specifier|final
name|String
name|snapshot1
init|=
literal|"test-snap1"
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|String
name|index2
init|=
literal|"test-idx2"
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|index2
argument_list|,
literal|1
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
name|index2
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
specifier|final
name|String
name|snapshot2
init|=
literal|"test-snap2"
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareCreateSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot2
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
name|index
argument_list|,
name|index2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|blockedNode
init|=
name|internalCluster
argument_list|()
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
operator|(
operator|(
name|MockRepository
operator|)
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|,
name|blockedNode
argument_list|)
operator|.
name|repository
argument_list|(
name|repo
argument_list|)
operator|)
operator|.
name|blockOnDataFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start deletion of snapshot"
argument_list|)
expr_stmt|;
name|ListenableActionFuture
argument_list|<
name|DeleteSnapshotResponse
argument_list|>
name|future
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareDeleteSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot2
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for block to kick in on node [{}]"
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|waitForBlock
argument_list|(
name|blockedNode
argument_list|,
name|repo
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> try restoring the other snapshot, should fail because the deletion is in progress"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareRestoreSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to restore a snapshot while another is being deleted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentSnapshotExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot restore a snapshot while a snapshot deletion is in-progress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> unblocking blocked node [{}]"
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|unblockNode
argument_list|(
name|repo
argument_list|,
name|blockedNode
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> wait until snapshot deletion is finished"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|future
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restoring snapshot, which should now work"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareRestoreSnapshot
argument_list|(
name|repo
argument_list|,
name|snapshot1
argument_list|)
operator|.
name|setWaitForCompletion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
name|repo
argument_list|)
operator|.
name|setSnapshots
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getSnapshots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

