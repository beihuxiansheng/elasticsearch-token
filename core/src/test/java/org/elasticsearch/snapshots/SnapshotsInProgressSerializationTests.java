begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.snapshots
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
operator|.
name|Custom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|SnapshotsInProgress
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|IndexId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractDiffableWireSerializationTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|SnapshotsInProgressSerializationTests
specifier|public
class|class
name|SnapshotsInProgressSerializationTests
extends|extends
name|AbstractDiffableWireSerializationTestCase
argument_list|<
name|Custom
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
name|Custom
name|createTestInstance
parameter_list|()
block|{
name|int
name|numberOfSnapshots
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfSnapshots
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|randomSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SnapshotsInProgress
argument_list|(
name|entries
argument_list|)
return|;
block|}
DECL|method|randomSnapshot
specifier|private
name|Entry
name|randomSnapshot
parameter_list|()
block|{
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|new
name|SnapshotId
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|includeGlobalState
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|partial
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|State
name|state
init|=
name|randomFrom
argument_list|(
name|State
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numberOfIndices
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexId
argument_list|>
name|indices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIndices
condition|;
name|i
operator|++
control|)
block|{
name|indices
operator|.
name|add
argument_list|(
operator|new
name|IndexId
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|startTime
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|long
name|repositoryStateId
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|builder
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|shardsCount
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|shardsCount
condition|;
name|j
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|nodeId
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|State
name|shardState
init|=
name|randomFrom
argument_list|(
name|State
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
operator|new
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|(
name|nodeId
argument_list|,
name|shardState
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|ShardId
argument_list|,
name|SnapshotsInProgress
operator|.
name|ShardSnapshotStatus
argument_list|>
name|shards
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|Entry
argument_list|(
name|snapshot
argument_list|,
name|includeGlobalState
argument_list|,
name|partial
argument_list|,
name|state
argument_list|,
name|indices
argument_list|,
name|startTime
argument_list|,
name|repositoryStateId
argument_list|,
name|shards
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|instanceReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|Custom
argument_list|>
name|instanceReader
parameter_list|()
block|{
return|return
name|SnapshotsInProgress
operator|::
operator|new
return|;
block|}
annotation|@
name|Override
DECL|method|makeTestChanges
specifier|protected
name|Custom
name|makeTestChanges
parameter_list|(
name|Custom
name|testInstance
parameter_list|)
block|{
name|SnapshotsInProgress
name|snapshots
init|=
operator|(
name|SnapshotsInProgress
operator|)
name|testInstance
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|snapshots
operator|.
name|entries
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// remove some elements
name|int
name|leaveElements
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|entries
operator|=
name|randomSubsetOf
argument_list|(
name|leaveElements
argument_list|,
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
index|[
name|leaveElements
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// add some elements
name|int
name|addElements
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|addElements
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|randomSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// modify some elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|entries
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|Entry
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|State
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|shards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SnapshotsInProgress
argument_list|(
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|diffReader
specifier|protected
name|Writeable
operator|.
name|Reader
argument_list|<
name|Diff
argument_list|<
name|Custom
argument_list|>
argument_list|>
name|diffReader
parameter_list|()
block|{
return|return
name|SnapshotsInProgress
operator|::
name|readDiffFrom
return|;
block|}
annotation|@
name|Override
DECL|method|getNamedWriteableRegistry
specifier|protected
name|NamedWriteableRegistry
name|getNamedWriteableRegistry
parameter_list|()
block|{
return|return
operator|new
name|NamedWriteableRegistry
argument_list|(
name|ClusterModule
operator|.
name|getNamedWriteables
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

