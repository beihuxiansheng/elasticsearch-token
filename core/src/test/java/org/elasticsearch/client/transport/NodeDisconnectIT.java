begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|MockTransportClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|TransportClient
operator|.
name|CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL
import|;
end_import

begin_class
DECL|class|NodeDisconnectIT
specifier|public
class|class
name|NodeDisconnectIT
extends|extends
name|ESIntegTestCase
block|{
DECL|method|testNotifyOnDisconnect
specifier|public
name|void
name|testNotifyOnDisconnect
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|disconnectedNodes
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|TransportClient
name|client
init|=
operator|new
name|MockTransportClient
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|getClusterName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1h"
argument_list|)
comment|// disable sniffing for better control
operator|.
name|build
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|e
parameter_list|)
lambda|->
name|disconnectedNodes
operator|.
name|add
argument_list|(
name|n
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|TransportService
name|service
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
control|)
block|{
name|client
operator|.
name|addTransportAddress
argument_list|(
name|service
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|internalCluster
argument_list|()
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// fire up requests such that we hit the node and pass it to the listener
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|disconnectedNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|disconnectedNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
DECL|method|testNotifyOnDisconnectInSniffer
specifier|public
name|void
name|testNotifyOnDisconnectInSniffer
parameter_list|()
throws|throws
name|IOException
block|{
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|DiscoveryNode
argument_list|>
name|disconnectedNodes
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|TransportClient
name|client
init|=
operator|new
name|MockTransportClient
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|getClusterName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|e
parameter_list|)
lambda|->
name|disconnectedNodes
operator|.
name|add
argument_list|(
name|n
argument_list|)
argument_list|)
init|)
block|{
name|int
name|numNodes
operator|=
literal|0
block|;
for|for
control|(
name|TransportService
name|service
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
control|)
block|{
name|numNodes
operator|++
expr_stmt|;
name|client
operator|.
name|addTransportAddress
argument_list|(
name|service
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|TransportAddress
argument_list|>
name|discoveryNodes
init|=
name|client
operator|.
name|connectedNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|n
lambda|->
name|n
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numNodes
argument_list|,
name|discoveryNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|disconnectedNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|stopRandomDataNode
argument_list|()
expr_stmt|;
name|client
operator|.
name|getNodesService
argument_list|()
operator|.
name|doSample
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|disconnectedNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|discoveryNodes
operator|.
name|contains
argument_list|(
name|disconnectedNodes
operator|.
name|stream
argument_list|()
operator|.
name|findAny
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|disconnectedNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

unit|} }
end_unit

