begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|MockTransportClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|object
operator|.
name|HasToString
operator|.
name|hasToString
import|;
end_import

begin_class
DECL|class|TransportClientTests
specifier|public
class|class
name|TransportClientTests
extends|extends
name|ESTestCase
block|{
DECL|method|testThatUsingAClosedClientThrowsAnException
specifier|public
name|void
name|testThatUsingAClosedClientThrowsAnException
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|TransportClient
name|client
init|=
operator|new
name|MockTransportClient
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
operator|new
name|ClusterHealthRequest
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"transport client is closed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * test that when plugins are provided that want to register      * {@link NamedWriteable}, those are also made known to the      * {@link NamedWriteableRegistry} of the transport client      */
DECL|method|testPluginNamedWriteablesRegistered
specifier|public
name|void
name|testPluginNamedWriteablesRegistered
parameter_list|()
block|{
name|Settings
name|baseSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|TransportClient
name|client
init|=
operator|new
name|MockTransportClient
argument_list|(
name|baseSettings
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|MockPlugin
operator|.
name|class
argument_list|)
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|client
operator|.
name|namedWriteableRegistry
operator|.
name|getReader
argument_list|(
name|MockPlugin
operator|.
name|MockNamedWriteable
operator|.
name|class
argument_list|,
name|MockPlugin
operator|.
name|MockNamedWriteable
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MockPlugin
specifier|public
specifier|static
class|class
name|MockPlugin
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|getNamedWriteables
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|getNamedWriteables
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Entry
index|[]
block|{
operator|new
name|Entry
argument_list|(
name|MockNamedWriteable
operator|.
name|class
argument_list|,
name|MockNamedWriteable
operator|.
name|NAME
argument_list|,
name|MockNamedWriteable
operator|::
operator|new
argument_list|)
block|}
argument_list|)
return|;
block|}
DECL|class|MockNamedWriteable
specifier|public
class|class
name|MockNamedWriteable
implements|implements
name|NamedWriteable
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"mockNamedWritable"
decl_stmt|;
DECL|method|MockNamedWriteable
name|MockNamedWriteable
parameter_list|(
name|StreamInput
name|in
parameter_list|)
block|{             }
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{             }
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

