begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|liveness
operator|.
name|LivenessResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|liveness
operator|.
name|TransportLivenessAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CustomMatcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|everyItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|TransportClientNodesServiceTests
specifier|public
class|class
name|TransportClientNodesServiceTests
extends|extends
name|ESTestCase
block|{
DECL|class|TestIteration
specifier|private
specifier|static
class|class
name|TestIteration
implements|implements
name|Closeable
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transport
specifier|private
specifier|final
name|FailAndRetryMockTransport
argument_list|<
name|TestResponse
argument_list|>
name|transport
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|transportClientNodesService
specifier|private
specifier|final
name|TransportClientNodesService
name|transportClientNodesService
decl_stmt|;
DECL|field|listNodesCount
specifier|private
specifier|final
name|int
name|listNodesCount
decl_stmt|;
DECL|field|sniffNodesCount
specifier|private
specifier|final
name|int
name|sniffNodesCount
decl_stmt|;
DECL|field|livenessAddress
specifier|private
name|TransportAddress
name|livenessAddress
init|=
name|buildNewFakeTransportAddress
argument_list|()
decl_stmt|;
DECL|field|listNodeAddresses
specifier|final
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|listNodeAddresses
decl_stmt|;
comment|// map for each address of the nodes a cluster state request should respond with
DECL|field|nodeMap
specifier|final
name|Map
argument_list|<
name|TransportAddress
argument_list|,
name|DiscoveryNodes
argument_list|>
name|nodeMap
decl_stmt|;
DECL|method|TestIteration
name|TestIteration
parameter_list|(
name|Object
modifier|...
name|extraSettings
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|extraSettings
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClusterName
name|clusterName
init|=
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TransportAddress
argument_list|>
name|listNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TransportAddress
argument_list|,
name|DiscoveryNodes
argument_list|>
name|nodeMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
name|listNodesCount
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|sniffNodesCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listNodesCount
condition|;
name|i
operator|++
control|)
block|{
name|TransportAddress
name|transportAddress
init|=
name|buildNewFakeTransportAddress
argument_list|()
decl_stmt|;
name|listNodes
operator|.
name|add
argument_list|(
name|transportAddress
argument_list|)
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|discoNodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
name|discoNodes
operator|.
name|add
argument_list|(
operator|new
name|DiscoveryNode
argument_list|(
literal|"#list-node#-"
operator|+
name|transportAddress
argument_list|,
name|transportAddress
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|TransportClient
operator|.
name|CLIENT_TRANSPORT_SNIFF
operator|.
name|get
argument_list|(
name|settings
argument_list|)
condition|)
block|{
specifier|final
name|int
name|numSniffNodes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numSniffNodes
condition|;
operator|++
name|j
control|)
block|{
name|TransportAddress
name|sniffAddress
init|=
name|buildNewFakeTransportAddress
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|sniffNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"#sniff-node#-"
operator|+
name|sniffAddress
argument_list|,
name|sniffAddress
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|discoNodes
operator|.
name|add
argument_list|(
name|sniffNode
argument_list|)
expr_stmt|;
comment|// also allow sniffing of the sniff node itself
name|nodeMap
operator|.
name|put
argument_list|(
name|sniffAddress
argument_list|,
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|sniffNode
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|sniffNodesCount
expr_stmt|;
block|}
block|}
name|nodeMap
operator|.
name|put
argument_list|(
name|transportAddress
argument_list|,
name|discoNodes
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|listNodeAddresses
operator|=
name|listNodes
expr_stmt|;
name|this
operator|.
name|nodeMap
operator|=
name|nodeMap
expr_stmt|;
name|this
operator|.
name|sniffNodesCount
operator|=
name|sniffNodesCount
expr_stmt|;
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
literal|"transport-client-nodes-service-tests"
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|FailAndRetryMockTransport
argument_list|<
name|TestResponse
argument_list|>
argument_list|(
name|random
argument_list|()
argument_list|,
name|clusterName
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocalAddresses
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TestResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ClusterState
name|getMockClusterState
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterName
argument_list|)
operator|.
name|nodes
argument_list|(
name|TestIteration
operator|.
name|this
operator|.
name|nodeMap
operator|.
name|get
argument_list|(
name|node
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|settings
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|,
operator|new
name|TransportInterceptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AsyncSender
name|interceptSender
parameter_list|(
name|AsyncSender
name|sender
parameter_list|)
block|{
return|return
operator|new
name|AsyncSender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
name|void
name|sendRequest
parameter_list|(
name|Transport
operator|.
name|Connection
name|connection
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|,
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|)
block|{
if|if
condition|(
name|TransportLivenessAction
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|sender
operator|.
name|sendRequest
argument_list|(
name|connection
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|,
name|wrapLivenessResponseHandler
argument_list|(
name|handler
argument_list|,
name|connection
operator|.
name|getNode
argument_list|()
argument_list|,
name|clusterName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|sendRequest
argument_list|(
name|connection
argument_list|,
name|action
argument_list|,
name|request
argument_list|,
name|options
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|acceptIncomingRequests
argument_list|()
expr_stmt|;
name|transportClientNodesService
operator|=
operator|new
name|TransportClientNodesService
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|threadPool
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|transportClientNodesService
operator|.
name|addTransportAddresses
argument_list|(
name|listNodeAddresses
operator|.
name|toArray
argument_list|(
operator|new
name|TransportAddress
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|wrapLivenessResponseHandler
specifier|private
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
name|TransportResponseHandler
name|wrapLivenessResponseHandler
parameter_list|(
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
name|handler
parameter_list|,
name|DiscoveryNode
name|node
parameter_list|,
name|ClusterName
name|clusterName
parameter_list|)
block|{
return|return
operator|new
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|newInstance
parameter_list|()
block|{
return|return
name|handler
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|handleResponse
parameter_list|(
name|T
name|response
parameter_list|)
block|{
name|LivenessResponse
name|livenessResponse
init|=
operator|new
name|LivenessResponse
argument_list|(
name|clusterName
argument_list|,
operator|new
name|DiscoveryNode
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|node
operator|.
name|getEphemeralId
argument_list|()
argument_list|,
literal|"liveness-hostname"
operator|+
name|node
operator|.
name|getId
argument_list|()
argument_list|,
literal|"liveness-hostaddress"
operator|+
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|livenessAddress
argument_list|,
name|node
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|node
operator|.
name|getRoles
argument_list|()
argument_list|,
name|node
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handleResponse
argument_list|(
operator|(
name|T
operator|)
name|livenessResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|handler
operator|.
name|handleException
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|handler
operator|.
name|executor
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|transport
operator|.
name|endConnectMode
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|transportClientNodesService
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testListenerFailures
specifier|public
name|void
name|testListenerFailures
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|iters
init|=
name|iterations
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
specifier|final
name|TestIteration
name|iteration
init|=
operator|new
name|TestIteration
argument_list|()
init|)
block|{
name|iteration
operator|.
name|transport
operator|.
name|endConnectMode
argument_list|()
expr_stmt|;
comment|// stop transport from responding early
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|finalFailures
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|finalFailure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|TestResponse
argument_list|>
name|response
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|actionListener
init|=
operator|new
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|TestResponse
name|testResponse
parameter_list|)
block|{
name|response
operator|.
name|set
argument_list|(
name|testResponse
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|finalFailures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|finalFailure
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicInteger
name|preSendFailures
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|iteration
operator|.
name|transportClientNodesService
operator|.
name|execute
argument_list|(
parameter_list|(
name|node
parameter_list|,
name|retryListener
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|preSendFailures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|//throw whatever exception that is not a subclass of ConnectTransportException
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|iteration
operator|.
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
literal|"action"
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|,
name|TransportRequestOptions
operator|.
name|EMPTY
argument_list|,
operator|new
name|TransportResponseHandler
argument_list|<
name|TestResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TestResponse
name|response1
parameter_list|)
block|{
name|retryListener
operator|.
name|onResponse
argument_list|(
name|response1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|retryListener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
else|:
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|actionListener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//there can be only either one failure that causes the request to fail straightaway or success
name|assertThat
argument_list|(
name|preSendFailures
operator|.
name|get
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|finalFailures
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|finalFailure
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|get
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|finalFailures
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|finalFailure
operator|.
name|get
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|preSendFailures
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|&&
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|finalFailure
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NoNodeAvailableException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|triedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|iteration
operator|.
name|listNodesCount
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|triedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|connectTransportExceptions
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testConnectedNodes
specifier|public
name|void
name|testConnectedNodes
parameter_list|()
block|{
name|int
name|iters
init|=
name|iterations
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
specifier|final
name|TestIteration
name|iteration
init|=
operator|new
name|TestIteration
argument_list|()
init|)
block|{
name|assertThat
argument_list|(
name|iteration
operator|.
name|transportClientNodesService
operator|.
name|connectedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|iteration
operator|.
name|listNodesCount
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DiscoveryNode
name|discoveryNode
range|:
name|iteration
operator|.
name|transportClientNodesService
operator|.
name|connectedNodes
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|discoveryNode
operator|.
name|getHostName
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"liveness-"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|discoveryNode
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"liveness-"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|discoveryNode
operator|.
name|getAddress
argument_list|()
argument_list|,
name|iteration
operator|.
name|livenessAddress
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|listNodeAddresses
argument_list|,
name|hasItem
argument_list|(
name|discoveryNode
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRemoveAddressSniff
specifier|public
name|void
name|testRemoveAddressSniff
parameter_list|()
block|{
name|checkRemoveAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAddressSimple
specifier|public
name|void
name|testRemoveAddressSimple
parameter_list|()
block|{
name|checkRemoveAddress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRemoveAddress
specifier|private
name|void
name|checkRemoveAddress
parameter_list|(
name|boolean
name|sniff
parameter_list|)
block|{
name|Object
index|[]
name|extraSettings
init|=
block|{
name|TransportClient
operator|.
name|CLIENT_TRANSPORT_SNIFF
operator|.
name|getKey
argument_list|()
block|,
name|sniff
block|}
decl_stmt|;
try|try
init|(
specifier|final
name|TestIteration
name|iteration
init|=
operator|new
name|TestIteration
argument_list|(
name|extraSettings
argument_list|)
init|)
block|{
specifier|final
name|TransportClientNodesService
name|service
init|=
name|iteration
operator|.
name|transportClientNodesService
decl_stmt|;
name|assertEquals
argument_list|(
name|iteration
operator|.
name|listNodesCount
operator|+
name|iteration
operator|.
name|sniffNodesCount
argument_list|,
name|service
operator|.
name|connectedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TransportAddress
name|addressToRemove
init|=
name|randomFrom
argument_list|(
name|iteration
operator|.
name|listNodeAddresses
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeTransportAddress
argument_list|(
name|addressToRemove
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|connectedNodes
argument_list|()
argument_list|,
name|everyItem
argument_list|(
name|not
argument_list|(
operator|new
name|CustomMatcher
argument_list|<
name|DiscoveryNode
argument_list|>
argument_list|(
literal|"removed address"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|item
parameter_list|)
block|{
return|return
name|item
operator|instanceof
name|DiscoveryNode
operator|&&
operator|(
operator|(
name|DiscoveryNode
operator|)
name|item
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|addressToRemove
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iteration
operator|.
name|listNodesCount
operator|+
name|iteration
operator|.
name|sniffNodesCount
operator|-
literal|1
argument_list|,
name|service
operator|.
name|connectedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestRequest
specifier|public
specifier|static
class|class
name|TestRequest
extends|extends
name|TransportRequest
block|{      }
DECL|class|TestResponse
specifier|private
specifier|static
class|class
name|TestResponse
extends|extends
name|TransportResponse
block|{      }
block|}
end_class

end_unit

