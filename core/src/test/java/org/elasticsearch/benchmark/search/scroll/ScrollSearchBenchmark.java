begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.search.scroll
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|search
operator|.
name|scroll
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|nodeBuilder
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ScrollSearchBenchmark
specifier|public
class|class
name|ScrollSearchBenchmark
block|{
comment|// Run with: -Xms1G -Xms1G
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|indexName
init|=
literal|"test"
decl_stmt|;
name|String
name|typeName
init|=
literal|"type"
decl_stmt|;
name|String
name|clusterName
init|=
name|ScrollSearchBenchmark
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|long
name|numDocs
init|=
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"300k"
argument_list|)
operator|.
name|singles
argument_list|()
decl_stmt|;
name|int
name|requestSize
init|=
literal|50
decl_stmt|;
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Node
index|[]
name|nodes
init|=
operator|new
name|Node
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|=
name|nodeBuilder
argument_list|()
operator|.
name|clusterName
argument_list|(
name|clusterName
argument_list|)
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|node
argument_list|()
expr_stmt|;
block|}
name|Client
name|client
init|=
name|nodes
index|[
literal|0
index|]
operator|.
name|client
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|1
init|;
name|counter
operator|<=
name|numDocs
condition|;
control|)
block|{
name|BulkRequestBuilder
name|bulkRequestBuilder
init|=
name|client
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bulkCounter
init|=
literal|0
init|;
name|bulkCounter
operator|<
literal|100
condition|;
name|bulkCounter
operator|++
control|)
block|{
if|if
condition|(
name|counter
operator|>
name|numDocs
condition|)
block|{
break|break;
block|}
name|bulkRequestBuilder
operator|.
name|add
argument_list|(
name|client
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
name|typeName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|counter
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|indexedDocs
init|=
name|counter
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|indexedDocs
operator|%
literal|100000
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"--> Indexed %d so far\n"
argument_list|,
name|indexedDocs
argument_list|)
expr_stmt|;
block|}
name|bulkRequestBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IndexAlreadyExistsException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Index already exists, ignoring indexing phase, waiting for green"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
name|indexName
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
literal|"10m"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"--> Timed out waiting for cluster health"
argument_list|)
expr_stmt|;
block|}
block|}
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"--> Number of docs in index: %d\n"
argument_list|,
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|counter
init|=
name|numDocs
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"field1"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
operator|.
name|setSize
argument_list|(
name|requestSize
argument_list|)
operator|.
name|setScroll
argument_list|(
literal|"10m"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
operator|!=
name|numDocs
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected total hits [%d] but got [%d]\n"
argument_list|,
name|numDocs
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
operator|!=
name|requestSize
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected hits length [%d] but got [%d]\n"
argument_list|,
name|requestSize
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hit
operator|.
name|sortValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|counter
operator|--
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected sort value [%d] but got [%s]\n"
argument_list|,
name|counter
operator|+
literal|1
argument_list|,
name|hit
operator|.
name|sortValues
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|int
name|scrollRequestCounter
init|=
literal|0
decl_stmt|;
name|long
name|sumTimeSpent
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|timeSpent
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|searchResponse
operator|=
name|client
operator|.
name|prepareSearchScroll
argument_list|(
name|scrollId
argument_list|)
operator|.
name|setScroll
argument_list|(
literal|"10m"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|sumTimeSpent
operator|+=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeSpent
operator|)
expr_stmt|;
name|scrollRequestCounter
operator|++
expr_stmt|;
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
operator|!=
name|numDocs
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected total hits [%d] but got [%d]\n"
argument_list|,
name|numDocs
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scrollRequestCounter
operator|%
literal|20
operator|==
literal|0
condition|)
block|{
name|long
name|avgTimeSpent
init|=
name|sumTimeSpent
operator|/
literal|20
decl_stmt|;
name|JvmStats
operator|.
name|Mem
name|mem
init|=
name|JvmStats
operator|.
name|jvmStats
argument_list|()
operator|.
name|getMem
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Cursor location=%d, avg time spent=%d ms\n"
argument_list|,
operator|(
name|requestSize
operator|*
name|scrollRequestCounter
operator|)
argument_list|,
operator|(
name|avgTimeSpent
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"heap max=%s, used=%s, percentage=%d\n"
argument_list|,
name|mem
operator|.
name|getHeapMax
argument_list|()
argument_list|,
name|mem
operator|.
name|getHeapUsed
argument_list|()
argument_list|,
name|mem
operator|.
name|getHeapUsedPercent
argument_list|()
argument_list|)
expr_stmt|;
name|sumTimeSpent
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
operator|!=
name|requestSize
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected hits length [%d] but got [%d]\n"
argument_list|,
name|requestSize
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hit
operator|.
name|sortValues
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|counter
operator|--
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected sort value [%d] but got [%s]\n"
argument_list|,
name|counter
operator|+
literal|1
argument_list|,
name|hit
operator|.
name|sortValues
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|scrollId
operator|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Counter should be 0 because scroll has been consumed\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Node
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

