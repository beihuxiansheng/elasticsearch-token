begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.monitor.process
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|monitor
operator|.
name|process
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
operator|.
name|ProcessProbe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"use of om.sun.management.ThreadMXBean to compare performance"
argument_list|)
DECL|class|ProcessProbeBenchmark
specifier|public
class|class
name|ProcessProbeBenchmark
block|{
DECL|field|ITERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|ITERATIONS
init|=
literal|100_000
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.logger.prefix"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
specifier|final
name|ESLogger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"benchmark"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> loading process probe"
argument_list|)
expr_stmt|;
name|ProcessProbe
name|probe
init|=
name|ProcessProbe
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> warming up..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|probe
operator|.
name|getOpenFileDescriptorCount
argument_list|()
expr_stmt|;
name|probe
operator|.
name|getMaxFileDescriptorCount
argument_list|()
expr_stmt|;
name|probe
operator|.
name|getTotalVirtualMemorySize
argument_list|()
expr_stmt|;
name|probe
operator|.
name|getProcessCpuPercent
argument_list|()
expr_stmt|;
name|probe
operator|.
name|getProcessCpuTotalTime
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> warmed up"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing 'getOpenFileDescriptorCount' method..."
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|probe
operator|.
name|getOpenFileDescriptorCount
argument_list|()
expr_stmt|;
block|}
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> total [{}] ms, avg [{}] ms"
argument_list|,
name|elapsed
argument_list|,
operator|(
name|elapsed
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing 'getMaxFileDescriptorCount' method..."
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|probe
operator|.
name|getMaxFileDescriptorCount
argument_list|()
expr_stmt|;
block|}
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> total [{}] ms, avg [{}] ms"
argument_list|,
name|elapsed
argument_list|,
operator|(
name|elapsed
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing 'getTotalVirtualMemorySize' method..."
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|probe
operator|.
name|getTotalVirtualMemorySize
argument_list|()
expr_stmt|;
block|}
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> total [{}] ms, avg [{}] ms"
argument_list|,
name|elapsed
argument_list|,
operator|(
name|elapsed
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing 'getProcessCpuPercent' method..."
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|probe
operator|.
name|getProcessCpuPercent
argument_list|()
expr_stmt|;
block|}
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> total [{}] ms, avg [{}] ms"
argument_list|,
name|elapsed
argument_list|,
operator|(
name|elapsed
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing 'getProcessCpuTotalTime' method..."
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|probe
operator|.
name|getProcessCpuTotalTime
argument_list|()
expr_stmt|;
block|}
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> total [{}] ms, avg [{}] ms"
argument_list|,
name|elapsed
argument_list|,
operator|(
name|elapsed
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> calculating process CPU user time with 'getAllThreadIds + getThreadUserTime' methods..."
argument_list|)
expr_stmt|;
specifier|final
name|ThreadMXBean
name|threadMxBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
specifier|final
name|long
index|[]
name|threadIds
init|=
name|threadMxBean
operator|.
name|getAllThreadIds
argument_list|()
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|long
name|threadId
range|:
name|threadIds
control|)
block|{
name|sum
operator|+=
name|threadMxBean
operator|.
name|getThreadUserTime
argument_list|(
name|threadId
argument_list|)
expr_stmt|;
block|}
block|}
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> execution time [total: {} ms, avg: {} ms] for {} iterations with average result of {}"
argument_list|,
name|elapsed
argument_list|,
operator|(
name|elapsed
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|,
name|ITERATIONS
argument_list|,
operator|(
name|sum
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadMxBean
operator|instanceof
name|com
operator|.
name|sun
operator|.
name|management
operator|.
name|ThreadMXBean
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> calculating process CPU user time with 'getAllThreadIds + getThreadUserTime(long[])' methods..."
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|sun
operator|.
name|management
operator|.
name|ThreadMXBean
name|threadMxBean2
init|=
operator|(
name|com
operator|.
name|sun
operator|.
name|management
operator|.
name|ThreadMXBean
operator|)
name|threadMxBean
decl_stmt|;
name|sum
operator|=
literal|0
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|long
index|[]
name|user
init|=
name|threadMxBean2
operator|.
name|getThreadUserTime
argument_list|(
name|threadIds
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|!=
name|threadIds
operator|.
name|length
condition|;
operator|++
name|n
control|)
block|{
name|sum
operator|+=
name|user
index|[
name|n
index|]
expr_stmt|;
block|}
block|}
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> execution time [total: {} ms, avg: {} ms] for {} iterations with average result of {}"
argument_list|,
name|elapsed
argument_list|,
operator|(
name|elapsed
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|,
name|ITERATIONS
argument_list|,
operator|(
name|sum
operator|/
operator|(
name|double
operator|)
name|ITERATIONS
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

