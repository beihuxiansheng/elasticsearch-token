begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ResponseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ResponseListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_comment
comment|/**  * Tests that wait for refresh is fired if the index is closed.  */
end_comment

begin_class
DECL|class|WaitForRefreshAndCloseTests
specifier|public
class|class
name|WaitForRefreshAndCloseTests
extends|extends
name|ESRestTestCase
block|{
annotation|@
name|Before
DECL|method|setupIndex
specifier|public
name|void
name|setupIndex
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"DELETE"
argument_list|,
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
comment|// If we get an error, it should be because the index doesn't exist
name|assertEquals
argument_list|(
literal|404
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"PUT"
argument_list|,
name|indexName
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{\"settings\":{\"refresh_interval\":-1}}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanupIndex
specifier|public
name|void
name|cleanupIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"DELETE"
argument_list|,
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|indexName
specifier|private
name|String
name|indexName
parameter_list|()
block|{
return|return
name|getTestName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
DECL|method|docPath
specifier|private
name|String
name|docPath
parameter_list|()
block|{
return|return
name|indexName
argument_list|()
operator|+
literal|"/test/1"
return|;
block|}
DECL|method|testIndexAndThenClose
specifier|public
name|void
name|testIndexAndThenClose
parameter_list|()
throws|throws
name|Exception
block|{
name|closeWhileListenerEngaged
argument_list|(
name|start
argument_list|(
literal|"PUT"
argument_list|,
literal|""
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{\"test\":\"test\"}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpdateAndThenClose
specifier|public
name|void
name|testUpdateAndThenClose
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"PUT"
argument_list|,
name|docPath
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{\"test\":\"test\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|closeWhileListenerEngaged
argument_list|(
name|start
argument_list|(
literal|"POST"
argument_list|,
literal|"/_update"
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{\"doc\":{\"name\":\"test\"}}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteAndThenClose
specifier|public
name|void
name|testDeleteAndThenClose
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"PUT"
argument_list|,
name|docPath
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{\"test\":\"test\"}"
argument_list|)
argument_list|)
expr_stmt|;
name|closeWhileListenerEngaged
argument_list|(
name|start
argument_list|(
literal|"DELETE"
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|closeWhileListenerEngaged
specifier|private
name|void
name|closeWhileListenerEngaged
parameter_list|(
name|ActionFuture
argument_list|<
name|String
argument_list|>
name|future
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Wait for the refresh listener to start waiting
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stats
decl_stmt|;
try|try
block|{
name|stats
operator|=
name|entityAsMap
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
name|indexName
argument_list|()
operator|+
literal|"/_stats/refresh"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|indices
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|stats
operator|.
name|get
argument_list|(
literal|"indices"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|theIndex
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|indices
operator|.
name|get
argument_list|(
name|indexName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|total
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|theIndex
operator|.
name|get
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|refresh
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|total
operator|.
name|get
argument_list|(
literal|"refresh"
argument_list|)
decl_stmt|;
name|int
name|listeners
init|=
operator|(
name|int
operator|)
name|refresh
operator|.
name|get
argument_list|(
literal|"listeners"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Close the index. That should flush the listener.
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|indexName
argument_list|()
operator|+
literal|"/_close"
argument_list|)
expr_stmt|;
comment|// The request shouldn't fail. It certainly shouldn't hang.
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|start
specifier|private
name|ActionFuture
argument_list|<
name|String
argument_list|>
name|start
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|path
parameter_list|,
name|HttpEntity
name|body
parameter_list|)
block|{
name|PlainActionFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"refresh"
argument_list|,
literal|"wait_for"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"error_trace"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequestAsync
argument_list|(
name|method
argument_list|,
name|docPath
argument_list|()
operator|+
name|path
argument_list|,
name|params
argument_list|,
name|body
argument_list|,
operator|new
name|ResponseListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
try|try
block|{
name|future
operator|.
name|onResponse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|future
operator|.
name|onFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

