begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ResponseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|NodeRestUsageIT
specifier|public
class|class
name|NodeRestUsageIT
extends|extends
name|ESRestTestCase
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testWithRestUsage
specifier|public
name|void
name|testWithRestUsage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First get the current usage figures
name|Response
name|beforeResponse
init|=
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
name|randomFrom
argument_list|(
literal|"_nodes/usage"
argument_list|,
literal|"_nodes/usage/rest_actions"
argument_list|,
literal|"_nodes/usage/_all"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|beforeResponseBodyMap
init|=
name|entityAsMap
argument_list|(
name|beforeResponse
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|beforeResponseBodyMap
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|before_nodesMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|beforeResponseBodyMap
operator|.
name|get
argument_list|(
literal|"_nodes"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|before_nodesMap
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|beforeTotal
init|=
operator|(
name|Integer
operator|)
name|before_nodesMap
operator|.
name|get
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
name|Integer
name|beforeSuccessful
init|=
operator|(
name|Integer
operator|)
name|before_nodesMap
operator|.
name|get
argument_list|(
literal|"successful"
argument_list|)
decl_stmt|;
name|Integer
name|beforeFailed
init|=
operator|(
name|Integer
operator|)
name|before_nodesMap
operator|.
name|get
argument_list|(
literal|"failed"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|beforeTotal
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|beforeSuccessful
argument_list|,
name|equalTo
argument_list|(
name|beforeTotal
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|beforeFailed
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|beforeNodesMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|beforeResponseBodyMap
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|beforeNodesMap
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|beforeNodesMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|beforeSuccessful
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|beforeCombinedRestUsage
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"nodes_usage_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"create_index_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"document_index_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"search_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"refresh_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"cat_indices_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"nodes_info_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"nodes_stats_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
literal|"delete_index_action"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodeEntry
range|:
name|beforeNodesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|beforeRestActionUsage
init|=
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|nodeEntry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"rest_actions"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|beforeRestActionUsage
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|restActionEntry
range|:
name|beforeRestActionUsage
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Long
name|currentUsage
init|=
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
name|restActionEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentUsage
operator|==
literal|null
condition|)
block|{
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
name|restActionEntry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|restActionEntry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|beforeCombinedRestUsage
operator|.
name|put
argument_list|(
name|restActionEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|currentUsage
operator|+
operator|(
operator|(
name|Number
operator|)
name|restActionEntry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Do some requests to get some rest usage stats
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"PUT"
argument_list|,
literal|"/test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
literal|"/test/doc/1"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{ \"foo\": \"bar\"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
literal|"/test/doc/2"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{ \"foo\": \"bar\"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
literal|"/test/doc/3"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{ \"foo\": \"bar\"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/test/_search"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
literal|"/test/doc/4"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{ \"foo\": \"bar\"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
literal|"/test/_refresh"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/_cat/indices"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/_nodes"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/test/_search"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/_nodes/stats"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"DELETE"
argument_list|,
literal|"/test"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"_nodes/usage"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseBodyMap
init|=
name|entityAsMap
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|responseBodyMap
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|_nodesMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|responseBodyMap
operator|.
name|get
argument_list|(
literal|"_nodes"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|_nodesMap
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|total
init|=
operator|(
name|Integer
operator|)
name|_nodesMap
operator|.
name|get
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
name|Integer
name|successful
init|=
operator|(
name|Integer
operator|)
name|_nodesMap
operator|.
name|get
argument_list|(
literal|"successful"
argument_list|)
decl_stmt|;
name|Integer
name|failed
init|=
operator|(
name|Integer
operator|)
name|_nodesMap
operator|.
name|get
argument_list|(
literal|"failed"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|total
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|successful
argument_list|,
name|equalTo
argument_list|(
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failed
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodesMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|responseBodyMap
operator|.
name|get
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodesMap
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesMap
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|successful
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|combinedRestUsage
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodeEntry
range|:
name|nodesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|restActionUsage
init|=
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|nodeEntry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"rest_actions"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|restActionUsage
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|restActionEntry
range|:
name|restActionUsage
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Long
name|currentUsage
init|=
name|combinedRestUsage
operator|.
name|get
argument_list|(
name|restActionEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentUsage
operator|==
literal|null
condition|)
block|{
name|combinedRestUsage
operator|.
name|put
argument_list|(
name|restActionEntry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|restActionEntry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|combinedRestUsage
operator|.
name|put
argument_list|(
name|restActionEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|currentUsage
operator|+
operator|(
operator|(
name|Number
operator|)
name|restActionEntry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"nodes_usage_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"nodes_usage_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"create_index_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"create_index_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"document_index_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"document_index_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"search_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"search_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"refresh_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"refresh_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"cat_indices_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"cat_indices_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"nodes_info_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"nodes_info_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"nodes_stats_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"nodes_stats_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|combinedRestUsage
operator|.
name|get
argument_list|(
literal|"delete_index_action"
argument_list|)
operator|-
name|beforeCombinedRestUsage
operator|.
name|get
argument_list|(
literal|"delete_index_action"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMetricsWithAll
specifier|public
name|void
name|testMetricsWithAll
parameter_list|()
throws|throws
name|IOException
block|{
name|ResponseException
name|exception
init|=
name|expectThrows
argument_list|(
name|ResponseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"_nodes/usage/_all,rest_actions"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"\"type\":\"illegal_argument_exception\","
operator|+
literal|"\"reason\":\"request [_nodes/usage/_all,rest_actions] contains _all and individual metrics [_all,rest_actions]\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

