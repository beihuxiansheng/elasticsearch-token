begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|ExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|MockTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|UserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasToString
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"*"
argument_list|)
DECL|class|RemovePluginCommandTests
specifier|public
class|class
name|RemovePluginCommandTests
extends|extends
name|ESTestCase
block|{
DECL|field|home
specifier|private
name|Path
name|home
decl_stmt|;
DECL|field|env
specifier|private
name|Environment
name|env
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|home
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"plugins"
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|home
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|env
operator|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
DECL|method|removePlugin
specifier|static
name|MockTerminal
name|removePlugin
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|home
parameter_list|,
name|boolean
name|purge
parameter_list|)
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
operator|new
name|Environment
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|home
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
operator|new
name|RemovePluginCommand
argument_list|()
operator|.
name|execute
argument_list|(
name|terminal
argument_list|,
name|env
argument_list|,
name|name
argument_list|,
name|purge
argument_list|)
expr_stmt|;
return|return
name|terminal
return|;
block|}
DECL|method|assertRemoveCleaned
specifier|static
name|void
name|assertRemoveCleaned
parameter_list|(
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|stream
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|".removing"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Removal dir still exists, "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testMissing
specifier|public
name|void
name|testMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|removePlugin
argument_list|(
literal|"dne"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"plugin [dne] not found"
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoveCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|createDirectory
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"plugin.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"subdir"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"other"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoveCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBin
specifier|public
name|void
name|testBin
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|binDir
init|=
name|env
operator|.
name|binFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|binDir
operator|.
name|resolve
argument_list|(
literal|"somescript"
argument_list|)
argument_list|)
expr_stmt|;
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|binFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|binDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoveCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinNotDir
specifier|public
name|void
name|testBinNotDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|removePlugin
argument_list|(
literal|"elasticsearch"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not a directory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// did not remove
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|binFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoveCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfigDirPreserved
specifier|public
name|void
name|testConfigDirPreserved
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|configDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|configDir
operator|.
name|resolve
argument_list|(
literal|"fake.yml"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MockTerminal
name|terminal
init|=
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|expectedConfigDirPreservedMessage
argument_list|(
name|configDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoveCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testPurgePluginExists
specifier|public
name|void
name|testPurgePluginExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|configDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|configDir
operator|.
name|resolve
argument_list|(
literal|"fake.yml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MockTerminal
name|terminal
init|=
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|expectedConfigDirPreservedMessage
argument_list|(
name|configDir
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoveCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testPurgePluginDoesNotExist
specifier|public
name|void
name|testPurgePluginDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|configDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|configDir
operator|.
name|resolve
argument_list|(
literal|"fake.yml"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MockTerminal
name|terminal
init|=
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|expectedConfigDirPreservedMessage
argument_list|(
name|configDir
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoveCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testPurgeNothingExists
specifier|public
name|void
name|testPurgeNothingExists
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
argument_list|,
name|hasToString
argument_list|(
name|containsString
argument_list|(
literal|"plugin [fake] not found"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPurgeOnlyMarkerFileExists
specifier|public
name|void
name|testPurgeOnlyMarkerFileExists
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|configDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|removing
init|=
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|".removing-fake"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|removing
argument_list|)
expr_stmt|;
specifier|final
name|MockTerminal
name|terminal
init|=
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|removing
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|expectedConfigDirPreservedMessage
argument_list|(
name|configDir
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoConfigDirPreserved
specifier|public
name|void
name|testNoConfigDirPreserved
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|configDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
specifier|final
name|MockTerminal
name|terminal
init|=
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|expectedConfigDirPreservedMessage
argument_list|(
name|configDir
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveUninstalledPluginErrors
specifier|public
name|void
name|testRemoveUninstalledPluginErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitCodes
operator|.
name|CONFIG
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"plugin [fake] not found; run 'elasticsearch-plugin list' to get list of installed plugins"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
operator|new
name|RemovePluginCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|addShutdownHook
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-Epath.home="
operator|+
name|home
block|,
literal|"fake"
block|}
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"-> removing [fake]..."
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ERROR: plugin [fake] not found; run 'elasticsearch-plugin list' to get list of installed plugins"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMissingPluginName
specifier|public
name|void
name|testMissingPluginName
parameter_list|()
throws|throws
name|Exception
block|{
name|UserException
name|e
init|=
name|expectThrows
argument_list|(
name|UserException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|removePlugin
argument_list|(
literal|null
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExitCodes
operator|.
name|USAGE
argument_list|,
name|e
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"plugin name is required"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveWhenRemovingMarker
specifier|public
name|void
name|testRemoveWhenRemovingMarker
parameter_list|()
throws|throws
name|Exception
block|{
name|Files
operator|.
name|createDirectory
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"plugin.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|".removing-fake"
argument_list|)
argument_list|)
expr_stmt|;
name|removePlugin
argument_list|(
literal|"fake"
argument_list|,
name|home
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|expectedConfigDirPreservedMessage
specifier|private
name|String
name|expectedConfigDirPreservedMessage
parameter_list|(
specifier|final
name|Path
name|configDir
parameter_list|)
block|{
return|return
literal|"-> preserving plugin config files ["
operator|+
name|configDir
operator|+
literal|"] in case of upgrade; use --purge if not needed"
return|;
block|}
block|}
end_class

end_unit

