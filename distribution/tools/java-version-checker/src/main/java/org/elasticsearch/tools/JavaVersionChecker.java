begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.tools
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Simple program that checks if the runtime Java version is at least 1.8.  */
end_comment

begin_class
DECL|class|JavaVersionChecker
specifier|final
class|class
name|JavaVersionChecker
block|{
DECL|method|JavaVersionChecker
specifier|private
name|JavaVersionChecker
parameter_list|()
block|{     }
DECL|field|JAVA_8
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|JAVA_8
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|/**      * The main entry point. The exit code is 0 if the Java version is at least 1.8, otherwise the exit code is 1.      *      * @param args the args to the program which are rejected if not empty      */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// no leniency!
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected zero arguments but was: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|String
name|javaSpecificationVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|current
init|=
name|parse
argument_list|(
name|javaSpecificationVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
argument_list|(
name|current
argument_list|,
name|JAVA_8
argument_list|)
operator|<
literal|0
condition|)
block|{
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|parse
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|matches
argument_list|(
literal|"^0*[0-9]+(\\.[0-9]+)*$"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|version
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|components
init|=
name|value
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|component
range|:
name|components
control|)
block|{
name|version
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|component
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
DECL|method|compare
specifier|private
specifier|static
name|int
name|compare
parameter_list|(
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|left
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|right
parameter_list|)
block|{
comment|// lexicographically compare two lists, treating missing entries as zeros
specifier|final
name|int
name|len
init|=
name|Math
operator|.
name|max
argument_list|(
name|left
operator|.
name|size
argument_list|()
argument_list|,
name|right
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|l
init|=
operator|(
name|i
operator|<
name|left
operator|.
name|size
argument_list|()
operator|)
condition|?
name|left
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|final
name|int
name|r
init|=
operator|(
name|i
operator|<
name|right
operator|.
name|size
argument_list|()
operator|)
condition|?
name|right
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|<
name|r
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|r
operator|<
name|l
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"exit"
argument_list|)
DECL|method|exit
specifier|private
specifier|static
name|void
name|exit
parameter_list|(
specifier|final
name|int
name|status
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

