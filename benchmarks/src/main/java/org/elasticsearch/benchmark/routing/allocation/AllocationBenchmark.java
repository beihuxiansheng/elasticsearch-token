begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|AllocationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|RoutingAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|Fork
argument_list|(
literal|3
argument_list|)
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|10
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|10
argument_list|)
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|//invoked by benchmarking framework
DECL|class|AllocationBenchmark
specifier|public
class|class
name|AllocationBenchmark
block|{
comment|// Do NOT make any field final (even if it is not annotated with @Param)! See also
comment|// http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_10_ConstantFold.java
comment|// we cannot use individual @Params as some will lead to invalid combinations which do not let the benchmark terminate. JMH offers no
comment|// support to constrain the combinations of benchmark parameters and we do not want to rely on OptionsBuilder as each benchmark would
comment|// need its own main method and we cannot execute more than one class with a main method per JAR.
annotation|@
name|Param
argument_list|(
block|{
comment|// indices, shards, replicas, nodes
literal|"       10,      1,        0,     1"
block|,
literal|"       10,      3,        0,     1"
block|,
literal|"       10,     10,        0,     1"
block|,
literal|"      100,      1,        0,     1"
block|,
literal|"      100,      3,        0,     1"
block|,
literal|"      100,     10,        0,     1"
block|,
literal|"       10,      1,        0,    10"
block|,
literal|"       10,      3,        0,    10"
block|,
literal|"       10,     10,        0,    10"
block|,
literal|"      100,      1,        0,    10"
block|,
literal|"      100,      3,        0,    10"
block|,
literal|"      100,     10,        0,    10"
block|,
literal|"       10,      1,        1,    10"
block|,
literal|"       10,      3,        1,    10"
block|,
literal|"       10,     10,        1,    10"
block|,
literal|"      100,      1,        1,    10"
block|,
literal|"      100,      3,        1,    10"
block|,
literal|"      100,     10,        1,    10"
block|,
literal|"       10,      1,        2,    10"
block|,
literal|"       10,      3,        2,    10"
block|,
literal|"       10,     10,        2,    10"
block|,
literal|"      100,      1,        2,    10"
block|,
literal|"      100,      3,        2,    10"
block|,
literal|"      100,     10,        2,    10"
block|,
literal|"       10,      1,        0,    50"
block|,
literal|"       10,      3,        0,    50"
block|,
literal|"       10,     10,        0,    50"
block|,
literal|"      100,      1,        0,    50"
block|,
literal|"      100,      3,        0,    50"
block|,
literal|"      100,     10,        0,    50"
block|,
literal|"       10,      1,        1,    50"
block|,
literal|"       10,      3,        1,    50"
block|,
literal|"       10,     10,        1,    50"
block|,
literal|"      100,      1,        1,    50"
block|,
literal|"      100,      3,        1,    50"
block|,
literal|"      100,     10,        1,    50"
block|,
literal|"       10,      1,        2,    50"
block|,
literal|"       10,      3,        2,    50"
block|,
literal|"       10,     10,        2,    50"
block|,
literal|"      100,      1,        2,    50"
block|,
literal|"      100,      3,        2,    50"
block|,
literal|"      100,     10,        2,    50"
block|}
argument_list|)
DECL|field|indicesShardsReplicasNodes
specifier|public
name|String
name|indicesShardsReplicasNodes
init|=
literal|"10,1,0,1"
decl_stmt|;
DECL|field|numTags
specifier|public
name|int
name|numTags
init|=
literal|2
decl_stmt|;
DECL|field|strategy
specifier|private
name|AllocationService
name|strategy
decl_stmt|;
DECL|field|initialClusterState
specifier|private
name|ClusterState
name|initialClusterState
decl_stmt|;
annotation|@
name|Setup
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|params
init|=
name|indicesShardsReplicasNodes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|numIndices
init|=
name|toInt
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|numShards
init|=
name|toInt
argument_list|(
name|params
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|numReplicas
init|=
name|toInt
argument_list|(
name|params
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
name|numNodes
init|=
name|toInt
argument_list|(
name|params
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|strategy
operator|=
name|Allocators
operator|.
name|createAllocationService
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.routing.allocation.awareness.attributes"
argument_list|,
literal|"tag"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|MetaData
operator|.
name|Builder
name|mb
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|mb
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test_"
operator|+
name|i
argument_list|)
operator|.
name|settings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.version.created"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numReplicas
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MetaData
name|metaData
init|=
name|mb
operator|.
name|build
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|rb
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|rb
operator|.
name|addAsNew
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
literal|"test_"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RoutingTable
name|routingTable
init|=
name|rb
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|nb
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|nb
operator|.
name|add
argument_list|(
name|Allocators
operator|.
name|newNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"tag"
argument_list|,
literal|"tag_"
operator|+
operator|(
name|i
operator|%
name|numTags
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|initialClusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|ClusterName
operator|.
name|CLUSTER_NAME_SETTING
operator|.
name|getDefault
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|nodes
argument_list|(
name|nb
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|toInt
specifier|private
name|int
name|toInt
parameter_list|(
name|String
name|v
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Benchmark
DECL|method|measureAllocation
specifier|public
name|ClusterState
name|measureAllocation
parameter_list|()
block|{
name|ClusterState
name|clusterState
init|=
name|initialClusterState
decl_stmt|;
while|while
condition|(
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|hasUnassignedShards
argument_list|()
condition|)
block|{
name|RoutingAllocation
operator|.
name|Result
name|result
init|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
operator|.
name|shardsWithState
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
argument_list|)
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|result
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|,
literal|"reroute"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingResult
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
block|}
end_class

end_unit

