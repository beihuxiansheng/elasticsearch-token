begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|support
operator|.
name|AbstractBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|support
operator|.
name|PlainBlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|PageSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|StorageMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|options
operator|.
name|ListContainerOptions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|AbstractCloudBlobContainer
specifier|public
class|class
name|AbstractCloudBlobContainer
extends|extends
name|AbstractBlobContainer
block|{
DECL|field|cloudBlobStore
specifier|protected
specifier|final
name|CloudBlobStore
name|cloudBlobStore
decl_stmt|;
DECL|field|cloudPath
specifier|protected
specifier|final
name|String
name|cloudPath
decl_stmt|;
DECL|method|AbstractCloudBlobContainer
specifier|public
name|AbstractCloudBlobContainer
parameter_list|(
name|BlobPath
name|path
parameter_list|,
name|CloudBlobStore
name|cloudBlobStore
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|cloudBlobStore
operator|=
name|cloudBlobStore
expr_stmt|;
name|this
operator|.
name|cloudPath
operator|=
name|path
operator|.
name|buildAsString
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteBlob
annotation|@
name|Override
specifier|public
name|boolean
name|deleteBlob
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
name|cloudBlobStore
operator|.
name|sync
argument_list|()
operator|.
name|removeBlob
argument_list|(
name|cloudBlobStore
operator|.
name|container
argument_list|()
argument_list|,
name|buildBlobPath
argument_list|(
name|blobName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|blobExists
annotation|@
name|Override
specifier|public
name|boolean
name|blobExists
parameter_list|(
name|String
name|blobName
parameter_list|)
block|{
return|return
name|cloudBlobStore
operator|.
name|sync
argument_list|()
operator|.
name|blobExists
argument_list|(
name|cloudBlobStore
operator|.
name|container
argument_list|()
argument_list|,
name|buildBlobPath
argument_list|(
name|blobName
argument_list|)
argument_list|)
return|;
block|}
DECL|method|readBlob
annotation|@
name|Override
specifier|public
name|void
name|readBlob
parameter_list|(
specifier|final
name|String
name|blobName
parameter_list|,
specifier|final
name|ReadBlobListener
name|listener
parameter_list|)
block|{
specifier|final
name|ListenableFuture
argument_list|<
name|?
extends|extends
name|Blob
argument_list|>
name|future
init|=
name|cloudBlobStore
operator|.
name|async
argument_list|()
operator|.
name|getBlob
argument_list|(
name|cloudBlobStore
operator|.
name|container
argument_list|()
argument_list|,
name|buildBlobPath
argument_list|(
name|blobName
argument_list|)
argument_list|)
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Blob
name|blob
decl_stmt|;
try|try
block|{
name|blob
operator|=
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|blob
operator|==
literal|null
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|BlobStoreException
argument_list|(
literal|"No blob found for ["
operator|+
name|buildBlobPath
argument_list|(
name|blobName
argument_list|)
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|cloudBlobStore
operator|.
name|bufferSizeInBytes
argument_list|()
index|]
decl_stmt|;
name|InputStream
name|is
init|=
name|blob
operator|.
name|getContent
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|bytesRead
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|listener
operator|.
name|onPartial
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|cloudBlobStore
operator|.
name|executorService
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// inDirectory expects a directory, not a blob prefix
comment|//    @Override public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(String blobNamePrefix) throws IOException {
comment|//        PageSet<? extends StorageMetadata> list = cloudBlobStore.sync().list(cloudBlobStore.container(), ListContainerOptions.Builder.recursive().inDirectory(buildBlobPath(blobNamePrefix)));
comment|//        ImmutableMap.Builder<String, BlobMetaData> blobs = ImmutableMap.builder();
comment|//        for (StorageMetadata storageMetadata : list) {
comment|//            String name = storageMetadata.getName().substring(cloudPath.length() + 1);
comment|//            blobs.put(name, new PlainBlobMetaData(name, storageMetadata.getSize(), null));
comment|//        }
comment|//        return blobs.build();
comment|//    }
DECL|method|listBlobs
annotation|@
name|Override
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobs
parameter_list|()
throws|throws
name|IOException
block|{
name|PageSet
argument_list|<
name|?
extends|extends
name|StorageMetadata
argument_list|>
name|list
init|=
name|cloudBlobStore
operator|.
name|sync
argument_list|()
operator|.
name|list
argument_list|(
name|cloudBlobStore
operator|.
name|container
argument_list|()
argument_list|,
name|ListContainerOptions
operator|.
name|Builder
operator|.
name|recursive
argument_list|()
operator|.
name|inDirectory
argument_list|(
name|cloudPath
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageMetadata
name|storageMetadata
range|:
name|list
control|)
block|{
name|String
name|name
init|=
name|storageMetadata
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|cloudPath
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|blobs
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PlainBlobMetaData
argument_list|(
name|name
argument_list|,
name|storageMetadata
operator|.
name|getSize
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|blobs
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|buildBlobPath
specifier|protected
name|String
name|buildBlobPath
parameter_list|(
name|String
name|blobName
parameter_list|)
block|{
return|return
name|cloudPath
operator|+
literal|"/"
operator|+
name|blobName
return|;
block|}
block|}
end_class

end_unit

