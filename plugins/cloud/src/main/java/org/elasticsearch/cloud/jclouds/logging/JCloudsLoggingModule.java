begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.jclouds.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|jclouds
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|logging
operator|.
name|BaseLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|logging
operator|.
name|config
operator|.
name|LoggingModule
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|JCloudsLoggingModule
specifier|public
class|class
name|JCloudsLoggingModule
extends|extends
name|LoggingModule
block|{
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|method|JCloudsLoggingModule
specifier|public
name|JCloudsLoggingModule
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
DECL|method|createLoggerFactory
annotation|@
name|Override
specifier|public
name|Logger
operator|.
name|LoggerFactory
name|createLoggerFactory
parameter_list|()
block|{
return|return
operator|new
name|Logger
operator|.
name|LoggerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Logger
name|getLogger
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|JCloudsESLogger
argument_list|(
name|Loggers
operator|.
name|getLogger
argument_list|(
name|s
operator|.
name|replace
argument_list|(
literal|"org.jclouds"
argument_list|,
literal|"cloud.jclouds"
argument_list|)
argument_list|,
name|settings
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|class|JCloudsESLogger
specifier|private
specifier|static
class|class
name|JCloudsESLogger
extends|extends
name|BaseLogger
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|JCloudsESLogger
specifier|private
name|JCloudsESLogger
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
DECL|method|logError
annotation|@
name|Override
specifier|protected
name|void
name|logError
parameter_list|(
name|String
name|s
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|s
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|logError
annotation|@
name|Override
specifier|protected
name|void
name|logError
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|logWarn
annotation|@
name|Override
specifier|protected
name|void
name|logWarn
parameter_list|(
name|String
name|s
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|s
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|logWarn
annotation|@
name|Override
specifier|protected
name|void
name|logWarn
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|logInfo
annotation|@
name|Override
specifier|protected
name|void
name|logInfo
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|logDebug
annotation|@
name|Override
specifier|protected
name|void
name|logDebug
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|logTrace
annotation|@
name|Override
specifier|protected
name|void
name|logTrace
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|getCategory
annotation|@
name|Override
specifier|public
name|String
name|getCategory
parameter_list|()
block|{
return|return
name|logger
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|isTraceEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isTraceEnabled
argument_list|()
return|;
block|}
DECL|method|isDebugEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isDebugEnabled
argument_list|()
return|;
block|}
DECL|method|isInfoEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isInfoEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isInfoEnabled
argument_list|()
return|;
block|}
DECL|method|isWarnEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isWarnEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isWarnEnabled
argument_list|()
return|;
block|}
DECL|method|isErrorEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isErrorEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isErrorEnabled
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

