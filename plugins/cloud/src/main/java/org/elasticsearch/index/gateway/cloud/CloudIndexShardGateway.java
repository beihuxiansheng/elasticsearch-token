begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.gateway.cloud
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|blobstore
operator|.
name|CloudBlobStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Directories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|ThreadSafeInputStreamIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGatewayRecoveryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGatewaySnapshotFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|throttler
operator|.
name|RecoveryThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|BlobStoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|PageSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|StorageMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|options
operator|.
name|ListContainerOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|domain
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogStreams
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|CloudIndexShardGateway
specifier|public
class|class
name|CloudIndexShardGateway
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|IndexShardGateway
block|{
DECL|field|indexShard
specifier|private
specifier|final
name|InternalIndexShard
name|indexShard
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|recoveryThrottler
specifier|private
specifier|final
name|RecoveryThrottler
name|recoveryThrottler
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|shardLocation
specifier|private
specifier|final
name|Location
name|shardLocation
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|String
name|container
decl_stmt|;
DECL|field|shardDirectory
specifier|private
specifier|final
name|String
name|shardDirectory
decl_stmt|;
DECL|field|shardIndexDirectory
specifier|private
specifier|final
name|String
name|shardIndexDirectory
decl_stmt|;
DECL|field|shardTranslogDirectory
specifier|private
specifier|final
name|String
name|shardTranslogDirectory
decl_stmt|;
DECL|field|blobStoreContext
specifier|private
specifier|final
name|BlobStoreContext
name|blobStoreContext
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|ByteSizeValue
name|chunkSize
decl_stmt|;
DECL|field|currentTranslogPartToWrite
specifier|private
specifier|volatile
name|int
name|currentTranslogPartToWrite
init|=
literal|1
decl_stmt|;
DECL|method|CloudIndexShardGateway
annotation|@
name|Inject
specifier|public
name|CloudIndexShardGateway
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|Store
name|store
parameter_list|,
name|RecoveryThrottler
name|recoveryThrottler
parameter_list|,
name|IndexGateway
name|cloudIndexGateway
parameter_list|,
name|CloudBlobStoreService
name|blobStoreService
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
operator|(
name|InternalIndexShard
operator|)
name|indexShard
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|recoveryThrottler
operator|=
name|recoveryThrottler
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|blobStoreContext
operator|=
name|blobStoreService
operator|.
name|context
argument_list|()
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
operator|(
operator|(
name|CloudIndexGateway
operator|)
name|cloudIndexGateway
operator|)
operator|.
name|chunkSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardLocation
operator|=
operator|(
operator|(
name|CloudIndexGateway
operator|)
name|cloudIndexGateway
operator|)
operator|.
name|indexLocation
argument_list|()
expr_stmt|;
name|this
operator|.
name|container
operator|=
operator|(
operator|(
name|CloudIndexGateway
operator|)
name|cloudIndexGateway
operator|)
operator|.
name|indexContainer
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardDirectory
operator|=
operator|(
operator|(
name|CloudIndexGateway
operator|)
name|cloudIndexGateway
operator|)
operator|.
name|indexDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|shardId
operator|.
name|id
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardIndexDirectory
operator|=
name|shardDirectory
operator|+
literal|"/index"
expr_stmt|;
name|this
operator|.
name|shardTranslogDirectory
operator|=
name|shardDirectory
operator|+
literal|"/translog"
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Using location [{}], container [{}], shard_directory [{}]"
argument_list|,
name|this
operator|.
name|shardLocation
argument_list|,
name|this
operator|.
name|container
argument_list|,
name|this
operator|.
name|shardDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|type
annotation|@
name|Override
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
literal|"cloud"
return|;
block|}
DECL|method|requiresSnapshotScheduling
annotation|@
name|Override
specifier|public
name|boolean
name|requiresSnapshotScheduling
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|toString
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"cloud["
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardLocation
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|shardLocation
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|container
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|delete
parameter_list|)
block|{
if|if
condition|(
operator|!
name|delete
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|metaDatas
init|=
name|listAllMetadatas
argument_list|(
name|container
argument_list|,
name|shardIndexDirectory
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|metaDatas
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|blobStoreContext
operator|.
name|getAsyncBlobStore
argument_list|()
operator|.
name|removeBlob
argument_list|(
name|container
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metaDatas
operator|=
name|listAllMetadatas
argument_list|(
name|container
argument_list|,
name|shardTranslogDirectory
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|metaDatas
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|blobStoreContext
operator|.
name|getAsyncBlobStore
argument_list|()
operator|.
name|removeBlob
argument_list|(
name|container
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|recover
annotation|@
name|Override
specifier|public
name|RecoveryStatus
name|recover
parameter_list|()
throws|throws
name|IndexShardGatewayRecoveryException
block|{
name|RecoveryStatus
operator|.
name|Index
name|recoveryStatusIndex
init|=
name|recoverIndex
argument_list|()
decl_stmt|;
name|RecoveryStatus
operator|.
name|Translog
name|recoveryStatusTranslog
init|=
name|recoverTranslog
argument_list|()
decl_stmt|;
return|return
operator|new
name|RecoveryStatus
argument_list|(
name|recoveryStatusIndex
argument_list|,
name|recoveryStatusTranslog
argument_list|)
return|;
block|}
DECL|method|snapshot
annotation|@
name|Override
specifier|public
name|SnapshotStatus
name|snapshot
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|long
name|totalTimeStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|indexDirty
init|=
literal|false
decl_stmt|;
specifier|final
name|SnapshotIndexCommit
name|snapshotIndexCommit
init|=
name|snapshot
operator|.
name|indexCommit
argument_list|()
decl_stmt|;
specifier|final
name|Translog
operator|.
name|Snapshot
name|translogSnapshot
init|=
name|snapshot
operator|.
name|translogSnapshot
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|allIndicesMetadata
init|=
literal|null
decl_stmt|;
name|int
name|indexNumberOfFiles
init|=
literal|0
decl_stmt|;
name|long
name|indexTotalFilesSize
init|=
literal|0
decl_stmt|;
name|long
name|indexTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|indexChanged
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|indexDirty
operator|=
literal|true
expr_stmt|;
name|allIndicesMetadata
operator|=
name|listAllMetadatas
argument_list|(
name|container
argument_list|,
name|shardIndexDirectory
argument_list|)
expr_stmt|;
comment|// snapshot into the index
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileName
range|:
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
control|)
block|{
comment|// don't copy over the segments file, it will be copied over later on as part of the
comment|// final snapshot phase
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|IndexInput
name|indexInput
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexInput
operator|=
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|long
name|totalLength
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|blobName
init|=
name|shardIndexDirectory
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
name|blobName
operator|=
name|blobName
operator|+
literal|".part"
operator|+
name|counter
expr_stmt|;
block|}
name|StorageMetadata
name|metadata
init|=
name|allIndicesMetadata
operator|.
name|get
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|totalLength
operator|+=
name|metadata
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|totalLength
operator|==
name|indexInput
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// we assume its the same one, no need to copy
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Failed to verify file equality based on length, copying..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|indexInput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|indexNumberOfFiles
operator|++
expr_stmt|;
try|try
block|{
name|indexTotalFilesSize
operator|+=
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore...
block|}
name|deleteFile
argument_list|(
name|shardIndexDirectory
operator|+
literal|"/"
operator|+
name|fileName
argument_list|,
name|allIndicesMetadata
argument_list|)
expr_stmt|;
try|try
block|{
name|copyFromDirectory
argument_list|(
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|latch
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to perform snapshot (index files)"
argument_list|,
name|failures
operator|.
name|get
argument_list|(
name|failures
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
throw|;
block|}
name|indexTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
block|}
name|int
name|translogNumberOfOperations
init|=
literal|0
decl_stmt|;
name|long
name|translogTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|newTranslogCreated
argument_list|()
condition|)
block|{
name|currentTranslogPartToWrite
operator|=
literal|1
expr_stmt|;
name|String
name|translogBlobName
init|=
name|shardTranslogDirectory
operator|+
literal|"/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|translogSnapshot
operator|.
name|translogId
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|currentTranslogPartToWrite
decl_stmt|;
try|try
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"cloud plugin is currently disabled"
argument_list|)
throw|;
block|}
name|currentTranslogPartToWrite
operator|++
expr_stmt|;
name|translogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to snapshot translog into ["
operator|+
name|translogBlobName
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|snapshot
operator|.
name|sameTranslogNewOperations
argument_list|()
condition|)
block|{
name|String
name|translogBlobName
init|=
name|shardTranslogDirectory
operator|+
literal|"/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|translogSnapshot
operator|.
name|translogId
argument_list|()
argument_list|)
operator|+
literal|"."
operator|+
name|currentTranslogPartToWrite
decl_stmt|;
try|try
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"cloud plugin is currently disabled"
argument_list|)
throw|;
block|}
name|currentTranslogPartToWrite
operator|++
expr_stmt|;
name|translogTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to append snapshot translog into ["
operator|+
name|translogBlobName
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// now write the segments file
try|try
block|{
if|if
condition|(
name|indexDirty
condition|)
block|{
name|indexNumberOfFiles
operator|++
expr_stmt|;
name|deleteFile
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|,
name|allIndicesMetadata
argument_list|)
expr_stmt|;
name|indexTotalFilesSize
operator|+=
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IndexInput
name|indexInput
init|=
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
operator|.
name|openInput
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Blob
name|blob
init|=
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|newBlob
argument_list|(
name|shardIndexDirectory
operator|+
literal|"/"
operator|+
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
decl_stmt|;
name|InputStreamIndexInput
name|is
init|=
operator|new
name|InputStreamIndexInput
argument_list|(
name|indexInput
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|blob
operator|.
name|setPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|blob
operator|.
name|setContentLength
argument_list|(
name|is
operator|.
name|actualSizeToRead
argument_list|()
argument_list|)
expr_stmt|;
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|putBlob
argument_list|(
name|container
argument_list|,
name|blob
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|indexTime
operator|+=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
operator|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to finalize index snapshot into ["
operator|+
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// delete the old translog
if|if
condition|(
name|snapshot
operator|.
name|newTranslogCreated
argument_list|()
condition|)
block|{
name|String
name|currentTranslogPrefix
init|=
name|shardTranslogDirectory
operator|+
literal|"/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|translogSnapshot
operator|.
name|translogId
argument_list|()
argument_list|)
operator|+
literal|"."
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|allMetadatas
init|=
name|listAllMetadatas
argument_list|(
name|container
argument_list|,
name|shardTranslogDirectory
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|allMetadatas
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|currentTranslogPrefix
argument_list|)
condition|)
block|{
name|blobStoreContext
operator|.
name|getAsyncBlobStore
argument_list|()
operator|.
name|removeBlob
argument_list|(
name|container
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|indexDirty
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|allIndicesMetadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|blobNameToMatch
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobNameToMatch
operator|.
name|contains
argument_list|(
literal|".part"
argument_list|)
condition|)
block|{
name|blobNameToMatch
operator|=
name|blobNameToMatch
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blobNameToMatch
operator|.
name|indexOf
argument_list|(
literal|".part"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove the directory prefix
name|blobNameToMatch
operator|=
name|blobNameToMatch
operator|.
name|substring
argument_list|(
name|shardIndexDirectory
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileName
range|:
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|blobNameToMatch
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|blobStoreContext
operator|.
name|getAsyncBlobStore
argument_list|()
operator|.
name|removeBlob
argument_list|(
name|container
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SnapshotStatus
argument_list|(
operator|new
name|TimeValue
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|totalTimeStart
argument_list|)
argument_list|,
operator|new
name|SnapshotStatus
operator|.
name|Index
argument_list|(
name|indexNumberOfFiles
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|indexTotalFilesSize
argument_list|)
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|indexTime
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SnapshotStatus
operator|.
name|Translog
argument_list|(
name|translogNumberOfOperations
argument_list|,
operator|new
name|TimeValue
argument_list|(
name|translogTime
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|recoverIndex
specifier|private
name|RecoveryStatus
operator|.
name|Index
name|recoverIndex
parameter_list|()
throws|throws
name|IndexShardGatewayRecoveryException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|allMetaDatas
init|=
name|listAllMetadatas
argument_list|(
name|container
argument_list|,
name|shardIndexDirectory
argument_list|)
decl_stmt|;
comment|// filter out to only have actual files
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|filesMetaDatas
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|allMetaDatas
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|".part"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|filesMetaDatas
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|filesMetaDatas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|throttlingWaitTime
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|filesMetaDatas
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|threadPool
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|long
name|throttlingStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|recoveryThrottler
operator|.
name|tryStream
argument_list|(
name|shardId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|recoveryThrottler
operator|.
name|throttleInterval
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|throttlingWaitTime
operator|.
name|addAndGet
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|throttlingStartTime
argument_list|)
expr_stmt|;
name|copyToDirectory
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|allMetaDatas
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Failed to read ["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"] into ["
operator|+
name|store
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|recoveryThrottler
operator|.
name|streamDone
argument_list|(
name|shardId
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|allMetaDatas
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|totalSize
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
if|if
condition|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
condition|)
block|{
name|version
operator|=
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to fetch index version after copying it over"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|RecoveryStatus
operator|.
name|Index
argument_list|(
name|version
argument_list|,
name|filesMetaDatas
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|totalSize
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|throttlingWaitTime
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|recoverTranslog
specifier|private
name|RecoveryStatus
operator|.
name|Translog
name|recoverTranslog
parameter_list|()
throws|throws
name|IndexShardGatewayRecoveryException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|allMetaDatas
init|=
name|listAllMetadatas
argument_list|(
name|container
argument_list|,
name|shardTranslogDirectory
argument_list|)
decl_stmt|;
name|long
name|latestTranslogId
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|allMetaDatas
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|translogName
init|=
name|name
operator|.
name|substring
argument_list|(
name|shardTranslogDirectory
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|long
name|translogId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|translogName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|translogName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|translogId
operator|>
name|latestTranslogId
condition|)
block|{
name|latestTranslogId
operator|=
name|translogId
expr_stmt|;
block|}
block|}
if|if
condition|(
name|latestTranslogId
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no recovery file found, start the shard and bail
name|indexShard
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|new
name|RecoveryStatus
operator|.
name|Translog
argument_list|(
literal|0
argument_list|)
return|;
block|}
try|try
block|{
name|ArrayList
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|translogPartName
init|=
name|shardTranslogDirectory
operator|+
literal|"/"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|latestTranslogId
argument_list|)
operator|+
literal|"."
operator|+
name|index
decl_stmt|;
if|if
condition|(
operator|!
name|allMetaDatas
operator|.
name|containsKey
argument_list|(
name|translogPartName
argument_list|)
condition|)
block|{
break|break;
block|}
name|Blob
name|blob
init|=
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|getBlob
argument_list|(
name|container
argument_list|,
name|translogPartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|blob
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|size
operator|+=
name|blob
operator|.
name|getContentLength
argument_list|()
expr_stmt|;
name|InputStreamStreamInput
name|streamInput
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|blob
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numberOfOperations
init|=
name|streamInput
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfOperations
condition|;
name|i
operator|++
control|)
block|{
name|operations
operator|.
name|add
argument_list|(
name|readTranslogOperation
argument_list|(
name|streamInput
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|currentTranslogPartToWrite
operator|=
name|index
expr_stmt|;
name|indexShard
operator|.
name|performRecoveryPrepareForTranslog
argument_list|()
expr_stmt|;
name|indexShard
operator|.
name|performRecoveryFinalization
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|RecoveryStatus
operator|.
name|Translog
argument_list|(
name|operations
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to perform recovery of translog"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|listAllMetadatas
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|listAllMetadatas
parameter_list|(
name|String
name|container
parameter_list|,
name|String
name|directory
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|allMetaDatas
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|String
name|nextMarker
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ListContainerOptions
name|options
init|=
name|ListContainerOptions
operator|.
name|Builder
operator|.
name|inDirectory
argument_list|(
name|directory
argument_list|)
operator|.
name|maxResults
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextMarker
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|afterMarker
argument_list|(
name|nextMarker
argument_list|)
expr_stmt|;
block|}
name|PageSet
argument_list|<
name|?
extends|extends
name|StorageMetadata
argument_list|>
name|pageSet
init|=
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|list
argument_list|(
name|container
argument_list|,
name|options
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageMetadata
name|metadata
range|:
name|pageSet
control|)
block|{
name|allMetaDatas
operator|.
name|put
argument_list|(
name|metadata
operator|.
name|getName
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|nextMarker
operator|=
name|pageSet
operator|.
name|getNextMarker
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextMarker
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|allMetaDatas
return|;
block|}
DECL|method|deleteFile
specifier|private
name|void
name|deleteFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|allIndicesMetadata
parameter_list|)
block|{
comment|// first, check and delete all files with this name
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|entry
range|:
name|allIndicesMetadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|blobName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobName
operator|.
name|contains
argument_list|(
literal|".part"
argument_list|)
condition|)
block|{
name|blobName
operator|=
name|blobName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blobName
operator|.
name|indexOf
argument_list|(
literal|".part"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blobName
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|removeBlob
argument_list|(
name|container
argument_list|,
name|blobName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|copyFromDirectory
specifier|private
name|void
name|copyFromDirectory
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|totalLength
init|=
name|dir
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|long
name|numberOfChunks
init|=
name|totalLength
operator|/
name|chunkSize
operator|.
name|bytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalLength
operator|%
name|chunkSize
operator|.
name|bytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|numberOfChunks
operator|++
expr_stmt|;
block|}
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|(
name|numberOfChunks
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfChunks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|chunkNumber
init|=
name|i
decl_stmt|;
name|IndexInput
name|indexInput
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexInput
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
name|chunkNumber
operator|*
name|chunkSize
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|InputStreamIndexInput
name|is
init|=
operator|new
name|ThreadSafeInputStreamIndexInput
argument_list|(
name|indexInput
argument_list|,
name|chunkSize
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|blobName
init|=
name|shardIndexDirectory
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
if|if
condition|(
name|chunkNumber
operator|>
literal|0
condition|)
block|{
name|blobName
operator|+=
literal|".part"
operator|+
name|chunkNumber
expr_stmt|;
block|}
name|Blob
name|blob
init|=
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|newBlob
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
name|blob
operator|.
name|setPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|blob
operator|.
name|setContentLength
argument_list|(
name|is
operator|.
name|actualSizeToRead
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexInput
name|fIndexInput
init|=
name|indexInput
decl_stmt|;
specifier|final
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
name|blobStoreContext
operator|.
name|getAsyncBlobStore
argument_list|()
operator|.
name|putBlob
argument_list|(
name|container
argument_list|,
name|blob
argument_list|)
decl_stmt|;
name|future
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|fIndexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
operator|!
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|indexInput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|copyToDirectory
specifier|private
name|void
name|copyToDirectory
parameter_list|(
name|StorageMetadata
name|metadata
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StorageMetadata
argument_list|>
name|allMetadatas
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|metadata
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|shardIndexDirectory
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|getBlob
argument_list|(
name|container
argument_list|,
name|metadata
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
name|IndexOutput
name|indexOutput
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|blob
operator|.
name|getContent
argument_list|()
argument_list|,
name|indexOutput
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|blob
operator|.
name|getContent
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check the metadatas we have
name|int
name|part
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|partName
init|=
name|metadata
operator|.
name|getName
argument_list|()
operator|+
literal|".part"
operator|+
name|part
decl_stmt|;
if|if
condition|(
operator|!
name|allMetadatas
operator|.
name|containsKey
argument_list|(
name|partName
argument_list|)
condition|)
block|{
break|break;
block|}
name|blob
operator|=
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
operator|.
name|getBlob
argument_list|(
name|container
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|blob
operator|.
name|getContent
argument_list|()
argument_list|,
name|indexOutput
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|blob
operator|.
name|getContent
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|part
operator|++
expr_stmt|;
block|}
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
name|Directories
operator|.
name|sync
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
DECL|method|copy
specifier|private
name|void
name|copy
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|IndexOutput
name|indexOutput
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|indexOutput
operator|.
name|writeBytes
argument_list|(
name|buffer
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

