begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.cloud.aws.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|aws
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
operator|.
name|CustomNameResolver
import|;
end_import

begin_comment
comment|/**  * Resolves certain ec2 related 'meta' hostnames into an actual hostname  * obtained from ec2 meta-data.  *<p />   * Valid config values for {@link Ec2HostnameType}s are -  *<ul>  *<li>_ec2 - maps to privateIpv4</li>  *<li>_ec2:privateIp_ - maps to privateIpv4</li>  *<li>_ec2:privateIpv4_</li>  *<li>_ec2:privateDns_</li>  *<li>_ec2:publicIp_ - maps to publicIpv4</li>  *<li>_ec2:publicIpv4_</li>  *<li>_ec2:publicDns_</li>  *</ul>  * @author Paul_Loy (keteracel)  */
end_comment

begin_class
DECL|class|Ec2NameResolver
specifier|public
class|class
name|Ec2NameResolver
implements|implements
name|CustomNameResolver
block|{
comment|// enum that can be added to over time with more meta-data types (such as ipv6 when this is available)
DECL|enum|Ec2HostnameType
specifier|private
specifier|static
enum|enum
name|Ec2HostnameType
block|{
DECL|enum constant|PRIVATE_IPv4
name|PRIVATE_IPv4
argument_list|(
literal|"_ec2:privateIpv4_"
argument_list|,
literal|"local-ipv4"
argument_list|)
block|,
DECL|enum constant|PRIVATE_DNS
name|PRIVATE_DNS
argument_list|(
literal|"_ec2:privateDns_"
argument_list|,
literal|"local-hostname"
argument_list|)
block|,
DECL|enum constant|PUBLIC_IPv4
name|PUBLIC_IPv4
argument_list|(
literal|"_ec2:publicIpv4_"
argument_list|,
literal|"public-ipv4"
argument_list|)
block|,
DECL|enum constant|PUBLIC_DNS
name|PUBLIC_DNS
argument_list|(
literal|"_ec2:publicDns_"
argument_list|,
literal|"public-hostname"
argument_list|)
block|,
DECL|enum constant|PUBLIC_IP
name|PUBLIC_IP
argument_list|(
literal|"_ec2:publicIp_"
argument_list|,
name|PUBLIC_IPv4
operator|.
name|ec2Name
argument_list|)
block|,
DECL|enum constant|PRIVATE_IP
name|PRIVATE_IP
argument_list|(
literal|"_ec2:privateIp_"
argument_list|,
name|PRIVATE_IPv4
operator|.
name|ec2Name
argument_list|)
block|,
DECL|enum constant|DEFAULT
name|DEFAULT
argument_list|(
literal|"_ec2"
argument_list|,
name|PRIVATE_IPv4
operator|.
name|ec2Name
argument_list|)
block|;
DECL|field|configName
specifier|final
name|String
name|configName
decl_stmt|;
DECL|field|ec2Name
specifier|final
name|String
name|ec2Name
decl_stmt|;
DECL|method|Ec2HostnameType
specifier|private
name|Ec2HostnameType
parameter_list|(
name|String
name|configName
parameter_list|,
name|String
name|ec2Name
parameter_list|)
block|{
name|this
operator|.
name|configName
operator|=
name|configName
expr_stmt|;
name|this
operator|.
name|ec2Name
operator|=
name|ec2Name
expr_stmt|;
block|}
block|}
DECL|field|EC2_METADATA_URL
specifier|private
specifier|static
specifier|final
name|String
name|EC2_METADATA_URL
init|=
literal|"http://169.254.169.254/latest/meta-data/"
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|Ec2HostnameType
name|type
decl_stmt|;
comment|/** 	 * Construct a {@link CustomNameResolver} with the given {@link Ec2HostnameType} 	 * address type. 	 *  	 * @param addressType the type of ec2 host to bind to. 	 */
DECL|method|Ec2NameResolver
specifier|public
name|Ec2NameResolver
parameter_list|(
name|Ec2HostnameType
name|addressType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|addressType
expr_stmt|;
block|}
comment|/** 	 * @return the appropriate host resolved from ec2 meta-data. 	 * @throws IOException if ec2 meta-data cannot be obtained. 	 *  	 * @see CustomNameResolver#resolve() 	 */
annotation|@
name|Override
DECL|method|resolve
specifier|public
name|InetAddress
name|resolve
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|ec2Url
init|=
name|EC2_METADATA_URL
operator|+
name|this
operator|.
name|type
operator|.
name|ec2Name
decl_stmt|;
name|GetMethod
name|ec2MetadataRequest
init|=
operator|new
name|GetMethod
argument_list|(
name|ec2Url
argument_list|)
decl_stmt|;
name|int
name|status
init|=
operator|new
name|HttpClient
argument_list|()
operator|.
name|executeMethod
argument_list|(
name|ec2MetadataRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"unable to retrieve ec2 metadata from {0}. Response: {1} {2}"
argument_list|,
name|ec2Url
argument_list|,
name|status
argument_list|,
name|HttpStatus
operator|.
name|getStatusText
argument_list|(
name|status
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|metadataResult
init|=
name|ec2MetadataRequest
operator|.
name|getResponseBodyAsString
argument_list|()
decl_stmt|;
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|metadataResult
argument_list|)
return|;
block|}
DECL|method|resolvers
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|CustomNameResolver
argument_list|>
name|resolvers
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CustomNameResolver
argument_list|>
name|resolvers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CustomNameResolver
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Ec2HostnameType
name|type
range|:
name|Ec2HostnameType
operator|.
name|values
argument_list|()
control|)
block|{
name|resolvers
operator|.
name|put
argument_list|(
name|type
operator|.
name|configName
argument_list|,
operator|new
name|Ec2NameResolver
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resolvers
return|;
block|}
block|}
end_class

end_unit

