begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.gcs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|gcs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|LowLevelHttpRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|LowLevelHttpResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|json
operator|.
name|Json
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|json
operator|.
name|jackson2
operator|.
name|JacksonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|testing
operator|.
name|http
operator|.
name|MockLowLevelHttpRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|testing
operator|.
name|http
operator|.
name|MockLowLevelHttpResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|path
operator|.
name|PathTrie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_comment
comment|/**  * Mock for {@link HttpTransport} to test Google Cloud Storage service.  *<p>  * This basically handles each type of request used by the {@link GoogleCloudStorageBlobStore} and provides appropriate responses like  * the Google Cloud Storage service would do. It is largely based on official documentation available at https://cloud.google  * .com/storage/docs/json_api/v1/.  */
end_comment

begin_class
DECL|class|MockHttpTransport
specifier|public
class|class
name|MockHttpTransport
extends|extends
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|testing
operator|.
name|http
operator|.
name|MockHttpTransport
block|{
DECL|field|objectsCount
specifier|private
specifier|final
name|AtomicInteger
name|objectsCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|objectsNames
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|objectsNames
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|objectsContent
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|objectsContent
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|handlers
specifier|private
specifier|final
name|PathTrie
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|PathTrie
argument_list|<>
argument_list|(
name|RestUtils
operator|.
name|REST_DECODER
argument_list|)
decl_stmt|;
DECL|method|MockHttpTransport
specifier|public
name|MockHttpTransport
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
comment|// GET Bucket
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/buckets/get
name|handlers
operator|.
name|insert
argument_list|(
literal|"GET https://www.googleapis.com/storage/v1/b/{bucket}"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
literal|"bucket"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"bucket name is missing"
argument_list|)
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
return|return
name|newMockResponse
argument_list|()
operator|.
name|setContent
argument_list|(
name|buildBucketResource
argument_list|(
name|bucket
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
literal|"bucket not found"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// GET Object
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/objects/get
name|handlers
operator|.
name|insert
argument_list|(
literal|"GET https://www.googleapis.com/storage/v1/b/{bucket}/o/{object}"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"object name is missing"
argument_list|)
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|object
range|:
name|objectsNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|object
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|byte
index|[]
name|content
init|=
name|objectsContent
operator|.
name|get
argument_list|(
name|object
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
return|return
name|newMockResponse
argument_list|()
operator|.
name|setContent
argument_list|(
name|buildObjectResource
argument_list|(
name|bucket
argument_list|,
name|name
argument_list|,
name|object
operator|.
name|getKey
argument_list|()
argument_list|,
name|content
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
literal|"object not found"
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Download Object
comment|//
comment|// https://cloud.google.com/storage/docs/request-endpoints
name|handlers
operator|.
name|insert
argument_list|(
literal|"GET https://www.googleapis.com/download/storage/v1/b/{bucket}/o/{object}"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"object name is missing"
argument_list|)
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|object
range|:
name|objectsNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|object
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|byte
index|[]
name|content
init|=
name|objectsContent
operator|.
name|get
argument_list|(
name|object
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"object content is missing"
argument_list|)
return|;
block|}
return|return
name|newMockResponse
argument_list|()
operator|.
name|setContent
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
literal|"object not found"
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Insert Object (initialization)
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/objects/insert
name|handlers
operator|.
name|insert
argument_list|(
literal|"POST https://www.googleapis.com/upload/storage/v1/b/{bucket}/o"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
if|if
condition|(
literal|"resumable"
operator|.
name|equals
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"uploadType"
argument_list|)
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"upload type must be resumable"
argument_list|)
return|;
block|}
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"object name is missing"
argument_list|)
return|;
block|}
name|String
name|objectId
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|objectsCount
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|objectsNames
operator|.
name|put
argument_list|(
name|objectId
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|newMockResponse
argument_list|()
operator|.
name|setStatusCode
argument_list|(
name|RestStatus
operator|.
name|CREATED
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|addHeader
argument_list|(
literal|"Location"
argument_list|,
literal|"https://www.googleapis.com/upload/storage/v1/b/"
operator|+
name|bucket
operator|+
literal|"/o?uploadType=resumable&upload_id="
operator|+
name|objectId
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Insert Object (upload)
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload
name|handlers
operator|.
name|insert
argument_list|(
literal|"PUT https://www.googleapis.com/upload/storage/v1/b/{bucket}/o"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|String
name|objectId
init|=
name|params
operator|.
name|get
argument_list|(
literal|"upload_id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|objectId
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"upload id is missing"
argument_list|)
return|;
block|}
name|String
name|name
init|=
name|objectsNames
operator|.
name|get
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
literal|"object name not found"
argument_list|)
return|;
block|}
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
operator|(
name|int
operator|)
name|req
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|req
operator|.
name|getStreamingContent
argument_list|()
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
name|byte
index|[]
name|content
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|objectsContent
operator|.
name|put
argument_list|(
name|objectId
argument_list|,
name|content
argument_list|)
expr_stmt|;
return|return
name|newMockResponse
argument_list|()
operator|.
name|setContent
argument_list|(
name|buildObjectResource
argument_list|(
name|bucket
argument_list|,
name|name
argument_list|,
name|objectId
argument_list|,
name|content
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// List Objects
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/objects/list
name|handlers
operator|.
name|insert
argument_list|(
literal|"GET https://www.googleapis.com/storage/v1/b/{bucket}/o"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|String
name|prefix
init|=
name|params
operator|.
name|get
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"kind"
argument_list|,
literal|"storage#objects"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"items"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o
range|:
name|objectsNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|o
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
name|buildObjectResource
argument_list|(
name|builder
argument_list|,
name|bucket
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|,
name|o
operator|.
name|getKey
argument_list|()
argument_list|,
name|objectsContent
operator|.
name|get
argument_list|(
name|o
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|newMockResponse
argument_list|()
operator|.
name|setContent
argument_list|(
name|builder
operator|.
name|string
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Delete Object
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/objects/delete
name|handlers
operator|.
name|insert
argument_list|(
literal|"DELETE https://www.googleapis.com/storage/v1/b/{bucket}/o/{object}"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"object name is missing"
argument_list|)
return|;
block|}
name|String
name|objectId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|object
range|:
name|objectsNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|object
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|objectId
operator|=
name|object
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|objectId
operator|!=
literal|null
condition|)
block|{
name|objectsNames
operator|.
name|remove
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
name|objectsContent
operator|.
name|remove
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
return|return
name|newMockResponse
argument_list|()
operator|.
name|setStatusCode
argument_list|(
name|RestStatus
operator|.
name|NO_CONTENT
operator|.
name|getStatus
argument_list|()
argument_list|)
return|;
block|}
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
literal|"object not found"
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Copy Object
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/objects/copy
name|handlers
operator|.
name|insert
argument_list|(
literal|"POST https://www.googleapis.com/storage/v1/b/{srcBucket}/o/{srcObject}/copyTo/b/{destBucket}/o/{destObject}"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|String
name|source
init|=
name|params
operator|.
name|get
argument_list|(
literal|"srcObject"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|source
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"source object name is missing"
argument_list|)
return|;
block|}
name|String
name|dest
init|=
name|params
operator|.
name|get
argument_list|(
literal|"destObject"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|dest
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"destination object name is missing"
argument_list|)
return|;
block|}
name|String
name|srcObjectId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|object
range|:
name|objectsNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|object
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|source
argument_list|)
condition|)
block|{
name|srcObjectId
operator|=
name|object
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|srcObjectId
operator|==
literal|null
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
literal|"source object not found"
argument_list|)
return|;
block|}
name|byte
index|[]
name|content
init|=
name|objectsContent
operator|.
name|get
argument_list|(
name|srcObjectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
literal|"source content can not be found"
argument_list|)
return|;
block|}
name|String
name|destObjectId
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|objectsCount
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|objectsNames
operator|.
name|put
argument_list|(
name|destObjectId
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|objectsContent
operator|.
name|put
argument_list|(
name|destObjectId
argument_list|,
name|content
argument_list|)
expr_stmt|;
return|return
name|newMockResponse
argument_list|()
operator|.
name|setContent
argument_list|(
name|buildObjectResource
argument_list|(
name|bucket
argument_list|,
name|dest
argument_list|,
name|destObjectId
argument_list|,
name|content
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Batch
comment|//
comment|// https://cloud.google.com/storage/docs/json_api/v1/how-tos/batch
name|handlers
operator|.
name|insert
argument_list|(
literal|"POST https://www.googleapis.com/batch"
argument_list|,
parameter_list|(
name|url
parameter_list|,
name|params
parameter_list|,
name|req
parameter_list|)
lambda|->
block|{
name|List
argument_list|<
name|MockLowLevelHttpResponse
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// A batch request body looks like this:
comment|//
comment|//            --__END_OF_PART__
comment|//            Content-Length: 71
comment|//            Content-Type: application/http
comment|//            content-id: 1
comment|//            content-transfer-encoding: binary
comment|//
comment|//            DELETE https://www.googleapis.com/storage/v1/b/ohifkgu/o/foo%2Ftest
comment|//
comment|//
comment|//            --__END_OF_PART__
comment|//            Content-Length: 71
comment|//            Content-Type: application/http
comment|//            content-id: 2
comment|//            content-transfer-encoding: binary
comment|//
comment|//            DELETE https://www.googleapis.com/storage/v1/b/ohifkgu/o/bar%2Ftest
comment|//
comment|//
comment|//            --__END_OF_PART__--
comment|// Here we simply process the request body line by line and delegate to other handlers
comment|// if possible.
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
operator|(
name|int
operator|)
name|req
operator|.
name|getContentLength
argument_list|()
argument_list|)
init|)
block|{
name|req
operator|.
name|getStreamingContent
argument_list|()
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|Streams
operator|.
name|readAllLines
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Callback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Handler
name|handler
init|=
name|handlers
operator|.
name|retrieve
argument_list|(
name|line
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|responses
operator|.
name|add
argument_list|(
name|handler
operator|.
name|execute
argument_list|(
name|line
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Now we can build the response
name|String
name|boundary
init|=
literal|"__END_OF_PART__"
decl_stmt|;
name|String
name|sep
init|=
literal|"--"
decl_stmt|;
name|String
name|line
init|=
literal|"\r\n"
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|MockLowLevelHttpResponse
name|resp
range|:
name|responses
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|sep
argument_list|)
operator|.
name|append
argument_list|(
name|boundary
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"HTTP/1.1 "
argument_list|)
operator|.
name|append
argument_list|(
name|resp
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|resp
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Content-Length: "
argument_list|)
operator|.
name|append
argument_list|(
name|resp
operator|.
name|getContentLength
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|sep
argument_list|)
operator|.
name|append
argument_list|(
name|boundary
argument_list|)
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
return|return
name|newMockResponse
argument_list|()
operator|.
name|setContentType
argument_list|(
literal|"multipart/mixed; boundary="
operator|+
name|boundary
argument_list|)
operator|.
name|setContent
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildRequest
specifier|public
name|LowLevelHttpRequest
name|buildRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MockLowLevelHttpRequest
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LowLevelHttpResponse
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|rawPath
init|=
name|url
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|pathEndPos
init|=
name|url
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathEndPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|rawPath
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathEndPos
argument_list|)
expr_stmt|;
name|RestUtils
operator|.
name|decodeQueryString
argument_list|(
name|url
argument_list|,
name|pathEndPos
operator|+
literal|1
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|Handler
name|handler
init|=
name|handlers
operator|.
name|retrieve
argument_list|(
name|method
operator|+
literal|" "
operator|+
name|rawPath
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
return|return
name|handler
operator|.
name|execute
argument_list|(
name|rawPath
argument_list|,
name|params
argument_list|,
name|this
argument_list|)
return|;
block|}
return|return
name|newMockError
argument_list|(
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
literal|"Unable to handle request [method="
operator|+
name|method
operator|+
literal|", url="
operator|+
name|url
operator|+
literal|"]"
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|newMockResponse
specifier|private
specifier|static
name|MockLowLevelHttpResponse
name|newMockResponse
parameter_list|()
block|{
return|return
operator|new
name|MockLowLevelHttpResponse
argument_list|()
operator|.
name|setContentType
argument_list|(
name|Json
operator|.
name|MEDIA_TYPE
argument_list|)
operator|.
name|setStatusCode
argument_list|(
name|RestStatus
operator|.
name|OK
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|setReasonPhrase
argument_list|(
name|RestStatus
operator|.
name|OK
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newMockError
specifier|private
specifier|static
name|MockLowLevelHttpResponse
name|newMockError
parameter_list|(
name|RestStatus
name|status
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|MockLowLevelHttpResponse
name|response
init|=
name|newMockResponse
argument_list|()
operator|.
name|setStatusCode
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|setReasonPhrase
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|.
name|setContent
argument_list|(
name|buildErrorResource
argument_list|(
name|status
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|response
operator|.
name|setContent
argument_list|(
literal|"Failed to build error resource ["
operator|+
name|message
operator|+
literal|"] because of: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
comment|/**      * Storage Error JSON representation      */
DECL|method|buildErrorResource
specifier|private
specifier|static
name|String
name|buildErrorResource
parameter_list|(
name|RestStatus
name|status
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"error"
argument_list|)
operator|.
name|field
argument_list|(
literal|"code"
argument_list|,
name|status
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"message"
argument_list|,
name|message
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"errors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"domain"
argument_list|,
literal|"global"
argument_list|)
operator|.
name|field
argument_list|(
literal|"reason"
argument_list|,
name|status
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"message"
argument_list|,
name|message
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
return|;
block|}
comment|/**      * Storage Bucket JSON representation as defined in      * https://cloud.google.com/storage/docs/json_api/v1/bucket#resource      */
DECL|method|buildBucketResource
specifier|private
specifier|static
name|String
name|buildBucketResource
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"kind"
argument_list|,
literal|"storage#bucket"
argument_list|)
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|name
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
return|;
block|}
comment|/**      * Storage Object JSON representation as defined in      * https://cloud.google.com/storage/docs/json_api/v1/objects#resource      */
DECL|method|buildObjectResource
specifier|private
specifier|static
name|XContentBuilder
name|buildObjectResource
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|id
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"kind"
argument_list|,
literal|"storage#object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|"/"
argument_list|,
name|bucket
argument_list|,
name|name
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|buildObjectResource
specifier|private
specifier|static
name|String
name|buildObjectResource
parameter_list|(
name|String
name|bucket
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|id
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|buildObjectResource
argument_list|(
name|jsonBuilder
argument_list|()
argument_list|,
name|bucket
argument_list|,
name|name
argument_list|,
name|id
argument_list|,
name|size
argument_list|)
operator|.
name|string
argument_list|()
return|;
block|}
DECL|interface|Handler
interface|interface
name|Handler
block|{
DECL|method|execute
name|MockLowLevelHttpResponse
name|execute
parameter_list|(
name|String
name|url
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|MockLowLevelHttpRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * Instanciates a mocked Storage client for tests.      */
DECL|method|newStorage
specifier|public
specifier|static
name|Storage
name|newStorage
parameter_list|(
name|String
name|bucket
parameter_list|,
name|String
name|applicationName
parameter_list|)
block|{
return|return
operator|new
name|Storage
operator|.
name|Builder
argument_list|(
operator|new
name|MockHttpTransport
argument_list|(
name|bucket
argument_list|)
argument_list|,
operator|new
name|JacksonFactory
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|setApplicationName
argument_list|(
name|applicationName
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

