begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.blobstore.gcs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|gcs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|batch
operator|.
name|BatchRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|batch
operator|.
name|json
operator|.
name|JsonBatchCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|json
operator|.
name|GoogleJsonError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|json
operator|.
name|GoogleJsonResponseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|InputStreamContent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|model
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|model
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|model
operator|.
name|StorageObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|support
operator|.
name|PlainBlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
import|;
end_import

begin_class
DECL|class|GoogleCloudStorageBlobStore
specifier|public
class|class
name|GoogleCloudStorageBlobStore
extends|extends
name|AbstractComponent
implements|implements
name|BlobStore
block|{
comment|/**      * Google Cloud Storage batch requests are limited to 1000 operations      **/
DECL|field|MAX_BATCHING_REQUESTS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BATCHING_REQUESTS
init|=
literal|999
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Storage
name|client
decl_stmt|;
DECL|field|bucket
specifier|private
specifier|final
name|String
name|bucket
decl_stmt|;
DECL|method|GoogleCloudStorageBlobStore
specifier|public
name|GoogleCloudStorageBlobStore
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|bucket
parameter_list|,
name|Storage
name|storageClient
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucket
operator|=
name|bucket
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|storageClient
expr_stmt|;
if|if
condition|(
name|doesBucketExist
argument_list|(
name|bucket
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|BlobStoreException
argument_list|(
literal|"Bucket ["
operator|+
name|bucket
operator|+
literal|"] does not exist"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|blobContainer
specifier|public
name|BlobContainer
name|blobContainer
parameter_list|(
name|BlobPath
name|path
parameter_list|)
block|{
return|return
operator|new
name|GoogleCloudStorageBlobContainer
argument_list|(
name|path
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|BlobPath
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteBlobsByPrefix
argument_list|(
name|path
operator|.
name|buildAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{     }
comment|/**      * Return true if the given bucket exists      *      * @param bucketName name of the bucket      * @return true if the bucket exists, false otherwise      */
DECL|method|doesBucketExist
name|boolean
name|doesBucketExist
parameter_list|(
name|String
name|bucketName
parameter_list|)
block|{
try|try
block|{
return|return
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Bucket
name|bucket
init|=
name|client
operator|.
name|buckets
argument_list|()
operator|.
name|get
argument_list|(
name|bucketName
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|bucket
operator|!=
literal|null
condition|)
block|{
return|return
name|Strings
operator|.
name|hasText
argument_list|(
name|bucket
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|GoogleJsonResponseException
name|e
parameter_list|)
block|{
name|GoogleJsonError
name|error
init|=
name|e
operator|.
name|getDetails
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|==
name|HTTP_NOT_FOUND
operator|)
operator|||
operator|(
operator|(
name|error
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|error
operator|.
name|getCode
argument_list|()
operator|==
name|HTTP_NOT_FOUND
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
literal|false
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BlobStoreException
argument_list|(
literal|"Unable to check if bucket ["
operator|+
name|bucketName
operator|+
literal|"] exists"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * List all blobs in the bucket      *      * @param path base path of the blobs to list      * @return a map of blob names and their metadata      */
DECL|method|listBlobs
name|Map
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
name|listBlobsByPath
argument_list|(
name|bucket
argument_list|,
name|path
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * List all blobs in the bucket which have a prefix      *      * @param path   base path of the blobs to list      * @param prefix prefix of the blobs to list      * @return a map of blob names and their metadata      */
DECL|method|listBlobsByPrefix
name|Map
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobsByPrefix
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
name|listBlobsByPath
argument_list|(
name|bucket
argument_list|,
name|buildKey
argument_list|(
name|path
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Lists all blobs in a given bucket      *      * @param bucketName   name of the bucket      * @param path         base path of the blobs to list      * @param pathToRemove if true, this path part is removed from blob name      * @return a map of blob names and their metadata      */
DECL|method|listBlobsByPath
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobsByPath
parameter_list|(
name|String
name|bucketName
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|pathToRemove
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|blobsStream
argument_list|(
name|client
argument_list|,
name|bucketName
argument_list|,
name|path
argument_list|,
name|MAX_BATCHING_REQUESTS
argument_list|)
operator|.
name|map
argument_list|(
operator|new
name|BlobMetaDataConverter
argument_list|(
name|pathToRemove
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|PlainBlobMetaData
operator|::
name|name
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns true if the blob exists in the bucket      *      * @param blobName name of the blob      * @return true if the blob exists, false otherwise      */
DECL|method|blobExists
name|boolean
name|blobExists
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|StorageObject
name|blob
init|=
name|client
operator|.
name|objects
argument_list|()
operator|.
name|get
argument_list|(
name|bucket
argument_list|,
name|blobName
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|blob
operator|!=
literal|null
condition|)
block|{
return|return
name|Strings
operator|.
name|hasText
argument_list|(
name|blob
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|GoogleJsonResponseException
name|e
parameter_list|)
block|{
name|GoogleJsonError
name|error
init|=
name|e
operator|.
name|getDetails
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|==
name|HTTP_NOT_FOUND
operator|)
operator|||
operator|(
operator|(
name|error
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|error
operator|.
name|getCode
argument_list|()
operator|==
name|HTTP_NOT_FOUND
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
literal|false
return|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns an {@link java.io.InputStream} for a given blob      *      * @param blobName name of the blob      * @return an InputStream      */
DECL|method|readBlob
name|InputStream
name|readBlob
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Storage
operator|.
name|Objects
operator|.
name|Get
name|object
init|=
name|client
operator|.
name|objects
argument_list|()
operator|.
name|get
argument_list|(
name|bucket
argument_list|,
name|blobName
argument_list|)
decl_stmt|;
return|return
name|object
operator|.
name|executeMediaAsInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|GoogleJsonResponseException
name|e
parameter_list|)
block|{
name|GoogleJsonError
name|error
init|=
name|e
operator|.
name|getDetails
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|==
name|HTTP_NOT_FOUND
operator|)
operator|||
operator|(
operator|(
name|error
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|error
operator|.
name|getCode
argument_list|()
operator|==
name|HTTP_NOT_FOUND
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Writes a blob in the bucket.      *      * @param inputStream content of the blob to be written      * @param blobSize    expected size of the blob to be written      */
DECL|method|writeBlob
name|void
name|writeBlob
parameter_list|(
name|String
name|blobName
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|long
name|blobSize
parameter_list|)
throws|throws
name|IOException
block|{
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
block|{
name|InputStreamContent
name|stream
init|=
operator|new
name|InputStreamContent
argument_list|(
literal|null
argument_list|,
name|inputStream
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setLength
argument_list|(
name|blobSize
argument_list|)
expr_stmt|;
name|Storage
operator|.
name|Objects
operator|.
name|Insert
name|insert
init|=
name|client
operator|.
name|objects
argument_list|()
operator|.
name|insert
argument_list|(
name|bucket
argument_list|,
literal|null
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|insert
operator|.
name|setName
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
name|insert
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes a blob in the bucket      *      * @param blobName name of the blob      */
DECL|method|deleteBlob
name|void
name|deleteBlob
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
name|client
operator|.
name|objects
argument_list|()
operator|.
name|delete
argument_list|(
name|bucket
argument_list|,
name|blobName
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes multiple blobs in the bucket that have a given prefix      *      * @param prefix prefix of the buckets to delete      */
DECL|method|deleteBlobsByPrefix
name|void
name|deleteBlobsByPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
block|{
name|deleteBlobs
argument_list|(
name|listBlobsByPath
argument_list|(
name|bucket
argument_list|,
name|prefix
argument_list|,
literal|null
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes multiple blobs in the given bucket (uses a batch request to perform this)      *      * @param blobNames names of the bucket to delete      */
DECL|method|deleteBlobs
name|void
name|deleteBlobs
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|blobNames
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blobNames
operator|==
literal|null
operator|||
name|blobNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|blobNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|deleteBlob
argument_list|(
name|blobNames
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|Storage
operator|.
name|Objects
operator|.
name|Delete
argument_list|>
name|deletions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|blobs
init|=
name|blobNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|blobs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Create a delete request for each blob to delete
name|deletions
operator|.
name|add
argument_list|(
name|client
operator|.
name|objects
argument_list|()
operator|.
name|delete
argument_list|(
name|bucket
argument_list|,
name|blobs
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobs
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
operator|||
name|deletions
operator|.
name|size
argument_list|()
operator|==
name|MAX_BATCHING_REQUESTS
condition|)
block|{
try|try
block|{
comment|// Deletions are executed using a batch request
name|BatchRequest
name|batch
init|=
name|client
operator|.
name|batch
argument_list|()
decl_stmt|;
comment|// Used to track successful deletions
name|CountDown
name|countDown
init|=
operator|new
name|CountDown
argument_list|(
name|deletions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Storage
operator|.
name|Objects
operator|.
name|Delete
name|delete
range|:
name|deletions
control|)
block|{
comment|// Queue the delete request in batch
name|delete
operator|.
name|queue
argument_list|(
name|batch
argument_list|,
operator|new
name|JsonBatchCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|GoogleJsonError
name|e
parameter_list|,
name|HttpHeaders
name|responseHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to delete blob [{}] in bucket [{}]: {}"
argument_list|,
name|delete
operator|.
name|getObject
argument_list|()
argument_list|,
name|delete
operator|.
name|getBucket
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|aVoid
parameter_list|,
name|HttpHeaders
name|responseHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|countDown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|isCountedDown
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete all ["
operator|+
name|deletions
operator|.
name|size
argument_list|()
operator|+
literal|"] blobs"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|deletions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Moves a blob within the same bucket      *      * @param sourceBlob name of the blob to move      * @param targetBlob new name of the blob in the target bucket      */
DECL|method|moveBlob
name|void
name|moveBlob
parameter_list|(
name|String
name|sourceBlob
parameter_list|,
name|String
name|targetBlob
parameter_list|)
throws|throws
name|IOException
block|{
name|doPrivileged
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// There's no atomic "move" in GCS so we need to copy and delete
name|client
operator|.
name|objects
argument_list|()
operator|.
name|copy
argument_list|(
name|bucket
argument_list|,
name|sourceBlob
argument_list|,
name|bucket
argument_list|,
name|targetBlob
argument_list|,
literal|null
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|client
operator|.
name|objects
argument_list|()
operator|.
name|delete
argument_list|(
name|bucket
argument_list|,
name|sourceBlob
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes a {@link PrivilegedExceptionAction} with privileges enabled.      */
DECL|method|doPrivileged
parameter_list|<
name|T
parameter_list|>
name|T
name|doPrivileged
parameter_list|(
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
name|sm
operator|.
name|checkPermission
argument_list|(
operator|new
name|SpecialPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|(
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
operator|)
name|operation
operator|::
name|run
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
DECL|method|buildKey
specifier|private
name|String
name|buildKey
parameter_list|(
name|String
name|keyPath
parameter_list|,
name|String
name|s
parameter_list|)
block|{
assert|assert
name|s
operator|!=
literal|null
assert|;
return|return
name|keyPath
operator|+
name|s
return|;
block|}
comment|/**      * Converts a {@link StorageObject} to a {@link PlainBlobMetaData}      */
DECL|class|BlobMetaDataConverter
class|class
name|BlobMetaDataConverter
implements|implements
name|Function
argument_list|<
name|StorageObject
argument_list|,
name|PlainBlobMetaData
argument_list|>
block|{
DECL|field|pathToRemove
specifier|private
specifier|final
name|String
name|pathToRemove
decl_stmt|;
DECL|method|BlobMetaDataConverter
name|BlobMetaDataConverter
parameter_list|(
name|String
name|pathToRemove
parameter_list|)
block|{
name|this
operator|.
name|pathToRemove
operator|=
name|pathToRemove
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|PlainBlobMetaData
name|apply
parameter_list|(
name|StorageObject
name|storageObject
parameter_list|)
block|{
name|String
name|blobName
init|=
name|storageObject
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|pathToRemove
argument_list|)
condition|)
block|{
name|blobName
operator|=
name|blobName
operator|.
name|substring
argument_list|(
name|pathToRemove
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PlainBlobMetaData
argument_list|(
name|blobName
argument_list|,
name|storageObject
operator|.
name|getSize
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Spliterator can be used to list storage objects stored in a bucket.      */
DECL|class|StorageObjectsSpliterator
specifier|static
class|class
name|StorageObjectsSpliterator
implements|implements
name|Spliterator
argument_list|<
name|StorageObject
argument_list|>
block|{
DECL|field|list
specifier|private
specifier|final
name|Storage
operator|.
name|Objects
operator|.
name|List
name|list
decl_stmt|;
DECL|method|StorageObjectsSpliterator
name|StorageObjectsSpliterator
parameter_list|(
name|Storage
name|client
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|long
name|pageSize
parameter_list|)
throws|throws
name|IOException
block|{
name|list
operator|=
name|client
operator|.
name|objects
argument_list|()
operator|.
name|list
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|list
operator|.
name|setMaxResults
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tryAdvance
specifier|public
name|boolean
name|tryAdvance
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|StorageObject
argument_list|>
name|action
parameter_list|)
block|{
try|try
block|{
comment|// Retrieves the next page of items
name|Objects
name|objects
init|=
name|list
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|objects
operator|==
literal|null
operator|)
operator|||
operator|(
name|objects
operator|.
name|getItems
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|objects
operator|.
name|getItems
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Consumes all the items
name|objects
operator|.
name|getItems
argument_list|()
operator|.
name|forEach
argument_list|(
name|action
operator|::
name|accept
argument_list|)
expr_stmt|;
comment|// Sets the page token of the next page,
comment|// null indicates that all items have been consumed
name|String
name|next
init|=
name|objects
operator|.
name|getNextPageToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|setPageToken
argument_list|(
name|next
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BlobStoreException
argument_list|(
literal|"Exception while listing objects"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|trySplit
specifier|public
name|Spliterator
argument_list|<
name|StorageObject
argument_list|>
name|trySplit
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|estimateSize
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
DECL|method|characteristics
specifier|public
name|int
name|characteristics
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**      * Returns a {@link Stream} of {@link StorageObject}s that are stored in a given bucket.      */
DECL|method|blobsStream
specifier|static
name|Stream
argument_list|<
name|StorageObject
argument_list|>
name|blobsStream
parameter_list|(
name|Storage
name|client
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|long
name|pageSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|StreamSupport
operator|.
name|stream
argument_list|(
operator|new
name|StorageObjectsSpliterator
argument_list|(
name|client
argument_list|,
name|bucketName
argument_list|,
name|prefix
argument_list|,
name|pageSize
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

