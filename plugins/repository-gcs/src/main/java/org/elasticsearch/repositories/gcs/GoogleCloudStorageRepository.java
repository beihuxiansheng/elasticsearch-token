begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.gcs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|gcs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoryMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|gcs
operator|.
name|GoogleCloudStorageBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|repository
operator|.
name|gcs
operator|.
name|GoogleCloudStoragePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|blobstore
operator|.
name|BlobStoreRepository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|boolSetting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|byteSizeSetting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|simpleString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|timeSetting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_class
DECL|class|GoogleCloudStorageRepository
specifier|public
class|class
name|GoogleCloudStorageRepository
extends|extends
name|BlobStoreRepository
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"gcs"
decl_stmt|;
DECL|field|NO_TIMEOUT
specifier|public
specifier|static
specifier|final
name|TimeValue
name|NO_TIMEOUT
init|=
name|timeValueMillis
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|BUCKET
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|BUCKET
init|=
name|simpleString
argument_list|(
literal|"bucket"
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|BASE_PATH
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|BASE_PATH
init|=
name|simpleString
argument_list|(
literal|"base_path"
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|COMPRESS
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|COMPRESS
init|=
name|boolSetting
argument_list|(
literal|"compress"
argument_list|,
literal|false
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|CHUNK_SIZE
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|ByteSizeValue
argument_list|>
name|CHUNK_SIZE
init|=
name|byteSizeSetting
argument_list|(
literal|"chunk_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|APPLICATION_NAME
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|APPLICATION_NAME
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"application_name"
argument_list|,
name|GoogleCloudStoragePlugin
operator|.
name|NAME
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|SERVICE_ACCOUNT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|SERVICE_ACCOUNT
init|=
name|simpleString
argument_list|(
literal|"service_account"
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|HTTP_READ_TIMEOUT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|HTTP_READ_TIMEOUT
init|=
name|timeSetting
argument_list|(
literal|"http.read_timeout"
argument_list|,
name|NO_TIMEOUT
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|HTTP_CONNECT_TIMEOUT
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|TimeValue
argument_list|>
name|HTTP_CONNECT_TIMEOUT
init|=
name|timeSetting
argument_list|(
literal|"http.connect_timeout"
argument_list|,
name|NO_TIMEOUT
argument_list|,
name|Property
operator|.
name|NodeScope
argument_list|,
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|ByteSizeValue
name|chunkSize
decl_stmt|;
DECL|field|compress
specifier|private
specifier|final
name|boolean
name|compress
decl_stmt|;
DECL|field|basePath
specifier|private
specifier|final
name|BlobPath
name|basePath
decl_stmt|;
DECL|field|blobStore
specifier|private
specifier|final
name|GoogleCloudStorageBlobStore
name|blobStore
decl_stmt|;
DECL|method|GoogleCloudStorageRepository
specifier|public
name|GoogleCloudStorageRepository
parameter_list|(
name|RepositoryMetaData
name|metadata
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|NamedXContentRegistry
name|namedXContentRegistry
parameter_list|,
name|GoogleCloudStorageService
name|storageService
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|environment
operator|.
name|settings
argument_list|()
argument_list|,
name|namedXContentRegistry
argument_list|)
expr_stmt|;
name|String
name|bucket
init|=
name|get
argument_list|(
name|BUCKET
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|String
name|application
init|=
name|get
argument_list|(
name|APPLICATION_NAME
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|String
name|serviceAccount
init|=
name|get
argument_list|(
name|SERVICE_ACCOUNT
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|String
name|basePath
init|=
name|BASE_PATH
operator|.
name|get
argument_list|(
name|metadata
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|BlobPath
name|path
init|=
operator|new
name|BlobPath
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|basePath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
control|)
block|{
name|path
operator|=
name|path
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|basePath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|basePath
operator|=
name|BlobPath
operator|.
name|cleanPath
argument_list|()
expr_stmt|;
block|}
name|TimeValue
name|connectTimeout
init|=
literal|null
decl_stmt|;
name|TimeValue
name|readTimeout
init|=
literal|null
decl_stmt|;
name|TimeValue
name|timeout
init|=
name|HTTP_CONNECT_TIMEOUT
operator|.
name|get
argument_list|(
name|metadata
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|timeout
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|timeout
operator|.
name|millis
argument_list|()
operator|!=
name|NO_TIMEOUT
operator|.
name|millis
argument_list|()
operator|)
condition|)
block|{
name|connectTimeout
operator|=
name|timeout
expr_stmt|;
block|}
name|timeout
operator|=
name|HTTP_READ_TIMEOUT
operator|.
name|get
argument_list|(
name|metadata
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|timeout
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|timeout
operator|.
name|millis
argument_list|()
operator|!=
name|NO_TIMEOUT
operator|.
name|millis
argument_list|()
operator|)
condition|)
block|{
name|readTimeout
operator|=
name|timeout
expr_stmt|;
block|}
name|this
operator|.
name|compress
operator|=
name|get
argument_list|(
name|COMPRESS
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|get
argument_list|(
name|CHUNK_SIZE
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using bucket [{}], base_path [{}], chunk_size [{}], compress [{}], application [{}]"
argument_list|,
name|bucket
argument_list|,
name|basePath
argument_list|,
name|chunkSize
argument_list|,
name|compress
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|Storage
name|client
init|=
name|storageService
operator|.
name|createClient
argument_list|(
name|serviceAccount
argument_list|,
name|application
argument_list|,
name|connectTimeout
argument_list|,
name|readTimeout
argument_list|)
decl_stmt|;
name|this
operator|.
name|blobStore
operator|=
operator|new
name|GoogleCloudStorageBlobStore
argument_list|(
name|settings
argument_list|,
name|bucket
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|blobStore
specifier|protected
name|BlobStore
name|blobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
annotation|@
name|Override
DECL|method|basePath
specifier|protected
name|BlobPath
name|basePath
parameter_list|()
block|{
return|return
name|basePath
return|;
block|}
annotation|@
name|Override
DECL|method|isCompress
specifier|protected
name|boolean
name|isCompress
parameter_list|()
block|{
return|return
name|compress
return|;
block|}
annotation|@
name|Override
DECL|method|chunkSize
specifier|protected
name|ByteSizeValue
name|chunkSize
parameter_list|()
block|{
return|return
name|chunkSize
return|;
block|}
comment|/**      * Get a given setting from the repository settings, throwing a {@link RepositoryException} if the setting does not exist or is empty.      */
DECL|method|get
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Setting
argument_list|<
name|T
argument_list|>
name|setting
parameter_list|,
name|RepositoryMetaData
name|metadata
parameter_list|)
block|{
name|T
name|value
init|=
name|setting
operator|.
name|get
argument_list|(
name|metadata
operator|.
name|settings
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|metadata
operator|.
name|name
argument_list|()
argument_list|,
literal|"Setting ["
operator|+
name|setting
operator|.
name|getKey
argument_list|()
operator|+
literal|"] is not defined for repository"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|value
operator|instanceof
name|String
operator|)
operator|&&
operator|(
name|Strings
operator|.
name|hasText
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
operator|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|metadata
operator|.
name|name
argument_list|()
argument_list|,
literal|"Setting ["
operator|+
name|setting
operator|.
name|getKey
argument_list|()
operator|+
literal|"] is empty for repository"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

