begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.gcs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|gcs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|auth
operator|.
name|oauth2
operator|.
name|GoogleCredential
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|javanet
operator|.
name|GoogleNetHttpTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpBackOffIOExceptionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpBackOffUnsuccessfulResponseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpIOExceptionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestInitializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|HttpUnsuccessfulResponseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|javanet
operator|.
name|NetHttpTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|json
operator|.
name|jackson2
operator|.
name|JacksonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|util
operator|.
name|ExponentialBackOff
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|storage
operator|.
name|StorageScopes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SecureSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SecureString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_interface
DECL|interface|GoogleCloudStorageService
interface|interface
name|GoogleCloudStorageService
block|{
DECL|field|SETTINGS_PREFIX
name|String
name|SETTINGS_PREFIX
init|=
literal|"gcs.client."
decl_stmt|;
comment|/** A json credentials file loaded from secure settings. */
DECL|field|CREDENTIALS_FILE_SETTING
name|Setting
operator|.
name|AffixSetting
argument_list|<
name|InputStream
argument_list|>
name|CREDENTIALS_FILE_SETTING
init|=
name|Setting
operator|.
name|affixKeySetting
argument_list|(
name|SETTINGS_PREFIX
argument_list|,
literal|"credentials_file"
argument_list|,
name|key
lambda|->
name|SecureSetting
operator|.
name|secureFile
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Creates a client that can be used to manage Google Cloud Storage objects.      *      * @param serviceAccount path to service account file      * @param clientName     name of client settings to use from secure settings      * @param application    name of the application      * @param connectTimeout connection timeout for HTTP requests      * @param readTimeout    read timeout for HTTP requests      * @return a Client instance that can be used to manage objects      */
DECL|method|createClient
name|Storage
name|createClient
parameter_list|(
name|String
name|serviceAccount
parameter_list|,
name|String
name|clientName
parameter_list|,
name|String
name|application
parameter_list|,
name|TimeValue
name|connectTimeout
parameter_list|,
name|TimeValue
name|readTimeout
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Default implementation      */
DECL|class|InternalGoogleCloudStorageService
class|class
name|InternalGoogleCloudStorageService
extends|extends
name|AbstractComponent
implements|implements
name|GoogleCloudStorageService
block|{
DECL|field|DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT
init|=
literal|"_default_"
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
comment|/** Credentials identified by client name. */
DECL|field|credentials
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|GoogleCredential
argument_list|>
name|credentials
decl_stmt|;
DECL|method|InternalGoogleCloudStorageService
name|InternalGoogleCloudStorageService
parameter_list|(
name|Environment
name|environment
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|GoogleCredential
argument_list|>
name|credentials
parameter_list|)
block|{
name|super
argument_list|(
name|environment
operator|.
name|settings
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|credentials
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createClient
specifier|public
name|Storage
name|createClient
parameter_list|(
name|String
name|serviceAccountFile
parameter_list|,
name|String
name|clientName
parameter_list|,
name|String
name|application
parameter_list|,
name|TimeValue
name|connectTimeout
parameter_list|,
name|TimeValue
name|readTimeout
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|GoogleCredential
name|credential
init|=
name|getCredential
argument_list|(
name|serviceAccountFile
argument_list|,
name|clientName
argument_list|)
decl_stmt|;
name|NetHttpTransport
name|httpTransport
init|=
name|GoogleNetHttpTransport
operator|.
name|newTrustedTransport
argument_list|()
decl_stmt|;
name|Storage
operator|.
name|Builder
name|storage
init|=
operator|new
name|Storage
operator|.
name|Builder
argument_list|(
name|httpTransport
argument_list|,
name|JacksonFactory
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
operator|new
name|DefaultHttpRequestInitializer
argument_list|(
name|credential
argument_list|,
name|connectTimeout
argument_list|,
name|readTimeout
argument_list|)
argument_list|)
decl_stmt|;
name|storage
operator|.
name|setApplicationName
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"initializing client with service account [{}/{}]"
argument_list|,
name|credential
operator|.
name|getServiceAccountId
argument_list|()
argument_list|,
name|credential
operator|.
name|getServiceAccountUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|storage
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Error when loading Google Cloud Storage credentials file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// pkg private for tests
DECL|method|getCredential
name|GoogleCredential
name|getCredential
parameter_list|(
name|String
name|serviceAccountFile
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|DEFAULT
operator|.
name|equalsIgnoreCase
argument_list|(
name|serviceAccountFile
argument_list|)
operator|==
literal|false
condition|)
block|{
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
literal|"Using GCS service account file from disk is deprecated. "
operator|+
literal|"Move the file into the elasticsearch keystore."
argument_list|)
expr_stmt|;
name|Path
name|account
init|=
name|environment
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|serviceAccountFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|account
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find service account file ["
operator|+
name|serviceAccountFile
operator|+
literal|"] defined for repository"
argument_list|)
throw|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|account
argument_list|)
init|)
block|{
name|GoogleCredential
name|credential
init|=
name|GoogleCredential
operator|.
name|fromStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|credential
operator|.
name|createScopedRequired
argument_list|()
condition|)
block|{
name|credential
operator|=
name|credential
operator|.
name|createScoped
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|StorageScopes
operator|.
name|DEVSTORAGE_FULL_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|credential
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|credentials
operator|.
name|containsKey
argument_list|(
name|clientName
argument_list|)
condition|)
block|{
return|return
name|credentials
operator|.
name|get
argument_list|(
name|clientName
argument_list|)
return|;
block|}
return|return
name|getDefaultCredential
argument_list|()
return|;
block|}
comment|// pkg private for tests
DECL|method|getDefaultCredential
name|GoogleCredential
name|getDefaultCredential
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|GoogleCredential
operator|.
name|getApplicationDefault
argument_list|()
return|;
block|}
comment|/**          * HTTP request initializer that set timeouts and backoff handler while deferring authentication to GoogleCredential.          * See https://cloud.google.com/storage/transfer/create-client#retry          */
DECL|class|DefaultHttpRequestInitializer
class|class
name|DefaultHttpRequestInitializer
implements|implements
name|HttpRequestInitializer
block|{
DECL|field|connectTimeout
specifier|private
specifier|final
name|TimeValue
name|connectTimeout
decl_stmt|;
DECL|field|readTimeout
specifier|private
specifier|final
name|TimeValue
name|readTimeout
decl_stmt|;
DECL|field|credential
specifier|private
specifier|final
name|GoogleCredential
name|credential
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|HttpUnsuccessfulResponseHandler
name|handler
decl_stmt|;
DECL|field|ioHandler
specifier|private
specifier|final
name|HttpIOExceptionHandler
name|ioHandler
decl_stmt|;
DECL|method|DefaultHttpRequestInitializer
name|DefaultHttpRequestInitializer
parameter_list|(
name|GoogleCredential
name|credential
parameter_list|,
name|TimeValue
name|connectTimeout
parameter_list|,
name|TimeValue
name|readTimeout
parameter_list|)
block|{
name|this
operator|.
name|credential
operator|=
name|credential
expr_stmt|;
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
name|this
operator|.
name|readTimeout
operator|=
name|readTimeout
expr_stmt|;
name|this
operator|.
name|handler
operator|=
operator|new
name|HttpBackOffUnsuccessfulResponseHandler
argument_list|(
name|newBackOff
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ioHandler
operator|=
operator|new
name|HttpBackOffIOExceptionHandler
argument_list|(
name|newBackOff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize
specifier|public
name|void
name|initialize
parameter_list|(
name|HttpRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connectTimeout
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setConnectTimeout
argument_list|(
operator|(
name|int
operator|)
name|connectTimeout
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readTimeout
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setReadTimeout
argument_list|(
operator|(
name|int
operator|)
name|readTimeout
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setIOExceptionHandler
argument_list|(
name|ioHandler
argument_list|)
expr_stmt|;
name|request
operator|.
name|setInterceptor
argument_list|(
name|credential
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUnsuccessfulResponseHandler
argument_list|(
parameter_list|(
name|req
parameter_list|,
name|resp
parameter_list|,
name|supportsRetry
parameter_list|)
lambda|->
block|{
comment|// Let the credential handle the response. If it failed, we rely on our backoff handler
return|return
name|credential
operator|.
name|handleResponse
argument_list|(
name|req
argument_list|,
name|resp
argument_list|,
name|supportsRetry
argument_list|)
operator|||
name|handler
operator|.
name|handleResponse
argument_list|(
name|req
argument_list|,
name|resp
argument_list|,
name|supportsRetry
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|newBackOff
specifier|private
name|ExponentialBackOff
name|newBackOff
parameter_list|()
block|{
return|return
operator|new
name|ExponentialBackOff
operator|.
name|Builder
argument_list|()
operator|.
name|setInitialIntervalMillis
argument_list|(
literal|100
argument_list|)
operator|.
name|setMaxIntervalMillis
argument_list|(
literal|6000
argument_list|)
operator|.
name|setMaxElapsedTimeMillis
argument_list|(
literal|900000
argument_list|)
operator|.
name|setMultiplier
argument_list|(
literal|1.5
argument_list|)
operator|.
name|setRandomizationFactor
argument_list|(
literal|0.5
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
comment|/** Load all secure credentials from the settings. */
DECL|method|loadClientCredentials
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|GoogleCredential
argument_list|>
name|loadClientCredentials
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|clientNames
init|=
name|settings
operator|.
name|getGroups
argument_list|(
name|SETTINGS_PREFIX
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GoogleCredential
argument_list|>
name|credentials
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|clientName
range|:
name|clientNames
control|)
block|{
name|Setting
argument_list|<
name|InputStream
argument_list|>
name|concreteSetting
init|=
name|CREDENTIALS_FILE_SETTING
operator|.
name|getConcreteSettingForNamespace
argument_list|(
name|clientName
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|credStream
init|=
name|concreteSetting
operator|.
name|get
argument_list|(
name|settings
argument_list|)
init|)
block|{
name|GoogleCredential
name|credential
init|=
name|GoogleCredential
operator|.
name|fromStream
argument_list|(
name|credStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|credential
operator|.
name|createScopedRequired
argument_list|()
condition|)
block|{
name|credential
operator|=
name|credential
operator|.
name|createScoped
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|StorageScopes
operator|.
name|DEVSTORAGE_FULL_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|credentials
operator|.
name|put
argument_list|(
name|clientName
argument_list|,
name|credential
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|credentials
return|;
block|}
block|}
end_interface

end_unit

