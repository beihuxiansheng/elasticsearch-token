begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|StopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|JapaneseAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
operator|.
name|SuggestStopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_class
DECL|class|JapaneseStopTokenFilterFactory
specifier|public
class|class
name|JapaneseStopTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|NAMED_STOP_WORDS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|?
argument_list|>
argument_list|>
name|NAMED_STOP_WORDS
init|=
name|singletonMap
argument_list|(
literal|"_japanese_"
argument_list|,
name|JapaneseAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|stopWords
specifier|private
specifier|final
name|CharArraySet
name|stopWords
decl_stmt|;
DECL|field|ignoreCase
specifier|private
specifier|final
name|boolean
name|ignoreCase
decl_stmt|;
DECL|field|removeTrailing
specifier|private
specifier|final
name|boolean
name|removeTrailing
decl_stmt|;
annotation|@
name|Inject
DECL|method|JapaneseStopTokenFilterFactory
specifier|public
name|JapaneseStopTokenFilterFactory
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|env
parameter_list|,
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreCase
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"ignore_case"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeTrailing
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"remove_trailing"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|stopWords
operator|=
name|Analysis
operator|.
name|parseWords
argument_list|(
name|env
argument_list|,
name|settings
argument_list|,
literal|"stopwords"
argument_list|,
name|JapaneseAnalyzer
operator|.
name|getDefaultStopSet
argument_list|()
argument_list|,
name|NAMED_STOP_WORDS
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
if|if
condition|(
name|removeTrailing
condition|)
block|{
return|return
operator|new
name|StopFilter
argument_list|(
name|tokenStream
argument_list|,
name|stopWords
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SuggestStopFilter
argument_list|(
name|tokenStream
argument_list|,
name|stopWords
argument_list|)
return|;
block|}
block|}
DECL|method|stopWords
specifier|public
name|Set
argument_list|<
name|?
argument_list|>
name|stopWords
parameter_list|()
block|{
return|return
name|stopWords
return|;
block|}
DECL|method|ignoreCase
specifier|public
name|boolean
name|ignoreCase
parameter_list|()
block|{
return|return
name|ignoreCase
return|;
block|}
block|}
end_class

end_unit

