begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.memcached.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|memcached
operator|.
name|test
package|;
end_package

begin_import
import|import
name|net
operator|.
name|spy
operator|.
name|memcached
operator|.
name|MemcachedClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|json
operator|.
name|JsonBuilder
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|AbstractMemcachedActionsTests
specifier|public
specifier|abstract
class|class
name|AbstractMemcachedActionsTests
block|{
DECL|field|node
specifier|private
name|Node
name|node
decl_stmt|;
DECL|field|memcachedClient
specifier|private
name|MemcachedClient
name|memcachedClient
decl_stmt|;
annotation|@
name|BeforeMethod
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|node
operator|=
name|nodeBuilder
argument_list|()
operator|.
name|node
argument_list|()
expr_stmt|;
name|memcachedClient
operator|=
name|createMemcachedClient
argument_list|()
expr_stmt|;
block|}
DECL|method|createMemcachedClient
specifier|protected
specifier|abstract
name|MemcachedClient
name|createMemcachedClient
parameter_list|()
throws|throws
name|IOException
function_decl|;
annotation|@
name|AfterMethod
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|memcachedClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleOperations
annotation|@
name|Test
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
name|setResult
init|=
name|memcachedClient
operator|.
name|set
argument_list|(
literal|"/test/person/1"
argument_list|,
literal|0
argument_list|,
name|binaryJsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|copiedBytes
argument_list|()
argument_list|)
decl_stmt|;
name|setResult
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|String
name|getResult
init|=
operator|(
name|String
operator|)
name|memcachedClient
operator|.
name|get
argument_list|(
literal|"/_refresh"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REFRESH "
operator|+
name|getResult
argument_list|)
expr_stmt|;
name|getResult
operator|=
operator|(
name|String
operator|)
name|memcachedClient
operator|.
name|get
argument_list|(
literal|"/test/person/1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GET "
operator|+
name|getResult
argument_list|)
expr_stmt|;
name|Future
name|deleteResult
init|=
name|memcachedClient
operator|.
name|delete
argument_list|(
literal|"/test/person/1"
argument_list|)
decl_stmt|;
name|deleteResult
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|getResult
operator|=
operator|(
name|String
operator|)
name|memcachedClient
operator|.
name|get
argument_list|(
literal|"/_refresh"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REFRESH "
operator|+
name|getResult
argument_list|)
expr_stmt|;
name|getResult
operator|=
operator|(
name|String
operator|)
name|memcachedClient
operator|.
name|get
argument_list|(
literal|"/test/person/1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GET "
operator|+
name|getResult
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

