begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis.phonetic
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|phonetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|EncoderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|StringEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * K&ouml;lner Phonetik  *  * H.J. Postel, Die K&ouml;lner Phonetik. Ein Verfahren zu Identifizierung  * von Personennamen auf der Grundlage der Gestaltanalyse. IBM-Nachrichten 19 (1969), 925-931  *  * Algorithmus aus der Matching Toolbox von Rainer Schnell  * Java-Programmierung von J&ouml;rg Reiher  *  * mit&Auml;nderungen von JÃ¶rg Prante  *   */
end_comment

begin_class
DECL|class|KoelnerPhonetik
specifier|public
class|class
name|KoelnerPhonetik
implements|implements
name|StringEncoder
block|{
DECL|field|POSTEL_VARIATIONS_PATTERNS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|POSTEL_VARIATIONS_PATTERNS
init|=
block|{
literal|"AUN"
block|,
literal|"OWN"
block|,
literal|"RB"
block|,
literal|"RW"
block|,
literal|"WSK"
block|,
literal|"RSK"
block|}
decl_stmt|;
DECL|field|POSTEL_VARIATIONS_REPLACEMENTS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|POSTEL_VARIATIONS_REPLACEMENTS
init|=
block|{
literal|"OWN"
block|,
literal|"AUN"
block|,
literal|"RW"
block|,
literal|"RB"
block|,
literal|"RSK"
block|,
literal|"WSK"
block|}
decl_stmt|;
DECL|field|variationsPatterns
specifier|private
name|Pattern
index|[]
name|variationsPatterns
decl_stmt|;
DECL|field|primary
specifier|private
name|boolean
name|primary
init|=
literal|false
decl_stmt|;
DECL|field|csz
specifier|private
specifier|final
name|Set
argument_list|<
name|Character
argument_list|>
name|csz
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|'C'
argument_list|,
literal|'S'
argument_list|,
literal|'Z'
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ckq
specifier|private
specifier|final
name|Set
argument_list|<
name|Character
argument_list|>
name|ckq
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|'C'
argument_list|,
literal|'K'
argument_list|,
literal|'Q'
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|aouhkxq
specifier|private
specifier|final
name|Set
argument_list|<
name|Character
argument_list|>
name|aouhkxq
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|'A'
argument_list|,
literal|'O'
argument_list|,
literal|'U'
argument_list|,
literal|'H'
argument_list|,
literal|'K'
argument_list|,
literal|'X'
argument_list|,
literal|'Q'
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ahkloqrux
specifier|private
specifier|final
name|Set
argument_list|<
name|Character
argument_list|>
name|ahkloqrux
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|'A'
argument_list|,
literal|'H'
argument_list|,
literal|'K'
argument_list|,
literal|'L'
argument_list|,
literal|'O'
argument_list|,
literal|'Q'
argument_list|,
literal|'R'
argument_list|,
literal|'U'
argument_list|,
literal|'X'
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Constructor for  KÃ¶lner Phonetik      */
DECL|method|KoelnerPhonetik
specifier|public
name|KoelnerPhonetik
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|KoelnerPhonetik
specifier|public
name|KoelnerPhonetik
parameter_list|(
name|boolean
name|useOnlyPrimaryCode
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|useOnlyPrimaryCode
expr_stmt|;
block|}
comment|/**      * Get variation patterns      *       * @return string array of variations      */
DECL|method|getPatterns
specifier|protected
name|String
index|[]
name|getPatterns
parameter_list|()
block|{
return|return
name|POSTEL_VARIATIONS_PATTERNS
return|;
block|}
DECL|method|getReplacements
specifier|protected
name|String
index|[]
name|getReplacements
parameter_list|()
block|{
return|return
name|POSTEL_VARIATIONS_REPLACEMENTS
return|;
block|}
DECL|method|getCode
specifier|protected
name|char
name|getCode
parameter_list|()
block|{
return|return
literal|'0'
return|;
block|}
DECL|method|getRelativeValue
specifier|public
name|double
name|getRelativeValue
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|String
index|[]
name|kopho1
init|=
name|code
argument_list|(
name|expandUmlauts
argument_list|(
name|o1
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|GERMANY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|kopho2
init|=
name|code
argument_list|(
name|expandUmlauts
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|GERMANY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kopho1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|kopho2
operator|.
name|length
condition|;
name|ii
operator|++
control|)
block|{
if|if
condition|(
name|kopho1
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|kopho2
index|[
name|ii
index|]
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|Object
name|encode
parameter_list|(
name|Object
name|str
parameter_list|)
throws|throws
name|EncoderException
block|{
return|return
name|encode
argument_list|(
operator|(
name|String
operator|)
name|str
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|encode
specifier|public
name|String
name|encode
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|EncoderException
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
index|[]
name|s
init|=
name|code
argument_list|(
name|str
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|s
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|()
block|{
name|this
operator|.
name|variationsPatterns
operator|=
operator|new
name|Pattern
index|[
name|getPatterns
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getPatterns
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|variationsPatterns
index|[
name|i
index|]
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|getPatterns
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|code
specifier|private
name|String
index|[]
name|code
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|partition
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|String
index|[]
name|codes
init|=
operator|new
name|String
index|[
name|parts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|parts
control|)
block|{
name|codes
index|[
name|i
operator|++
index|]
operator|=
name|substitute
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|codes
return|;
block|}
DECL|method|partition
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partition
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|String
name|primaryForm
init|=
name|str
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|primaryForm
operator|.
name|replaceAll
argument_list|(
literal|"[^\\p{L}\\p{N}]"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|primary
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tmpParts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|tmpParts
operator|.
name|addAll
argument_list|(
operator|(
name|Arrays
operator|.
name|asList
argument_list|(
name|str
operator|.
name|split
argument_list|(
literal|"[\\p{Z}\\p{C}\\p{P}]"
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|int
name|numberOfParts
init|=
name|tmpParts
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|tmpParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|part
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmpParts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|part
operator|.
name|append
argument_list|(
name|tmpParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|i
operator|+
literal|1
operator|==
name|numberOfParts
operator|)
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|part
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|tmpParts
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|variations
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
name|variation
init|=
name|getVariations
argument_list|(
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|variation
operator|!=
literal|null
condition|)
block|{
name|variations
operator|.
name|addAll
argument_list|(
name|variation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|variations
return|;
block|}
DECL|method|getVariations
specifier|private
name|List
name|getVariations
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|position
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|variations
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|variations
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
while|while
condition|(
name|position
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|substPos
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|substPos
operator|<
name|position
operator|&&
name|i
operator|<
name|getPatterns
argument_list|()
operator|.
name|length
condition|)
block|{
name|Matcher
name|m
init|=
name|variationsPatterns
index|[
name|i
index|]
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
while|while
condition|(
name|substPos
operator|<
name|position
operator|&&
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|substPos
operator|=
name|m
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|substPos
operator|>=
name|position
condition|)
block|{
name|i
operator|--
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|varNew
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|prevPart
init|=
name|str
operator|.
name|substring
argument_list|(
name|position
argument_list|,
name|substPos
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|variations
operator|.
name|size
argument_list|()
condition|;
name|ii
operator|++
control|)
block|{
name|String
name|tmp
init|=
name|variations
operator|.
name|get
argument_list|(
name|ii
argument_list|)
decl_stmt|;
name|varNew
operator|.
name|add
argument_list|(
name|tmp
operator|.
name|concat
argument_list|(
name|prevPart
operator|+
name|getReplacements
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|variations
operator|.
name|set
argument_list|(
name|ii
argument_list|,
name|variations
operator|.
name|get
argument_list|(
name|ii
argument_list|)
operator|+
name|prevPart
operator|+
name|getPatterns
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|variations
operator|.
name|addAll
argument_list|(
name|varNew
argument_list|)
expr_stmt|;
name|position
operator|=
name|substPos
operator|+
name|getPatterns
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|variations
operator|.
name|size
argument_list|()
condition|;
name|ii
operator|++
control|)
block|{
name|variations
operator|.
name|set
argument_list|(
name|ii
argument_list|,
name|variations
operator|.
name|get
argument_list|(
name|ii
argument_list|)
operator|+
name|str
operator|.
name|substring
argument_list|(
name|position
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|position
operator|=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|variations
return|;
block|}
DECL|method|substitute
specifier|private
name|String
name|substitute
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|String
name|s
init|=
name|expandUmlauts
argument_list|(
name|str
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|GERMAN
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|=
name|removeSequences
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|current
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|char
name|next
init|=
name|i
operator|+
literal|1
operator|<
name|s
operator|.
name|length
argument_list|()
condition|?
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
else|:
literal|'_'
decl_stmt|;
name|char
name|prev
init|=
name|i
operator|>
literal|0
condition|?
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
else|:
literal|'_'
decl_stmt|;
switch|switch
condition|(
name|current
condition|)
block|{
case|case
literal|'A'
case|:
case|case
literal|'E'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'O'
case|:
case|case
literal|'U'
case|:
if|if
condition|(
name|i
operator|==
literal|0
operator|||
operator|(
operator|(
name|i
operator|==
literal|1
operator|)
operator|&&
name|prev
operator|==
literal|'H'
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'P'
case|:
name|sb
operator|.
name|append
argument_list|(
name|next
operator|==
literal|'H'
condition|?
literal|"33"
else|:
literal|'1'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'B'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'1'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
case|case
literal|'T'
case|:
name|sb
operator|.
name|append
argument_list|(
name|csz
operator|.
name|contains
argument_list|(
name|next
argument_list|)
condition|?
literal|'8'
else|:
literal|'2'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'3'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'G'
case|:
case|case
literal|'K'
case|:
case|case
literal|'Q'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'4'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'C'
case|:
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ahkloqrux
operator|.
name|contains
argument_list|(
name|next
argument_list|)
condition|?
literal|'4'
else|:
literal|'8'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|aouhkxq
operator|.
name|contains
argument_list|(
name|next
argument_list|)
condition|?
literal|'4'
else|:
literal|'8'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|&&
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|'8'
condition|)
block|{
name|sb
operator|.
name|setCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|'8'
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'X'
case|:
name|sb
operator|.
name|append
argument_list|(
name|i
operator|<
literal|1
operator|||
operator|!
name|ckq
operator|.
name|contains
argument_list|(
name|prev
argument_list|)
condition|?
literal|"48"
else|:
literal|'8'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'L'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'5'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'6'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'7'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'S'
case|:
case|case
literal|'Z'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'8'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'H'
case|:
break|break;
block|}
block|}
name|s
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|s
operator|=
name|removeSequences
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
DECL|method|expandUmlauts
specifier|private
name|String
name|expandUmlauts
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\u00C4"
argument_list|,
literal|"AE"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\u00D6"
argument_list|,
literal|"OE"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\u00DC"
argument_list|,
literal|"UE"
argument_list|)
return|;
block|}
DECL|method|removeSequences
specifier|private
name|String
name|removeSequences
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|char
name|c
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
name|c
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
name|sb
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

