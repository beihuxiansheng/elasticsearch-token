begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.messy.tests
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|messy
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregator
operator|.
name|SubAggCollectionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|global
operator|.
name|Global
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|cardinality
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|cardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|global
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|SuiteScopeTestCase
DECL|class|CardinalityTests
specifier|public
class|class
name|CardinalityTests
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|GroovyPlugin
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|numberOfShards
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
name|numberOfReplicas
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|field|numDocs
specifier|static
name|long
name|numDocs
decl_stmt|;
DECL|field|precisionThreshold
specifier|static
name|long
name|precisionThreshold
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"str_value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"str_values"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"l_value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"l_values"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"d_value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"d_values"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|numDocs
operator|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|precisionThreshold
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
operator|<<
name|randomInt
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|builders
init|=
operator|new
name|IndexRequestBuilder
index|[
operator|(
name|int
operator|)
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|builders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"str_value"
argument_list|,
literal|"s"
operator|+
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_values"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"s"
operator|+
operator|(
name|i
operator|*
literal|2
operator|)
block|,
literal|"s"
operator|+
operator|(
name|i
operator|*
literal|2
operator|+
literal|1
operator|)
block|}
argument_list|)
operator|.
name|field
argument_list|(
literal|"l_value"
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"l_values"
argument_list|,
operator|new
name|int
index|[]
block|{
name|i
operator|*
literal|2
block|,
name|i
operator|*
literal|2
operator|+
literal|1
block|}
argument_list|)
operator|.
name|field
argument_list|(
literal|"d_value"
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"d_values"
argument_list|,
operator|new
name|double
index|[]
block|{
name|i
operator|*
literal|2
block|,
name|i
operator|*
literal|2
operator|+
literal|1
block|}
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|dummyDocsBuilder
init|=
operator|new
name|IndexRequestBuilder
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dummyDocsBuilder
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dummyDocsBuilder
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"a_field"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|dummyDocsBuilder
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
DECL|method|assertCount
specifier|private
name|void
name|assertCount
parameter_list|(
name|Cardinality
name|count
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<=
name|precisionThreshold
condition|)
block|{
comment|// linear counting should be picked, and should be accurate
name|assertEquals
argument_list|(
name|value
argument_list|,
name|count
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// error is not bound, so let's just make sure it is> 0
name|assertThat
argument_list|(
name|count
operator|.
name|getValue
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|singleNumericField
specifier|private
name|String
name|singleNumericField
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|"l_value"
else|:
literal|"d_value"
return|;
block|}
DECL|method|multiNumericField
specifier|private
name|String
name|multiNumericField
parameter_list|(
name|boolean
name|hash
parameter_list|)
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|"l_values"
else|:
literal|"d_values"
return|;
block|}
annotation|@
name|Test
DECL|method|unmapped
specifier|public
name|void
name|unmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_value"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|partiallyUnmapped
specifier|public
name|void
name|partiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_value"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedString
specifier|public
name|void
name|singleValuedString
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_value"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedNumeric
specifier|public
name|void
name|singleValuedNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
name|singleNumericField
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedNumeric_getProperty
specifier|public
name|void
name|singleValuedNumeric_getProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|global
argument_list|(
literal|"global"
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
name|singleNumericField
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|Global
name|global
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"global"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|global
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"global"
argument_list|)
argument_list|)
expr_stmt|;
comment|// assertThat(global.getDocCount(), equalTo(numDocs));
name|assertThat
argument_list|(
name|global
operator|.
name|getAggregations
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|global
operator|.
name|getAggregations
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Cardinality
name|cardinality
init|=
name|global
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|cardinality
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cardinality
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|expectedValue
init|=
name|numDocs
decl_stmt|;
name|assertCount
argument_list|(
name|cardinality
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Cardinality
operator|)
name|global
operator|.
name|getProperty
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|cardinality
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|global
operator|.
name|getProperty
argument_list|(
literal|"cardinality.value"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|cardinality
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|cardinality
operator|.
name|getProperty
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|double
operator|)
name|cardinality
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedNumericHashed
specifier|public
name|void
name|singleValuedNumericHashed
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
name|singleNumericField
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedString
specifier|public
name|void
name|multiValuedString
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_values"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedNumeric
specifier|public
name|void
name|multiValuedNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
name|multiNumericField
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedNumericHashed
specifier|public
name|void
name|multiValuedNumericHashed
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
name|multiNumericField
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedStringScript
specifier|public
name|void
name|singleValuedStringScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['str_value'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedStringScript
specifier|public
name|void
name|multiValuedStringScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['str_values'].values"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedNumericScript
specifier|public
name|void
name|singleValuedNumericScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['"
operator|+
name|singleNumericField
argument_list|()
operator|+
literal|"'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedNumericScript
specifier|public
name|void
name|multiValuedNumericScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"doc['"
operator|+
name|multiNumericField
argument_list|(
literal|false
argument_list|)
operator|+
literal|"'].values"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedStringValueScript
specifier|public
name|void
name|singleValuedStringValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_value"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedStringValueScript
specifier|public
name|void
name|multiValuedStringValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_values"
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedNumericValueScript
specifier|public
name|void
name|singleValuedNumericValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
name|singleNumericField
argument_list|()
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedNumericValueScript
specifier|public
name|void
name|multiValuedNumericValueScript
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
name|multiNumericField
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|script
argument_list|(
operator|new
name|Script
argument_list|(
literal|"_value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Cardinality
name|count
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
name|numDocs
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|asSubAgg
specifier|public
name|void
name|asSubAgg
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_value"
argument_list|)
operator|.
name|collectMode
argument_list|(
name|randomFrom
argument_list|(
name|SubAggCollectionMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|cardinality
argument_list|(
literal|"cardinality"
argument_list|)
operator|.
name|precisionThreshold
argument_list|(
name|precisionThreshold
argument_list|)
operator|.
name|field
argument_list|(
literal|"str_values"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|Cardinality
name|count
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"cardinality"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cardinality"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

