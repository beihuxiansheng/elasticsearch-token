begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.hdfs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoryMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|blobstore
operator|.
name|BlobStoreRepository
import|;
end_import

begin_class
DECL|class|HdfsRepository
specifier|public
specifier|final
class|class
name|HdfsRepository
extends|extends
name|BlobStoreRepository
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|HdfsRepository
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONF_SECURITY_PRINCIPAL
specifier|private
specifier|static
specifier|final
name|String
name|CONF_SECURITY_PRINCIPAL
init|=
literal|"security.principal"
decl_stmt|;
DECL|field|environment
specifier|private
specifier|final
name|Environment
name|environment
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|ByteSizeValue
name|chunkSize
decl_stmt|;
DECL|field|compress
specifier|private
specifier|final
name|boolean
name|compress
decl_stmt|;
DECL|field|basePath
specifier|private
specifier|final
name|BlobPath
name|basePath
init|=
name|BlobPath
operator|.
name|cleanPath
argument_list|()
decl_stmt|;
DECL|field|blobStore
specifier|private
name|HdfsBlobStore
name|blobStore
decl_stmt|;
comment|// buffer size passed to HDFS read/write methods
comment|// TODO: why 100KB?
DECL|field|DEFAULT_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|ByteSizeValue
name|DEFAULT_BUFFER_SIZE
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|100
argument_list|,
name|ByteSizeUnit
operator|.
name|KB
argument_list|)
decl_stmt|;
DECL|method|HdfsRepository
specifier|public
name|HdfsRepository
parameter_list|(
name|RepositoryMetaData
name|metadata
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|NamedXContentRegistry
name|namedXContentRegistry
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|environment
operator|.
name|settings
argument_list|()
argument_list|,
name|namedXContentRegistry
argument_list|)
expr_stmt|;
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|metadata
operator|.
name|settings
argument_list|()
operator|.
name|getAsBytesSize
argument_list|(
literal|"chunk_size"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|compress
operator|=
name|metadata
operator|.
name|settings
argument_list|()
operator|.
name|getAsBoolean
argument_list|(
literal|"compress"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|String
name|uriSetting
init|=
name|getMetadata
argument_list|()
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|uriSetting
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No 'uri' defined for hdfs snapshot/restore"
argument_list|)
throw|;
block|}
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|uriSetting
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"hdfs"
operator|.
name|equalsIgnoreCase
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid scheme [%s] specified in uri [%s]; only 'hdfs' uri allowed for hdfs snapshot/restore"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uriSetting
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|uri
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Use 'path' option to specify a path [%s], not the uri [%s] for hdfs snapshot/restore"
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uriSetting
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|pathSetting
init|=
name|getMetadata
argument_list|()
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
comment|// get configuration
if|if
condition|(
name|pathSetting
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No 'path' defined for hdfs snapshot/restore"
argument_list|)
throw|;
block|}
name|int
name|bufferSize
init|=
name|getMetadata
argument_list|()
operator|.
name|settings
argument_list|()
operator|.
name|getAsBytesSize
argument_list|(
literal|"buffer_size"
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
decl_stmt|;
try|try
block|{
comment|// initialize our filecontext
name|SpecialPermission
operator|.
name|check
argument_list|()
expr_stmt|;
name|FileContext
name|fileContext
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|FileContext
argument_list|>
call|)
argument_list|()
operator|->
name|createContext
argument_list|(
name|uri
argument_list|,
name|getMetadata
argument_list|()
operator|.
name|settings
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|blobStore
operator|=
operator|new
name|HdfsBlobStore
argument_list|(
name|fileContext
argument_list|,
name|pathSetting
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Using file-system [{}] for URI [{}], path [{}]"
argument_list|,
name|fileContext
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|,
name|fileContext
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|pathSetting
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Cannot create HDFS repository for uri [%s]"
argument_list|,
name|uri
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
comment|// create hadoop filecontext
DECL|method|createContext
specifier|private
name|FileContext
name|createContext
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Settings
name|repositorySettings
parameter_list|)
block|{
name|Configuration
name|hadoopConfiguration
init|=
operator|new
name|Configuration
argument_list|(
name|repositorySettings
operator|.
name|getAsBoolean
argument_list|(
literal|"load_defaults"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|hadoopConfiguration
operator|.
name|setClassLoader
argument_list|(
name|HdfsRepository
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|hadoopConfiguration
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|repositorySettings
operator|.
name|getByPrefix
argument_list|(
literal|"conf."
argument_list|)
operator|.
name|getAsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|hadoopConfiguration
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create a hadoop user
name|UserGroupInformation
name|ugi
init|=
name|login
argument_list|(
name|hadoopConfiguration
argument_list|,
name|repositorySettings
argument_list|)
decl_stmt|;
comment|// Disable FS cache
name|hadoopConfiguration
operator|.
name|setBoolean
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create the filecontext with our user information
comment|// This will correctly configure the filecontext to have our UGI as it's internal user.
return|return
name|ugi
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|FileContext
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|AbstractFileSystem
name|fs
init|=
name|AbstractFileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|hadoopConfiguration
argument_list|)
decl_stmt|;
return|return
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|fs
argument_list|,
name|hadoopConfiguration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|)
class|;
end_class

begin_function
unit|}      private
DECL|method|login
name|UserGroupInformation
name|login
parameter_list|(
name|Configuration
name|hadoopConfiguration
parameter_list|,
name|Settings
name|repositorySettings
parameter_list|)
block|{
comment|// Validate the authentication method:
name|AuthenticationMethod
name|authMethod
init|=
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|hadoopConfiguration
argument_list|)
decl_stmt|;
if|if
condition|(
name|authMethod
operator|.
name|equals
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|)
operator|==
literal|false
operator|&&
name|authMethod
operator|.
name|equals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported authorization mode ["
operator|+
name|authMethod
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// Check if the user added a principal to use, and that there is a keytab file provided
name|String
name|kerberosPrincipal
init|=
name|repositorySettings
operator|.
name|get
argument_list|(
name|CONF_SECURITY_PRINCIPAL
argument_list|)
decl_stmt|;
comment|// Check to see if the authentication method is compatible
if|if
condition|(
name|kerberosPrincipal
operator|!=
literal|null
operator|&&
name|authMethod
operator|.
name|equals
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Hadoop authentication method is set to [SIMPLE], but a Kerberos principal is "
operator|+
literal|"specified. Continuing with [KERBEROS] authentication."
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|hadoopConfiguration
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|kerberosPrincipal
operator|==
literal|null
operator|&&
name|authMethod
operator|.
name|equals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HDFS Repository does not support [KERBEROS] authentication without "
operator|+
literal|"a valid Kerberos principal and keytab. Please specify a principal in the repository settings with ["
operator|+
name|CONF_SECURITY_PRINCIPAL
operator|+
literal|"]."
argument_list|)
throw|;
block|}
comment|// Now we can initialize the UGI with the configuration.
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|hadoopConfiguration
argument_list|)
expr_stmt|;
comment|// Debugging
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Hadoop security enabled: [{}]"
argument_list|,
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Using Hadoop authentication method: [{}]"
argument_list|,
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|hadoopConfiguration
argument_list|)
argument_list|)
expr_stmt|;
comment|// UserGroupInformation (UGI) instance is just a Hadoop specific wrapper around a Java Subject
try|try
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|principal
init|=
name|preparePrincipal
argument_list|(
name|kerberosPrincipal
argument_list|)
decl_stmt|;
name|String
name|keytab
init|=
name|HdfsSecurityContext
operator|.
name|locateKeytabFile
argument_list|(
name|environment
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Using kerberos principal [{}] and keytab located at [{}]"
argument_list|,
name|principal
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
return|return
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
return|;
block|}
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
literal|"Could not retrieve the current user information"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|// Convert principals of the format 'service/_HOST@REALM' by subbing in the local address for '_HOST'.
end_comment

begin_function
DECL|method|preparePrincipal
specifier|private
specifier|static
name|String
name|preparePrincipal
parameter_list|(
name|String
name|originalPrincipal
parameter_list|)
block|{
name|String
name|finalPrincipal
init|=
name|originalPrincipal
decl_stmt|;
comment|// Don't worry about host name resolution if they don't have the _HOST pattern in the name.
if|if
condition|(
name|originalPrincipal
operator|.
name|contains
argument_list|(
literal|"_HOST"
argument_list|)
condition|)
block|{
try|try
block|{
name|finalPrincipal
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|originalPrincipal
argument_list|,
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|originalPrincipal
operator|.
name|equals
argument_list|(
name|finalPrincipal
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Found service principal. Converted original principal name [{}] to server principal [{}]"
argument_list|,
name|originalPrincipal
argument_list|,
name|finalPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|finalPrincipal
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"InetAddress.getLocalHost(); Needed for filling in hostname for a kerberos principal name pattern."
argument_list|)
DECL|method|getHostName
specifier|private
specifier|static
name|String
name|getHostName
parameter_list|()
block|{
try|try
block|{
comment|/*              * This should not block since it should already be resolved via Log4J and Netty. The              * host information is cached by the JVM and the TTL for the cache entry is infinite              * when the SecurityManager is activated.              */
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not locate host information"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|blobStore
specifier|protected
name|BlobStore
name|blobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|basePath
specifier|protected
name|BlobPath
name|basePath
parameter_list|()
block|{
return|return
name|basePath
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|isCompress
specifier|protected
name|boolean
name|isCompress
parameter_list|()
block|{
return|return
name|compress
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|chunkSize
specifier|protected
name|ByteSizeValue
name|chunkSize
parameter_list|()
block|{
return|return
name|chunkSize
return|;
block|}
end_function

unit|}
end_unit

