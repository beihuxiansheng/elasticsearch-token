begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.hadoop.hdfs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoriesModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_comment
comment|//
end_comment

begin_comment
comment|// Note this plugin is somewhat special as Hadoop itself loads a number of libraries and thus requires a number of permissions to run even in client mode.
end_comment

begin_comment
comment|// This poses two problems:
end_comment

begin_comment
comment|// - Hadoop itself comes with tons of jars, many providing the same classes across packages. In particular Hadoop 2 provides package annotations in the same
end_comment

begin_comment
comment|//   package across jars which trips JarHell. Thus, to allow Hadoop jars to load, the plugin uses a dedicated CL which picks them up from the hadoop-libs folder.
end_comment

begin_comment
comment|// - The issue though with using a different CL is that it picks up the jars from a different location / codeBase and thus it does not fall under the plugin
end_comment

begin_comment
comment|//   permissions. In other words, the plugin permissions don't apply to the hadoop libraries.
end_comment

begin_comment
comment|//   There are different approaches here:
end_comment

begin_comment
comment|//      - implement a custom classloader that loads the jars but 'lies' about the codesource. It is doable but since URLClassLoader is locked down, one would
end_comment

begin_comment
comment|//        would have to implement the whole jar opening and loading from it. Not impossible but still fairly low-level.
end_comment

begin_comment
comment|//        Further more, even if the code has the proper credentials, it needs to use the proper Privileged blocks to use its full permissions which does not
end_comment

begin_comment
comment|//        happen in the Hadoop code base.
end_comment

begin_comment
comment|//      - use a different Policy. Works but the Policy is JVM wide and thus the code needs to be quite efficient - quite a bit impact to cover just some plugin
end_comment

begin_comment
comment|//        libraries
end_comment

begin_comment
comment|//      - use a DomainCombiner. This doesn't change the semantics (it's clear where the code is loaded from, etc..) however it gives us a scoped, fine-grained
end_comment

begin_comment
comment|//        callback on handling the permission intersection for secured calls. Note that DC works only in the current PAC call - the moment another PA is used,
end_comment

begin_comment
comment|//        the domain combiner is going to be ignored (unless the caller specifically uses it). Due to its scoped impact and official Java support, this approach
end_comment

begin_comment
comment|//        was used.
end_comment

begin_comment
comment|// ClassLoading info
end_comment

begin_comment
comment|// - package plugin.hadoop.hdfs is part of the plugin
end_comment

begin_comment
comment|// - all the other packages are assumed to be in the nested Hadoop CL.
end_comment

begin_comment
comment|// Code
end_comment

begin_class
DECL|class|HdfsPlugin
specifier|public
class|class
name|HdfsPlugin
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"repository-hdfs"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"HDFS Repository Plugin"
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|RepositoriesModule
name|repositoriesModule
parameter_list|)
block|{
name|String
name|baseLib
init|=
name|Utils
operator|.
name|detectLibFolder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|cp
init|=
name|getHadoopClassLoaderPath
argument_list|(
name|baseLib
argument_list|)
decl_stmt|;
name|ClassLoader
name|hadoopCL
init|=
name|URLClassLoader
operator|.
name|newInstance
argument_list|(
name|cp
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|cp
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
name|repository
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repository
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Repository
argument_list|>
operator|)
name|hadoopCL
operator|.
name|loadClass
argument_list|(
literal|"org.elasticsearch.repositories.hdfs.HdfsRepository"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot load plugin class; is the plugin class setup correctly?"
argument_list|,
name|cnfe
argument_list|)
throw|;
block|}
name|repositoriesModule
operator|.
name|registerRepository
argument_list|(
literal|"hdfs"
argument_list|,
name|repository
argument_list|,
name|BlobStoreIndexShardRepository
operator|.
name|class
argument_list|)
expr_stmt|;
name|Loggers
operator|.
name|getLogger
argument_list|(
name|HdfsPlugin
operator|.
name|class
argument_list|)
operator|.
name|info
argument_list|(
literal|"Loaded Hadoop [{}] libraries from {}"
argument_list|,
name|getHadoopVersion
argument_list|(
name|hadoopCL
argument_list|)
argument_list|,
name|baseLib
argument_list|)
expr_stmt|;
block|}
DECL|method|getHadoopClassLoaderPath
specifier|protected
name|List
argument_list|<
name|URL
argument_list|>
name|getHadoopClassLoaderPath
parameter_list|(
name|String
name|baseLib
parameter_list|)
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|cp
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// add plugin internal jar
name|discoverJars
argument_list|(
name|createURI
argument_list|(
name|baseLib
argument_list|,
literal|"internal-libs"
argument_list|)
argument_list|,
name|cp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// add Hadoop jars
name|discoverJars
argument_list|(
name|createURI
argument_list|(
name|baseLib
argument_list|,
literal|"hadoop-libs"
argument_list|)
argument_list|,
name|cp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cp
return|;
block|}
DECL|method|getHadoopVersion
specifier|private
name|String
name|getHadoopVersion
parameter_list|(
name|ClassLoader
name|hadoopCL
parameter_list|)
block|{
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
comment|// unprivileged code such as scripts do not have SpecialPermission
name|sm
operator|.
name|checkPermission
argument_list|(
operator|new
name|SpecialPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
block|{
comment|// Hadoop 2 relies on TCCL to determine the version
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|hadoopCL
argument_list|)
expr_stmt|;
return|return
name|doGetHadoopVersion
argument_list|(
name|hadoopCL
argument_list|)
return|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|tccl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|Utils
operator|.
name|hadoopACC
argument_list|()
argument_list|)
return|;
block|}
DECL|method|doGetHadoopVersion
specifier|private
name|String
name|doGetHadoopVersion
parameter_list|(
name|ClassLoader
name|hadoopCL
parameter_list|)
block|{
name|String
name|version
init|=
literal|"Unknown"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clz
operator|=
name|hadoopCL
operator|.
name|loadClass
argument_list|(
literal|"org.apache.hadoop.util.VersionInfo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// unknown
block|}
if|if
condition|(
name|clz
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|clz
operator|.
name|getMethod
argument_list|(
literal|"getVersion"
argument_list|)
decl_stmt|;
name|version
operator|=
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// class has changed, ignore
block|}
block|}
return|return
name|version
return|;
block|}
DECL|method|createURI
specifier|private
name|URI
name|createURI
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|String
name|location
init|=
name|base
operator|+
name|suffix
decl_stmt|;
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|location
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Cannot detect plugin folder; [%s] seems invalid"
argument_list|,
name|location
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"discover nested jar"
argument_list|)
DECL|method|discoverJars
specifier|private
name|void
name|discoverJars
parameter_list|(
name|URI
name|libPath
parameter_list|,
name|List
argument_list|<
name|URL
argument_list|>
name|cp
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
try|try
block|{
name|Path
index|[]
name|jars
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
name|libPath
argument_list|)
argument_list|,
literal|"*.jar"
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|jars
control|)
block|{
name|cp
operator|.
name|add
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|optional
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot compute plugin classpath"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

