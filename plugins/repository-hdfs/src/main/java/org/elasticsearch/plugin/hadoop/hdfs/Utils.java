begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.plugin.hadoop.hdfs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DomainCombiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_class
DECL|class|Utils
specifier|public
specifier|abstract
class|class
name|Utils
block|{
DECL|method|hadoopACC
specifier|protected
specifier|static
name|AccessControlContext
name|hadoopACC
parameter_list|()
block|{
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
comment|// unprivileged code such as scripts do not have SpecialPermission
name|sm
operator|.
name|checkPermission
argument_list|(
operator|new
name|SpecialPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|AccessControlContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AccessControlContext
name|run
parameter_list|()
block|{
return|return
operator|new
name|AccessControlContext
argument_list|(
name|AccessController
operator|.
name|getContext
argument_list|()
argument_list|,
operator|new
name|HadoopDomainCombiner
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|class|HadoopDomainCombiner
specifier|private
specifier|static
class|class
name|HadoopDomainCombiner
implements|implements
name|DomainCombiner
block|{
DECL|field|BASE_LIB
specifier|private
specifier|static
name|String
name|BASE_LIB
init|=
name|detectLibFolder
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|combine
specifier|public
name|ProtectionDomain
index|[]
name|combine
parameter_list|(
name|ProtectionDomain
index|[]
name|currentDomains
parameter_list|,
name|ProtectionDomain
index|[]
name|assignedDomains
parameter_list|)
block|{
for|for
control|(
name|ProtectionDomain
name|pd
range|:
name|assignedDomains
control|)
block|{
if|if
condition|(
name|pd
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|BASE_LIB
argument_list|)
condition|)
block|{
return|return
name|assignedDomains
return|;
block|}
block|}
return|return
name|currentDomains
return|;
block|}
block|}
DECL|method|detectLibFolder
specifier|static
name|String
name|detectLibFolder
parameter_list|()
block|{
name|ClassLoader
name|cl
init|=
name|Utils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// we could get the URL from the URLClassloader directly
comment|// but that can create issues when running the tests from the IDE
comment|// we could detect that by loading resources but that as well relies on
comment|// the JAR URL
name|String
name|classToLookFor
init|=
name|HdfsPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|.
name|concat
argument_list|(
literal|".class"
argument_list|)
decl_stmt|;
name|URL
name|classURL
init|=
name|cl
operator|.
name|getResource
argument_list|(
name|classToLookFor
argument_list|)
decl_stmt|;
if|if
condition|(
name|classURL
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot detect itself; something is wrong with this ClassLoader "
operator|+
name|cl
argument_list|)
throw|;
block|}
name|String
name|base
init|=
name|classURL
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// extract root
comment|// typically a JAR URL
name|int
name|index
init|=
name|base
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|base
operator|=
name|base
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
comment|// remove its prefix (jar:)
name|base
operator|=
name|base
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// remove the trailing jar
name|index
operator|=
name|base
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|base
operator|=
name|base
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// not a jar - something else, do a best effort here
else|else
block|{
comment|// remove the class searched
name|base
operator|=
name|base
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|base
operator|.
name|length
argument_list|()
operator|-
name|classToLookFor
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// append /
if|if
condition|(
operator|!
name|base
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|base
operator|=
name|base
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
block|}
end_class

end_unit

