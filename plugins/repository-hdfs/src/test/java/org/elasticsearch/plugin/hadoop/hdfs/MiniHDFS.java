begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.hadoop.hdfs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|MiniHDFS
specifier|public
class|class
name|MiniHDFS
block|{
DECL|field|dfs
specifier|private
specifier|static
specifier|volatile
name|MiniDFSCluster
name|dfs
decl_stmt|;
DECL|field|PORT_FILE_NAME
specifier|private
specifier|static
name|String
name|PORT_FILE_NAME
init|=
literal|"minihdfs.port"
decl_stmt|;
DECL|field|PID_FILE_NAME
specifier|private
specifier|static
name|String
name|PID_FILE_NAME
init|=
literal|"minihdfs.pid"
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MiniHDFS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|start
specifier|public
specifier|static
name|int
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|Path
name|basePath
init|=
name|getBasePath
argument_list|()
decl_stmt|;
name|Path
name|portPath
init|=
name|basePath
operator|.
name|resolve
argument_list|(
name|PORT_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|pidPath
init|=
name|basePath
operator|.
name|resolve
argument_list|(
name|PID_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|RandomizedTest
operator|.
name|rmDir
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|cfg
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|getBasePath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// lower default permission
name|cfg
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_PERMISSION_KEY
argument_list|,
literal|"766"
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|cfg
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|int
name|port
init|=
name|dfs
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
comment|// write port
name|Files
operator|.
name|write
argument_list|(
name|portPath
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
comment|// write pid
name|Files
operator|.
name|write
argument_list|(
name|pidPath
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getPid
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Started HDFS at %s\n"
argument_list|,
name|dfs
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Port information available at %s\n"
argument_list|,
name|portPath
operator|.
name|toRealPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"PID information available at %s\n"
argument_list|,
name|pidPath
operator|.
name|toRealPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|port
return|;
block|}
DECL|method|getBasePath
specifier|private
specifier|static
name|Path
name|getBasePath
parameter_list|()
block|{
name|Path
name|tmpFolder
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
decl_stmt|;
comment|// "test.build.data"
name|String
name|baseFolder
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|MiniDFSCluster
operator|.
name|PROP_TEST_BUILD_DATA
argument_list|,
literal|"es-test/build/test/data"
argument_list|)
decl_stmt|;
return|return
name|tmpFolder
operator|.
name|resolve
argument_list|(
name|baseFolder
argument_list|)
return|;
block|}
DECL|method|getPort
specifier|public
specifier|static
name|int
name|getPort
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|portPath
init|=
name|getBasePath
argument_list|()
operator|.
name|resolve
argument_list|(
name|PORT_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|portPath
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|portPath
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Cannot find Mini DFS port file at %s ; was '%s' started?"
argument_list|,
name|portPath
operator|.
name|toAbsolutePath
argument_list|()
argument_list|,
name|MiniHDFS
operator|.
name|class
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|getPid
specifier|public
specifier|static
name|long
name|getPid
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|pidPath
init|=
name|getBasePath
argument_list|()
operator|.
name|resolve
argument_list|(
name|PID_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|pidPath
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|pidPath
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Cannot find Mini DFS pid file at %s ; was '%s' started?"
argument_list|,
name|pidPath
operator|.
name|toAbsolutePath
argument_list|()
argument_list|,
name|MiniHDFS
operator|.
name|class
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|stop
specifier|public
specifier|static
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

