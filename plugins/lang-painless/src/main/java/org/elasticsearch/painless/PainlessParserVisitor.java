begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// ANTLR GENERATED CODE: DO NOT EDIT
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|ParseTreeVisitor
import|;
end_import

begin_comment
comment|/**  * This interface defines a complete generic visitor for a parse tree produced  * by {@link PainlessParser}.  *  * @param<T> The return type of the visit operation. Use {@link Void} for  * operations with no return type.  */
end_comment

begin_interface
DECL|interface|PainlessParserVisitor
interface|interface
name|PainlessParserVisitor
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ParseTreeVisitor
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * Visit a parse tree produced by {@link PainlessParser#source}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitSource
name|T
name|visitSource
parameter_list|(
name|PainlessParser
operator|.
name|SourceContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code if}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitIf
name|T
name|visitIf
parameter_list|(
name|PainlessParser
operator|.
name|IfContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code while}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitWhile
name|T
name|visitWhile
parameter_list|(
name|PainlessParser
operator|.
name|WhileContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code do}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDo
name|T
name|visitDo
parameter_list|(
name|PainlessParser
operator|.
name|DoContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code for}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitFor
name|T
name|visitFor
parameter_list|(
name|PainlessParser
operator|.
name|ForContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code decl}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDecl
name|T
name|visitDecl
parameter_list|(
name|PainlessParser
operator|.
name|DeclContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code continue}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitContinue
name|T
name|visitContinue
parameter_list|(
name|PainlessParser
operator|.
name|ContinueContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code break}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBreak
name|T
name|visitBreak
parameter_list|(
name|PainlessParser
operator|.
name|BreakContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code return}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitReturn
name|T
name|visitReturn
parameter_list|(
name|PainlessParser
operator|.
name|ReturnContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code try}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitTry
name|T
name|visitTry
parameter_list|(
name|PainlessParser
operator|.
name|TryContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code throw}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitThrow
name|T
name|visitThrow
parameter_list|(
name|PainlessParser
operator|.
name|ThrowContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code expr}    * labeled alternative in {@link PainlessParser#statement}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExpr
name|T
name|visitExpr
parameter_list|(
name|PainlessParser
operator|.
name|ExprContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code multiple}    * labeled alternative in {@link PainlessParser#block}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitMultiple
name|T
name|visitMultiple
parameter_list|(
name|PainlessParser
operator|.
name|MultipleContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code single}    * labeled alternative in {@link PainlessParser#block}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitSingle
name|T
name|visitSingle
parameter_list|(
name|PainlessParser
operator|.
name|SingleContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#empty}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitEmpty
name|T
name|visitEmpty
parameter_list|(
name|PainlessParser
operator|.
name|EmptyContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#emptyscope}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitEmptyscope
name|T
name|visitEmptyscope
parameter_list|(
name|PainlessParser
operator|.
name|EmptyscopeContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#initializer}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitInitializer
name|T
name|visitInitializer
parameter_list|(
name|PainlessParser
operator|.
name|InitializerContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#afterthought}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitAfterthought
name|T
name|visitAfterthought
parameter_list|(
name|PainlessParser
operator|.
name|AfterthoughtContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#declaration}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDeclaration
name|T
name|visitDeclaration
parameter_list|(
name|PainlessParser
operator|.
name|DeclarationContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#decltype}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDecltype
name|T
name|visitDecltype
parameter_list|(
name|PainlessParser
operator|.
name|DecltypeContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#declvar}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitDeclvar
name|T
name|visitDeclvar
parameter_list|(
name|PainlessParser
operator|.
name|DeclvarContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#trap}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitTrap
name|T
name|visitTrap
parameter_list|(
name|PainlessParser
operator|.
name|TrapContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code comp}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitComp
name|T
name|visitComp
parameter_list|(
name|PainlessParser
operator|.
name|CompContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code bool}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBool
name|T
name|visitBool
parameter_list|(
name|PainlessParser
operator|.
name|BoolContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code conditional}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitConditional
name|T
name|visitConditional
parameter_list|(
name|PainlessParser
operator|.
name|ConditionalContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code assignment}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitAssignment
name|T
name|visitAssignment
parameter_list|(
name|PainlessParser
operator|.
name|AssignmentContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code false}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitFalse
name|T
name|visitFalse
parameter_list|(
name|PainlessParser
operator|.
name|FalseContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code numeric}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitNumeric
name|T
name|visitNumeric
parameter_list|(
name|PainlessParser
operator|.
name|NumericContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code unary}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitUnary
name|T
name|visitUnary
parameter_list|(
name|PainlessParser
operator|.
name|UnaryContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code precedence}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitPrecedence
name|T
name|visitPrecedence
parameter_list|(
name|PainlessParser
operator|.
name|PrecedenceContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code preinc}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitPreinc
name|T
name|visitPreinc
parameter_list|(
name|PainlessParser
operator|.
name|PreincContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code postinc}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitPostinc
name|T
name|visitPostinc
parameter_list|(
name|PainlessParser
operator|.
name|PostincContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code cast}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitCast
name|T
name|visitCast
parameter_list|(
name|PainlessParser
operator|.
name|CastContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code external}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExternal
name|T
name|visitExternal
parameter_list|(
name|PainlessParser
operator|.
name|ExternalContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code null}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitNull
name|T
name|visitNull
parameter_list|(
name|PainlessParser
operator|.
name|NullContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code binary}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitBinary
name|T
name|visitBinary
parameter_list|(
name|PainlessParser
operator|.
name|BinaryContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code char}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitChar
name|T
name|visitChar
parameter_list|(
name|PainlessParser
operator|.
name|CharContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by the {@code true}    * labeled alternative in {@link PainlessParser#expression}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitTrue
name|T
name|visitTrue
parameter_list|(
name|PainlessParser
operator|.
name|TrueContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extstart}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtstart
name|T
name|visitExtstart
parameter_list|(
name|PainlessParser
operator|.
name|ExtstartContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extprec}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtprec
name|T
name|visitExtprec
parameter_list|(
name|PainlessParser
operator|.
name|ExtprecContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extcast}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtcast
name|T
name|visitExtcast
parameter_list|(
name|PainlessParser
operator|.
name|ExtcastContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extbrace}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtbrace
name|T
name|visitExtbrace
parameter_list|(
name|PainlessParser
operator|.
name|ExtbraceContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extdot}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtdot
name|T
name|visitExtdot
parameter_list|(
name|PainlessParser
operator|.
name|ExtdotContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#exttype}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExttype
name|T
name|visitExttype
parameter_list|(
name|PainlessParser
operator|.
name|ExttypeContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extcall}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtcall
name|T
name|visitExtcall
parameter_list|(
name|PainlessParser
operator|.
name|ExtcallContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extvar}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtvar
name|T
name|visitExtvar
parameter_list|(
name|PainlessParser
operator|.
name|ExtvarContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extfield}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtfield
name|T
name|visitExtfield
parameter_list|(
name|PainlessParser
operator|.
name|ExtfieldContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extnew}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtnew
name|T
name|visitExtnew
parameter_list|(
name|PainlessParser
operator|.
name|ExtnewContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#extstring}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitExtstring
name|T
name|visitExtstring
parameter_list|(
name|PainlessParser
operator|.
name|ExtstringContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#arguments}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitArguments
name|T
name|visitArguments
parameter_list|(
name|PainlessParser
operator|.
name|ArgumentsContext
name|ctx
parameter_list|)
function_decl|;
comment|/**    * Visit a parse tree produced by {@link PainlessParser#increment}.    * @param ctx the parse tree    * @return the visitor result    */
DECL|method|visitIncrement
name|T
name|visitIncrement
parameter_list|(
name|PainlessParser
operator|.
name|IncrementContext
name|ctx
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

