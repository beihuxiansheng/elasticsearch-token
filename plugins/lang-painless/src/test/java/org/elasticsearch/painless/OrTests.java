begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.painless
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|painless
package|;
end_package

begin_comment
comment|/** Tests for or operator across all types */
end_comment

begin_class
DECL|class|OrTests
specifier|public
class|class
name|OrTests
extends|extends
name|ScriptTestCase
block|{
DECL|method|testInt
specifier|public
name|void
name|testInt
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|5
operator||
literal|12
argument_list|,
name|exec
argument_list|(
literal|"int x = 5; int y = 12; return x | y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator||
operator|-
literal|12
argument_list|,
name|exec
argument_list|(
literal|"int x = 5; int y = -12; return x | y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
operator||
literal|15
operator||
literal|3
argument_list|,
name|exec
argument_list|(
literal|"int x = 7; int y = 15; int z = 3; return x | y | z;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntConst
specifier|public
name|void
name|testIntConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|5
operator||
literal|12
argument_list|,
name|exec
argument_list|(
literal|"return 5 | 12;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator||
operator|-
literal|12
argument_list|,
name|exec
argument_list|(
literal|"return 5 | -12;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
operator||
literal|15
operator||
literal|3
argument_list|,
name|exec
argument_list|(
literal|"return 7 | 15 | 3;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLong
specifier|public
name|void
name|testLong
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|5L
operator||
literal|12L
argument_list|,
name|exec
argument_list|(
literal|"long x = 5; long y = 12; return x | y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
operator||
operator|-
literal|12L
argument_list|,
name|exec
argument_list|(
literal|"long x = 5; long y = -12; return x | y;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7L
operator||
literal|15L
operator||
literal|3L
argument_list|,
name|exec
argument_list|(
literal|"long x = 7; long y = 15; long z = 3; return x | y | z;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLongConst
specifier|public
name|void
name|testLongConst
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|5L
operator||
literal|12L
argument_list|,
name|exec
argument_list|(
literal|"return 5L | 12L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
operator||
operator|-
literal|12L
argument_list|,
name|exec
argument_list|(
literal|"return 5L | -12L;"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7L
operator||
literal|15L
operator||
literal|3L
argument_list|,
name|exec
argument_list|(
literal|"return 7L | 15L | 3L;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

