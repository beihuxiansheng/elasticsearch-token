begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.s3
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AbstractAmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CopyObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CopyObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|GetObjectMetadataRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|GetObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3Object
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_class
DECL|class|MockAmazonS3
class|class
name|MockAmazonS3
extends|extends
name|AbstractAmazonS3
block|{
DECL|field|blobs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|blobs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// in ESBlobStoreContainerTestCase.java, the maximum
comment|// length of the input data is 100 bytes
DECL|field|byteCounter
specifier|private
name|byte
index|[]
name|byteCounter
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
annotation|@
name|Override
DECL|method|doesBucketExist
specifier|public
name|boolean
name|doesBucketExist
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getObjectMetadata
specifier|public
name|ObjectMetadata
name|getObjectMetadata
parameter_list|(
name|GetObjectMetadataRequest
name|getObjectMetadataRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|String
name|blobName
init|=
name|getObjectMetadataRequest
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blobs
operator|.
name|containsKey
argument_list|(
name|blobName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"["
operator|+
name|blobName
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
return|return
operator|new
name|ObjectMetadata
argument_list|()
return|;
comment|// nothing is done with it
block|}
annotation|@
name|Override
DECL|method|putObject
specifier|public
name|PutObjectResult
name|putObject
parameter_list|(
name|PutObjectRequest
name|putObjectRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|String
name|blobName
init|=
name|putObjectRequest
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DigestInputStream
name|stream
init|=
operator|(
name|DigestInputStream
operator|)
name|putObjectRequest
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobs
operator|.
name|containsKey
argument_list|(
name|blobName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"["
operator|+
name|blobName
operator|+
literal|"] already exists."
argument_list|)
throw|;
block|}
name|blobs
operator|.
name|put
argument_list|(
name|blobName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// input and output md5 hashes need to match to avoid an exception
name|String
name|md5
init|=
name|Base64
operator|.
name|encodeAsString
argument_list|(
name|stream
operator|.
name|getMessageDigest
argument_list|()
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
name|PutObjectResult
name|result
init|=
operator|new
name|PutObjectResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setContentMd5
argument_list|(
name|md5
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getObject
specifier|public
name|S3Object
name|getObject
parameter_list|(
name|GetObjectRequest
name|getObjectRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
comment|// in ESBlobStoreContainerTestCase.java, the prefix is empty,
comment|// so the key and blobName are equivalent to each other
name|String
name|blobName
init|=
name|getObjectRequest
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blobs
operator|.
name|containsKey
argument_list|(
name|blobName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"["
operator|+
name|blobName
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
comment|// the HTTP request attribute is irrelevant for reading
name|S3ObjectInputStream
name|stream
init|=
operator|new
name|S3ObjectInputStream
argument_list|(
name|blobs
operator|.
name|get
argument_list|(
name|blobName
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|S3Object
name|s3Object
init|=
operator|new
name|S3Object
argument_list|()
decl_stmt|;
name|s3Object
operator|.
name|setObjectContent
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|s3Object
return|;
block|}
annotation|@
name|Override
DECL|method|listObjects
specifier|public
name|ObjectListing
name|listObjects
parameter_list|(
name|ListObjectsRequest
name|listObjectsRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|MockObjectListing
name|list
init|=
operator|new
name|MockObjectListing
argument_list|()
decl_stmt|;
name|list
operator|.
name|setTruncated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|blobName
decl_stmt|;
name|String
name|prefix
init|=
name|listObjectsRequest
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|S3ObjectSummary
argument_list|>
name|mockObjectSummaries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|blob
range|:
name|blobs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|blobName
operator|=
name|blob
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|S3ObjectSummary
name|objectSummary
init|=
operator|new
name|S3ObjectSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
operator|||
name|blobName
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|objectSummary
operator|.
name|setKey
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
try|try
block|{
name|objectSummary
operator|.
name|setSize
argument_list|(
name|getSize
argument_list|(
name|blob
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"Object listing "
operator|+
literal|"failed for blob ["
operator|+
name|blob
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|mockObjectSummaries
operator|.
name|add
argument_list|(
name|objectSummary
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|setObjectSummaries
argument_list|(
name|mockObjectSummaries
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|copyObject
specifier|public
name|CopyObjectResult
name|copyObject
parameter_list|(
name|CopyObjectRequest
name|copyObjectRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|String
name|sourceBlobName
init|=
name|copyObjectRequest
operator|.
name|getSourceKey
argument_list|()
decl_stmt|;
name|String
name|targetBlobName
init|=
name|copyObjectRequest
operator|.
name|getDestinationKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blobs
operator|.
name|containsKey
argument_list|(
name|sourceBlobName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"Source blob ["
operator|+
name|sourceBlobName
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|blobs
operator|.
name|containsKey
argument_list|(
name|targetBlobName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"Target blob ["
operator|+
name|targetBlobName
operator|+
literal|"] already exists."
argument_list|)
throw|;
block|}
name|blobs
operator|.
name|put
argument_list|(
name|targetBlobName
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
name|sourceBlobName
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CopyObjectResult
argument_list|()
return|;
comment|// nothing is done with it
block|}
annotation|@
name|Override
DECL|method|deleteObject
specifier|public
name|void
name|deleteObject
parameter_list|(
name|DeleteObjectRequest
name|deleteObjectRequest
parameter_list|)
throws|throws
name|AmazonClientException
throws|,
name|AmazonServiceException
block|{
name|String
name|blobName
init|=
name|deleteObjectRequest
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blobs
operator|.
name|containsKey
argument_list|(
name|blobName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"["
operator|+
name|blobName
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
name|blobs
operator|.
name|remove
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
block|}
DECL|method|getSize
specifier|private
name|int
name|getSize
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|stream
operator|.
name|read
argument_list|(
name|byteCounter
argument_list|)
decl_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// in case we ever need the size again
return|return
name|size
return|;
block|}
DECL|class|MockObjectListing
specifier|private
class|class
name|MockObjectListing
extends|extends
name|ObjectListing
block|{
comment|// the objectSummaries attribute in ObjectListing.java
comment|// is read-only, but we need to be able to write to it,
comment|// so we create a mock of it to work around this
DECL|field|mockObjectSummaries
specifier|private
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|mockObjectSummaries
decl_stmt|;
annotation|@
name|Override
DECL|method|getObjectSummaries
specifier|public
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|getObjectSummaries
parameter_list|()
block|{
return|return
name|mockObjectSummaries
return|;
block|}
DECL|method|setObjectSummaries
specifier|private
name|void
name|setObjectSummaries
parameter_list|(
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|objectSummaries
parameter_list|)
block|{
name|mockObjectSummaries
operator|=
name|objectSummaries
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

