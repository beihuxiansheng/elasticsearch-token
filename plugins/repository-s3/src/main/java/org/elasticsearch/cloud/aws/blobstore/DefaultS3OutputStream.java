begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.aws.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|aws
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AbortMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CompleteMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|InitiateMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|UploadPartRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|UploadPartResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DefaultS3OutputStream uploads data to the AWS S3 service using 2 modes: single and multi part.  *<p>  * When the length of the chunk is lower than buffer_size, the chunk is uploaded with a single request.  * Otherwise multiple requests are made, each of buffer_size (except the last one which can be lower than buffer_size).  *<p>  * Quick facts about S3:  *<p>  * Maximum object size:                 5 TB  * Maximum number of parts per upload:  10,000  * Part numbers:                        1 to 10,000 (inclusive)  * Part size:                           5 MB to 5 GB, last part can be&lt; 5 MB  *<p>  * See http://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html  * See http://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html  */
end_comment

begin_class
DECL|class|DefaultS3OutputStream
specifier|public
class|class
name|DefaultS3OutputStream
extends|extends
name|S3OutputStream
block|{
DECL|field|MULTIPART_MAX_SIZE
specifier|private
specifier|static
specifier|final
name|ByteSizeValue
name|MULTIPART_MAX_SIZE
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|5
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
literal|"cloud.aws"
argument_list|)
decl_stmt|;
comment|/**      * Multipart Upload API data      */
DECL|field|multipartId
specifier|private
name|String
name|multipartId
decl_stmt|;
DECL|field|multipartChunks
specifier|private
name|int
name|multipartChunks
decl_stmt|;
DECL|field|multiparts
specifier|private
name|List
argument_list|<
name|PartETag
argument_list|>
name|multiparts
decl_stmt|;
DECL|method|DefaultS3OutputStream
specifier|public
name|DefaultS3OutputStream
parameter_list|(
name|S3BlobStore
name|blobStore
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|int
name|bufferSizeInBytes
parameter_list|,
name|int
name|numberOfRetries
parameter_list|,
name|boolean
name|serverSideEncryption
parameter_list|)
block|{
name|super
argument_list|(
name|blobStore
argument_list|,
name|bucketName
argument_list|,
name|blobName
argument_list|,
name|bufferSizeInBytes
argument_list|,
name|numberOfRetries
argument_list|,
name|serverSideEncryption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|closing
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|len
operator|>
name|MULTIPART_MAX_SIZE
operator|.
name|getBytes
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to upload files larger than "
operator|+
name|MULTIPART_MAX_SIZE
operator|+
literal|" to Amazon S3"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|closing
condition|)
block|{
if|if
condition|(
name|len
operator|<
name|getBufferSize
argument_list|()
condition|)
block|{
name|upload
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getFlushCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|initializeMultipart
argument_list|()
expr_stmt|;
block|}
name|uploadMultipart
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|multipartId
operator|!=
literal|null
condition|)
block|{
name|uploadMultipart
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|completeMultipart
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|upload
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Upload data using a single request.      */
DECL|method|upload
specifier|private
name|void
name|upload
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
init|)
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|retry
operator|<=
name|getNumberOfRetries
argument_list|()
condition|)
block|{
try|try
block|{
name|doUpload
argument_list|(
name|getBlobStore
argument_list|()
argument_list|,
name|getBucketName
argument_list|()
argument_list|,
name|getBlobName
argument_list|()
argument_list|,
name|is
argument_list|,
name|len
argument_list|,
name|isServerSideEncryption
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
if|if
condition|(
name|getBlobStore
argument_list|()
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|)
operator|&&
name|retry
operator|<
name|getNumberOfRetries
argument_list|()
condition|)
block|{
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
name|retry
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to upload object "
operator|+
name|getBlobName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|doUpload
specifier|protected
name|void
name|doUpload
parameter_list|(
name|S3BlobStore
name|blobStore
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|serverSideEncryption
parameter_list|)
throws|throws
name|AmazonS3Exception
block|{
name|ObjectMetadata
name|md
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverSideEncryption
condition|)
block|{
name|md
operator|.
name|setSSEAlgorithm
argument_list|(
name|ObjectMetadata
operator|.
name|AES_256_SERVER_SIDE_ENCRYPTION
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|setContentLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|InputStream
name|inputStream
init|=
name|is
decl_stmt|;
comment|// We try to compute a MD5 while reading it
name|MessageDigest
name|messageDigest
decl_stmt|;
try|try
block|{
name|messageDigest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
name|inputStream
operator|=
operator|new
name|DigestInputStream
argument_list|(
name|is
argument_list|,
name|messageDigest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|impossible
parameter_list|)
block|{
comment|// Every implementation of the Java platform is required to support MD5 (see MessageDigest)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
name|PutObjectRequest
name|putRequest
init|=
operator|new
name|PutObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|blobName
argument_list|,
name|inputStream
argument_list|,
name|md
argument_list|)
operator|.
name|withStorageClass
argument_list|(
name|blobStore
operator|.
name|getStorageClass
argument_list|()
argument_list|)
operator|.
name|withCannedAcl
argument_list|(
name|blobStore
operator|.
name|getCannedACL
argument_list|()
argument_list|)
decl_stmt|;
name|PutObjectResult
name|putObjectResult
init|=
name|blobStore
operator|.
name|client
argument_list|()
operator|.
name|putObject
argument_list|(
name|putRequest
argument_list|)
decl_stmt|;
name|String
name|localMd5
init|=
name|Base64
operator|.
name|encodeAsString
argument_list|(
name|messageDigest
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|remoteMd5
init|=
name|putObjectResult
operator|.
name|getContentMd5
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|localMd5
operator|.
name|equals
argument_list|(
name|remoteMd5
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"MD5 local [{}], remote [{}] are not equal..."
argument_list|,
name|localMd5
argument_list|,
name|remoteMd5
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AmazonS3Exception
argument_list|(
literal|"MD5 local ["
operator|+
name|localMd5
operator|+
literal|"], remote ["
operator|+
name|remoteMd5
operator|+
literal|"] are not equal..."
argument_list|)
throw|;
block|}
block|}
DECL|method|initializeMultipart
specifier|private
name|void
name|initializeMultipart
parameter_list|()
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|retry
operator|<=
name|getNumberOfRetries
argument_list|()
operator|)
operator|&&
operator|(
name|multipartId
operator|==
literal|null
operator|)
condition|)
block|{
try|try
block|{
name|multipartId
operator|=
name|doInitialize
argument_list|(
name|getBlobStore
argument_list|()
argument_list|,
name|getBucketName
argument_list|()
argument_list|,
name|getBlobName
argument_list|()
argument_list|,
name|isServerSideEncryption
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipartId
operator|!=
literal|null
condition|)
block|{
name|multipartChunks
operator|=
literal|1
expr_stmt|;
name|multiparts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
if|if
condition|(
name|getBlobStore
argument_list|()
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|)
operator|&&
name|retry
operator|<
name|getNumberOfRetries
argument_list|()
condition|)
block|{
name|retry
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
DECL|method|doInitialize
specifier|protected
name|String
name|doInitialize
parameter_list|(
name|S3BlobStore
name|blobStore
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|boolean
name|serverSideEncryption
parameter_list|)
block|{
name|InitiateMultipartUploadRequest
name|request
init|=
operator|new
name|InitiateMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|blobName
argument_list|)
operator|.
name|withCannedACL
argument_list|(
name|blobStore
operator|.
name|getCannedACL
argument_list|()
argument_list|)
operator|.
name|withStorageClass
argument_list|(
name|blobStore
operator|.
name|getStorageClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverSideEncryption
condition|)
block|{
name|ObjectMetadata
name|md
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|md
operator|.
name|setSSEAlgorithm
argument_list|(
name|ObjectMetadata
operator|.
name|AES_256_SERVER_SIDE_ENCRYPTION
argument_list|)
expr_stmt|;
name|request
operator|.
name|setObjectMetadata
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
return|return
name|blobStore
operator|.
name|client
argument_list|()
operator|.
name|initiateMultipartUpload
argument_list|(
name|request
argument_list|)
operator|.
name|getUploadId
argument_list|()
return|;
block|}
DECL|method|uploadMultipart
specifier|private
name|void
name|uploadMultipart
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|lastPart
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
init|)
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|retry
operator|<=
name|getNumberOfRetries
argument_list|()
condition|)
block|{
try|try
block|{
name|PartETag
name|partETag
init|=
name|doUploadMultipart
argument_list|(
name|getBlobStore
argument_list|()
argument_list|,
name|getBucketName
argument_list|()
argument_list|,
name|getBlobName
argument_list|()
argument_list|,
name|multipartId
argument_list|,
name|is
argument_list|,
name|len
argument_list|,
name|lastPart
argument_list|)
decl_stmt|;
name|multiparts
operator|.
name|add
argument_list|(
name|partETag
argument_list|)
expr_stmt|;
name|multipartChunks
operator|++
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
if|if
condition|(
name|getBlobStore
argument_list|()
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|)
operator|&&
name|retry
operator|<
name|getNumberOfRetries
argument_list|()
condition|)
block|{
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
name|retry
operator|++
expr_stmt|;
block|}
else|else
block|{
name|abortMultipart
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|doUploadMultipart
specifier|protected
name|PartETag
name|doUploadMultipart
parameter_list|(
name|S3BlobStore
name|blobStore
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|String
name|uploadId
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|lastPart
parameter_list|)
throws|throws
name|AmazonS3Exception
block|{
name|UploadPartRequest
name|request
init|=
operator|new
name|UploadPartRequest
argument_list|()
operator|.
name|withBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|withKey
argument_list|(
name|blobName
argument_list|)
operator|.
name|withUploadId
argument_list|(
name|uploadId
argument_list|)
operator|.
name|withPartNumber
argument_list|(
name|multipartChunks
argument_list|)
operator|.
name|withInputStream
argument_list|(
name|is
argument_list|)
operator|.
name|withPartSize
argument_list|(
name|length
argument_list|)
operator|.
name|withLastPart
argument_list|(
name|lastPart
argument_list|)
decl_stmt|;
name|UploadPartResult
name|response
init|=
name|blobStore
operator|.
name|client
argument_list|()
operator|.
name|uploadPart
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getPartETag
argument_list|()
return|;
block|}
DECL|method|completeMultipart
specifier|private
name|void
name|completeMultipart
parameter_list|()
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|retry
operator|<=
name|getNumberOfRetries
argument_list|()
condition|)
block|{
try|try
block|{
name|doCompleteMultipart
argument_list|(
name|getBlobStore
argument_list|()
argument_list|,
name|getBucketName
argument_list|()
argument_list|,
name|getBlobName
argument_list|()
argument_list|,
name|multipartId
argument_list|,
name|multiparts
argument_list|)
expr_stmt|;
name|multipartId
operator|=
literal|null
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
if|if
condition|(
name|getBlobStore
argument_list|()
operator|.
name|shouldRetry
argument_list|(
name|e
argument_list|)
operator|&&
name|retry
operator|<
name|getNumberOfRetries
argument_list|()
condition|)
block|{
name|retry
operator|++
expr_stmt|;
block|}
else|else
block|{
name|abortMultipart
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
DECL|method|doCompleteMultipart
specifier|protected
name|void
name|doCompleteMultipart
parameter_list|(
name|S3BlobStore
name|blobStore
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|String
name|uploadId
parameter_list|,
name|List
argument_list|<
name|PartETag
argument_list|>
name|parts
parameter_list|)
throws|throws
name|AmazonS3Exception
block|{
name|CompleteMultipartUploadRequest
name|request
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|blobName
argument_list|,
name|uploadId
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|blobStore
operator|.
name|client
argument_list|()
operator|.
name|completeMultipartUpload
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|abortMultipart
specifier|private
name|void
name|abortMultipart
parameter_list|()
block|{
if|if
condition|(
name|multipartId
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|doAbortMultipart
argument_list|(
name|getBlobStore
argument_list|()
argument_list|,
name|getBucketName
argument_list|()
argument_list|,
name|getBlobName
argument_list|()
argument_list|,
name|multipartId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|multipartId
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|doAbortMultipart
specifier|protected
name|void
name|doAbortMultipart
parameter_list|(
name|S3BlobStore
name|blobStore
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|String
name|uploadId
parameter_list|)
throws|throws
name|AmazonS3Exception
block|{
name|blobStore
operator|.
name|client
argument_list|()
operator|.
name|abortMultipartUpload
argument_list|(
operator|new
name|AbortMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|blobName
argument_list|,
name|uploadId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

