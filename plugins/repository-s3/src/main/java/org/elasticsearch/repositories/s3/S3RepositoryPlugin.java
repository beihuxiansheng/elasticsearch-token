begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.s3
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|util
operator|.
name|json
operator|.
name|Jackson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|RepositoryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * A plugin to add a repository type that writes to and from the AWS S3.  */
end_comment

begin_class
DECL|class|S3RepositoryPlugin
specifier|public
class|class
name|S3RepositoryPlugin
extends|extends
name|Plugin
implements|implements
name|RepositoryPlugin
block|{
static|static
block|{
name|SpecialPermission
operator|.
name|check
argument_list|()
expr_stmt|;
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
comment|// kick jackson to do some static caching of declared members info
name|Jackson
operator|.
name|jsonNodeOf
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
comment|// ClientConfiguration clinit has some classloader problems
comment|// TODO: fix that
name|Class
operator|.
name|forName
argument_list|(
literal|"com.amazonaws.ClientConfiguration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|)
class|;
end_class

begin_comment
unit|}
comment|// overridable for tests
end_comment

begin_function
DECL|method|createStorageService
unit|protected
name|AwsS3Service
name|createStorageService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|InternalAwsS3Service
argument_list|(
name|settings
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getRepositories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
operator|.
name|Factory
argument_list|>
name|getRepositories
parameter_list|(
name|Environment
name|env
parameter_list|,
name|NamedXContentRegistry
name|namedXContentRegistry
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|S3Repository
operator|.
name|TYPE
argument_list|,
parameter_list|(
name|metadata
parameter_list|)
lambda|->
operator|new
name|S3Repository
argument_list|(
name|metadata
argument_list|,
name|env
operator|.
name|settings
argument_list|()
argument_list|,
name|namedXContentRegistry
argument_list|,
name|createStorageService
argument_list|(
name|env
operator|.
name|settings
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSettingsFilter
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSettingsFilter
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|S3Repository
operator|.
name|Repository
operator|.
name|KEY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|S3Repository
operator|.
name|Repository
operator|.
name|SECRET_SETTING
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
comment|// named s3 client configuration settings
name|S3Repository
operator|.
name|ACCESS_KEY_SETTING
argument_list|,
name|S3Repository
operator|.
name|SECRET_KEY_SETTING
argument_list|,
name|S3Repository
operator|.
name|ENDPOINT_SETTING
argument_list|,
name|S3Repository
operator|.
name|PROTOCOL_SETTING
argument_list|,
name|S3Repository
operator|.
name|PROXY_HOST_SETTING
argument_list|,
name|S3Repository
operator|.
name|PROXY_PORT_SETTING
argument_list|,
name|S3Repository
operator|.
name|PROXY_USERNAME_SETTING
argument_list|,
name|S3Repository
operator|.
name|PROXY_PASSWORD_SETTING
argument_list|,
name|S3Repository
operator|.
name|READ_TIMEOUT_SETTING
argument_list|,
comment|// Register global cloud aws settings: cloud.aws (might have been registered in ec2 plugin)
name|AwsS3Service
operator|.
name|KEY_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|SECRET_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|PROTOCOL_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|PROXY_HOST_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|PROXY_PORT_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|PROXY_USERNAME_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|PROXY_PASSWORD_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|SIGNER_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|READ_TIMEOUT
argument_list|,
comment|// Register S3 specific settings: cloud.aws.s3
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|KEY_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|SECRET_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|PROTOCOL_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|PROXY_HOST_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|PROXY_PORT_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|PROXY_USERNAME_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|PROXY_PASSWORD_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|SIGNER_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|ENDPOINT_SETTING
argument_list|,
name|AwsS3Service
operator|.
name|CLOUD_S3
operator|.
name|READ_TIMEOUT
argument_list|,
comment|// Register S3 repositories settings: repositories.s3
name|S3Repository
operator|.
name|Repositories
operator|.
name|KEY_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|SECRET_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|BUCKET_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|ENDPOINT_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|PROTOCOL_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|SERVER_SIDE_ENCRYPTION_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|BUFFER_SIZE_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|MAX_RETRIES_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|CHUNK_SIZE_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|COMPRESS_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|STORAGE_CLASS_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|CANNED_ACL_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|BASE_PATH_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|USE_THROTTLE_RETRIES_SETTING
argument_list|,
name|S3Repository
operator|.
name|Repositories
operator|.
name|PATH_STYLE_ACCESS_SETTING
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

