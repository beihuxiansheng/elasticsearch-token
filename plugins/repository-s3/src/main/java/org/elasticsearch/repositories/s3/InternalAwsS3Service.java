begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.s3
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|BasicAWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|InstanceProfileCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|http
operator|.
name|IdleConnectionReaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|internal
operator|.
name|StaticCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SecureString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_class
DECL|class|InternalAwsS3Service
class|class
name|InternalAwsS3Service
extends|extends
name|AbstractLifecycleComponent
implements|implements
name|AwsS3Service
block|{
comment|// pkg private for tests
DECL|field|CLIENT_NAME
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|CLIENT_NAME
init|=
operator|new
name|Setting
argument_list|<>
argument_list|(
literal|"client"
argument_list|,
literal|"default"
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|clientsSettings
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|S3ClientSettings
argument_list|>
name|clientsSettings
decl_stmt|;
DECL|field|clientsCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AmazonS3Client
argument_list|>
name|clientsCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|InternalAwsS3Service
name|InternalAwsS3Service
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|S3ClientSettings
argument_list|>
name|clientsSettings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientsSettings
operator|=
name|clientsSettings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|client
specifier|public
specifier|synchronized
name|AmazonS3
name|client
parameter_list|(
name|Settings
name|repositorySettings
parameter_list|)
block|{
name|String
name|clientName
init|=
name|CLIENT_NAME
operator|.
name|get
argument_list|(
name|repositorySettings
argument_list|)
decl_stmt|;
name|AmazonS3Client
name|client
init|=
name|clientsCache
operator|.
name|get
argument_list|(
name|clientName
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
return|;
block|}
name|S3ClientSettings
name|clientSettings
init|=
name|clientsSettings
operator|.
name|get
argument_list|(
name|clientName
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientSettings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown s3 client name ["
operator|+
name|clientName
operator|+
literal|"]. Existing client configs: "
operator|+
name|Strings
operator|.
name|collectionToDelimitedString
argument_list|(
name|clientsSettings
operator|.
name|keySet
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
throw|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"creating S3 client with client_name [{}], endpoint [{}]"
argument_list|,
name|clientName
argument_list|,
name|clientSettings
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|AWSCredentialsProvider
name|credentials
init|=
name|buildCredentials
argument_list|(
name|logger
argument_list|,
name|deprecationLogger
argument_list|,
name|clientSettings
argument_list|,
name|repositorySettings
argument_list|)
decl_stmt|;
name|ClientConfiguration
name|configuration
init|=
name|buildConfiguration
argument_list|(
name|clientSettings
argument_list|,
name|repositorySettings
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|AmazonS3Client
argument_list|(
name|credentials
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|clientSettings
operator|.
name|endpoint
argument_list|)
condition|)
block|{
name|client
operator|.
name|setEndpoint
argument_list|(
name|clientSettings
operator|.
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|clientsCache
operator|.
name|put
argument_list|(
name|clientName
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
comment|// pkg private for tests
DECL|method|buildConfiguration
specifier|static
name|ClientConfiguration
name|buildConfiguration
parameter_list|(
name|S3ClientSettings
name|clientSettings
parameter_list|,
name|Settings
name|repositorySettings
parameter_list|)
block|{
name|ClientConfiguration
name|clientConfiguration
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
comment|// the response metadata cache is only there for diagnostics purposes,
comment|// but can force objects from every response to the old generation.
name|clientConfiguration
operator|.
name|setResponseMetadataCacheSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|clientConfiguration
operator|.
name|setProtocol
argument_list|(
name|clientSettings
operator|.
name|protocol
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|clientSettings
operator|.
name|proxyHost
argument_list|)
condition|)
block|{
comment|// TODO: remove this leniency, these settings should exist together and be validated
name|clientConfiguration
operator|.
name|setProxyHost
argument_list|(
name|clientSettings
operator|.
name|proxyHost
argument_list|)
expr_stmt|;
name|clientConfiguration
operator|.
name|setProxyPort
argument_list|(
name|clientSettings
operator|.
name|proxyPort
argument_list|)
expr_stmt|;
name|clientConfiguration
operator|.
name|setProxyUsername
argument_list|(
name|clientSettings
operator|.
name|proxyUsername
argument_list|)
expr_stmt|;
name|clientConfiguration
operator|.
name|setProxyPassword
argument_list|(
name|clientSettings
operator|.
name|proxyPassword
argument_list|)
expr_stmt|;
block|}
name|clientConfiguration
operator|.
name|setMaxErrorRetry
argument_list|(
name|clientSettings
operator|.
name|maxRetries
argument_list|)
expr_stmt|;
name|clientConfiguration
operator|.
name|setUseThrottleRetries
argument_list|(
name|clientSettings
operator|.
name|throttleRetries
argument_list|)
expr_stmt|;
name|clientConfiguration
operator|.
name|setSocketTimeout
argument_list|(
name|clientSettings
operator|.
name|readTimeoutMillis
argument_list|)
expr_stmt|;
return|return
name|clientConfiguration
return|;
block|}
comment|// pkg private for tests
DECL|method|buildCredentials
specifier|static
name|AWSCredentialsProvider
name|buildCredentials
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|DeprecationLogger
name|deprecationLogger
parameter_list|,
name|S3ClientSettings
name|clientSettings
parameter_list|,
name|Settings
name|repositorySettings
parameter_list|)
block|{
name|BasicAWSCredentials
name|credentials
init|=
name|clientSettings
operator|.
name|credentials
decl_stmt|;
if|if
condition|(
name|S3Repository
operator|.
name|ACCESS_KEY_SETTING
operator|.
name|exists
argument_list|(
name|repositorySettings
argument_list|)
condition|)
block|{
if|if
condition|(
name|S3Repository
operator|.
name|SECRET_KEY_SETTING
operator|.
name|exists
argument_list|(
name|repositorySettings
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Repository setting ["
operator|+
name|S3Repository
operator|.
name|ACCESS_KEY_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|" must be accompanied by setting ["
operator|+
name|S3Repository
operator|.
name|SECRET_KEY_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
try|try
init|(
name|SecureString
name|key
init|=
name|S3Repository
operator|.
name|ACCESS_KEY_SETTING
operator|.
name|get
argument_list|(
name|repositorySettings
argument_list|)
init|;                  SecureString secret = S3Repository.SECRET_KEY_SETTING.get(repositorySettings)
block|)
block|{
name|credentials
operator|=
operator|new
name|BasicAWSCredentials
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|secret
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// backcompat for reading keys out of repository settings
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
literal|"Using s3 access/secret key from repository settings. Instead "
operator|+
literal|"store these in named clients and the elasticsearch keystore for secure settings."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|S3Repository
operator|.
name|SECRET_KEY_SETTING
operator|.
name|exists
argument_list|(
name|repositorySettings
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Repository setting ["
operator|+
name|S3Repository
operator|.
name|SECRET_KEY_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|" must be accompanied by setting ["
operator|+
name|S3Repository
operator|.
name|ACCESS_KEY_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Using instance profile credentials"
argument_list|)
expr_stmt|;
return|return
operator|new
name|PrivilegedInstanceProfileCredentialsProvider
argument_list|()
return|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Using basic key/secret credentials"
argument_list|)
expr_stmt|;
return|return
operator|new
name|StaticCredentialsProvider
argument_list|(
name|credentials
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/** Returns the value for a given setting from the repository, or returns the fallback value. */
end_comment

begin_function
DECL|method|getRepoValue
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getRepoValue
parameter_list|(
name|Settings
name|repositorySettings
parameter_list|,
name|Setting
argument_list|<
name|T
argument_list|>
name|repositorySetting
parameter_list|,
name|T
name|fallback
parameter_list|)
block|{
if|if
condition|(
name|repositorySetting
operator|.
name|exists
argument_list|(
name|repositorySettings
argument_list|)
condition|)
block|{
return|return
name|repositorySetting
operator|.
name|get
argument_list|(
name|repositorySettings
argument_list|)
return|;
block|}
return|return
name|fallback
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
end_function

begin_function
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
end_function

begin_function
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
for|for
control|(
name|AmazonS3Client
name|client
range|:
name|clientsCache
operator|.
name|values
argument_list|()
control|)
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Ensure that IdleConnectionReaper is shutdown
name|IdleConnectionReaper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|PrivilegedInstanceProfileCredentialsProvider
specifier|static
class|class
name|PrivilegedInstanceProfileCredentialsProvider
implements|implements
name|AWSCredentialsProvider
block|{
DECL|field|credentials
specifier|private
specifier|final
name|InstanceProfileCredentialsProvider
name|credentials
decl_stmt|;
DECL|method|PrivilegedInstanceProfileCredentialsProvider
specifier|private
name|PrivilegedInstanceProfileCredentialsProvider
parameter_list|()
block|{
name|this
operator|.
name|credentials
operator|=
operator|new
name|InstanceProfileCredentialsProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCredentials
specifier|public
name|AWSCredentials
name|getCredentials
parameter_list|()
block|{
return|return
name|SocketAccess
operator|.
name|doPrivileged
argument_list|(
name|credentials
operator|::
name|getCredentials
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refresh
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|SocketAccess
operator|.
name|doPrivilegedVoid
argument_list|(
name|credentials
operator|::
name|refresh
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

