begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.s3
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|AmazonS3Exception
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CannedAccessControlList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|StorageClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|S3BlobStore
class|class
name|S3BlobStore
extends|extends
name|AbstractComponent
implements|implements
name|BlobStore
block|{
DECL|field|client
specifier|private
specifier|final
name|AmazonS3
name|client
decl_stmt|;
DECL|field|bucket
specifier|private
specifier|final
name|String
name|bucket
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|final
name|ByteSizeValue
name|bufferSize
decl_stmt|;
DECL|field|serverSideEncryption
specifier|private
specifier|final
name|boolean
name|serverSideEncryption
decl_stmt|;
DECL|field|numberOfRetries
specifier|private
specifier|final
name|int
name|numberOfRetries
decl_stmt|;
DECL|field|cannedACL
specifier|private
specifier|final
name|CannedAccessControlList
name|cannedACL
decl_stmt|;
DECL|field|storageClass
specifier|private
specifier|final
name|StorageClass
name|storageClass
decl_stmt|;
DECL|method|S3BlobStore
name|S3BlobStore
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|AmazonS3
name|client
parameter_list|,
name|String
name|bucket
parameter_list|,
name|boolean
name|serverSideEncryption
parameter_list|,
name|ByteSizeValue
name|bufferSize
parameter_list|,
name|int
name|maxRetries
parameter_list|,
name|String
name|cannedACL
parameter_list|,
name|String
name|storageClass
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|bucket
operator|=
name|bucket
expr_stmt|;
name|this
operator|.
name|serverSideEncryption
operator|=
name|serverSideEncryption
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|cannedACL
operator|=
name|initCannedACL
argument_list|(
name|cannedACL
argument_list|)
expr_stmt|;
name|this
operator|.
name|numberOfRetries
operator|=
name|maxRetries
expr_stmt|;
name|this
operator|.
name|storageClass
operator|=
name|initStorageClass
argument_list|(
name|storageClass
argument_list|)
expr_stmt|;
comment|// Note: the method client.doesBucketExist() may return 'true' is the bucket exists
comment|// but we don't have access to it (ie, 403 Forbidden response code)
comment|// Also, if invalid security credentials are used to execute this method, the
comment|// client is not able to distinguish between bucket permission errors and
comment|// invalid credential errors, and this method could return an incorrect result.
name|SocketAccess
operator|.
name|doPrivilegedVoid
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|client
operator|.
name|doesBucketExist
argument_list|(
name|bucket
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The bucket ["
operator|+
name|bucket
operator|+
literal|"] does not exist. Please create it before "
operator|+
literal|" creating an s3 snapshot repository backed by it."
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|bucket
return|;
block|}
DECL|method|client
specifier|public
name|AmazonS3
name|client
parameter_list|()
block|{
return|return
name|client
return|;
block|}
DECL|method|bucket
specifier|public
name|String
name|bucket
parameter_list|()
block|{
return|return
name|bucket
return|;
block|}
DECL|method|serverSideEncryption
specifier|public
name|boolean
name|serverSideEncryption
parameter_list|()
block|{
return|return
name|serverSideEncryption
return|;
block|}
DECL|method|bufferSizeInBytes
specifier|public
name|int
name|bufferSizeInBytes
parameter_list|()
block|{
return|return
name|bufferSize
operator|.
name|bytesAsInt
argument_list|()
return|;
block|}
DECL|method|numberOfRetries
specifier|public
name|int
name|numberOfRetries
parameter_list|()
block|{
return|return
name|numberOfRetries
return|;
block|}
annotation|@
name|Override
DECL|method|blobContainer
specifier|public
name|BlobContainer
name|blobContainer
parameter_list|(
name|BlobPath
name|path
parameter_list|)
block|{
return|return
operator|new
name|S3BlobContainer
argument_list|(
name|path
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|BlobPath
name|path
parameter_list|)
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|ObjectListing
name|prevListing
operator|=
literal|null
block|;
comment|//From http://docs.amazonwebservices.com/AmazonS3/latest/dev/DeletingMultipleObjectsUsingJava.html
comment|//we can do at most 1K objects per delete
comment|//We don't know the bucket name until first object listing
name|DeleteObjectsRequest
name|multiObjectDeleteRequest
operator|=
literal|null
block|;
name|ArrayList
argument_list|<
name|KeyVersion
argument_list|>
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|;
while|while
condition|(
literal|true
condition|)
block|{
name|ObjectListing
name|list
decl_stmt|;
if|if
condition|(
name|prevListing
operator|!=
literal|null
condition|)
block|{
name|list
operator|=
name|client
operator|.
name|listNextBatchOfObjects
argument_list|(
name|prevListing
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
name|client
operator|.
name|listObjects
argument_list|(
name|bucket
argument_list|,
name|path
operator|.
name|buildAsString
argument_list|()
argument_list|)
expr_stmt|;
name|multiObjectDeleteRequest
operator|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|list
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|for
operator|(
name|S3ObjectSummary
name|summary
operator|:
name|list
operator|.
name|getObjectSummaries
argument_list|()
operator|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|KeyVersion
argument_list|(
name|summary
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
block|;
comment|//Every 500 objects batch the delete request
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|>
literal|500
condition|)
block|{
name|multiObjectDeleteRequest
operator|.
name|setKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|client
operator|.
name|deleteObjects
argument_list|(
name|multiObjectDeleteRequest
argument_list|)
expr_stmt|;
name|multiObjectDeleteRequest
operator|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|list
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|prevListing
operator|=
name|list
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
end_class

begin_if
if|if
condition|(
operator|!
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|multiObjectDeleteRequest
operator|.
name|setKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|client
operator|.
name|deleteObjects
argument_list|(
name|multiObjectDeleteRequest
argument_list|)
expr_stmt|;
block|}
end_if

begin_return
return|return
literal|null
return|;
end_return

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      protected
DECL|method|shouldRetry
name|boolean
name|shouldRetry
parameter_list|(
name|AmazonClientException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|AmazonS3Exception
condition|)
block|{
name|AmazonS3Exception
name|s3e
init|=
operator|(
name|AmazonS3Exception
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|s3e
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|400
operator|&&
literal|"RequestTimeout"
operator|.
name|equals
argument_list|(
name|s3e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|e
operator|.
name|isRetryable
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{     }
end_function

begin_function
DECL|method|getCannedACL
specifier|public
name|CannedAccessControlList
name|getCannedACL
parameter_list|()
block|{
return|return
name|cannedACL
return|;
block|}
end_function

begin_function
DECL|method|getStorageClass
specifier|public
name|StorageClass
name|getStorageClass
parameter_list|()
block|{
return|return
name|storageClass
return|;
block|}
end_function

begin_function
DECL|method|initStorageClass
specifier|public
specifier|static
name|StorageClass
name|initStorageClass
parameter_list|(
name|String
name|storageClass
parameter_list|)
block|{
if|if
condition|(
name|storageClass
operator|==
literal|null
operator|||
name|storageClass
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|StorageClass
operator|.
name|Standard
return|;
block|}
try|try
block|{
name|StorageClass
name|_storageClass
init|=
name|StorageClass
operator|.
name|fromValue
argument_list|(
name|storageClass
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|_storageClass
operator|.
name|equals
argument_list|(
name|StorageClass
operator|.
name|Glacier
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BlobStoreException
argument_list|(
literal|"Glacier storage class is not supported"
argument_list|)
throw|;
block|}
return|return
name|_storageClass
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
throw|throw
operator|new
name|BlobStoreException
argument_list|(
literal|"`"
operator|+
name|storageClass
operator|+
literal|"` is not a valid S3 Storage Class."
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**      * Constructs canned acl from string      */
end_comment

begin_function
DECL|method|initCannedACL
specifier|public
specifier|static
name|CannedAccessControlList
name|initCannedACL
parameter_list|(
name|String
name|cannedACL
parameter_list|)
block|{
if|if
condition|(
name|cannedACL
operator|==
literal|null
operator|||
name|cannedACL
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|CannedAccessControlList
operator|.
name|Private
return|;
block|}
for|for
control|(
name|CannedAccessControlList
name|cur
range|:
name|CannedAccessControlList
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|cur
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cannedACL
argument_list|)
condition|)
block|{
return|return
name|cur
return|;
block|}
block|}
throw|throw
operator|new
name|BlobStoreException
argument_list|(
literal|"cannedACL is not valid: ["
operator|+
name|cannedACL
operator|+
literal|"]"
argument_list|)
throw|;
block|}
end_function

unit|}
end_unit

