begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.azure.storage
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|CloudStorageAccount
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|LocationMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlobContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|CloudBlockBlob
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|blob
operator|.
name|ListBlobItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|support
operator|.
name|PlainBlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|AzureStorageServiceImpl
specifier|public
class|class
name|AzureStorageServiceImpl
extends|extends
name|AbstractComponent
implements|implements
name|AzureStorageService
block|{
DECL|field|primaryStorageSettings
specifier|final
name|AzureStorageSettings
name|primaryStorageSettings
decl_stmt|;
DECL|field|secondariesStorageSettings
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AzureStorageSettings
argument_list|>
name|secondariesStorageSettings
decl_stmt|;
DECL|field|clients
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CloudBlobClient
argument_list|>
name|clients
decl_stmt|;
DECL|method|AzureStorageServiceImpl
specifier|public
name|AzureStorageServiceImpl
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Tuple
argument_list|<
name|AzureStorageSettings
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AzureStorageSettings
argument_list|>
argument_list|>
name|storageSettings
init|=
name|AzureStorageSettings
operator|.
name|parse
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|this
operator|.
name|primaryStorageSettings
operator|=
name|storageSettings
operator|.
name|v1
argument_list|()
expr_stmt|;
name|this
operator|.
name|secondariesStorageSettings
operator|=
name|storageSettings
operator|.
name|v2
argument_list|()
expr_stmt|;
name|this
operator|.
name|clients
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"starting azure storage client instance"
argument_list|)
expr_stmt|;
comment|// We register the primary client if any
if|if
condition|(
name|primaryStorageSettings
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"registering primary client for account [{}]"
argument_list|,
name|primaryStorageSettings
operator|.
name|getAccount
argument_list|()
argument_list|)
expr_stmt|;
name|createClient
argument_list|(
name|primaryStorageSettings
argument_list|)
expr_stmt|;
block|}
comment|// We register all secondary clients
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AzureStorageSettings
argument_list|>
name|azureStorageSettingsEntry
range|:
name|secondariesStorageSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"registering secondary client for account [{}]"
argument_list|,
name|azureStorageSettingsEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|createClient
argument_list|(
name|azureStorageSettingsEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createClient
name|void
name|createClient
parameter_list|(
name|AzureStorageSettings
name|azureStorageSettings
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"creating new Azure storage client using account [{}], key [{}]"
argument_list|,
name|azureStorageSettings
operator|.
name|getAccount
argument_list|()
argument_list|,
name|azureStorageSettings
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|storageConnectionString
init|=
literal|"DefaultEndpointsProtocol=https;"
operator|+
literal|"AccountName="
operator|+
name|azureStorageSettings
operator|.
name|getAccount
argument_list|()
operator|+
literal|";"
operator|+
literal|"AccountKey="
operator|+
name|azureStorageSettings
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// Retrieve storage account from connection-string.
name|CloudStorageAccount
name|storageAccount
init|=
name|CloudStorageAccount
operator|.
name|parse
argument_list|(
name|storageConnectionString
argument_list|)
decl_stmt|;
comment|// Create the blob client.
name|CloudBlobClient
name|client
init|=
name|storageAccount
operator|.
name|createCloudBlobClient
argument_list|()
decl_stmt|;
comment|// Register the client
name|this
operator|.
name|clients
operator|.
name|put
argument_list|(
name|azureStorageSettings
operator|.
name|getAccount
argument_list|()
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"can not create azure storage client: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSelectedClient
name|CloudBlobClient
name|getSelectedClient
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"selecting a client for account [{}], mode [{}]"
argument_list|,
name|account
argument_list|,
name|mode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|AzureStorageSettings
name|azureStorageSettings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|primaryStorageSettings
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No primary azure storage can be found. Check your elasticsearch.yml."
argument_list|)
throw|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|account
argument_list|)
condition|)
block|{
name|azureStorageSettings
operator|=
name|this
operator|.
name|secondariesStorageSettings
operator|.
name|get
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
comment|// if account is not secondary, it's the primary
if|if
condition|(
name|azureStorageSettings
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|account
argument_list|)
operator|==
literal|false
operator|||
name|primaryStorageSettings
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|account
operator|.
name|equals
argument_list|(
name|primaryStorageSettings
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|azureStorageSettings
operator|=
name|primaryStorageSettings
expr_stmt|;
block|}
block|}
if|if
condition|(
name|azureStorageSettings
operator|==
literal|null
condition|)
block|{
comment|// We did not get an account. That's bad.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not find azure account ["
operator|+
name|account
operator|+
literal|"]. Check your elasticsearch.yml."
argument_list|)
throw|;
block|}
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|clients
operator|.
name|get
argument_list|(
name|azureStorageSettings
operator|.
name|getAccount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not find an azure client for account ["
operator|+
name|account
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// NOTE: for now, just set the location mode in case it is different;
comment|// only one mode per storage account can be active at a time
name|client
operator|.
name|getDefaultRequestOptions
argument_list|()
operator|.
name|setLocationMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
comment|// Set timeout option if the user sets cloud.azure.storage.timeout or cloud.azure.storage.xxx.timeout (it's negative by default)
if|if
condition|(
name|azureStorageSettings
operator|.
name|getTimeout
argument_list|()
operator|.
name|getSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|int
name|timeout
init|=
operator|(
name|int
operator|)
name|azureStorageSettings
operator|.
name|getTimeout
argument_list|()
operator|.
name|getMillis
argument_list|()
decl_stmt|;
name|client
operator|.
name|getDefaultRequestOptions
argument_list|()
operator|.
name|setTimeoutIntervalInMs
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not convert ["
operator|+
name|azureStorageSettings
operator|.
name|getTimeout
argument_list|()
operator|+
literal|"]. It can not be longer than 2,147,483,647ms."
argument_list|)
throw|;
block|}
block|}
return|return
name|client
return|;
block|}
annotation|@
name|Override
DECL|method|doesContainerExist
specifier|public
name|boolean
name|doesContainerExist
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|)
block|{
try|try
block|{
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
return|return
name|blobContainer
operator|.
name|exists
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"can not access container [{}]"
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|removeContainer
specifier|public
name|void
name|removeContainer
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"removing container [{}]"
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|blobContainer
operator|.
name|deleteIfExists
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContainer
specifier|public
name|void
name|createContainer
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
try|try
block|{
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"creating container [{}]"
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|blobContainer
operator|.
name|createIfNotExists
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"fails creating container [{}]"
argument_list|,
name|container
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|container
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteFiles
specifier|public
name|void
name|deleteFiles
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"delete files container [{}], path [{}]"
argument_list|,
name|container
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// Container name must be lower case.
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobContainer
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// We list the blobs using a flat blob listing mode
for|for
control|(
name|ListBlobItem
name|blobItem
range|:
name|blobContainer
operator|.
name|listBlobs
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|String
name|blobName
init|=
name|blobNameFromUri
argument_list|(
name|blobItem
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"removing blob [{}] full URI was [{}]"
argument_list|,
name|blobName
argument_list|,
name|blobItem
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|deleteBlob
argument_list|(
name|account
argument_list|,
name|mode
argument_list|,
name|container
argument_list|,
name|blobName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Extract the blob name from a URI like https://myservice.azure.net/container/path/to/myfile      * It should remove the container part (first part of the path) and gives path/to/myfile      * @param uri URI to parse      * @return The blob name relative to the container      */
DECL|method|blobNameFromUri
specifier|public
specifier|static
name|String
name|blobNameFromUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// We remove the container name from the path
comment|// The 3 magic number cames from the fact if path is /container/path/to/myfile
comment|// First occurrence is empty "/"
comment|// Second occurrence is "container
comment|// Last part contains "path/to/myfile" which is what we want to get
name|String
index|[]
name|splits
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// We return the remaining end of the string
return|return
name|splits
index|[
literal|2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|blobExists
specifier|public
name|boolean
name|blobExists
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|blob
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
comment|// Container name must be lower case.
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobContainer
operator|.
name|exists
argument_list|()
condition|)
block|{
name|CloudBlockBlob
name|azureBlob
init|=
name|blobContainer
operator|.
name|getBlockBlobReference
argument_list|(
name|blob
argument_list|)
decl_stmt|;
return|return
name|azureBlob
operator|.
name|exists
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|deleteBlob
specifier|public
name|void
name|deleteBlob
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|blob
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"delete blob for container [{}], blob [{}]"
argument_list|,
name|container
argument_list|,
name|blob
argument_list|)
expr_stmt|;
comment|// Container name must be lower case.
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobContainer
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"container [{}]: blob [{}] found. removing."
argument_list|,
name|container
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|CloudBlockBlob
name|azureBlob
init|=
name|blobContainer
operator|.
name|getBlockBlobReference
argument_list|(
name|blob
argument_list|)
decl_stmt|;
name|azureBlob
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInputStream
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|blob
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"reading container [{}], blob [{}]"
argument_list|,
name|container
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
operator|.
name|getBlockBlobReference
argument_list|(
name|blob
argument_list|)
operator|.
name|openInputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|blob
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"writing container [{}], blob [{}]"
argument_list|,
name|container
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
operator|.
name|getBlockBlobReference
argument_list|(
name|blob
argument_list|)
operator|.
name|openOutputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listBlobsByPrefix
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|listBlobsByPrefix
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|keyPath
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
comment|// NOTE: this should be here: if (prefix == null) prefix = "";
comment|// however, this is really inefficient since deleteBlobsByPrefix enumerates everything and
comment|// then does a prefix match on the result; it should just call listBlobsByPrefix with the prefix!
name|logger
operator|.
name|debug
argument_list|(
literal|"listing container [{}], keyPath [{}], prefix [{}]"
argument_list|,
name|container
argument_list|,
name|keyPath
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobsBuilder
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobContainer
operator|.
name|exists
argument_list|()
condition|)
block|{
for|for
control|(
name|ListBlobItem
name|blobItem
range|:
name|blobContainer
operator|.
name|listBlobs
argument_list|(
name|keyPath
operator|+
operator|(
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
operator|)
argument_list|)
control|)
block|{
name|URI
name|uri
init|=
name|blobItem
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"blob url [{}]"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// uri.getPath is of the form /container/keyPath.* and we want to strip off the /container/
comment|// this requires 1 + container.length() + 1, with each 1 corresponding to one of the /
name|String
name|blobPath
init|=
name|uri
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|container
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|CloudBlockBlob
name|blob
init|=
name|blobContainer
operator|.
name|getBlockBlobReference
argument_list|(
name|blobPath
argument_list|)
decl_stmt|;
comment|// fetch the blob attributes from Azure (getBlockBlobReference does not do this)
comment|// this is needed to retrieve the blob length (among other metadata) from Azure Storage
name|blob
operator|.
name|downloadAttributes
argument_list|()
expr_stmt|;
name|BlobProperties
name|properties
init|=
name|blob
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|blobPath
operator|.
name|substring
argument_list|(
name|keyPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"blob url [{}], name [{}], size [{}]"
argument_list|,
name|uri
argument_list|,
name|name
argument_list|,
name|properties
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|blobsBuilder
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PlainBlobMetaData
argument_list|(
name|name
argument_list|,
name|properties
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|blobsBuilder
operator|.
name|immutableMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|moveBlob
specifier|public
name|void
name|moveBlob
parameter_list|(
name|String
name|account
parameter_list|,
name|LocationMode
name|mode
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|sourceBlob
parameter_list|,
name|String
name|targetBlob
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|StorageException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"moveBlob container [{}], sourceBlob [{}], targetBlob [{}]"
argument_list|,
name|container
argument_list|,
name|sourceBlob
argument_list|,
name|targetBlob
argument_list|)
expr_stmt|;
name|CloudBlobClient
name|client
init|=
name|this
operator|.
name|getSelectedClient
argument_list|(
name|account
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|CloudBlobContainer
name|blobContainer
init|=
name|client
operator|.
name|getContainerReference
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|CloudBlockBlob
name|blobSource
init|=
name|blobContainer
operator|.
name|getBlockBlobReference
argument_list|(
name|sourceBlob
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobSource
operator|.
name|exists
argument_list|()
condition|)
block|{
name|CloudBlockBlob
name|blobTarget
init|=
name|blobContainer
operator|.
name|getBlockBlobReference
argument_list|(
name|targetBlob
argument_list|)
decl_stmt|;
name|blobTarget
operator|.
name|startCopy
argument_list|(
name|blobSource
argument_list|)
expr_stmt|;
name|blobSource
operator|.
name|delete
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"moveBlob container [{}], sourceBlob [{}], targetBlob [{}] -> done"
argument_list|,
name|container
argument_list|,
name|sourceBlob
argument_list|,
name|targetBlob
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

