begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.azure
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|LocationMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|azure
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|repositories
operator|.
name|put
operator|.
name|PutRepositoryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|AbstractAzureWithThirdPartyIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|storage
operator|.
name|AzureStorageService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|storage
operator|.
name|AzureStorageServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|azure
operator|.
name|AzureRepository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|AzureTestUtils
operator|.
name|readSettingsFromFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|azure
operator|.
name|AzureSnapshotRestoreTests
operator|.
name|getContainerName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  * This test needs Azure to run and -Dtests.thirdparty=true to be set  * and -Dtests.config=/path/to/elasticsearch.yml  *  * Note that this test requires an Azure storage account, with the account  * and credentials set in the elasticsearch.yml config file passed in to the  * test.  The Azure storage account type must be a Read-access geo-redundant  * storage (RA-GRS) account.  *  * @see AbstractAzureWithThirdPartyIntegTestCase  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|supportsDedicatedMasters
operator|=
literal|false
argument_list|,
name|numDataNodes
operator|=
literal|1
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
DECL|class|AzureSnapshotRestoreListSnapshotsTests
specifier|public
class|class
name|AzureSnapshotRestoreListSnapshotsTests
extends|extends
name|AbstractAzureWithThirdPartyIntegTestCase
block|{
DECL|field|azureStorageService
specifier|private
specifier|final
name|AzureStorageService
name|azureStorageService
init|=
operator|new
name|AzureStorageServiceImpl
argument_list|(
name|readSettingsFromFile
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|containerName
specifier|private
specifier|final
name|String
name|containerName
init|=
name|getContainerName
argument_list|()
decl_stmt|;
DECL|method|testList
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|Exception
block|{
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  creating azure primary repository"
argument_list|)
expr_stmt|;
name|PutRepositoryResponse
name|putRepositoryResponsePrimary
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
literal|"primary"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"azure"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Repository
operator|.
name|CONTAINER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|containerName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|putRepositoryResponsePrimary
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start get snapshots on primary"
argument_list|)
expr_stmt|;
name|long
name|startWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
literal|"primary"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|endWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// definitely should be done in 30s, and if its not working as expected, it takes over 1m
name|assertThat
argument_list|(
name|endWait
operator|-
name|startWait
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|30000L
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  creating azure secondary repository"
argument_list|)
expr_stmt|;
name|PutRepositoryResponse
name|putRepositoryResponseSecondary
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePutRepository
argument_list|(
literal|"secondary"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"azure"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Repository
operator|.
name|CONTAINER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|containerName
argument_list|)
operator|.
name|put
argument_list|(
name|Repository
operator|.
name|LOCATION_MODE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"secondary_only"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|putRepositoryResponseSecondary
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start get snapshots on secondary"
argument_list|)
expr_stmt|;
name|startWait
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareGetSnapshots
argument_list|(
literal|"secondary"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|endWait
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> end of get snapshots on secondary. Took {} ms"
argument_list|,
name|endWait
operator|-
name|startWait
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|endWait
operator|-
name|startWait
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|30000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|createContainer
specifier|public
name|void
name|createContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// It could happen that we run this test really close to a previous one
comment|// so we might need some time to be able to create the container
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|azureStorageService
operator|.
name|createContainer
argument_list|(
literal|null
argument_list|,
name|LocationMode
operator|.
name|PRIMARY_ONLY
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// Incorrect URL. This should never happen.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|// It could happen. Let's wait for a while.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|removeContainer
specifier|public
name|void
name|removeContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|azureStorageService
operator|.
name|removeContainer
argument_list|(
literal|null
argument_list|,
name|LocationMode
operator|.
name|PRIMARY_ONLY
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

