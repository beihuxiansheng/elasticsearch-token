begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.river.wikipedia.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|wikipedia
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|CBZip2InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_comment
comment|/**  * @author Delip Rao  * @author Jason Smith  */
end_comment

begin_class
DECL|class|WikiXMLParser
specifier|public
specifier|abstract
class|class
name|WikiXMLParser
block|{
DECL|field|wikiXMLFile
specifier|private
name|URL
name|wikiXMLFile
init|=
literal|null
decl_stmt|;
DECL|field|currentPage
specifier|protected
name|WikiPage
name|currentPage
init|=
literal|null
decl_stmt|;
DECL|method|WikiXMLParser
specifier|public
name|WikiXMLParser
parameter_list|(
name|URL
name|fileName
parameter_list|)
block|{
name|wikiXMLFile
operator|=
name|fileName
expr_stmt|;
block|}
comment|/**      * Set a callback handler. The callback is executed every time a      * page instance is detected in the stream. Custom handlers are      * implementations of {@link PageCallbackHandler}      *      * @param handler      * @throws Exception      */
DECL|method|setPageCallback
specifier|public
specifier|abstract
name|void
name|setPageCallback
parameter_list|(
name|PageCallbackHandler
name|handler
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * The main parse method.      *      * @throws Exception      */
DECL|method|parse
specifier|public
specifier|abstract
name|void
name|parse
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * @return an iterator to the list of pages      * @throws Exception      */
DECL|method|getIterator
specifier|public
specifier|abstract
name|WikiPageIterator
name|getIterator
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * @return An InputSource created from wikiXMLFile      * @throws Exception      */
DECL|method|getInputSource
specifier|protected
name|InputSource
name|getInputSource
parameter_list|()
throws|throws
name|Exception
block|{
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wikiXMLFile
operator|.
name|toExternalForm
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".gz"
argument_list|)
condition|)
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
name|wikiXMLFile
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wikiXMLFile
operator|.
name|toExternalForm
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".bz2"
argument_list|)
condition|)
block|{
name|InputStream
name|fis
init|=
name|wikiXMLFile
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ignoreBytes
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|fis
operator|.
name|read
argument_list|(
name|ignoreBytes
argument_list|)
expr_stmt|;
comment|//"B", "Z" bytes from commandline tools
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|CBZip2InputStream
argument_list|(
name|fis
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|wikiXMLFile
operator|.
name|openStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InputSource
argument_list|(
name|br
argument_list|)
return|;
block|}
DECL|method|notifyPage
specifier|protected
name|void
name|notifyPage
parameter_list|(
name|WikiPage
name|page
parameter_list|)
block|{
name|currentPage
operator|=
name|page
expr_stmt|;
block|}
block|}
end_class

end_unit

