begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.river.wikipedia
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|wikipedia
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|AbstractRiverComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|River
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|RiverName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|RiverSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|wikipedia
operator|.
name|support
operator|.
name|PageCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|wikipedia
operator|.
name|support
operator|.
name|WikiPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|wikipedia
operator|.
name|support
operator|.
name|WikiXMLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|wikipedia
operator|.
name|support
operator|.
name|WikiXMLParserFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|WikipediaRiver
specifier|public
class|class
name|WikipediaRiver
extends|extends
name|AbstractRiverComponent
implements|implements
name|River
block|{
DECL|field|sb
specifier|private
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|url
specifier|private
specifier|final
name|URL
name|url
decl_stmt|;
DECL|field|indexName
specifier|private
specifier|final
name|String
name|indexName
decl_stmt|;
DECL|field|typeName
specifier|private
specifier|final
name|String
name|typeName
decl_stmt|;
DECL|field|bulkSize
specifier|private
specifier|final
name|int
name|bulkSize
decl_stmt|;
DECL|field|dropThreshold
specifier|private
specifier|final
name|int
name|dropThreshold
decl_stmt|;
DECL|field|onGoingBulks
specifier|private
specifier|final
name|AtomicInteger
name|onGoingBulks
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|thread
specifier|private
specifier|volatile
name|Thread
name|thread
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|currentRequest
specifier|private
specifier|volatile
name|BulkRequestBuilder
name|currentRequest
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|WikipediaRiver
annotation|@
name|Inject
specifier|public
name|WikipediaRiver
parameter_list|(
name|RiverName
name|riverName
parameter_list|,
name|RiverSettings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|super
argument_list|(
name|riverName
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|String
name|url
init|=
literal|"http://download.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2"
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"wikipedia"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|wikipediaSettings
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"wikipedia"
argument_list|)
decl_stmt|;
name|url
operator|=
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|wikipediaSettings
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"creating wikipedia stream river for [{}]"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|indexSettings
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|indexName
operator|=
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|indexSettings
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|riverName
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|indexSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
literal|"status"
argument_list|)
expr_stmt|;
name|this
operator|.
name|bulkSize
operator|=
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"bulk_size"
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|dropThreshold
operator|=
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"drop_threshold"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexName
operator|=
name|riverName
operator|.
name|name
argument_list|()
expr_stmt|;
name|typeName
operator|=
literal|"page"
expr_stmt|;
name|bulkSize
operator|=
literal|100
expr_stmt|;
name|dropThreshold
operator|=
literal|10
expr_stmt|;
block|}
block|}
DECL|method|start
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"starting twitter stream"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|IndexAlreadyExistsException
condition|)
block|{
comment|// that's fine
block|}
elseif|else
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|ClusterBlockException
condition|)
block|{
comment|// ok, not recovered yet..., lets start indexing and hope we recover by the first bulk
comment|// TODO: a smarter logic can be to register for cluster event listener here, and only start sampling when the block is removed...
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to create index [{}], disabling river..."
argument_list|,
name|e
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|currentRequest
operator|=
name|client
operator|.
name|prepareBulk
argument_list|()
expr_stmt|;
name|WikiXMLParser
name|parser
init|=
name|WikiXMLParserFactory
operator|.
name|getSAXParser
argument_list|(
name|url
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|setPageCallback
argument_list|(
operator|new
name|PageCallback
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to create parser"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|thread
operator|=
name|EsExecutors
operator|.
name|daemonThreadFactory
argument_list|(
name|settings
operator|.
name|globalSettings
argument_list|()
argument_list|,
literal|"wikipedia_slurper"
argument_list|)
operator|.
name|newThread
argument_list|(
operator|new
name|Parser
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"closing wikipedia river"
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|thread
operator|!=
literal|null
condition|)
block|{
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Parser
specifier|private
class|class
name|Parser
implements|implements
name|Runnable
block|{
DECL|field|parser
specifier|private
specifier|final
name|WikiXMLParser
name|parser
decl_stmt|;
DECL|method|Parser
specifier|private
name|Parser
parameter_list|(
name|WikiXMLParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
DECL|method|run
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|error
argument_list|(
literal|"failed to parse stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|PageCallback
specifier|private
class|class
name|PageCallback
implements|implements
name|PageCallbackHandler
block|{
DECL|method|process
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WikiPage
name|page
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|String
name|title
init|=
name|stripTitle
argument_list|(
name|page
operator|.
name|getTitle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"page {} : {}"
argument_list|,
name|page
operator|.
name|getID
argument_list|()
argument_list|,
name|page
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|page
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"redirect"
argument_list|,
name|page
operator|.
name|isRedirect
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"special"
argument_list|,
name|page
operator|.
name|isSpecialPage
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"stub"
argument_list|,
name|page
operator|.
name|isStub
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"disambiguation"
argument_list|,
name|page
operator|.
name|isDisambiguationPage
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"category"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|page
operator|.
name|getCategories
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"link"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|page
operator|.
name|getLinks
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// For now, we index (and not create) since we need to keep track of what we indexed...
name|currentRequest
operator|.
name|add
argument_list|(
name|Requests
operator|.
name|indexRequest
argument_list|(
name|indexName
argument_list|)
operator|.
name|type
argument_list|(
name|typeName
argument_list|)
operator|.
name|id
argument_list|(
name|page
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|create
argument_list|(
literal|false
argument_list|)
operator|.
name|source
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|processBulkIfNeeded
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to construct index request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processBulkIfNeeded
specifier|private
name|void
name|processBulkIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|currentRequest
operator|.
name|numberOfActions
argument_list|()
operator|>=
name|bulkSize
condition|)
block|{
comment|// execute the bulk operation
name|int
name|currentOnGoingBulks
init|=
name|onGoingBulks
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentOnGoingBulks
operator|>
name|dropThreshold
condition|)
block|{
comment|// TODO, just wait here!, we can slow down the wikipedia parsing
name|onGoingBulks
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"dropping bulk, [{}] crossed threshold [{}]"
argument_list|,
name|onGoingBulks
argument_list|,
name|dropThreshold
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|currentRequest
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BulkResponse
name|bulkResponse
parameter_list|)
block|{
name|onGoingBulks
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to execute bulk"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to process bulk"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|currentRequest
operator|=
name|client
operator|.
name|prepareBulk
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|stripTitle
specifier|private
name|String
name|stripTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|title
argument_list|)
expr_stmt|;
while|while
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
operator|||
operator|(
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|' '
operator|)
operator|)
condition|)
block|{
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

