begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.river.twitter
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|twitter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|AbstractRiverComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|River
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|RiverName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|RiverSettings
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|TwitterRiver
specifier|public
class|class
name|TwitterRiver
extends|extends
name|AbstractRiverComponent
implements|implements
name|River
block|{
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|indexName
specifier|private
specifier|final
name|String
name|indexName
decl_stmt|;
DECL|field|typeName
specifier|private
specifier|final
name|String
name|typeName
decl_stmt|;
DECL|field|bulkSize
specifier|private
specifier|final
name|int
name|bulkSize
decl_stmt|;
DECL|field|dropThreshold
specifier|private
specifier|final
name|int
name|dropThreshold
decl_stmt|;
DECL|field|stream
specifier|private
specifier|final
name|TwitterStream
name|stream
decl_stmt|;
DECL|field|onGoingBulks
specifier|private
specifier|final
name|AtomicInteger
name|onGoingBulks
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|currentRequest
specifier|private
specifier|volatile
name|BulkRequestBuilder
name|currentRequest
decl_stmt|;
DECL|method|TwitterRiver
annotation|@
name|Inject
specifier|public
name|TwitterRiver
parameter_list|(
name|RiverName
name|riverName
parameter_list|,
name|RiverSettings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|riverName
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|String
name|user
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"twitter"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|twitterSettings
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"twitter"
argument_list|)
decl_stmt|;
name|user
operator|=
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|twitterSettings
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|password
operator|=
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|twitterSettings
operator|.
name|get
argument_list|(
literal|"password"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"creating twitter stream river for [{}]"
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
literal|null
expr_stmt|;
name|indexName
operator|=
literal|null
expr_stmt|;
name|typeName
operator|=
literal|null
expr_stmt|;
name|bulkSize
operator|=
literal|100
expr_stmt|;
name|dropThreshold
operator|=
literal|10
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"no user / password specified, disabling river..."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|indexSettings
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|indexName
operator|=
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|indexSettings
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|riverName
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|indexSettings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
literal|"status"
argument_list|)
expr_stmt|;
name|this
operator|.
name|bulkSize
operator|=
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"bulk_size"
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|dropThreshold
operator|=
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|settings
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"drop_threshold"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexName
operator|=
name|riverName
operator|.
name|name
argument_list|()
expr_stmt|;
name|typeName
operator|=
literal|"status"
expr_stmt|;
name|bulkSize
operator|=
literal|100
expr_stmt|;
name|dropThreshold
operator|=
literal|10
expr_stmt|;
block|}
name|stream
operator|=
operator|new
name|TwitterStreamFactory
argument_list|(
operator|new
name|StatusHandler
argument_list|()
argument_list|)
operator|.
name|getInstance
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|start
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"starting twitter stream"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|IndexAlreadyExistsException
condition|)
block|{
comment|// that's fine
block|}
elseif|else
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
operator|instanceof
name|ClusterBlockException
condition|)
block|{
comment|// ok, not recovered yet..., lets start indexing and hope we recover by the first bulk
comment|// TODO: a smarter logic can be to register for cluster event listener here, and only start sampling when the block is removed...
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to create index [{}], disabling river..."
argument_list|,
name|e
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|currentRequest
operator|=
name|client
operator|.
name|prepareBulk
argument_list|()
expr_stmt|;
name|stream
operator|.
name|sample
argument_list|()
expr_stmt|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"closing twitter stream river"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|stream
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StatusHandler
specifier|private
class|class
name|StatusHandler
extends|extends
name|StatusAdapter
block|{
DECL|method|onStatus
annotation|@
name|Override
specifier|public
name|void
name|onStatus
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"status {} : {}"
argument_list|,
name|status
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|status
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|status
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"created_at"
argument_list|,
name|status
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"source"
argument_list|,
name|status
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"truncated"
argument_list|,
name|status
operator|.
name|isTruncated
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getUserMentions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"mention"
argument_list|)
expr_stmt|;
for|for
control|(
name|User
name|user
range|:
name|status
operator|.
name|getUserMentions
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"screen_name"
argument_list|,
name|user
operator|.
name|getScreenName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getRetweetCount
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"retweet_count"
argument_list|,
name|status
operator|.
name|getRetweetCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getInReplyToStatusId
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"in_reply"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"status"
argument_list|,
name|status
operator|.
name|getInReplyToStatusId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getInReplyToUserId
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"user_id"
argument_list|,
name|status
operator|.
name|getInReplyToUserId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"user_screen_name"
argument_list|,
name|status
operator|.
name|getInReplyToScreenName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getHashtags
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"hashtag"
argument_list|,
name|status
operator|.
name|getHashtags
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getContributors
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"contributor"
argument_list|,
name|status
operator|.
name|getContributors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getGeoLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|status
operator|.
name|getGeoLocation
argument_list|()
operator|.
name|getLatitude
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|status
operator|.
name|getGeoLocation
argument_list|()
operator|.
name|getLongitude
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getPlace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"place"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getPlaceType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"full_name"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"street_address"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getStreetAddress
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"country"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getCountry
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"country_code"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getCountryCode
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"url"
argument_list|,
name|status
operator|.
name|getPlace
argument_list|()
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getURLs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"link"
argument_list|)
expr_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|status
operator|.
name|getURLs
argument_list|()
control|)
block|{
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getAnnotations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"annotation"
argument_list|)
expr_stmt|;
for|for
control|(
name|Annotation
name|ann
range|:
name|status
operator|.
name|getAnnotations
argument_list|()
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|ann
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ann
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|status
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
name|status
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"screen_name"
argument_list|,
name|status
operator|.
name|getUser
argument_list|()
operator|.
name|getScreenName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"location"
argument_list|,
name|status
operator|.
name|getUser
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"description"
argument_list|,
name|status
operator|.
name|getUser
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|currentRequest
operator|.
name|add
argument_list|(
name|Requests
operator|.
name|indexRequest
argument_list|(
name|indexName
argument_list|)
operator|.
name|type
argument_list|(
name|typeName
argument_list|)
operator|.
name|id
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|status
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
literal|true
argument_list|)
operator|.
name|source
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|processBulkIfNeeded
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to construct index request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onDeletionNotice
annotation|@
name|Override
specifier|public
name|void
name|onDeletionNotice
parameter_list|(
name|StatusDeletionNotice
name|statusDeletionNotice
parameter_list|)
block|{
if|if
condition|(
name|statusDeletionNotice
operator|.
name|getStatusId
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|currentRequest
operator|.
name|add
argument_list|(
name|Requests
operator|.
name|deleteRequest
argument_list|(
name|indexName
argument_list|)
operator|.
name|type
argument_list|(
name|typeName
argument_list|)
operator|.
name|id
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|statusDeletionNotice
operator|.
name|getStatusId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|processBulkIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|onTrackLimitationNotice
annotation|@
name|Override
specifier|public
name|void
name|onTrackLimitationNotice
parameter_list|(
name|int
name|numberOfLimitedStatuses
parameter_list|)
block|{         }
DECL|method|onException
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"stream failure"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
DECL|method|processBulkIfNeeded
specifier|private
name|void
name|processBulkIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|currentRequest
operator|.
name|numberOfActions
argument_list|()
operator|>=
name|bulkSize
condition|)
block|{
comment|// execute the bulk operation
name|int
name|currentOnGoingBulks
init|=
name|onGoingBulks
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentOnGoingBulks
operator|>
name|dropThreshold
condition|)
block|{
name|onGoingBulks
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"dropping bulk, [{}] crossed threshold [{}]"
argument_list|,
name|onGoingBulks
argument_list|,
name|dropThreshold
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|currentRequest
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BulkResponse
name|bulkResponse
parameter_list|)
block|{
name|onGoingBulks
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to execute bulk"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to process bulk"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|currentRequest
operator|=
name|client
operator|.
name|prepareBulk
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

