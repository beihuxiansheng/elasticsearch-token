begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.azure
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|azure
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|AbstractAzureComputeServiceTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|AzureComputeServiceSimpleMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|management
operator|.
name|AzureComputeService
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|management
operator|.
name|AzureComputeService
operator|.
name|Management
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ESIntegTestCase
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|)
DECL|class|AzureSimpleTests
specifier|public
class|class
name|AzureSimpleTests
extends|extends
name|AbstractAzureComputeServiceTestCase
block|{
DECL|method|AzureSimpleTests
specifier|public
name|AzureSimpleTests
parameter_list|()
block|{
name|super
argument_list|(
name|AzureComputeServiceSimpleMock
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneNodeDhouldRunUsingPrivateIp
specifier|public
name|void
name|testOneNodeDhouldRunUsingPrivateIp
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Management
operator|.
name|SERVICE_NAME
argument_list|,
literal|"dummy"
argument_list|)
operator|.
name|put
argument_list|(
name|Discovery
operator|.
name|HOST_TYPE
argument_list|,
literal|"private_ip"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start one node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setMasterNodeTimeout
argument_list|(
literal|"1s"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// We expect having 1 node as part of the cluster, let's test that
name|checkNumberOfNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneNodeShouldRunUsingPublicIp
specifier|public
name|void
name|testOneNodeShouldRunUsingPublicIp
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Management
operator|.
name|SERVICE_NAME
argument_list|,
literal|"dummy"
argument_list|)
operator|.
name|put
argument_list|(
name|Discovery
operator|.
name|HOST_TYPE
argument_list|,
literal|"public_ip"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start one node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setMasterNodeTimeout
argument_list|(
literal|"1s"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// We expect having 1 node as part of the cluster, let's test that
name|checkNumberOfNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneNodeShouldRunUsingWrongSettings
specifier|public
name|void
name|testOneNodeShouldRunUsingWrongSettings
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Management
operator|.
name|SERVICE_NAME
argument_list|,
literal|"dummy"
argument_list|)
operator|.
name|put
argument_list|(
name|Discovery
operator|.
name|HOST_TYPE
argument_list|,
literal|"do_not_exist"
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> start one node"
argument_list|)
expr_stmt|;
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setMasterNodeTimeout
argument_list|(
literal|"1s"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|masterNodeId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// We expect having 1 node as part of the cluster, let's test that
name|checkNumberOfNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

