begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|OutputStreamIndexOutput
import|;
end_import

begin_comment
comment|/**  * This class is used to wrap an existing {@link org.apache.lucene.store.FSDirectory} so that  * the new shard segment files will be opened for Read and Write access.  *<p>  * When storing index files on an SMB share like Azure File Service, opening the file for Read  * access can save a lot of roundtrips to the storage server and thus offering better performance.  */
end_comment

begin_class
DECL|class|SmbDirectoryWrapper
specifier|public
specifier|final
class|class
name|SmbDirectoryWrapper
extends|extends
name|FilterDirectory
block|{
DECL|field|fsDirectory
specifier|private
specifier|final
name|FSDirectory
name|fsDirectory
decl_stmt|;
DECL|method|SmbDirectoryWrapper
specifier|public
name|SmbDirectoryWrapper
parameter_list|(
name|FSDirectory
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fsDirectory
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|SmbFSIndexOutput
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|class|SmbFSIndexOutput
specifier|final
class|class
name|SmbFSIndexOutput
extends|extends
name|OutputStreamIndexOutput
block|{
comment|/**          * The maximum chunk size is 8192 bytes, because {@link java.io.FileOutputStream} mallocs          * a native buffer outside of stack if the write buffer size is larger.          */
DECL|field|CHUNK_SIZE
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|8192
decl_stmt|;
DECL|method|SmbFSIndexOutput
specifier|public
name|SmbFSIndexOutput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"SmbFSIndexOutput(path=\""
operator|+
name|fsDirectory
operator|.
name|getDirectory
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
operator|+
literal|"\")"
argument_list|,
operator|new
name|FilterOutputStream
argument_list|(
name|Channels
operator|.
name|newOutputStream
argument_list|(
name|Files
operator|.
name|newByteChannel
argument_list|(
name|fsDirectory
operator|.
name|getDirectory
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|)
argument_list|)
argument_list|)
block|{
comment|// This implementation ensures, that we never write more than CHUNK_SIZE bytes:
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|chunk
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|CHUNK_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|length
operator|-=
name|chunk
expr_stmt|;
name|offset
operator|+=
name|chunk
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

