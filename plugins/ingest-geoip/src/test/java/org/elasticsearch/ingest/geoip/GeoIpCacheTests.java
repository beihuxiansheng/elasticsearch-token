begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.geoip
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|geoip
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|IntNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|maxmind
operator|.
name|db
operator|.
name|NodeCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|GeoIpCacheTests
specifier|public
class|class
name|GeoIpCacheTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCachesAndEvictsResults
specifier|public
name|void
name|testCachesAndEvictsResults
parameter_list|()
throws|throws
name|Exception
block|{
name|GeoIpCache
name|cache
init|=
operator|new
name|GeoIpCache
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|NodeCache
operator|.
name|Loader
name|loader
init|=
name|key
lambda|->
operator|new
name|IntNode
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|JsonNode
name|jsonNode1
init|=
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|jsonNode1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
comment|// evict old key by adding another value
name|cache
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|jsonNode1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThrowsElasticsearchException
specifier|public
name|void
name|testThrowsElasticsearchException
parameter_list|()
throws|throws
name|Exception
block|{
name|GeoIpCache
name|cache
init|=
operator|new
name|GeoIpCache
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NodeCache
operator|.
name|Loader
name|loader
init|=
parameter_list|(
name|int
name|key
parameter_list|)
lambda|->
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal key"
argument_list|)
throw|;
block|}
decl_stmt|;
name|ElasticsearchException
name|ex
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cache
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|loader
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected cause to be of type IllegalArgumentException but was ["
operator|+
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Illegal key"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

