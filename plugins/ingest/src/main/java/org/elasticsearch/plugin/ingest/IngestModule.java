begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|MapBinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|Multibinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|SimpleProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|rest
operator|.
name|IngestRestFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|transport
operator|.
name|IngestActionFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|IngestModule
specifier|public
class|class
name|IngestModule
extends|extends
name|AbstractModule
block|{
DECL|field|processors
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Processor
operator|.
name|Builder
operator|.
name|Factory
argument_list|>
argument_list|>
name|processors
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|binder
argument_list|()
operator|.
name|bind
argument_list|(
name|IngestRestFilter
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|binder
argument_list|()
operator|.
name|bind
argument_list|(
name|PipelineStore
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|binder
argument_list|()
operator|.
name|bind
argument_list|(
name|PipelineConfigDocReader
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|registerProcessor
argument_list|(
name|SimpleProcessor
operator|.
name|TYPE
argument_list|,
name|SimpleProcessor
operator|.
name|Builder
operator|.
name|Factory
operator|.
name|class
argument_list|)
expr_stmt|;
name|MapBinder
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Builder
operator|.
name|Factory
argument_list|>
name|mapBinder
init|=
name|MapBinder
operator|.
name|newMapBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Processor
operator|.
name|Builder
operator|.
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Processor
operator|.
name|Builder
operator|.
name|Factory
argument_list|>
argument_list|>
name|entry
range|:
name|processors
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mapBinder
operator|.
name|addBinding
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerProcessor
specifier|public
name|void
name|registerProcessor
parameter_list|(
name|String
name|processorType
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Processor
operator|.
name|Builder
operator|.
name|Factory
argument_list|>
name|processorFactory
parameter_list|)
block|{
name|processors
operator|.
name|put
argument_list|(
name|processorType
argument_list|,
name|processorFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

