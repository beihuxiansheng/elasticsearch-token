begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest.transport.simulate
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|transport
operator|.
name|simulate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|ConfigurationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|PipelineExecutionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|PipelineStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|SimulatePipelineRequestPayload
specifier|public
class|class
name|SimulatePipelineRequestPayload
block|{
DECL|field|documents
specifier|private
specifier|final
name|List
argument_list|<
name|Data
argument_list|>
name|documents
decl_stmt|;
DECL|field|pipeline
specifier|private
specifier|final
name|Pipeline
name|pipeline
decl_stmt|;
DECL|method|SimulatePipelineRequestPayload
specifier|public
name|SimulatePipelineRequestPayload
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|List
argument_list|<
name|Data
argument_list|>
name|documents
parameter_list|)
block|{
name|this
operator|.
name|pipeline
operator|=
name|pipeline
expr_stmt|;
name|this
operator|.
name|documents
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|documents
argument_list|)
expr_stmt|;
block|}
DECL|method|pipelineId
specifier|public
name|String
name|pipelineId
parameter_list|()
block|{
return|return
name|pipeline
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|pipeline
specifier|public
name|Pipeline
name|pipeline
parameter_list|()
block|{
return|return
name|pipeline
return|;
block|}
DECL|method|documents
specifier|public
name|List
argument_list|<
name|Data
argument_list|>
name|documents
parameter_list|()
block|{
return|return
name|documents
return|;
block|}
DECL|method|execute
specifier|public
name|SimulatePipelineResponse
name|execute
parameter_list|()
block|{
name|List
argument_list|<
name|SimulatedItemResponse
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Data
name|data
range|:
name|documents
control|)
block|{
try|try
block|{
name|pipeline
operator|.
name|execute
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|SimulatedItemResponse
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
operator|new
name|SimulatedItemResponse
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SimulatePipelineResponse
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|responses
argument_list|)
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
block|{
DECL|method|create
specifier|public
name|SimulatePipelineRequestPayload
name|create
parameter_list|(
name|String
name|pipelineId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|PipelineStore
name|pipelineStore
parameter_list|)
throws|throws
name|IOException
block|{
name|Pipeline
name|pipeline
decl_stmt|;
comment|// if pipeline `id` passed to request, fetch pipeline from store.
if|if
condition|(
name|pipelineId
operator|!=
literal|null
condition|)
block|{
name|pipeline
operator|=
name|pipelineStore
operator|.
name|get
argument_list|(
name|pipelineId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pipelineConfig
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"pipeline"
argument_list|)
decl_stmt|;
name|pipeline
operator|=
operator|(
operator|new
name|Pipeline
operator|.
name|Factory
argument_list|()
operator|)
operator|.
name|create
argument_list|(
literal|"_pipeline_id"
argument_list|,
name|pipelineConfig
argument_list|,
name|pipelineStore
operator|.
name|getProcessorFactoryRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// distribute docs by shard key to SimulateShardPipelineResponse
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|docs
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Data
argument_list|>
name|dataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dataMap
init|=
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|dataMap
operator|.
name|get
argument_list|(
literal|"_source"
argument_list|)
decl_stmt|;
name|Data
name|data
init|=
operator|new
name|Data
argument_list|(
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|dataMap
argument_list|,
literal|"_index"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|dataMap
argument_list|,
literal|"_type"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|dataMap
argument_list|,
literal|"_id"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|dataList
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SimulatePipelineRequestPayload
argument_list|(
name|pipeline
argument_list|,
name|dataList
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

