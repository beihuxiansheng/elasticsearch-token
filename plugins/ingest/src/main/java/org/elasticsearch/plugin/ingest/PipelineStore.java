begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|Lifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|GatewayService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|PipelineStore
specifier|public
class|class
name|PipelineStore
extends|extends
name|AbstractLifecycleComponent
block|{
DECL|field|INDEX
specifier|public
specifier|final
specifier|static
name|String
name|INDEX
init|=
literal|".ingest"
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|final
specifier|static
name|String
name|TYPE
init|=
literal|"pipeline"
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|pipelineUpdateInterval
specifier|private
specifier|final
name|TimeValue
name|pipelineUpdateInterval
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|PipelineStoreClient
name|client
decl_stmt|;
DECL|field|processorFactoryRegistry
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Builder
operator|.
name|Factory
argument_list|>
name|processorFactoryRegistry
decl_stmt|;
DECL|field|pipelines
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|PipelineReference
argument_list|>
name|pipelines
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|PipelineStore
specifier|public
name|PipelineStore
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|PipelineStoreClient
name|client
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Builder
operator|.
name|Factory
argument_list|>
name|processors
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|pipelineUpdateInterval
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
literal|"ingest.pipeline.store.update.interval"
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
for|for
control|(
name|Processor
operator|.
name|Builder
operator|.
name|Factory
name|factory
range|:
name|processors
operator|.
name|values
argument_list|()
control|)
block|{
name|factory
operator|.
name|setConfigDirectory
argument_list|(
name|environment
operator|.
name|configFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|processorFactoryRegistry
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|processors
argument_list|)
expr_stmt|;
name|clusterService
operator|.
name|add
argument_list|(
operator|new
name|PipelineStoreListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
block|{     }
DECL|method|get
specifier|public
name|Pipeline
name|get
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|PipelineReference
name|ref
init|=
name|pipelines
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
return|return
name|ref
operator|.
name|getPipeline
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getReference
specifier|public
name|List
argument_list|<
name|PipelineReference
argument_list|>
name|getReference
parameter_list|(
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|List
argument_list|<
name|PipelineReference
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ids
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|id
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PipelineReference
argument_list|>
name|entry
range|:
name|pipelines
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|id
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|PipelineReference
name|reference
init|=
name|pipelines
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|updatePipelines
name|void
name|updatePipelines
parameter_list|()
throws|throws
name|IOException
block|{
comment|// note: this process isn't fast or smart, but the idea is that there will not be many pipelines,
comment|// so for that reason the goal is to keep the update logic simple.
name|int
name|changed
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PipelineReference
argument_list|>
name|newPipelines
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|pipelines
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|client
operator|.
name|readAllPipelines
argument_list|()
control|)
block|{
name|String
name|pipelineId
init|=
name|hit
operator|.
name|getId
argument_list|()
decl_stmt|;
name|BytesReference
name|pipelineSource
init|=
name|hit
operator|.
name|getSourceRef
argument_list|()
decl_stmt|;
name|PipelineReference
name|previous
init|=
name|newPipelines
operator|.
name|get
argument_list|(
name|pipelineId
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|previous
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|pipelineSource
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|changed
operator|++
expr_stmt|;
name|Pipeline
operator|.
name|Builder
name|builder
init|=
operator|new
name|Pipeline
operator|.
name|Builder
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|fromMap
argument_list|(
name|hit
operator|.
name|sourceAsMap
argument_list|()
argument_list|,
name|processorFactoryRegistry
argument_list|)
expr_stmt|;
name|newPipelines
operator|.
name|put
argument_list|(
name|pipelineId
argument_list|,
operator|new
name|PipelineReference
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|hit
operator|.
name|getVersion
argument_list|()
argument_list|,
name|pipelineSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|removed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|existingPipelineId
range|:
name|pipelines
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|client
operator|.
name|existPipeline
argument_list|(
name|existingPipelineId
argument_list|)
condition|)
block|{
name|newPipelines
operator|.
name|remove
argument_list|(
name|existingPipelineId
argument_list|)
expr_stmt|;
name|removed
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
operator|!=
literal|0
operator|||
name|removed
operator|!=
literal|0
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"adding or updating [{}] pipelines and [{}] pipelines removed"
argument_list|,
name|changed
argument_list|,
name|removed
argument_list|)
expr_stmt|;
name|pipelines
operator|=
name|newPipelines
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"no pipelines changes detected"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startUpdateWorker
name|void
name|startUpdateWorker
parameter_list|()
block|{
if|if
condition|(
name|lifecycleState
argument_list|()
operator|==
name|Lifecycle
operator|.
name|State
operator|.
name|STARTED
condition|)
block|{
name|threadPool
operator|.
name|schedule
argument_list|(
name|pipelineUpdateInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|Updater
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Updater
class|class
name|Updater
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|updatePipelines
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"pipeline store update failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|startUpdateWorker
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|PipelineStoreListener
class|class
name|PipelineStoreListener
implements|implements
name|ClusterStateListener
block|{
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|state
argument_list|()
operator|.
name|blocks
argument_list|()
operator|.
name|hasGlobalBlock
argument_list|(
name|GatewayService
operator|.
name|STATE_NOT_RECOVERED_BLOCK
argument_list|)
operator|==
literal|false
condition|)
block|{
name|startUpdateWorker
argument_list|()
expr_stmt|;
name|clusterService
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|PipelineReference
specifier|public
specifier|static
class|class
name|PipelineReference
block|{
DECL|field|pipeline
specifier|private
specifier|final
name|Pipeline
name|pipeline
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|BytesReference
name|source
decl_stmt|;
DECL|method|PipelineReference
name|PipelineReference
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|long
name|version
parameter_list|,
name|BytesReference
name|source
parameter_list|)
block|{
name|this
operator|.
name|pipeline
operator|=
name|pipeline
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|getPipeline
specifier|public
name|Pipeline
name|getPipeline
parameter_list|()
block|{
return|return
name|pipeline
return|;
block|}
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getSource
specifier|public
name|BytesReference
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|PipelineReference
name|holder
init|=
operator|(
name|PipelineReference
operator|)
name|o
decl_stmt|;
return|return
name|source
operator|.
name|equals
argument_list|(
name|holder
operator|.
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|source
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

