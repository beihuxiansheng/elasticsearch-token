begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest.transport.simulate
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|transport
operator|.
name|simulate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|StatusToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|SimulatePipelineResponse
specifier|public
class|class
name|SimulatePipelineResponse
extends|extends
name|ActionResponse
implements|implements
name|StatusToXContent
block|{
DECL|field|pipelineId
specifier|private
name|String
name|pipelineId
decl_stmt|;
DECL|field|responses
specifier|private
name|SimulatedItemResponse
index|[]
name|responses
decl_stmt|;
DECL|method|pipelineId
specifier|public
name|String
name|pipelineId
parameter_list|()
block|{
return|return
name|pipelineId
return|;
block|}
DECL|method|pipelineId
specifier|public
name|SimulatePipelineResponse
name|pipelineId
parameter_list|(
name|String
name|pipelineId
parameter_list|)
block|{
name|this
operator|.
name|pipelineId
operator|=
name|pipelineId
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|responses
specifier|public
name|SimulatePipelineResponse
name|responses
parameter_list|(
name|SimulatedItemResponse
index|[]
name|responses
parameter_list|)
block|{
name|this
operator|.
name|responses
operator|=
name|responses
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|responses
specifier|public
name|SimulatedItemResponse
index|[]
name|responses
parameter_list|()
block|{
return|return
name|responses
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|pipelineId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|SimulatedItemResponse
name|response
range|:
name|responses
control|)
block|{
name|response
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|pipelineId
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|int
name|responsesLength
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|responses
operator|=
operator|new
name|SimulatedItemResponse
index|[
name|responsesLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|responsesLength
condition|;
name|i
operator|++
control|)
block|{
name|SimulatedItemResponse
name|response
init|=
operator|new
name|SimulatedItemResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|responses
index|[
name|i
index|]
operator|=
name|response
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"docs"
argument_list|)
expr_stmt|;
for|for
control|(
name|SimulatedItemResponse
name|response
range|:
name|responses
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
for|for
control|(
name|SimulatedItemResponse
name|response
range|:
name|responses
control|)
block|{
if|if
condition|(
name|response
operator|.
name|failed
argument_list|()
condition|)
block|{
return|return
name|response
operator|.
name|status
argument_list|()
return|;
block|}
block|}
return|return
name|RestStatus
operator|.
name|OK
return|;
block|}
block|}
end_class

end_unit

