begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.processor.date
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|date
package|;
end_package

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_class
DECL|class|TAI64NDateParser
specifier|public
class|class
name|TAI64NDateParser
implements|implements
name|DateParser
block|{
annotation|@
name|Override
DECL|method|parseMillis
specifier|public
name|long
name|parseMillis
parameter_list|(
name|String
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|date
operator|=
name|date
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
name|base
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|date
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
comment|// 1356138046000
name|long
name|rest
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|date
operator|.
name|substring
argument_list|(
literal|16
argument_list|,
literal|24
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|base
operator|*
literal|1000
operator|)
operator|-
literal|10000
operator|)
operator|+
operator|(
name|rest
operator|/
literal|1000000
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseDateTime
specifier|public
name|DateTime
name|parseDateTime
parameter_list|(
name|String
name|date
parameter_list|)
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|parseMillis
argument_list|(
name|date
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

