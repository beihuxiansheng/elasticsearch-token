begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.processor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Processor that allows to rename existing fields. Will throw exception if the field is not present.  */
end_comment

begin_class
DECL|class|RenameProcessor
specifier|public
class|class
name|RenameProcessor
implements|implements
name|Processor
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"rename"
decl_stmt|;
DECL|field|oldFieldName
specifier|private
specifier|final
name|String
name|oldFieldName
decl_stmt|;
DECL|field|newFieldName
specifier|private
specifier|final
name|String
name|newFieldName
decl_stmt|;
DECL|method|RenameProcessor
name|RenameProcessor
parameter_list|(
name|String
name|oldFieldName
parameter_list|,
name|String
name|newFieldName
parameter_list|)
block|{
name|this
operator|.
name|oldFieldName
operator|=
name|oldFieldName
expr_stmt|;
name|this
operator|.
name|newFieldName
operator|=
name|newFieldName
expr_stmt|;
block|}
DECL|method|getOldFieldName
name|String
name|getOldFieldName
parameter_list|()
block|{
return|return
name|oldFieldName
return|;
block|}
DECL|method|getNewFieldName
name|String
name|getNewFieldName
parameter_list|()
block|{
return|return
name|newFieldName
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|IngestDocument
name|document
parameter_list|)
block|{
if|if
condition|(
name|document
operator|.
name|hasField
argument_list|(
name|oldFieldName
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|oldFieldName
operator|+
literal|"] doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|document
operator|.
name|hasField
argument_list|(
name|newFieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|newFieldName
operator|+
literal|"] already exists"
argument_list|)
throw|;
block|}
name|Object
name|oldValue
init|=
name|document
operator|.
name|getFieldValue
argument_list|(
name|oldFieldName
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|document
operator|.
name|setFieldValue
argument_list|(
name|newFieldName
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
try|try
block|{
name|document
operator|.
name|removeField
argument_list|(
name|oldFieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//remove the new field if the removal of the old one failed
name|document
operator|.
name|removeField
argument_list|(
name|newFieldName
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|Processor
operator|.
name|Factory
argument_list|<
name|RenameProcessor
argument_list|>
block|{
annotation|@
name|Override
DECL|method|create
specifier|public
name|RenameProcessor
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|field
init|=
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|config
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|String
name|newField
init|=
name|ConfigurationUtils
operator|.
name|readStringProperty
argument_list|(
name|config
argument_list|,
literal|"to"
argument_list|)
decl_stmt|;
return|return
operator|new
name|RenameProcessor
argument_list|(
name|field
argument_list|,
name|newField
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

