begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.processor.date
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|date
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|DateProcessor
specifier|public
specifier|final
class|class
name|DateProcessor
implements|implements
name|Processor
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"date"
decl_stmt|;
DECL|field|DEFAULT_TARGET_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TARGET_FIELD
init|=
literal|"@timestamp"
decl_stmt|;
DECL|field|timezone
specifier|private
specifier|final
name|DateTimeZone
name|timezone
decl_stmt|;
DECL|field|locale
specifier|private
specifier|final
name|Locale
name|locale
decl_stmt|;
DECL|field|matchField
specifier|private
specifier|final
name|String
name|matchField
decl_stmt|;
DECL|field|targetField
specifier|private
specifier|final
name|String
name|targetField
decl_stmt|;
DECL|field|matchFormats
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|matchFormats
decl_stmt|;
DECL|field|parserList
specifier|private
specifier|final
name|List
argument_list|<
name|DateParser
argument_list|>
name|parserList
decl_stmt|;
DECL|method|DateProcessor
specifier|public
name|DateProcessor
parameter_list|(
name|String
name|timezone
parameter_list|,
name|String
name|locale
parameter_list|,
name|String
name|matchField
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|matchFormats
parameter_list|,
name|String
name|targetField
parameter_list|)
block|{
name|this
operator|.
name|timezone
operator|=
operator|(
name|timezone
operator|==
literal|null
operator|)
condition|?
name|DateTimeZone
operator|.
name|UTC
else|:
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|timezone
argument_list|)
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchField
operator|=
name|matchField
expr_stmt|;
name|this
operator|.
name|matchFormats
operator|=
name|matchFormats
expr_stmt|;
name|this
operator|.
name|parserList
operator|=
name|matchFormats
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|elt
lambda|->
name|getParser
argument_list|(
name|elt
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetField
operator|=
operator|(
name|targetField
operator|==
literal|null
operator|)
condition|?
name|DEFAULT_TARGET_FIELD
else|:
name|targetField
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|Data
name|data
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|data
operator|.
name|getProperty
argument_list|(
name|matchField
argument_list|)
decl_stmt|;
comment|// TODO(talevy): handle multiple patterns
comment|// TODO(talevy): handle custom timestamp fields
name|String
name|dateAsISO8601
init|=
name|parserList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|parseDateTime
argument_list|(
name|value
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|data
operator|.
name|addField
argument_list|(
name|targetField
argument_list|,
name|dateAsISO8601
argument_list|)
expr_stmt|;
block|}
DECL|method|getParser
specifier|private
name|DateParser
name|getParser
parameter_list|(
name|String
name|format
parameter_list|)
block|{
if|if
condition|(
literal|"ISO8601"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
comment|// TODO(talevy): fallback solution for almost ISO8601
if|if
condition|(
name|timezone
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ISO8601DateParser
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ISO8601DateParser
argument_list|(
name|timezone
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"UNIX"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
return|return
operator|new
name|UnixDateParser
argument_list|(
name|timezone
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"UNIX_MS"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
return|return
operator|new
name|UnixMsDateParser
argument_list|(
name|timezone
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"TAI64N"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
return|return
operator|new
name|TAI64NDateParser
argument_list|(
name|timezone
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|timezone
operator|!=
literal|null
operator|&&
name|locale
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JodaPatternDateParser
argument_list|(
name|format
argument_list|,
name|timezone
argument_list|,
name|locale
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|timezone
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JodaPatternDateParser
argument_list|(
name|format
argument_list|,
name|timezone
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|locale
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JodaPatternDateParser
argument_list|(
name|format
argument_list|,
name|locale
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|JodaPatternDateParser
argument_list|(
name|format
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|Processor
operator|.
name|Factory
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|create
specifier|public
name|Processor
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
comment|//TODO handle default values
name|String
name|timezone
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"timezone"
argument_list|)
decl_stmt|;
name|String
name|locale
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"locale"
argument_list|)
decl_stmt|;
name|String
name|matchField
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"match_field"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|matchFormats
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"match_formats"
argument_list|)
decl_stmt|;
name|String
name|targetField
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"target_field"
argument_list|)
decl_stmt|;
return|return
operator|new
name|DateProcessor
argument_list|(
name|timezone
argument_list|,
name|locale
argument_list|,
name|matchField
argument_list|,
name|matchFormats
argument_list|,
name|targetField
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

