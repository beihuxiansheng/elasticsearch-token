begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|HppcMaps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|format
operator|.
name|ValueParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Represents a single document being captured before indexing and holds the source and meta data (like id, type and index).  */
end_comment

begin_class
DECL|class|IngestDocument
specifier|public
specifier|final
class|class
name|IngestDocument
block|{
DECL|field|metaData
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaData
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
decl_stmt|;
DECL|field|sourceModified
specifier|private
name|boolean
name|sourceModified
init|=
literal|false
decl_stmt|;
DECL|method|IngestDocument
specifier|public
name|IngestDocument
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|method|IngestDocument
specifier|public
name|IngestDocument
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|routing
parameter_list|,
name|String
name|parent
parameter_list|,
name|String
name|timestamp
parameter_list|,
name|String
name|ttl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|INDEX
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|TYPE
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|ID
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|ROUTING
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|PARENT
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|TIMESTAMP
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ttl
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|TTL
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|IngestDocument
specifier|public
name|IngestDocument
parameter_list|(
name|IngestDocument
name|other
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|other
operator|.
name|metaData
argument_list|)
expr_stmt|;
name|this
operator|.
name|source
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|other
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the value contained in the document for the provided path      * @param path The path within the document in dot-notation      * @param clazz The expected class of the field value      * @return the value for the provided path if existing, null otherwise      * @throws IllegalArgumentException if the field is null, empty, or if the source contains a field within the path      * which is not of the expected type      */
DECL|method|getFieldValue
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getFieldValue
parameter_list|(
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
throw|;
block|}
name|String
index|[]
name|pathElements
init|=
name|Strings
operator|.
name|splitStringToArray
argument_list|(
name|path
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
assert|assert
name|pathElements
operator|.
name|length
operator|>
literal|0
assert|;
name|Object
name|context
init|=
name|source
decl_stmt|;
for|for
control|(
name|String
name|pathElement
range|:
name|pathElements
control|)
block|{
name|context
operator|=
name|resolve
argument_list|(
name|pathElement
argument_list|,
name|path
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|context
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|path
operator|+
literal|"] of type ["
operator|+
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] cannot be cast to ["
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|/**      * Checks whether the document contains a value for the provided path      * @param path The path within the document in dot-notation      * @return true if the document contains a value for the field, false otherwise      */
DECL|method|hasField
specifier|public
name|boolean
name|hasField
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
index|[]
name|pathElements
init|=
name|Strings
operator|.
name|splitStringToArray
argument_list|(
name|path
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
assert|assert
name|pathElements
operator|.
name|length
operator|>
literal|0
assert|;
name|Object
name|context
init|=
name|source
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathElements
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pathElement
init|=
name|pathElements
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|context
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
name|context
operator|=
name|map
operator|.
name|get
argument_list|(
name|pathElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
try|try
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pathElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|context
operator|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|String
name|leafKey
init|=
name|pathElements
index|[
name|pathElements
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|context
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|leafKey
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
try|try
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|leafKey
argument_list|)
decl_stmt|;
return|return
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Removes the field identified by the provided path      * @param path the path of the field to be removed      */
DECL|method|removeField
specifier|public
name|void
name|removeField
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
throw|;
block|}
name|String
index|[]
name|pathElements
init|=
name|Strings
operator|.
name|splitStringToArray
argument_list|(
name|path
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
assert|assert
name|pathElements
operator|.
name|length
operator|>
literal|0
assert|;
name|Object
name|context
init|=
name|source
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathElements
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|=
name|resolve
argument_list|(
name|pathElements
index|[
name|i
index|]
argument_list|,
name|path
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|String
name|leafKey
init|=
name|pathElements
index|[
name|pathElements
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|context
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|leafKey
argument_list|)
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|leafKey
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceModified
operator|=
literal|true
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|leafKey
operator|+
literal|"] not present as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
name|int
name|index
decl_stmt|;
try|try
block|{
name|index
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|leafKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|leafKey
operator|+
literal|"] is not an integer, cannot be used as an index as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|index
operator|+
literal|"] is out of bounds for array with length ["
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceModified
operator|=
literal|true
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot remove ["
operator|+
name|leafKey
operator|+
literal|"] from null as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot remove ["
operator|+
name|leafKey
operator|+
literal|"] from object of type ["
operator|+
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|resolve
specifier|private
specifier|static
name|Object
name|resolve
parameter_list|(
name|String
name|pathElement
parameter_list|,
name|String
name|fullPath
parameter_list|,
name|Object
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot resolve ["
operator|+
name|pathElement
operator|+
literal|"] from null as part of path ["
operator|+
name|fullPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|pathElement
argument_list|)
condition|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|pathElement
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|pathElement
operator|+
literal|"] not present as part of path ["
operator|+
name|fullPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
name|int
name|index
decl_stmt|;
try|try
block|{
name|index
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pathElement
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|pathElement
operator|+
literal|"] is not an integer, cannot be used as an index as part of path ["
operator|+
name|fullPath
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|index
operator|+
literal|"] is out of bounds for array with length ["
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|fullPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot resolve ["
operator|+
name|pathElement
operator|+
literal|"] from object of type ["
operator|+
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|fullPath
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|/**      * Appends the provided value to the provided path in the document.      * Any non existing path element will be created. Same as {@link #setFieldValue(String, Object)}      * but if the last element is a list, the value will be appended to the existing list.      * @param path The path within the document in dot-notation      * @param value The value to put in for the path key      */
DECL|method|appendFieldValue
specifier|public
name|void
name|appendFieldValue
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|setFieldValue
argument_list|(
name|path
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the provided value to the provided path in the document.      * Any non existing path element will be created. If the last element is a list,      * the value will replace the existing list.      * @param path The path within the document in dot-notation      * @param value The value to put in for the path key      */
DECL|method|setFieldValue
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|setFieldValue
argument_list|(
name|path
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|setFieldValue
specifier|private
name|void
name|setFieldValue
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|append
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"path cannot be null nor empty"
argument_list|)
throw|;
block|}
name|String
index|[]
name|pathElements
init|=
name|Strings
operator|.
name|splitStringToArray
argument_list|(
name|path
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
assert|assert
name|pathElements
operator|.
name|length
operator|>
literal|0
assert|;
name|value
operator|=
name|deepCopy
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Object
name|context
init|=
name|source
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathElements
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pathElement
init|=
name|pathElements
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot resolve ["
operator|+
name|pathElement
operator|+
literal|"] from null as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|pathElement
argument_list|)
condition|)
block|{
name|context
operator|=
name|map
operator|.
name|get
argument_list|(
name|pathElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|newMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|pathElement
argument_list|,
name|newMap
argument_list|)
expr_stmt|;
name|sourceModified
operator|=
literal|true
expr_stmt|;
name|context
operator|=
name|newMap
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|context
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
name|int
name|index
decl_stmt|;
try|try
block|{
name|index
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pathElement
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|pathElement
operator|+
literal|"] is not an integer, cannot be used as an index as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|index
operator|+
literal|"] is out of bounds for array with length ["
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|context
operator|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot resolve ["
operator|+
name|pathElement
operator|+
literal|"] from object of type ["
operator|+
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|String
name|leafKey
init|=
name|pathElements
index|[
name|pathElements
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot set ["
operator|+
name|leafKey
operator|+
literal|"] with null parent as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
if|if
condition|(
name|append
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|leafKey
argument_list|)
condition|)
block|{
name|Object
name|object
init|=
name|map
operator|.
name|get
argument_list|(
name|leafKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sourceModified
operator|=
literal|true
expr_stmt|;
return|return;
block|}
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|leafKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|sourceModified
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|context
decl_stmt|;
name|int
name|index
decl_stmt|;
try|try
block|{
name|index
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|leafKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|leafKey
operator|+
literal|"] is not an integer, cannot be used as an index as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"["
operator|+
name|index
operator|+
literal|"] is out of bounds for array with length ["
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceModified
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot set ["
operator|+
name|leafKey
operator|+
literal|"] with parent object of type ["
operator|+
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"] as part of path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|getMetadata
specifier|public
name|String
name|getMetadata
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
block|{
return|return
name|this
operator|.
name|metaData
operator|.
name|get
argument_list|(
name|metaData
operator|.
name|getFieldName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setMetaData
specifier|public
name|void
name|setMetaData
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the document. Should be used only for reading. Any change made to the returned map will      * not be reflected to the sourceModified flag. Modify the document instead using {@link #setFieldValue(String, Object)}      * and {@link #removeField(String)}      */
DECL|method|getSource
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|isSourceModified
specifier|public
name|boolean
name|isSourceModified
parameter_list|()
block|{
return|return
name|sourceModified
return|;
block|}
DECL|method|deepCopy
specifier|static
name|Object
name|deepCopy
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|mapValue
init|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|copy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|mapValue
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|mapValue
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|copy
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|deepCopy
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|listValue
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|listValue
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|itemValue
range|:
name|listValue
control|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|deepCopy
argument_list|(
name|itemValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|instanceof
name|String
operator|||
name|value
operator|instanceof
name|Integer
operator|||
name|value
operator|instanceof
name|Long
operator|||
name|value
operator|instanceof
name|Float
operator|||
name|value
operator|instanceof
name|Double
operator|||
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected value type ["
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IngestDocument
name|other
init|=
operator|(
name|IngestDocument
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|source
argument_list|,
name|other
operator|.
name|source
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|metaData
argument_list|,
name|other
operator|.
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|metaData
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IngestDocument{"
operator|+
literal|"metaData="
operator|+
name|metaData
operator|+
literal|", source="
operator|+
name|source
operator|+
literal|'}'
return|;
block|}
DECL|enum|MetaData
specifier|public
enum|enum
name|MetaData
block|{
DECL|enum constant|INDEX
name|INDEX
argument_list|(
literal|"_index"
argument_list|)
block|,
DECL|enum constant|TYPE
name|TYPE
argument_list|(
literal|"_type"
argument_list|)
block|,
DECL|enum constant|ID
name|ID
argument_list|(
literal|"_id"
argument_list|)
block|,
DECL|enum constant|ROUTING
name|ROUTING
argument_list|(
literal|"_routing"
argument_list|)
block|,
DECL|enum constant|PARENT
name|PARENT
argument_list|(
literal|"_parent"
argument_list|)
block|,
DECL|enum constant|TIMESTAMP
name|TIMESTAMP
argument_list|(
literal|"_timestamp"
argument_list|)
block|,
DECL|enum constant|TTL
name|TTL
argument_list|(
literal|"_ttl"
argument_list|)
block|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|method|MetaData
name|MetaData
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|MetaData
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|"_index"
case|:
return|return
name|INDEX
return|;
case|case
literal|"_type"
case|:
return|return
name|TYPE
return|;
case|case
literal|"_id"
case|:
return|return
name|ID
return|;
case|case
literal|"_routing"
case|:
return|return
name|ROUTING
return|;
case|case
literal|"_parent"
case|:
return|return
name|PARENT
return|;
case|case
literal|"_timestamp"
case|:
return|return
name|TIMESTAMP
return|;
case|case
literal|"_ttl"
case|:
return|return
name|TTL
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no valid metadata field name ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

