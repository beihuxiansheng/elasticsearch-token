begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest.transport.simulate
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|transport
operator|.
name|simulate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|SimulatePipelineResponseTests
specifier|public
class|class
name|SimulatePipelineResponseTests
extends|extends
name|ESTestCase
block|{
DECL|field|data
specifier|private
name|Data
name|data
decl_stmt|;
DECL|field|documentResult
specifier|private
name|SimulateDocumentResult
name|documentResult
decl_stmt|;
DECL|field|response
specifier|private
name|SimulatePipelineResponse
name|response
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|data
operator|=
operator|new
name|Data
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|documentResult
operator|=
operator|new
name|SimulateSimpleDocumentResult
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|SimulatePipelineResponse
argument_list|(
literal|"_id"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|documentResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|SimulatePipelineResponse
name|otherResponse
init|=
operator|new
name|SimulatePipelineResponse
argument_list|(
literal|"_id"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|documentResult
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|equalTo
argument_list|(
name|otherResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualsId
specifier|public
name|void
name|testNotEqualsId
parameter_list|()
block|{
name|SimulatePipelineResponse
name|otherResponse
init|=
operator|new
name|SimulatePipelineResponse
argument_list|(
name|response
operator|.
name|getPipelineId
argument_list|()
operator|+
literal|"foo"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|otherResponse
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualsResults
specifier|public
name|void
name|testNotEqualsResults
parameter_list|()
block|{
name|SimulatePipelineResponse
name|otherResponse
init|=
operator|new
name|SimulatePipelineResponse
argument_list|(
name|response
operator|.
name|getPipelineId
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|documentResult
argument_list|,
name|documentResult
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|otherResponse
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStreamable
specifier|public
name|void
name|testStreamable
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SimulateDocumentResult
argument_list|>
name|results
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SimulateSimpleDocumentResult
argument_list|(
name|data
argument_list|)
argument_list|,
operator|new
name|SimulateFailedDocumentResult
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SimulateVerboseDocumentResult
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|SimulateProcessorResult
argument_list|(
literal|"pid"
argument_list|,
name|data
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|response
operator|=
operator|new
name|SimulatePipelineResponse
argument_list|(
literal|"_id"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|response
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StreamInput
name|streamInput
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|SimulatePipelineResponse
name|otherResponse
init|=
operator|new
name|SimulatePipelineResponse
argument_list|()
decl_stmt|;
name|otherResponse
operator|.
name|readFrom
argument_list|(
name|streamInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|equalTo
argument_list|(
name|otherResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

