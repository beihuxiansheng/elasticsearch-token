begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest.transport.simulate
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|transport
operator|.
name|simulate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|mutate
operator|.
name|MutateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
operator|.
name|PipelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ParsedSimulateRequestParserTests
specifier|public
class|class
name|ParsedSimulateRequestParserTests
extends|extends
name|ESTestCase
block|{
DECL|field|PARSER
specifier|private
specifier|static
specifier|final
name|ParsedSimulateRequest
operator|.
name|Parser
name|PARSER
init|=
operator|new
name|ParsedSimulateRequest
operator|.
name|Parser
argument_list|()
decl_stmt|;
DECL|field|processorRegistry
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|processorRegistry
decl_stmt|;
DECL|field|store
specifier|private
name|PipelineStore
name|store
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|field|pipeline
specifier|private
name|Pipeline
name|pipeline
decl_stmt|;
DECL|field|data
specifier|private
name|Data
name|data
decl_stmt|;
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uppercase
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|processor
operator|=
operator|new
name|MutateProcessor
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|uppercase
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pipeline
operator|=
operator|new
name|Pipeline
argument_list|(
name|ParsedSimulateRequest
operator|.
name|Parser
operator|.
name|SIMULATED_PIPELINE_ID
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|processor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Data
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|processorRegistry
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|processorRegistry
operator|.
name|put
argument_list|(
literal|"mutate"
argument_list|,
operator|new
name|MutateProcessor
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|=
name|mock
argument_list|(
name|PipelineStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getProcessorFactoryRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|processorRegistry
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_UsingPipelineStore
specifier|public
name|void
name|testParse_UsingPipelineStore
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedSimulateRequest
name|expectedRequest
init|=
operator|new
name|ParsedSimulateRequest
argument_list|(
name|pipeline
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|data
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|raw
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|doc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_index"
argument_list|,
literal|"_index"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_type"
argument_list|,
literal|"_type"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
literal|"_id"
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|raw
operator|.
name|put
argument_list|(
literal|"docs"
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|ParsedSimulateRequest
name|actualRequest
init|=
name|PARSER
operator|.
name|parse
argument_list|(
literal|"_id"
argument_list|,
name|raw
argument_list|,
literal|false
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualRequest
argument_list|,
name|equalTo
argument_list|(
name|expectedRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParse_ProvidedPipeline
specifier|public
name|void
name|testParse_ProvidedPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedSimulateRequest
name|expectedRequest
init|=
operator|new
name|ParsedSimulateRequest
argument_list|(
name|pipeline
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|data
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|raw
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|doc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_index"
argument_list|,
literal|"_index"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_type"
argument_list|,
literal|"_type"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|put
argument_list|(
literal|"_id"
argument_list|,
literal|"_id"
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|processorConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|processorConfig
operator|.
name|put
argument_list|(
literal|"uppercase"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pipelineConfig
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pipelineConfig
operator|.
name|put
argument_list|(
literal|"processors"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"mutate"
argument_list|,
name|processorConfig
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|raw
operator|.
name|put
argument_list|(
literal|"docs"
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|raw
operator|.
name|put
argument_list|(
literal|"pipeline"
argument_list|,
name|pipelineConfig
argument_list|)
expr_stmt|;
name|ParsedSimulateRequest
name|actualRequest
init|=
name|PARSER
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|raw
argument_list|,
literal|false
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualRequest
argument_list|,
name|equalTo
argument_list|(
name|expectedRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

