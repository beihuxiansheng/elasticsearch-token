begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|PipelineExecutionServiceTests
specifier|public
class|class
name|PipelineExecutionServiceTests
extends|extends
name|ESTestCase
block|{
DECL|field|store
specifier|private
name|PipelineStore
name|store
decl_stmt|;
DECL|field|threadPool
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|executionService
specifier|private
name|PipelineExecutionService
name|executionService
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|store
operator|=
name|mock
argument_list|(
name|PipelineStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"_name"
argument_list|)
operator|.
name|put
argument_list|(
name|PipelineExecutionService
operator|.
name|additionalSettings
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|executionService
operator|=
operator|new
name|PipelineExecutionService
argument_list|(
name|store
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testExecute_pipelineDoesNotExist
specifier|public
name|void
name|testExecute_pipelineDoesNotExist
parameter_list|()
block|{
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Data
name|data
init|=
operator|new
name|Data
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|PipelineExecutionService
operator|.
name|Listener
name|listener
init|=
name|mock
argument_list|(
name|PipelineExecutionService
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|data
argument_list|,
literal|"_id"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|failed
argument_list|(
name|any
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|executed
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecute_success
specifier|public
name|void
name|testExecute_success
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|processor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Data
name|data
init|=
operator|new
name|Data
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|PipelineExecutionService
operator|.
name|Listener
name|listener
init|=
name|mock
argument_list|(
name|PipelineExecutionService
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|data
argument_list|,
literal|"_id"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|executed
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|failed
argument_list|(
name|any
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecute_failure
specifier|public
name|void
name|testExecute_failure
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|processor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Data
name|data
init|=
operator|new
name|Data
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|PipelineExecutionService
operator|.
name|Listener
name|listener
init|=
name|mock
argument_list|(
name|PipelineExecutionService
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|data
argument_list|,
literal|"_id"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|executed
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|failed
argument_list|(
name|any
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

