begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|TestTemplateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|SetProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|CompoundProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|PipelineExecutionServiceTests
specifier|public
class|class
name|PipelineExecutionServiceTests
extends|extends
name|ESTestCase
block|{
DECL|field|store
specifier|private
name|PipelineStore
name|store
decl_stmt|;
DECL|field|executionService
specifier|private
name|PipelineExecutionService
name|executionService
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|store
operator|=
name|mock
argument_list|(
name|PipelineStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|ThreadPool
name|threadPool
init|=
name|mock
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Runnable
operator|::
name|run
argument_list|)
expr_stmt|;
name|executionService
operator|=
operator|new
name|PipelineExecutionService
argument_list|(
name|store
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecutePipelineDoesNotExist
specifier|public
name|void
name|testExecutePipelineDoesNotExist
parameter_list|()
block|{
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IllegalArgumentException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"pipeline with id [_id] does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteSuccess
specifier|public
name|void
name|testExecuteSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|CompoundProcessor
name|processor
init|=
name|mock
argument_list|(
name|CompoundProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
comment|//TODO we remove metadata, this check is not valid anymore, what do we replace it with?
comment|//verify(processor).execute(eqID("_index", "_type", "_id", Collections.emptyMap()));
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecutePropagateAllMetaDataUpdates
specifier|public
name|void
name|testExecutePropagateAllMetaDataUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|CompoundProcessor
name|processor
init|=
name|mock
argument_list|(
name|CompoundProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
lambda|->
block|{
name|IngestDocument
name|ingestDocument
init|=
operator|(
name|IngestDocument
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|IngestDocument
operator|.
name|MetaData
name|metaData
range|:
name|IngestDocument
operator|.
name|MetaData
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|metaData
operator|==
name|IngestDocument
operator|.
name|MetaData
operator|.
name|TTL
condition|)
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|IngestDocument
operator|.
name|MetaData
operator|.
name|TTL
operator|.
name|getFieldName
argument_list|()
argument_list|,
literal|"5w"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|metaData
operator|.
name|getFieldName
argument_list|()
argument_list|,
literal|"update"
operator|+
name|metaData
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"update_index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"update_type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"update_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|routing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"update_routing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|parent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"update_parent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|timestamp
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"update_timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|3024000000L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteFailure
specifier|public
name|void
name|testExecuteFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|CompoundProcessor
name|processor
init|=
name|mock
argument_list|(
name|CompoundProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteSuccessWithOnFailure
specifier|public
name|void
name|testExecuteSuccessWithOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Processor
name|onFailureProcessor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompoundProcessor
name|compoundProcessor
init|=
operator|new
name|CompoundProcessor
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|processor
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|CompoundProcessor
argument_list|(
name|onFailureProcessor
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|compoundProcessor
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
comment|//TODO we remove metadata, this check is not valid anymore, what do we replace it with?
comment|//verify(processor).execute(eqID("_index", "_type", "_id", Collections.emptyMap()));
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteFailureWithOnFailure
specifier|public
name|void
name|testExecuteFailureWithOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Processor
name|onFailureProcessor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompoundProcessor
name|compoundProcessor
init|=
operator|new
name|CompoundProcessor
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|processor
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|CompoundProcessor
argument_list|(
name|onFailureProcessor
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|compoundProcessor
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|onFailureProcessor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExecuteFailureWithNestedOnFailure
specifier|public
name|void
name|testExecuteFailureWithNestedOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Processor
name|onFailureProcessor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Processor
name|onFailureOnFailureProcessor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompoundProcessor
name|compoundProcessor
init|=
operator|new
name|CompoundProcessor
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|processor
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|CompoundProcessor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|onFailureProcessor
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|onFailureOnFailureProcessor
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|compoundProcessor
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|onFailureOnFailureProcessor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|onFailureProcessor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|eqID
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testExecuteTTL
specifier|public
name|void
name|testExecuteTTL
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test with valid ttl
name|SetProcessor
operator|.
name|Factory
name|metaProcessorFactory
init|=
operator|new
name|SetProcessor
operator|.
name|Factory
argument_list|(
name|TestTemplateService
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_ttl"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
literal|"5d"
argument_list|)
expr_stmt|;
name|Processor
name|processor
init|=
name|metaProcessorFactory
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
operator|new
name|CompoundProcessor
argument_list|(
name|processor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|failureHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
literal|"5d"
argument_list|,
literal|null
argument_list|,
literal|"ttl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// test with invalid ttl
name|metaProcessorFactory
operator|=
operator|new
name|SetProcessor
operator|.
name|Factory
argument_list|(
name|TestTemplateService
operator|.
name|instance
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_ttl"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|processor
operator|=
name|metaProcessorFactory
operator|.
name|create
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
operator|new
name|CompoundProcessor
argument_list|(
name|processor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|failureHandler
operator|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
expr_stmt|;
name|completionHandler
operator|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
expr_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with provided ttl
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
literal|"_id"
argument_list|,
literal|"_description"
argument_list|,
name|mock
argument_list|(
name|CompoundProcessor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexRequest
operator|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
operator|.
name|source
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|ttl
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|failureHandler
operator|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
expr_stmt|;
name|completionHandler
operator|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
expr_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|indexRequest
argument_list|,
literal|"_id"
argument_list|,
name|failureHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|TimeValue
argument_list|(
literal|1000L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|failureHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkRequestExecutionWithFailures
specifier|public
name|void
name|testBulkRequestExecutionWithFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|int
name|numRequest
init|=
name|scaledRandomIntBetween
argument_list|(
literal|8
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|int
name|numIndexRequests
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRequest
condition|;
name|i
operator|++
control|)
block|{
name|ActionRequest
name|request
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|request
operator|=
operator|new
name|DeleteRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|=
operator|new
name|UpdateRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|source
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|request
operator|=
name|indexRequest
expr_stmt|;
name|numIndexRequests
operator|++
expr_stmt|;
block|}
name|bulkRequest
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|String
name|pipelineId
init|=
literal|"_id"
decl_stmt|;
name|CompoundProcessor
name|processor
init|=
name|mock
argument_list|(
name|CompoundProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exception
name|error
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|doThrow
argument_list|(
name|error
argument_list|)
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
name|pipelineId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
name|pipelineId
argument_list|,
literal|null
argument_list|,
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|requestItemErrorHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|bulkRequest
operator|.
name|requests
argument_list|()
argument_list|,
name|pipelineId
argument_list|,
name|requestItemErrorHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|requestItemErrorHandler
argument_list|,
name|times
argument_list|(
name|numIndexRequests
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulkRequestExecution
specifier|public
name|void
name|testBulkRequestExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|int
name|numRequest
init|=
name|scaledRandomIntBetween
argument_list|(
literal|8
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRequest
condition|;
name|i
operator|++
control|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
literal|"_index"
argument_list|,
literal|"_type"
argument_list|,
literal|"_id"
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|source
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
name|indexRequest
argument_list|)
expr_stmt|;
block|}
name|String
name|pipelineId
init|=
literal|"_id"
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|get
argument_list|(
name|pipelineId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pipeline
argument_list|(
name|pipelineId
argument_list|,
literal|null
argument_list|,
operator|new
name|CompoundProcessor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Consumer
argument_list|<
name|Throwable
argument_list|>
name|requestItemErrorHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Boolean
argument_list|>
name|completionHandler
init|=
name|mock
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|executionService
operator|.
name|execute
argument_list|(
name|bulkRequest
operator|.
name|requests
argument_list|()
argument_list|,
name|pipelineId
argument_list|,
name|requestItemErrorHandler
argument_list|,
name|completionHandler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|requestItemErrorHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|completionHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|eqID
specifier|private
name|IngestDocument
name|eqID
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
return|return
name|Matchers
operator|.
name|argThat
argument_list|(
operator|new
name|IngestDocumentMatcher
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|source
argument_list|)
argument_list|)
return|;
block|}
DECL|class|IngestDocumentMatcher
specifier|private
class|class
name|IngestDocumentMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|IngestDocument
argument_list|>
block|{
DECL|field|ingestDocument
specifier|private
specifier|final
name|IngestDocument
name|ingestDocument
decl_stmt|;
DECL|method|IngestDocumentMatcher
specifier|public
name|IngestDocumentMatcher
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|this
operator|.
name|ingestDocument
operator|=
operator|new
name|IngestDocument
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|==
name|IngestDocument
operator|.
name|class
condition|)
block|{
name|IngestDocument
name|otherIngestDocument
init|=
operator|(
name|IngestDocument
operator|)
name|o
decl_stmt|;
comment|//ingest metadata will not be the same (timestamp differs every time)
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|,
name|otherIngestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

