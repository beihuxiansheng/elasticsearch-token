begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|template
operator|.
name|get
operator|.
name|GetIndexTemplatesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ProcessorsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|IngestTemplateTests
specifier|public
class|class
name|IngestTemplateTests
extends|extends
name|ESSingleNodeTestCase
block|{
DECL|field|bootstrapper
specifier|private
name|IngestBootstrapper
name|bootstrapper
decl_stmt|;
annotation|@
name|Override
DECL|method|resetNodeAfterTest
specifier|protected
name|boolean
name|resetNodeAfterTest
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{
name|ThreadPool
name|threadPool
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|threadPool
operator|.
name|executor
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Runnable
operator|::
name|run
argument_list|)
expr_stmt|;
name|Environment
name|environment
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClusterService
name|clusterService
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
name|TransportService
name|transportService
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
name|bootstrapper
operator|=
operator|new
name|IngestBootstrapper
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|threadPool
argument_list|,
name|environment
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|,
operator|new
name|ProcessorsRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|bootstrapper
operator|.
name|setClient
argument_list|(
name|client
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstallIndexTemplate
specifier|public
name|void
name|testInstallIndexTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyNoIndexTemplates
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|bootstrapper
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|clusterState
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIngestIndexTemplateExist
argument_list|()
expr_stmt|;
block|}
DECL|method|testInstallTemplateAfterItHasBeenRemoved
specifier|public
name|void
name|testInstallTemplateAfterItHasBeenRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyNoIndexTemplates
argument_list|()
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|bootstrapper
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|clusterState
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIngestIndexTemplateExist
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDeleteTemplate
argument_list|(
name|IngestBootstrapper
operator|.
name|INGEST_INDEX_TEMPLATE_NAME
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|verifyNoIndexTemplates
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|bootstrapper
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|clusterState
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIngestIndexTemplateExist
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoNotInstallTemplateBecauseIngestIndexTemplateAlreadyExists
specifier|public
name|void
name|testDoNotInstallTemplateBecauseIngestIndexTemplateAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add an empty template and check that it doesn't get overwritten:
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
name|IngestBootstrapper
operator|.
name|INGEST_INDEX_TEMPLATE_NAME
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|".ingest"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetIndexTemplatesResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetTemplates
argument_list|(
name|IngestBootstrapper
operator|.
name|INGEST_INDEX_TEMPLATE_NAME
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrder
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|bootstrapper
operator|.
name|clusterChanged
argument_list|(
operator|new
name|ClusterChangedEvent
argument_list|(
literal|"test"
argument_list|,
name|clusterState
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetTemplates
argument_list|(
name|IngestBootstrapper
operator|.
name|INGEST_INDEX_TEMPLATE_NAME
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"The empty index template shouldn't get overwritten"
argument_list|,
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrder
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"The empty index template shouldn't get overwritten"
argument_list|,
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMappings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyIngestIndexTemplateExist
specifier|private
specifier|static
name|void
name|verifyIngestIndexTemplateExist
parameter_list|()
block|{
name|GetIndexTemplatesResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetTemplates
argument_list|(
name|IngestBootstrapper
operator|.
name|INGEST_INDEX_TEMPLATE_NAME
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|IngestBootstrapper
operator|.
name|INGEST_INDEX_TEMPLATE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrder
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMappings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
name|PipelineStore
operator|.
name|TYPE
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNoIndexTemplates
specifier|private
specifier|static
name|void
name|verifyNoIndexTemplates
parameter_list|()
block|{
name|GetIndexTemplatesResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetTemplates
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexTemplates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

