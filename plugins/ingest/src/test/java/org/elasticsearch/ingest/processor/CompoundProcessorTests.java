begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.processor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|mock
operator|.
name|orig
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|CompoundProcessorTests
specifier|public
class|class
name|CompoundProcessorTests
extends|extends
name|ESTestCase
block|{
DECL|field|ingestDocument
specifier|private
name|IngestDocument
name|ingestDocument
decl_stmt|;
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{
name|ingestDocument
operator|=
operator|new
name|IngestDocument
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|CompoundProcessor
name|processor
init|=
operator|new
name|CompoundProcessor
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getProcessors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getOnFailureProcessors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleProcessor
specifier|public
name|void
name|testSingleProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompoundProcessor
name|compoundProcessor
init|=
operator|new
name|CompoundProcessor
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getOnFailureProcessors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|compoundProcessor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleProcessorWithException
specifier|public
name|void
name|testSingleProcessorWithException
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|processor
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"failed_processor"
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"error"
argument_list|)
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|CompoundProcessor
name|compoundProcessor
init|=
operator|new
name|CompoundProcessor
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getOnFailureProcessors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|compoundProcessor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleProcessorWithOnFailureProcessor
specifier|public
name|void
name|testSingleProcessorWithOnFailureProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|error
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|processor
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|error
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|Processor
name|processorNext
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Answer
name|checkMetadataAnswer
init|=
name|invocationOnMock
lambda|->
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|IngestDocument
name|ingestDocument
init|=
operator|(
name|IngestDocument
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ingestMetadata
init|=
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|get
argument_list|(
name|CompoundProcessor
operator|.
name|ON_FAILURE_MESSAGE_FIELD
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"error"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|get
argument_list|(
name|CompoundProcessor
operator|.
name|ON_FAILURE_PROCESSOR_FIELD
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|doAnswer
argument_list|(
name|checkMetadataAnswer
argument_list|)
operator|.
name|when
argument_list|(
name|processorNext
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|CompoundProcessor
name|compoundProcessor
init|=
name|spy
argument_list|(
operator|new
name|CompoundProcessor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|processor
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|processorNext
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getOnFailureProcessors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getOnFailureProcessors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|processorNext
argument_list|)
argument_list|)
expr_stmt|;
name|compoundProcessor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|compoundProcessor
argument_list|)
operator|.
name|executeOnFailure
argument_list|(
name|ingestDocument
argument_list|,
name|error
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processorNext
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleProcessorWithNestedFailures
specifier|public
name|void
name|testSingleProcessorWithNestedFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|error
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|Processor
name|processor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|processor
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|error
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|processor
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|Processor
name|processorToFail
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Answer
name|checkMetadataAnswer
init|=
name|invocationOnMock
lambda|->
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|IngestDocument
name|ingestDocument
init|=
operator|(
name|IngestDocument
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ingestMetadata
init|=
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|get
argument_list|(
name|CompoundProcessor
operator|.
name|ON_FAILURE_MESSAGE_FIELD
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"error"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|get
argument_list|(
name|CompoundProcessor
operator|.
name|ON_FAILURE_PROCESSOR_FIELD
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|doAnswer
argument_list|(
name|checkMetadataAnswer
argument_list|)
operator|.
name|when
argument_list|(
name|processorToFail
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|processorToFail
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|error
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|processorToFail
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|Processor
name|lastProcessor
init|=
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Answer
name|checkLastMetadataAnswer
init|=
name|invocationOnMock
lambda|->
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|IngestDocument
name|ingestDocument
init|=
operator|(
name|IngestDocument
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ingestMetadata
init|=
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|get
argument_list|(
name|CompoundProcessor
operator|.
name|ON_FAILURE_MESSAGE_FIELD
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"error"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestMetadata
operator|.
name|get
argument_list|(
name|CompoundProcessor
operator|.
name|ON_FAILURE_PROCESSOR_FIELD
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|doAnswer
argument_list|(
name|checkLastMetadataAnswer
argument_list|)
operator|.
name|when
argument_list|(
name|lastProcessor
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|CompoundProcessor
name|innerCompoundOnFailProcessor
init|=
operator|new
name|CompoundProcessor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|processorToFail
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|lastProcessor
argument_list|)
argument_list|)
decl_stmt|;
name|CompoundProcessor
name|compoundOnFailProcessor
init|=
name|spy
argument_list|(
name|innerCompoundOnFailProcessor
argument_list|)
decl_stmt|;
name|CompoundProcessor
name|innerCompoundProcessor
init|=
operator|new
name|CompoundProcessor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|processor
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|compoundOnFailProcessor
argument_list|)
argument_list|)
decl_stmt|;
name|CompoundProcessor
name|compoundProcessor
init|=
name|spy
argument_list|(
name|innerCompoundProcessor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getProcessors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|processor
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getOnFailureProcessors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|compoundProcessor
operator|.
name|getOnFailureProcessors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|compoundOnFailProcessor
argument_list|)
argument_list|)
expr_stmt|;
name|compoundProcessor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|compoundProcessor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executeOnFailure
argument_list|(
name|ingestDocument
argument_list|,
name|error
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|compoundOnFailProcessor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processorToFail
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|compoundOnFailProcessor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executeOnFailure
argument_list|(
name|ingestDocument
argument_list|,
name|error
argument_list|,
literal|"second"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lastProcessor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

