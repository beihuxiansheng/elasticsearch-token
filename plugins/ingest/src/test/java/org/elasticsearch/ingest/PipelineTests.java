begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|mutate
operator|.
name|MutateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|PipelineTests
specifier|public
class|class
name|PipelineTests
extends|extends
name|ESTestCase
block|{
DECL|field|updateProcessor
specifier|private
name|Processor
name|updateProcessor
decl_stmt|;
DECL|field|lowercaseProcessor
specifier|private
name|Processor
name|lowercaseProcessor
decl_stmt|;
DECL|field|pipeline
specifier|private
name|Pipeline
name|pipeline
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|update
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lowercase
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|updateProcessor
operator|=
operator|new
name|MutateProcessor
argument_list|(
name|update
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lowercaseProcessor
operator|=
operator|new
name|MutateProcessor
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|lowercase
argument_list|)
expr_stmt|;
name|pipeline
operator|=
operator|new
name|Pipeline
argument_list|(
literal|"id"
argument_list|,
literal|"description"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|updateProcessor
argument_list|,
name|lowercaseProcessor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Pipeline
name|other
init|=
operator|new
name|Pipeline
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getDescription
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getProcessors
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pipeline
argument_list|,
name|equalTo
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualsDiffId
specifier|public
name|void
name|testNotEqualsDiffId
parameter_list|()
throws|throws
name|Exception
block|{
name|Pipeline
name|other
init|=
operator|new
name|Pipeline
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
operator|+
literal|"foo"
argument_list|,
name|pipeline
operator|.
name|getDescription
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getProcessors
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pipeline
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|other
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualsDiffDescription
specifier|public
name|void
name|testNotEqualsDiffDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|Pipeline
name|other
init|=
operator|new
name|Pipeline
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getDescription
argument_list|()
operator|+
literal|"foo"
argument_list|,
name|pipeline
operator|.
name|getProcessors
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pipeline
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|other
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotEqualsDiffProcessors
specifier|public
name|void
name|testNotEqualsDiffProcessors
parameter_list|()
throws|throws
name|Exception
block|{
name|Pipeline
name|other
init|=
operator|new
name|Pipeline
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getDescription
argument_list|()
operator|+
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|updateProcessor
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|pipeline
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|other
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

