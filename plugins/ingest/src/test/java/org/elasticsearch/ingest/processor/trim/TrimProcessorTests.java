begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.processor.trim
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|trim
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|AbstractStringProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|AbstractStringProcessorTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
DECL|class|TrimProcessorTests
specifier|public
class|class
name|TrimProcessorTests
extends|extends
name|AbstractStringProcessorTestCase
block|{
annotation|@
name|Override
DECL|method|newProcessor
specifier|protected
name|AbstractStringProcessor
name|newProcessor
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
return|return
operator|new
name|TrimProcessor
argument_list|(
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|modifyInput
specifier|protected
name|String
name|modifyInput
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|updatedFieldValue
init|=
literal|""
decl_stmt|;
name|updatedFieldValue
operator|=
name|addWhitespaces
argument_list|(
name|updatedFieldValue
argument_list|)
expr_stmt|;
name|updatedFieldValue
operator|+=
name|input
expr_stmt|;
name|updatedFieldValue
operator|=
name|addWhitespaces
argument_list|(
name|updatedFieldValue
argument_list|)
expr_stmt|;
return|return
name|updatedFieldValue
return|;
block|}
annotation|@
name|Override
DECL|method|expectedResult
specifier|protected
name|String
name|expectedResult
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|addWhitespaces
specifier|private
specifier|static
name|String
name|addWhitespaces
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|int
name|prefixLength
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixLength
condition|;
name|i
operator|++
control|)
block|{
name|input
operator|+=
literal|' '
expr_stmt|;
block|}
return|return
name|input
return|;
block|}
block|}
end_class

end_unit

