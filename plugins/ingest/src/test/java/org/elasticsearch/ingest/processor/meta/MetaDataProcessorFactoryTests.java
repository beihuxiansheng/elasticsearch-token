begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.ingest.processor.meta
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|processor
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|DefaultMustacheFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|Mustache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|mustachejava
operator|.
name|MustacheException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastStringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
operator|.
name|MetaData
import|;
end_import

begin_class
DECL|class|MetaDataProcessorFactoryTests
specifier|public
class|class
name|MetaDataProcessorFactoryTests
extends|extends
name|ESTestCase
block|{
DECL|method|testCreate
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|MetaDataProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|MetaDataProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaData
name|metaData
range|:
name|MetaData
operator|.
name|values
argument_list|()
control|)
block|{
name|config
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"static text"
else|:
literal|"{{expression}}"
argument_list|)
expr_stmt|;
block|}
name|MetaDataProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|get
argument_list|(
name|MetaData
operator|.
name|INDEX
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|get
argument_list|(
name|MetaData
operator|.
name|TIMESTAMP
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|get
argument_list|(
name|MetaData
operator|.
name|ID
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|get
argument_list|(
name|MetaData
operator|.
name|ROUTING
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|get
argument_list|(
name|MetaData
operator|.
name|PARENT
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|get
argument_list|(
name|MetaData
operator|.
name|TIMESTAMP
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTemplates
argument_list|()
operator|.
name|get
argument_list|(
name|MetaData
operator|.
name|TTL
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateIllegalMetaData
specifier|public
name|void
name|testCreateIllegalMetaData
parameter_list|()
throws|throws
name|Exception
block|{
name|MetaDataProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|MetaDataProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
try|try
block|{
name|factory
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_field"
argument_list|,
literal|"text {{expression}}"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"no valid metadata field name [_field]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCreateIllegalEmpty
specifier|public
name|void
name|testCreateIllegalEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|MetaDataProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|MetaDataProcessor
operator|.
name|Factory
argument_list|()
decl_stmt|;
try|try
block|{
name|factory
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"no meta fields specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIlegalMustacheExpression
specifier|public
name|void
name|testIlegalMustacheExpression
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|MetaDataProcessor
operator|.
name|Factory
argument_list|()
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"_index"
argument_list|,
literal|"text {{var"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MustacheException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|"Improperly closed variable in :1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

