begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|DataTests
specifier|public
class|class
name|DataTests
extends|extends
name|ESTestCase
block|{
DECL|field|data
specifier|private
name|Data
name|data
decl_stmt|;
annotation|@
name|Before
DECL|method|setData
specifier|public
name|void
name|setData
parameter_list|()
block|{
name|data
operator|=
operator|new
name|Data
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"fizz"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"buzz"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleGetProperty
specifier|public
name|void
name|testSimpleGetProperty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|data
operator|.
name|getProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedGetProperty
specifier|public
name|void
name|testNestedGetProperty
parameter_list|()
block|{
name|assertThat
argument_list|(
name|data
operator|.
name|getProperty
argument_list|(
literal|"fizz.buzz"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleAddField
specifier|public
name|void
name|testSimpleAddField
parameter_list|()
block|{
name|data
operator|.
name|addField
argument_list|(
literal|"new_field"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|getDocument
argument_list|()
operator|.
name|get
argument_list|(
literal|"new_field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNestedAddField
specifier|public
name|void
name|testNestedAddField
parameter_list|()
block|{
name|data
operator|.
name|addField
argument_list|(
literal|"a.b.c.d"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|getProperty
argument_list|(
literal|"a.b.c.d"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

