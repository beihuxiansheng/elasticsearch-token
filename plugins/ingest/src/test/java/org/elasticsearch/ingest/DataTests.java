begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|DataTests
specifier|public
class|class
name|DataTests
extends|extends
name|ESTestCase
block|{
DECL|field|data
specifier|private
name|Data
name|data
decl_stmt|;
annotation|@
name|Before
DECL|method|setData
specifier|public
name|void
name|setData
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerObject
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"buzz"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"fizz"
argument_list|,
name|innerObject
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Data
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleGetPropertyValue
specifier|public
name|void
name|testSimpleGetPropertyValue
parameter_list|()
block|{
name|assertThat
argument_list|(
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|"foo"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleGetPropertyValueTypeMismatch
specifier|public
name|void
name|testSimpleGetPropertyValueTypeMismatch
parameter_list|()
block|{
try|try
block|{
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|"int"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getProperty should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [int] of type [java.lang.Integer] cannot be cast to [java.lang.String]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|"foo"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getProperty should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [foo] of type [java.lang.String] cannot be cast to [java.lang.Integer]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNestedGetPropertyValue
specifier|public
name|void
name|testNestedGetPropertyValue
parameter_list|()
block|{
name|assertThat
argument_list|(
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|"fizz.buzz"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetPropertyValueNotFound
specifier|public
name|void
name|testGetPropertyValueNotFound
parameter_list|()
block|{
name|assertThat
argument_list|(
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|"not.here"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetPropertyValueNull
specifier|public
name|void
name|testGetPropertyValueNull
parameter_list|()
block|{
name|assertNull
argument_list|(
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetPropertyValueEmpty
specifier|public
name|void
name|testGetPropertyValueEmpty
parameter_list|()
block|{
name|assertNull
argument_list|(
name|data
operator|.
name|getPropertyValue
argument_list|(
literal|""
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasProperty
specifier|public
name|void
name|testHasProperty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|data
operator|.
name|hasPropertyValue
argument_list|(
literal|"fizz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasPropertyValueNested
specifier|public
name|void
name|testHasPropertyValueNested
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|data
operator|.
name|hasPropertyValue
argument_list|(
literal|"fizz.buzz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasPropertyValueNotFound
specifier|public
name|void
name|testHasPropertyValueNotFound
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|data
operator|.
name|hasPropertyValue
argument_list|(
literal|"doesnotexist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasPropertyValueNestedNotFound
specifier|public
name|void
name|testHasPropertyValueNestedNotFound
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|data
operator|.
name|hasPropertyValue
argument_list|(
literal|"fizz.doesnotexist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasPropertyValueNull
specifier|public
name|void
name|testHasPropertyValueNull
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|data
operator|.
name|hasPropertyValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHasPropertyValueEmpty
specifier|public
name|void
name|testHasPropertyValueEmpty
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|data
operator|.
name|hasPropertyValue
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleSetPropertyValue
specifier|public
name|void
name|testSimpleSetPropertyValue
parameter_list|()
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|"new_field"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|getDocument
argument_list|()
operator|.
name|get
argument_list|(
literal|"new_field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNestedSetPropertyValue
specifier|public
name|void
name|testNestedSetPropertyValue
parameter_list|()
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|"a.b.c.d"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|getDocument
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|a
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|getDocument
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|b
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|a
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|b
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|b
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|d
init|=
operator|(
name|String
operator|)
name|c
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|d
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetPropertyValueOnExistingField
specifier|public
name|void
name|testSetPropertyValueOnExistingField
parameter_list|()
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|"foo"
argument_list|,
literal|"newbar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|getDocument
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"newbar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSetPropertyValueOnExistingParent
specifier|public
name|void
name|testSetPropertyValueOnExistingParent
parameter_list|()
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|"fizz.new"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
operator|.
name|getDocument
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|getDocument
argument_list|()
operator|.
name|get
argument_list|(
literal|"fizz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|innerMap
operator|.
name|get
argument_list|(
literal|"new"
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|innerMap
operator|.
name|get
argument_list|(
literal|"new"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetPropertyValueOnExistingParentTypeMismatch
specifier|public
name|void
name|testSetPropertyValueOnExistingParentTypeMismatch
parameter_list|()
block|{
try|try
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|"fizz.buzz.new"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot add field to parent [buzz] of type [java.lang.String], [java.util.Map] expected instead."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetPropertyValueNullName
specifier|public
name|void
name|testSetPropertyValueNullName
parameter_list|()
block|{
try|try
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|null
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot add null or empty field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetPropertyValueEmptyName
specifier|public
name|void
name|testSetPropertyValueEmptyName
parameter_list|()
block|{
try|try
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|""
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot add null or empty field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetPropertyValueNullValue
specifier|public
name|void
name|testSetPropertyValueNullValue
parameter_list|()
block|{
try|try
block|{
name|data
operator|.
name|setPropertyValue
argument_list|(
literal|"new_field"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add field should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cannot add null value to field [new_field]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|fieldValue
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Data
name|data
init|=
operator|new
name|Data
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|String
name|otherIndex
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|otherIndex
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|otherIndex
operator|=
name|index
expr_stmt|;
block|}
name|String
name|otherType
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|otherType
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|otherType
operator|=
name|type
expr_stmt|;
block|}
name|String
name|otherId
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|otherId
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|otherId
operator|=
name|id
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|document
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|document
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
block|}
name|Data
name|otherData
init|=
operator|new
name|Data
argument_list|(
name|otherIndex
argument_list|,
name|otherType
argument_list|,
name|otherId
argument_list|,
name|document
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|assertThat
argument_list|(
name|data
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|otherData
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|otherData
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|data
argument_list|,
name|equalTo
argument_list|(
name|otherData
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|otherData
argument_list|,
name|equalTo
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Data
name|thirdData
init|=
operator|new
name|Data
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|thirdData
argument_list|,
name|equalTo
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|data
argument_list|,
name|equalTo
argument_list|(
name|thirdData
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

