begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.ingest.attachment
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|attachment
package|;
end_package

begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
operator|.
name|JarHell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ReflectPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecurityPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PropertyPermission
import|;
end_import

begin_comment
comment|/**  * Runs tika with limited parsers and limited permissions.  *<p>  * Do NOT make public  */
end_comment

begin_class
DECL|class|TikaImpl
specifier|final
class|class
name|TikaImpl
block|{
comment|/** subset of parsers for types we support */
DECL|field|PARSERS
specifier|private
specifier|static
specifier|final
name|Parser
name|PARSERS
index|[]
init|=
operator|new
name|Parser
index|[]
block|{
comment|// documents
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|HtmlParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|rtf
operator|.
name|RTFParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|txt
operator|.
name|TXTParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OldExcelParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|OOXMLParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|odf
operator|.
name|OpenDocumentParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
operator|.
name|IWorkPackageParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|xml
operator|.
name|DcXMLParser
argument_list|()
block|,
operator|new
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|epub
operator|.
name|EpubParser
argument_list|()
block|,     }
decl_stmt|;
comment|/** autodetector based on this subset */
DECL|field|PARSER_INSTANCE
specifier|private
specifier|static
specifier|final
name|AutoDetectParser
name|PARSER_INSTANCE
init|=
operator|new
name|AutoDetectParser
argument_list|(
name|PARSERS
argument_list|)
decl_stmt|;
comment|/** singleton tika instance */
DECL|field|TIKA_INSTANCE
specifier|private
specifier|static
specifier|final
name|Tika
name|TIKA_INSTANCE
init|=
operator|new
name|Tika
argument_list|(
name|PARSER_INSTANCE
operator|.
name|getDetector
argument_list|()
argument_list|,
name|PARSER_INSTANCE
argument_list|)
decl_stmt|;
comment|/**      * parses with tika, throwing any exception hit while parsing the document      */
comment|// only package private for testing!
DECL|method|parse
specifier|static
name|String
name|parse
parameter_list|(
specifier|final
name|byte
name|content
index|[]
parameter_list|,
specifier|final
name|Metadata
name|metadata
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
comment|// check that its not unprivileged code like a script
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
name|sm
operator|.
name|checkPermission
argument_list|(
operator|new
name|SpecialPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|TikaException
throws|,
name|IOException
block|{
return|return
name|TIKA_INSTANCE
operator|.
name|parseToString
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
argument_list|,
name|RESTRICTED_CONTEXT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
comment|// checked exception from tika: unbox it
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|TikaException
condition|)
block|{
throw|throw
operator|(
name|TikaException
operator|)
name|cause
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
comment|// apply additional containment for parsers, this is intersected with the current permissions
comment|// its hairy, but worth it so we don't have some XML flaw reading random crap from the FS
DECL|field|RESTRICTED_CONTEXT
specifier|private
specifier|static
specifier|final
name|AccessControlContext
name|RESTRICTED_CONTEXT
init|=
operator|new
name|AccessControlContext
argument_list|(
operator|new
name|ProtectionDomain
index|[]
block|{
operator|new
name|ProtectionDomain
argument_list|(
literal|null
argument_list|,
name|getRestrictedPermissions
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
comment|// compute some minimal permissions for parsers. they only get r/w access to the java temp directory,
comment|// the ability to load some resources from JARs, and read sysprops
DECL|method|getRestrictedPermissions
specifier|static
name|PermissionCollection
name|getRestrictedPermissions
parameter_list|()
block|{
name|Permissions
name|perms
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
comment|// property/env access needed for parsing
name|perms
operator|.
name|add
argument_list|(
operator|new
name|PropertyPermission
argument_list|(
literal|"*"
argument_list|,
literal|"read"
argument_list|)
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
operator|new
name|RuntimePermission
argument_list|(
literal|"getenv.TIKA_CONFIG"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add permissions for resource access:
comment|// classpath
name|addReadPermissions
argument_list|(
name|perms
argument_list|,
name|JarHell
operator|.
name|parseClassPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// plugin jars
if|if
condition|(
name|TikaImpl
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|instanceof
name|URLClassLoader
condition|)
block|{
name|addReadPermissions
argument_list|(
name|perms
argument_list|,
operator|(
operator|(
name|URLClassLoader
operator|)
name|TikaImpl
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|)
operator|.
name|getURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// jvm's java.io.tmpdir (needs read/write)
name|perms
operator|.
name|add
argument_list|(
operator|new
name|FilePermission
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"-"
argument_list|,
literal|"read,readlink,write,delete"
argument_list|)
argument_list|)
expr_stmt|;
comment|// current hacks needed for POI/PDFbox issues:
name|perms
operator|.
name|add
argument_list|(
operator|new
name|SecurityPermission
argument_list|(
literal|"putProviderProperty.BC"
argument_list|)
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
operator|new
name|SecurityPermission
argument_list|(
literal|"insertProvider"
argument_list|)
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
operator|new
name|ReflectPermission
argument_list|(
literal|"suppressAccessChecks"
argument_list|)
argument_list|)
expr_stmt|;
comment|// xmlbeans, use by POI, needs to get the context classloader
name|perms
operator|.
name|add
argument_list|(
operator|new
name|RuntimePermission
argument_list|(
literal|"getClassLoader"
argument_list|)
argument_list|)
expr_stmt|;
name|perms
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
return|return
name|perms
return|;
block|}
comment|// add resources to (what is typically) a jar, but might not be (e.g. in tests/IDE)
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"adds access to jar resources"
argument_list|)
DECL|method|addReadPermissions
specifier|static
name|void
name|addReadPermissions
parameter_list|(
name|Permissions
name|perms
parameter_list|,
name|URL
name|resources
index|[]
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|URL
name|url
range|:
name|resources
control|)
block|{
name|Path
name|path
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
comment|// resource itself
name|perms
operator|.
name|add
argument_list|(
operator|new
name|FilePermission
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|"read,readlink"
argument_list|)
argument_list|)
expr_stmt|;
comment|// classes underneath
name|perms
operator|.
name|add
argument_list|(
operator|new
name|FilePermission
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
literal|"-"
argument_list|,
literal|"read,readlink"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|bogus
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|bogus
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

