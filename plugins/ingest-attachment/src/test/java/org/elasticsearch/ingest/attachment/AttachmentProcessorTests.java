begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.attachment
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|RandomDocumentPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocumentMatcher
operator|.
name|assertIngestDocument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsCollectionContaining
operator|.
name|hasItem
import|;
end_import

begin_class
DECL|class|AttachmentProcessorTests
specifier|public
class|class
name|AttachmentProcessorTests
extends|extends
name|ESTestCase
block|{
DECL|field|processor
specifier|private
name|AttachmentProcessor
name|processor
decl_stmt|;
annotation|@
name|Before
DECL|method|createStandardProcessor
specifier|public
name|void
name|createStandardProcessor
parameter_list|()
throws|throws
name|IOException
block|{
name|processor
operator|=
operator|new
name|AttachmentProcessor
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"source_field"
argument_list|,
literal|"target_field"
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|AttachmentProcessor
operator|.
name|Property
operator|.
name|class
argument_list|)
argument_list|,
literal|10000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnglishTextDocument
specifier|public
name|void
name|testEnglishTextDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"text-in-english.txt"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"language"
argument_list|,
literal|"content"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"\"God Save the Queen\" (alternatively \"God Save the King\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHtmlDocumentWithRandomFields
specifier|public
name|void
name|testHtmlDocumentWithRandomFields
parameter_list|()
throws|throws
name|Exception
block|{
comment|//date is not present in the html doc
name|ArrayList
argument_list|<
name|AttachmentProcessor
operator|.
name|Property
argument_list|>
name|fieldsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|AttachmentProcessor
operator|.
name|Property
operator|.
name|DATE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|AttachmentProcessor
operator|.
name|Property
argument_list|>
name|selectedProperties
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numFields
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|fieldsList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|selectedFieldNames
init|=
operator|new
name|String
index|[
name|numFields
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|AttachmentProcessor
operator|.
name|Property
name|property
decl_stmt|;
do|do
block|{
name|property
operator|=
name|randomFrom
argument_list|(
name|fieldsList
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|selectedProperties
operator|.
name|add
argument_list|(
name|property
argument_list|)
operator|==
literal|false
condition|)
do|;
name|selectedFieldNames
index|[
name|i
index|]
operator|=
name|property
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|selectedProperties
operator|.
name|add
argument_list|(
name|AttachmentProcessor
operator|.
name|Property
operator|.
name|DATE
argument_list|)
expr_stmt|;
block|}
name|processor
operator|=
operator|new
name|AttachmentProcessor
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"source_field"
argument_list|,
literal|"target_field"
argument_list|,
name|selectedProperties
argument_list|,
literal|10000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"htmlWithEmptyDateMeta.html"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasSize
argument_list|(
name|selectedFieldNames
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
name|selectedFieldNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFrenchTextDocument
specifier|public
name|void
name|testFrenchTextDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"text-in-french.txt"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItem
argument_list|(
literal|"language"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"fr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnknownLanguageDocument
specifier|public
name|void
name|testUnknownLanguageDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"text-gibberish.txt"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|hasItem
argument_list|(
literal|"language"
argument_list|)
argument_list|)
expr_stmt|;
comment|// lt seems some standard for not detected
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"lt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyTextDocument
specifier|public
name|void
name|testEmptyTextDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"text-empty.txt"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasItem
argument_list|(
literal|"language"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWordDocument
specifier|public
name|void
name|testWordDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"issue-104.docx"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"content"
argument_list|,
literal|"language"
argument_list|,
literal|"date"
argument_list|,
literal|"author"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"date"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"2012-10-12T11:17:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"author"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Windows User"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWordDocumentWithVisioSchema
specifier|public
name|void
name|testWordDocumentWithVisioSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"issue-22077.docx"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"content"
argument_list|,
literal|"language"
argument_list|,
literal|"date"
argument_list|,
literal|"author"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Table of Contents"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"date"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"2015-01-06T18:07:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"author"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLegacyWordDocumentWithVisioSchema
specifier|public
name|void
name|testLegacyWordDocumentWithVisioSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"issue-22077.doc"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"content"
argument_list|,
literal|"language"
argument_list|,
literal|"date"
argument_list|,
literal|"author"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Table of Contents"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"date"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"2016-12-16T15:04:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"author"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"application/msword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPdf
specifier|public
name|void
name|testPdf
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"test.pdf"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"This is a test, with umlauts, from MÃ¼nchen\n\nAlso contains newlines for testing.\n\nAnd one more."
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"application/pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVisioIsExcluded
specifier|public
name|void
name|testVisioIsExcluded
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"issue-22077.vsdx"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"application/vnd.ms-visio.drawing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncryptedPdf
specifier|public
name|void
name|testEncryptedPdf
parameter_list|()
throws|throws
name|Exception
block|{
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseDocument
argument_list|(
literal|"encrypted.pdf"
argument_list|,
name|processor
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"document is encrypted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHtmlDocument
specifier|public
name|void
name|testHtmlDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"htmlWithEmptyDateMeta.html"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"language"
argument_list|,
literal|"content"
argument_list|,
literal|"author"
argument_list|,
literal|"keywords"
argument_list|,
literal|"title"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"author"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"kimchy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"keywords"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"elasticsearch,cool,bonsai"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"text/html"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXHtmlDocument
specifier|public
name|void
name|testXHtmlDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"testXHTML.html"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"language"
argument_list|,
literal|"content"
argument_list|,
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"application/xhtml+xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEpubDocument
specifier|public
name|void
name|testEpubDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"testEPUB.epub"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"language"
argument_list|,
literal|"content"
argument_list|,
literal|"author"
argument_list|,
literal|"title"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|,
literal|"date"
argument_list|,
literal|"keywords"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"application/epub+zip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no real detection, just rudimentary
DECL|method|testAsciidocDocument
specifier|public
name|void
name|testAsciidocDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
name|parseDocument
argument_list|(
literal|"asciidoc.asciidoc"
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"language"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseAsBytesArray
specifier|public
name|void
name|testParseAsBytesArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/org/elasticsearch/ingest/attachment/test/sample-files/text-in-english.txt"
decl_stmt|;
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|AttachmentProcessorTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|bytes
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"source_field"
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"target_field"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|keySet
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"language"
argument_list|,
literal|"content"
argument_list|,
literal|"content_type"
argument_list|,
literal|"content_length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"\"God Save the Queen\" (alternatively \"God Save the King\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachmentData
operator|.
name|get
argument_list|(
literal|"content_length"
argument_list|)
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullValueWithIgnoreMissing
specifier|public
name|void
name|testNullValueWithIgnoreMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|IngestDocument
name|originalIngestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"source_field"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|originalIngestDocument
argument_list|)
decl_stmt|;
name|Processor
name|processor
init|=
operator|new
name|AttachmentProcessor
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"source_field"
argument_list|,
literal|"randomTarget"
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|assertIngestDocument
argument_list|(
name|originalIngestDocument
argument_list|,
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonExistentWithIgnoreMissing
specifier|public
name|void
name|testNonExistentWithIgnoreMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|IngestDocument
name|originalIngestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|originalIngestDocument
argument_list|)
decl_stmt|;
name|Processor
name|processor
init|=
operator|new
name|AttachmentProcessor
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"source_field"
argument_list|,
literal|"randomTarget"
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
name|assertIngestDocument
argument_list|(
name|originalIngestDocument
argument_list|,
name|ingestDocument
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullWithoutIgnoreMissing
specifier|public
name|void
name|testNullWithoutIgnoreMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|IngestDocument
name|originalIngestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"source_field"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|originalIngestDocument
argument_list|)
decl_stmt|;
name|Processor
name|processor
init|=
operator|new
name|AttachmentProcessor
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"source_field"
argument_list|,
literal|"randomTarget"
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [source_field] is null, cannot parse."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonExistentWithoutIgnoreMissing
specifier|public
name|void
name|testNonExistentWithoutIgnoreMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|IngestDocument
name|originalIngestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
name|originalIngestDocument
argument_list|)
decl_stmt|;
name|Processor
name|processor
init|=
operator|new
name|AttachmentProcessor
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|"source_field"
argument_list|,
literal|"randomTarget"
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field [source_field] not present as part of path [source_field]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parseDocument
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseDocument
parameter_list|(
name|String
name|file
parameter_list|,
name|AttachmentProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"source_field"
argument_list|,
name|getAsBase64
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
name|RandomDocumentPicks
operator|.
name|randomIngestDocument
argument_list|(
name|random
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|processor
operator|.
name|execute
argument_list|(
name|ingestDocument
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attachmentData
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ingestDocument
operator|.
name|getSourceAndMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"target_field"
argument_list|)
decl_stmt|;
return|return
name|attachmentData
return|;
block|}
DECL|method|getAsBase64
specifier|protected
name|String
name|getAsBase64
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/org/elasticsearch/ingest/attachment/test/sample-files/"
operator|+
name|filename
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|AttachmentProcessorTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
name|bytes
index|[]
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|is
argument_list|)
decl_stmt|;
return|return
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

