begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.example
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|example
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Example configuration.  */
end_comment

begin_class
DECL|class|ExamplePluginConfiguration
specifier|public
class|class
name|ExamplePluginConfiguration
block|{
DECL|field|customSettings
specifier|private
specifier|final
name|Settings
name|customSettings
decl_stmt|;
DECL|field|TEST_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|String
argument_list|>
name|TEST_SETTING
init|=
operator|new
name|Setting
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"test"
argument_list|,
literal|"default_value"
argument_list|,
parameter_list|(
name|value
parameter_list|)
lambda|->
name|value
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|method|ExamplePluginConfiguration
specifier|public
name|ExamplePluginConfiguration
parameter_list|(
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The directory part of the location matches the artifactId of this plugin
name|Path
name|path
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"jvm-example/example.yaml"
argument_list|)
decl_stmt|;
name|customSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|loadFromPath
argument_list|(
name|path
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// asserts for tests
assert|assert
name|customSettings
operator|!=
literal|null
assert|;
assert|assert
name|TEST_SETTING
operator|.
name|get
argument_list|(
name|customSettings
argument_list|)
operator|!=
literal|null
assert|;
block|}
DECL|method|getTestConfig
specifier|public
name|String
name|getTestConfig
parameter_list|()
block|{
return|return
name|TEST_SETTING
operator|.
name|get
argument_list|(
name|customSettings
argument_list|)
return|;
block|}
block|}
end_class

end_unit

