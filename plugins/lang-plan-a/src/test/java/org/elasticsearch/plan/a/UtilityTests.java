begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plan.a
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_comment
comment|/**  * Tests utility methods (typically built-ins)  */
end_comment

begin_class
DECL|class|UtilityTests
specifier|public
class|class
name|UtilityTests
extends|extends
name|ESTestCase
block|{
DECL|method|testDivideWithoutOverflowInt
specifier|public
name|void
name|testDivideWithoutOverflowInt
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
operator|/
literal|2
argument_list|,
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testDivideWithoutOverflowLong
specifier|public
name|void
name|testDivideWithoutOverflowLong
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5L
operator|/
literal|2L
argument_list|,
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5L
argument_list|,
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testToByteExact
specifier|public
name|void
name|testToByteExact
parameter_list|()
block|{
for|for
control|(
name|int
name|b
init|=
name|Byte
operator|.
name|MIN_VALUE
init|;
name|b
operator|<
name|Byte
operator|.
name|MAX_VALUE
condition|;
name|b
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|,
name|Utility
operator|.
name|toByteExact
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Utility
operator|.
name|toByteExact
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|toByteExact
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testToShortExact
specifier|public
name|void
name|testToShortExact
parameter_list|()
block|{
for|for
control|(
name|int
name|s
init|=
name|Short
operator|.
name|MIN_VALUE
init|;
name|s
operator|<
name|Short
operator|.
name|MAX_VALUE
condition|;
name|s
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
name|s
argument_list|,
name|Utility
operator|.
name|toShortExact
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Utility
operator|.
name|toShortExact
argument_list|(
name|Short
operator|.
name|MIN_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|toShortExact
argument_list|(
name|Short
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testToCharExact
specifier|public
name|void
name|testToCharExact
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
name|Character
operator|.
name|MIN_VALUE
init|;
name|c
operator|<
name|Character
operator|.
name|MAX_VALUE
condition|;
name|c
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|,
name|Utility
operator|.
name|toCharExact
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Utility
operator|.
name|toCharExact
argument_list|(
name|Character
operator|.
name|MIN_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|toCharExact
argument_list|(
name|Character
operator|.
name|MAX_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testAddWithoutOverflowFloat
specifier|public
name|void
name|testAddWithoutOverflowFloat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10F
argument_list|,
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
literal|5F
argument_list|,
literal|5F
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
literal|5F
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testAddWithoutOverflowDouble
specifier|public
name|void
name|testAddWithoutOverflowDouble
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|10D
argument_list|,
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
literal|5D
argument_list|,
literal|5D
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
literal|5D
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|,
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testSubtractWithoutOverflowFloat
specifier|public
name|void
name|testSubtractWithoutOverflowFloat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5F
argument_list|,
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
literal|10F
argument_list|,
literal|5F
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
literal|5F
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|,
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|-
name|Float
operator|.
name|MAX_VALUE
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testSubtractWithoutOverflowDouble
specifier|public
name|void
name|testSubtractWithoutOverflowDouble
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5D
argument_list|,
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
literal|10D
argument_list|,
literal|5D
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
literal|5D
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|,
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|-
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testMultiplyWithoutOverflowFloat
specifier|public
name|void
name|testMultiplyWithoutOverflowFloat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|25F
argument_list|,
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
literal|5F
argument_list|,
literal|5F
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
literal|5F
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
literal|5F
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testMultiplyWithoutOverflowDouble
specifier|public
name|void
name|testMultiplyWithoutOverflowDouble
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|25D
argument_list|,
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
literal|5D
argument_list|,
literal|5D
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
literal|5D
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
literal|5D
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testDivideWithoutOverflowFloat
specifier|public
name|void
name|testDivideWithoutOverflowFloat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5F
argument_list|,
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|25F
argument_list|,
literal|5F
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5F
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|5F
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|0F
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5F
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testDivideWithoutOverflowDouble
specifier|public
name|void
name|testDivideWithoutOverflowDouble
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5D
argument_list|,
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|25D
argument_list|,
literal|5D
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5D
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
literal|5D
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|0D
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
literal|5D
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testRemainderWithoutOverflowFloat
specifier|public
name|void
name|testRemainderWithoutOverflowFloat
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1F
argument_list|,
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
literal|25F
argument_list|,
literal|4F
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
literal|5F
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testRemainderWithoutOverflowDouble
specifier|public
name|void
name|testRemainderWithoutOverflowDouble
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
literal|25D
argument_list|,
literal|4D
argument_list|)
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
try|try
block|{
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
literal|5D
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

