begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plan.a
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|FieldTests
specifier|public
class|class
name|FieldTests
extends|extends
name|ScriptTestCase
block|{
DECL|class|FieldClass
specifier|public
specifier|static
class|class
name|FieldClass
block|{
DECL|field|z
specifier|public
name|boolean
name|z
init|=
literal|false
decl_stmt|;
DECL|field|b
specifier|public
name|byte
name|b
init|=
literal|0
decl_stmt|;
DECL|field|s
specifier|public
name|short
name|s
init|=
literal|1
decl_stmt|;
DECL|field|c
specifier|public
name|char
name|c
init|=
literal|'c'
decl_stmt|;
DECL|field|i
specifier|public
name|int
name|i
init|=
literal|2
decl_stmt|;
DECL|field|si
specifier|public
name|int
name|si
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|j
specifier|public
name|long
name|j
init|=
literal|3l
decl_stmt|;
DECL|field|f
specifier|public
name|float
name|f
init|=
literal|4.0f
decl_stmt|;
DECL|field|d
specifier|public
name|double
name|d
init|=
literal|5.0
decl_stmt|;
DECL|field|t
specifier|public
name|String
name|t
init|=
literal|"s"
decl_stmt|;
DECL|field|l
specifier|public
name|Object
name|l
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|test
specifier|public
name|float
name|test
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|getSi
specifier|public
name|int
name|getSi
parameter_list|()
block|{
return|return
name|si
return|;
block|}
DECL|method|setSi
specifier|public
name|void
name|setSi
parameter_list|(
specifier|final
name|int
name|si
parameter_list|)
block|{
name|this
operator|.
name|si
operator|=
name|si
expr_stmt|;
block|}
block|}
DECL|class|FieldDefinition
specifier|public
specifier|static
class|class
name|FieldDefinition
extends|extends
name|Definition
block|{
DECL|method|FieldDefinition
name|FieldDefinition
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|addStruct
argument_list|(
literal|"FieldClass"
argument_list|,
name|FieldClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"z"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|byteType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"s"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|shortType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"c"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|charType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"i"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"j"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|longType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"f"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|floatType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"d"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|doubleType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"t"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|stringType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"l"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"FieldClass"
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"getSi"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"setSi"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|voidType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"FieldClass"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|floatType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|,
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setDefinition
specifier|public
name|void
name|setDefinition
parameter_list|()
block|{
name|scriptEngine
operator|.
name|setDefinition
argument_list|(
operator|new
name|FieldDefinition
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntField
specifier|public
name|void
name|testIntField
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"s5t42"
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() return fc.t += 2 + fc.j + \"t\" + 4 + (3 - 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0f
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass(); def l = new Double(3) Byte b = new Byte((byte)2) return fc.test(l, b)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() fc.i = 4 return fc.i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc0 = new FieldClass() FieldClass fc1 = new FieldClass() fc0.i = 7 - fc0.i fc1.i = fc0.i return fc1.i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|exec
argument_list|(
literal|"def fc0 = new FieldClass() def fc1 = new FieldClass() fc0.i += fc1.i fc0.i += fc0.i return fc0.i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicitShortcut
specifier|public
name|void
name|testExplicitShortcut
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() fc.setSi(5) return fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() def x = fc.getSi() x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() fc.si = 5 return fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() fc.si++ return fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() def x = fc.si++ return x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() def x = ++fc.si return x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() fc.si *= 2 fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1test"
argument_list|,
name|exec
argument_list|(
literal|"FieldClass fc = new FieldClass() fc.si + \"test\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testImplicitShortcut
specifier|public
name|void
name|testImplicitShortcut
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() fc.setSi(5) return fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() def x = fc.getSi() x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() fc.si = 5 return fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() fc.si++ return fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() def x = fc.si++ return x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() def x = ++fc.si return x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() fc.si *= 2 fc.si"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1test"
argument_list|,
name|exec
argument_list|(
literal|"def fc = new FieldClass() fc.si + \"test\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

