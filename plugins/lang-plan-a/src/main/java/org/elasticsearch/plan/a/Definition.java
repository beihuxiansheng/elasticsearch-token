begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plan.a
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|Definition
class|class
name|Definition
block|{
DECL|enum|Sort
enum|enum
name|Sort
block|{
DECL|enum constant|VOID
name|VOID
argument_list|(
name|void
operator|.
name|class
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|BOOL
name|BOOL
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|BYTE
name|BYTE
argument_list|(
name|byte
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|SHORT
name|SHORT
argument_list|(
name|short
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|CHAR
name|CHAR
argument_list|(
name|char
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|INT
name|INT
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|LONG
name|LONG
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|FLOAT
name|FLOAT
argument_list|(
name|float
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|DOUBLE
name|DOUBLE
argument_list|(
name|double
operator|.
name|class
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|VOID_OBJ
name|VOID_OBJ
argument_list|(
name|Void
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|BOOL_OBJ
name|BOOL_OBJ
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|BYTE_OBJ
name|BYTE_OBJ
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|SHORT_OBJ
name|SHORT_OBJ
argument_list|(
name|Short
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|CHAR_OBJ
name|CHAR_OBJ
argument_list|(
name|Character
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|INT_OBJ
name|INT_OBJ
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|LONG_OBJ
name|LONG_OBJ
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|FLOAT_OBJ
name|FLOAT_OBJ
argument_list|(
name|Float
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|DOUBLE_OBJ
name|DOUBLE_OBJ
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|NUMBER
name|NUMBER
argument_list|(
name|Number
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|STRING
name|STRING
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
DECL|enum constant|OBJECT
name|OBJECT
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|DEF
name|DEF
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
DECL|enum constant|ARRAY
name|ARRAY
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|;
DECL|field|clazz
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
DECL|field|size
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|primitive
specifier|final
name|boolean
name|primitive
decl_stmt|;
DECL|field|bool
specifier|final
name|boolean
name|bool
decl_stmt|;
DECL|field|numeric
specifier|final
name|boolean
name|numeric
decl_stmt|;
DECL|field|constant
specifier|final
name|boolean
name|constant
decl_stmt|;
DECL|method|Sort
name|Sort
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|boolean
name|primitive
parameter_list|,
specifier|final
name|boolean
name|bool
parameter_list|,
specifier|final
name|boolean
name|numeric
parameter_list|,
specifier|final
name|boolean
name|constant
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|bool
operator|=
name|bool
expr_stmt|;
name|this
operator|.
name|primitive
operator|=
name|primitive
expr_stmt|;
name|this
operator|.
name|numeric
operator|=
name|numeric
expr_stmt|;
name|this
operator|.
name|constant
operator|=
name|constant
expr_stmt|;
block|}
block|}
DECL|class|Type
specifier|static
class|class
name|Type
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|struct
specifier|final
name|Struct
name|struct
decl_stmt|;
DECL|field|clazz
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
DECL|field|type
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|type
decl_stmt|;
DECL|field|sort
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|method|Type
specifier|private
name|Type
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Struct
name|struct
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|type
parameter_list|,
specifier|final
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|struct
operator|=
name|struct
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|object
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Type
name|type
init|=
operator|(
name|Type
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|type
operator|.
name|type
argument_list|)
operator|&&
name|struct
operator|.
name|equals
argument_list|(
name|type
operator|.
name|struct
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|struct
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|Constructor
specifier|static
class|class
name|Constructor
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|owner
specifier|final
name|Struct
name|owner
decl_stmt|;
DECL|field|arguments
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|arguments
decl_stmt|;
DECL|field|method
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|method
decl_stmt|;
DECL|field|reflect
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
argument_list|<
name|?
argument_list|>
name|reflect
decl_stmt|;
DECL|method|Constructor
specifier|private
name|Constructor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Struct
name|owner
parameter_list|,
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|arguments
parameter_list|,
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|method
parameter_list|,
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
argument_list|<
name|?
argument_list|>
name|reflect
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|reflect
operator|=
name|reflect
expr_stmt|;
block|}
block|}
DECL|class|Method
specifier|static
class|class
name|Method
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|owner
specifier|final
name|Struct
name|owner
decl_stmt|;
DECL|field|rtn
specifier|final
name|Type
name|rtn
decl_stmt|;
DECL|field|arguments
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|arguments
decl_stmt|;
DECL|field|method
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|method
decl_stmt|;
DECL|field|reflect
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|reflect
decl_stmt|;
DECL|field|handle
specifier|final
name|MethodHandle
name|handle
decl_stmt|;
DECL|method|Method
specifier|private
name|Method
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Struct
name|owner
parameter_list|,
specifier|final
name|Type
name|rtn
parameter_list|,
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|arguments
parameter_list|,
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|method
parameter_list|,
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|reflect
parameter_list|,
specifier|final
name|MethodHandle
name|handle
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|rtn
operator|=
name|rtn
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|reflect
operator|=
name|reflect
expr_stmt|;
name|this
operator|.
name|handle
operator|=
name|handle
expr_stmt|;
block|}
block|}
DECL|class|Field
specifier|static
class|class
name|Field
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|owner
specifier|final
name|Struct
name|owner
decl_stmt|;
DECL|field|generic
specifier|final
name|Type
name|generic
decl_stmt|;
DECL|field|type
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|reflect
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|reflect
decl_stmt|;
DECL|field|getter
specifier|final
name|MethodHandle
name|getter
decl_stmt|;
DECL|field|setter
specifier|final
name|MethodHandle
name|setter
decl_stmt|;
DECL|method|Field
specifier|private
name|Field
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Struct
name|owner
parameter_list|,
specifier|final
name|Type
name|generic
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|reflect
parameter_list|,
specifier|final
name|MethodHandle
name|getter
parameter_list|,
specifier|final
name|MethodHandle
name|setter
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|generic
operator|=
name|generic
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|reflect
operator|=
name|reflect
expr_stmt|;
name|this
operator|.
name|getter
operator|=
name|getter
expr_stmt|;
name|this
operator|.
name|setter
operator|=
name|setter
expr_stmt|;
block|}
block|}
DECL|class|Struct
specifier|static
class|class
name|Struct
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|clazz
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
DECL|field|type
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|type
decl_stmt|;
DECL|field|constructors
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Constructor
argument_list|>
name|constructors
decl_stmt|;
DECL|field|functions
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|functions
decl_stmt|;
DECL|field|methods
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|methods
decl_stmt|;
DECL|field|statics
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|statics
decl_stmt|;
DECL|field|members
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Field
argument_list|>
name|members
decl_stmt|;
DECL|method|Struct
specifier|private
name|Struct
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|constructors
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|functions
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|methods
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|statics
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|members
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|Struct
specifier|private
name|Struct
parameter_list|(
specifier|final
name|Struct
name|struct
parameter_list|)
block|{
name|name
operator|=
name|struct
operator|.
name|name
expr_stmt|;
name|clazz
operator|=
name|struct
operator|.
name|clazz
expr_stmt|;
name|type
operator|=
name|struct
operator|.
name|type
expr_stmt|;
name|constructors
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|struct
operator|.
name|constructors
argument_list|)
expr_stmt|;
name|functions
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|struct
operator|.
name|functions
argument_list|)
expr_stmt|;
name|methods
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|struct
operator|.
name|methods
argument_list|)
expr_stmt|;
name|statics
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|struct
operator|.
name|statics
argument_list|)
expr_stmt|;
name|members
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|struct
operator|.
name|members
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|object
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Struct
name|struct
init|=
operator|(
name|Struct
operator|)
name|object
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|struct
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|Pair
specifier|static
class|class
name|Pair
block|{
DECL|field|type0
specifier|final
name|Type
name|type0
decl_stmt|;
DECL|field|type1
specifier|final
name|Type
name|type1
decl_stmt|;
DECL|method|Pair
name|Pair
parameter_list|(
specifier|final
name|Type
name|type0
parameter_list|,
specifier|final
name|Type
name|type1
parameter_list|)
block|{
name|this
operator|.
name|type0
operator|=
name|type0
expr_stmt|;
name|this
operator|.
name|type1
operator|=
name|type1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|object
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Pair
name|pair
init|=
operator|(
name|Pair
operator|)
name|object
decl_stmt|;
return|return
name|type0
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|type0
argument_list|)
operator|&&
name|type1
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|type1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|type0
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|type1
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|Cast
specifier|static
class|class
name|Cast
block|{
DECL|field|from
specifier|final
name|Type
name|from
decl_stmt|;
DECL|field|to
specifier|final
name|Type
name|to
decl_stmt|;
DECL|method|Cast
name|Cast
parameter_list|(
specifier|final
name|Type
name|from
parameter_list|,
specifier|final
name|Type
name|to
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|object
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Cast
name|cast
init|=
operator|(
name|Cast
operator|)
name|object
decl_stmt|;
return|return
name|from
operator|.
name|equals
argument_list|(
name|cast
operator|.
name|from
argument_list|)
operator|&&
name|to
operator|.
name|equals
argument_list|(
name|cast
operator|.
name|to
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|from
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|to
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|Transform
specifier|static
class|class
name|Transform
extends|extends
name|Cast
block|{
DECL|field|cast
specifier|final
name|Cast
name|cast
decl_stmt|;
DECL|field|method
specifier|final
name|Method
name|method
decl_stmt|;
DECL|field|upcast
specifier|final
name|Type
name|upcast
decl_stmt|;
DECL|field|downcast
specifier|final
name|Type
name|downcast
decl_stmt|;
DECL|method|Transform
specifier|private
name|Transform
parameter_list|(
specifier|final
name|Cast
name|cast
parameter_list|,
name|Method
name|method
parameter_list|,
specifier|final
name|Type
name|upcast
parameter_list|,
specifier|final
name|Type
name|downcast
parameter_list|)
block|{
name|super
argument_list|(
name|cast
operator|.
name|from
argument_list|,
name|cast
operator|.
name|to
argument_list|)
expr_stmt|;
name|this
operator|.
name|cast
operator|=
name|cast
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|upcast
operator|=
name|upcast
expr_stmt|;
name|this
operator|.
name|downcast
operator|=
name|downcast
expr_stmt|;
block|}
block|}
DECL|field|structs
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Struct
argument_list|>
name|structs
decl_stmt|;
DECL|field|classes
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Struct
argument_list|>
name|classes
decl_stmt|;
DECL|field|transforms
specifier|final
name|Map
argument_list|<
name|Cast
argument_list|,
name|Transform
argument_list|>
name|transforms
decl_stmt|;
DECL|field|bounds
specifier|final
name|Map
argument_list|<
name|Pair
argument_list|,
name|Type
argument_list|>
name|bounds
decl_stmt|;
DECL|field|voidType
specifier|final
name|Type
name|voidType
decl_stmt|;
DECL|field|booleanType
specifier|final
name|Type
name|booleanType
decl_stmt|;
DECL|field|byteType
specifier|final
name|Type
name|byteType
decl_stmt|;
DECL|field|shortType
specifier|final
name|Type
name|shortType
decl_stmt|;
DECL|field|charType
specifier|final
name|Type
name|charType
decl_stmt|;
DECL|field|intType
specifier|final
name|Type
name|intType
decl_stmt|;
DECL|field|longType
specifier|final
name|Type
name|longType
decl_stmt|;
DECL|field|floatType
specifier|final
name|Type
name|floatType
decl_stmt|;
DECL|field|doubleType
specifier|final
name|Type
name|doubleType
decl_stmt|;
DECL|field|voidobjType
specifier|final
name|Type
name|voidobjType
decl_stmt|;
DECL|field|booleanobjType
specifier|final
name|Type
name|booleanobjType
decl_stmt|;
DECL|field|byteobjType
specifier|final
name|Type
name|byteobjType
decl_stmt|;
DECL|field|shortobjType
specifier|final
name|Type
name|shortobjType
decl_stmt|;
DECL|field|charobjType
specifier|final
name|Type
name|charobjType
decl_stmt|;
DECL|field|intobjType
specifier|final
name|Type
name|intobjType
decl_stmt|;
DECL|field|longobjType
specifier|final
name|Type
name|longobjType
decl_stmt|;
DECL|field|floatobjType
specifier|final
name|Type
name|floatobjType
decl_stmt|;
DECL|field|doubleobjType
specifier|final
name|Type
name|doubleobjType
decl_stmt|;
DECL|field|objectType
specifier|final
name|Type
name|objectType
decl_stmt|;
DECL|field|defType
specifier|final
name|Type
name|defType
decl_stmt|;
DECL|field|numberType
specifier|final
name|Type
name|numberType
decl_stmt|;
DECL|field|charseqType
specifier|final
name|Type
name|charseqType
decl_stmt|;
DECL|field|stringType
specifier|final
name|Type
name|stringType
decl_stmt|;
DECL|field|mathType
specifier|final
name|Type
name|mathType
decl_stmt|;
DECL|field|utilityType
specifier|final
name|Type
name|utilityType
decl_stmt|;
DECL|field|defobjType
specifier|final
name|Type
name|defobjType
decl_stmt|;
DECL|field|listType
specifier|final
name|Type
name|listType
decl_stmt|;
DECL|field|arraylistType
specifier|final
name|Type
name|arraylistType
decl_stmt|;
DECL|field|mapType
specifier|final
name|Type
name|mapType
decl_stmt|;
DECL|field|hashmapType
specifier|final
name|Type
name|hashmapType
decl_stmt|;
DECL|field|olistType
specifier|final
name|Type
name|olistType
decl_stmt|;
DECL|field|oarraylistType
specifier|final
name|Type
name|oarraylistType
decl_stmt|;
DECL|field|omapType
specifier|final
name|Type
name|omapType
decl_stmt|;
DECL|field|ohashmapType
specifier|final
name|Type
name|ohashmapType
decl_stmt|;
DECL|field|smapType
specifier|final
name|Type
name|smapType
decl_stmt|;
DECL|field|shashmapType
specifier|final
name|Type
name|shashmapType
decl_stmt|;
DECL|field|somapType
specifier|final
name|Type
name|somapType
decl_stmt|;
DECL|field|sohashmapType
specifier|final
name|Type
name|sohashmapType
decl_stmt|;
DECL|field|execType
specifier|final
name|Type
name|execType
decl_stmt|;
DECL|method|Definition
specifier|public
name|Definition
parameter_list|()
block|{
name|structs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|classes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|transforms
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bounds
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addDefaultStructs
argument_list|()
expr_stmt|;
name|addDefaultClasses
argument_list|()
expr_stmt|;
name|voidType
operator|=
name|getType
argument_list|(
literal|"void"
argument_list|)
expr_stmt|;
name|booleanType
operator|=
name|getType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|byteType
operator|=
name|getType
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|shortType
operator|=
name|getType
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|charType
operator|=
name|getType
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|intType
operator|=
name|getType
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|longType
operator|=
name|getType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|floatType
operator|=
name|getType
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|doubleType
operator|=
name|getType
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|voidobjType
operator|=
name|getType
argument_list|(
literal|"Void"
argument_list|)
expr_stmt|;
name|booleanobjType
operator|=
name|getType
argument_list|(
literal|"Boolean"
argument_list|)
expr_stmt|;
name|byteobjType
operator|=
name|getType
argument_list|(
literal|"Byte"
argument_list|)
expr_stmt|;
name|shortobjType
operator|=
name|getType
argument_list|(
literal|"Short"
argument_list|)
expr_stmt|;
name|charobjType
operator|=
name|getType
argument_list|(
literal|"Character"
argument_list|)
expr_stmt|;
name|intobjType
operator|=
name|getType
argument_list|(
literal|"Integer"
argument_list|)
expr_stmt|;
name|longobjType
operator|=
name|getType
argument_list|(
literal|"Long"
argument_list|)
expr_stmt|;
name|floatobjType
operator|=
name|getType
argument_list|(
literal|"Float"
argument_list|)
expr_stmt|;
name|doubleobjType
operator|=
name|getType
argument_list|(
literal|"Double"
argument_list|)
expr_stmt|;
name|objectType
operator|=
name|getType
argument_list|(
literal|"Object"
argument_list|)
expr_stmt|;
name|defType
operator|=
name|getType
argument_list|(
literal|"def"
argument_list|)
expr_stmt|;
name|numberType
operator|=
name|getType
argument_list|(
literal|"Number"
argument_list|)
expr_stmt|;
name|charseqType
operator|=
name|getType
argument_list|(
literal|"CharSequence"
argument_list|)
expr_stmt|;
name|stringType
operator|=
name|getType
argument_list|(
literal|"String"
argument_list|)
expr_stmt|;
name|mathType
operator|=
name|getType
argument_list|(
literal|"Math"
argument_list|)
expr_stmt|;
name|utilityType
operator|=
name|getType
argument_list|(
literal|"Utility"
argument_list|)
expr_stmt|;
name|defobjType
operator|=
name|getType
argument_list|(
literal|"Def"
argument_list|)
expr_stmt|;
name|listType
operator|=
name|getType
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
name|arraylistType
operator|=
name|getType
argument_list|(
literal|"ArrayList"
argument_list|)
expr_stmt|;
name|mapType
operator|=
name|getType
argument_list|(
literal|"Map"
argument_list|)
expr_stmt|;
name|hashmapType
operator|=
name|getType
argument_list|(
literal|"HashMap"
argument_list|)
expr_stmt|;
name|olistType
operator|=
name|getType
argument_list|(
literal|"List<Object>"
argument_list|)
expr_stmt|;
name|oarraylistType
operator|=
name|getType
argument_list|(
literal|"ArrayList<Object>"
argument_list|)
expr_stmt|;
name|omapType
operator|=
name|getType
argument_list|(
literal|"Map<Object,Object>"
argument_list|)
expr_stmt|;
name|ohashmapType
operator|=
name|getType
argument_list|(
literal|"HashMap<Object,Object>"
argument_list|)
expr_stmt|;
name|smapType
operator|=
name|getType
argument_list|(
literal|"Map<String,def>"
argument_list|)
expr_stmt|;
name|shashmapType
operator|=
name|getType
argument_list|(
literal|"HashMap<String,def>"
argument_list|)
expr_stmt|;
name|somapType
operator|=
name|getType
argument_list|(
literal|"Map<String,Object>"
argument_list|)
expr_stmt|;
name|sohashmapType
operator|=
name|getType
argument_list|(
literal|"HashMap<String,Object>"
argument_list|)
expr_stmt|;
name|execType
operator|=
name|getType
argument_list|(
literal|"Executable"
argument_list|)
expr_stmt|;
name|addDefaultElements
argument_list|()
expr_stmt|;
name|copyDefaultStructs
argument_list|()
expr_stmt|;
name|addDefaultTransforms
argument_list|()
expr_stmt|;
name|addDefaultBounds
argument_list|()
expr_stmt|;
block|}
DECL|method|Definition
name|Definition
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Struct
argument_list|>
name|structs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Struct
name|struct
range|:
name|definition
operator|.
name|structs
operator|.
name|values
argument_list|()
control|)
block|{
name|structs
operator|.
name|put
argument_list|(
name|struct
operator|.
name|name
argument_list|,
operator|new
name|Struct
argument_list|(
name|struct
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|structs
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|structs
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Struct
argument_list|>
name|classes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Struct
name|struct
range|:
name|definition
operator|.
name|classes
operator|.
name|values
argument_list|()
control|)
block|{
name|classes
operator|.
name|put
argument_list|(
name|struct
operator|.
name|clazz
argument_list|,
name|this
operator|.
name|structs
operator|.
name|get
argument_list|(
name|struct
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|classes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|transforms
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|definition
operator|.
name|transforms
argument_list|)
expr_stmt|;
name|bounds
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|definition
operator|.
name|bounds
argument_list|)
expr_stmt|;
name|voidType
operator|=
name|definition
operator|.
name|voidType
expr_stmt|;
name|booleanType
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|byteType
operator|=
name|definition
operator|.
name|byteType
expr_stmt|;
name|shortType
operator|=
name|definition
operator|.
name|shortType
expr_stmt|;
name|charType
operator|=
name|definition
operator|.
name|charType
expr_stmt|;
name|intType
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|longType
operator|=
name|definition
operator|.
name|longType
expr_stmt|;
name|floatType
operator|=
name|definition
operator|.
name|floatType
expr_stmt|;
name|doubleType
operator|=
name|definition
operator|.
name|doubleType
expr_stmt|;
name|voidobjType
operator|=
name|definition
operator|.
name|voidobjType
expr_stmt|;
name|booleanobjType
operator|=
name|definition
operator|.
name|booleanobjType
expr_stmt|;
name|byteobjType
operator|=
name|definition
operator|.
name|byteobjType
expr_stmt|;
name|shortobjType
operator|=
name|definition
operator|.
name|shortobjType
expr_stmt|;
name|charobjType
operator|=
name|definition
operator|.
name|charobjType
expr_stmt|;
name|intobjType
operator|=
name|definition
operator|.
name|intobjType
expr_stmt|;
name|longobjType
operator|=
name|definition
operator|.
name|longobjType
expr_stmt|;
name|floatobjType
operator|=
name|definition
operator|.
name|floatobjType
expr_stmt|;
name|doubleobjType
operator|=
name|definition
operator|.
name|doubleobjType
expr_stmt|;
name|objectType
operator|=
name|definition
operator|.
name|objectType
expr_stmt|;
name|defType
operator|=
name|definition
operator|.
name|defType
expr_stmt|;
name|numberType
operator|=
name|definition
operator|.
name|numberType
expr_stmt|;
name|charseqType
operator|=
name|definition
operator|.
name|charseqType
expr_stmt|;
name|stringType
operator|=
name|definition
operator|.
name|stringType
expr_stmt|;
name|mathType
operator|=
name|definition
operator|.
name|mathType
expr_stmt|;
name|utilityType
operator|=
name|definition
operator|.
name|utilityType
expr_stmt|;
name|defobjType
operator|=
name|definition
operator|.
name|defobjType
expr_stmt|;
name|listType
operator|=
name|definition
operator|.
name|listType
expr_stmt|;
name|arraylistType
operator|=
name|definition
operator|.
name|arraylistType
expr_stmt|;
name|mapType
operator|=
name|definition
operator|.
name|mapType
expr_stmt|;
name|hashmapType
operator|=
name|definition
operator|.
name|hashmapType
expr_stmt|;
name|olistType
operator|=
name|definition
operator|.
name|olistType
expr_stmt|;
name|oarraylistType
operator|=
name|definition
operator|.
name|oarraylistType
expr_stmt|;
name|omapType
operator|=
name|definition
operator|.
name|omapType
expr_stmt|;
name|ohashmapType
operator|=
name|definition
operator|.
name|ohashmapType
expr_stmt|;
name|smapType
operator|=
name|definition
operator|.
name|smapType
expr_stmt|;
name|shashmapType
operator|=
name|definition
operator|.
name|shashmapType
expr_stmt|;
name|somapType
operator|=
name|definition
operator|.
name|somapType
expr_stmt|;
name|sohashmapType
operator|=
name|definition
operator|.
name|sohashmapType
expr_stmt|;
name|execType
operator|=
name|definition
operator|.
name|execType
expr_stmt|;
block|}
DECL|method|addDefaultStructs
specifier|private
name|void
name|addDefaultStructs
parameter_list|()
block|{
name|addStruct
argument_list|(
literal|"void"
argument_list|,
name|void
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"boolean"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"byte"
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"short"
argument_list|,
name|short
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"char"
argument_list|,
name|char
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"int"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"long"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"float"
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"double"
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Void"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Boolean"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Byte"
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Short"
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Character"
argument_list|,
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Integer"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Long"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Float"
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Double"
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Object"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"def"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Number"
argument_list|,
name|Number
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"CharSequence"
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"String"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Math"
argument_list|,
name|Math
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Utility"
argument_list|,
name|Utility
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Def"
argument_list|,
name|Def
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"List"
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"ArrayList"
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Map"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"HashMap"
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"List<Object>"
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"ArrayList<Object>"
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Map<Object,Object>"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"HashMap<Object,Object>"
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Map<String,def>"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"HashMap<String,def>"
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Map<String,Object>"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"HashMap<String,Object>"
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|addStruct
argument_list|(
literal|"Executable"
argument_list|,
name|Executable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|addDefaultClasses
specifier|private
name|void
name|addDefaultClasses
parameter_list|()
block|{
name|addClass
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Boolean"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Byte"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Short"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Character"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Integer"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Long"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Float"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Double"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Object"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Number"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"CharSequence"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"String"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"ArrayList"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"Map"
argument_list|)
expr_stmt|;
name|addClass
argument_list|(
literal|"HashMap"
argument_list|)
expr_stmt|;
block|}
DECL|method|addDefaultElements
specifier|private
name|void
name|addDefaultElements
parameter_list|()
block|{
name|addMethod
argument_list|(
literal|"Object"
argument_list|,
literal|"toString"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|stringType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Object"
argument_list|,
literal|"equals"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Object"
argument_list|,
literal|"hashCode"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"def"
argument_list|,
literal|"toString"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|stringType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"def"
argument_list|,
literal|"equals"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"def"
argument_list|,
literal|"hashCode"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Boolean"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Boolean"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Boolean"
argument_list|,
literal|"booleanValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Byte"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Byte"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Byte"
argument_list|,
literal|"byteValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|byteType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Byte"
argument_list|,
literal|"MIN_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Byte"
argument_list|,
literal|"MAX_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Short"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Short"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Short"
argument_list|,
literal|"shortValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|shortType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Short"
argument_list|,
literal|"MIN_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Short"
argument_list|,
literal|"MAX_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Character"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Character"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Character"
argument_list|,
literal|"charValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Character"
argument_list|,
literal|"MIN_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Character"
argument_list|,
literal|"MAX_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Integer"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Integer"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Integer"
argument_list|,
literal|"intValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Integer"
argument_list|,
literal|"MIN_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Integer"
argument_list|,
literal|"MAX_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Long"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Long"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Long"
argument_list|,
literal|"longValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|longType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Long"
argument_list|,
literal|"MIN_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Long"
argument_list|,
literal|"MAX_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Float"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Float"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Float"
argument_list|,
literal|"floatValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|floatType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Float"
argument_list|,
literal|"MIN_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Float"
argument_list|,
literal|"MAX_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"Double"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Double"
argument_list|,
literal|"valueOf"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Double"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|doubleType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Double"
argument_list|,
literal|"MIN_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addField
argument_list|(
literal|"Double"
argument_list|,
literal|"MAX_VALUE"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Number"
argument_list|,
literal|"byteValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|byteType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Number"
argument_list|,
literal|"shortValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|shortType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Number"
argument_list|,
literal|"intValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Number"
argument_list|,
literal|"longValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|longType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Number"
argument_list|,
literal|"floatValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|floatType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Number"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|doubleType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"CharSequence"
argument_list|,
literal|"charAt"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"CharSequence"
argument_list|,
literal|"length"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"String"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"codePointAt"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"compareTo"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"concat"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|stringType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"endsWith"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"indexOf"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|,
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"isEmpty"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"replace"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|stringType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charseqType
block|,
name|charseqType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"startsWith"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"substring"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|stringType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|,
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"toCharArray"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|getType
argument_list|(
name|charType
operator|.
name|struct
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"String"
argument_list|,
literal|"trim"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|stringType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"NumberToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|numberType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanTobyte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanToshort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanToint"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanTolong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanTofloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanTodouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"booleanToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanTobyte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToshort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToint"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanTolong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanTofloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanTodouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"BooleanToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|booleanobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"byteToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"byteToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"byteToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"byteToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"byteToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"byteToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"byteToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"ByteToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"ByteTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|byteobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"shortToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"shortToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"shortToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"shortToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"shortToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"shortToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"shortToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"ShortToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"ShortTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|shortobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"charToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"charToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"charToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"charToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"charToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"charToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"charToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterTobyte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToshort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToint"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterTolong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterTofloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterTodouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToBoolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"CharacterToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|charobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"intToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"intToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"intToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"intToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"intToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"intToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"intToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"IntegerToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"IntegerTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"longToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"longToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"longToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"longToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"longToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"longToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"longToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"LongToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"LongTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|longobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"floatToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"floatToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"floatToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"floatToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"floatToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"floatToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"floatToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"FloatToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"FloatTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|floatobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"doubleToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"doubleToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"doubleToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"doubleToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"doubleToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"doubleToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"doubleToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"DoubleToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Utility"
argument_list|,
literal|"DoubleTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleobjType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Math"
argument_list|,
literal|"dmax"
argument_list|,
literal|"max"
argument_list|,
literal|true
argument_list|,
name|doubleType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|doubleType
block|,
name|doubleType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToboolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefTobyte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToshort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefTochar"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToint"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefTolong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefTofloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefTodouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToBoolean"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|booleanobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToByte"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|byteobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToShort"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|shortobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToCharacter"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|charobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToInteger"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|intobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToLong"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|longobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToFloat"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|floatobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Def"
argument_list|,
literal|"DefToDouble"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|doubleobjType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List"
argument_list|,
literal|"addLast"
argument_list|,
literal|"add"
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List"
argument_list|,
literal|"add"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|voidType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|,
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|,
name|defType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List"
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
name|defType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List"
argument_list|,
literal|"remove"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
name|defType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List"
argument_list|,
literal|"size"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List"
argument_list|,
literal|"isEmpty"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"ArrayList"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map"
argument_list|,
literal|"put"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|,
name|objectType
block|}
argument_list|,
name|defType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|,
name|defType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map"
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
name|defType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|defType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map"
argument_list|,
literal|"remove"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map"
argument_list|,
literal|"size"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map"
argument_list|,
literal|"isEmpty"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"HashMap"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,def>"
argument_list|,
literal|"put"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|,
name|objectType
block|}
argument_list|,
name|defType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|,
name|defType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,def>"
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
name|defType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,def>"
argument_list|,
literal|"remove"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
name|defType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,def>"
argument_list|,
literal|"size"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,def>"
argument_list|,
literal|"isEmpty"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"HashMap<String,def>"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List<Object>"
argument_list|,
literal|"addLast"
argument_list|,
literal|"add"
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List<Object>"
argument_list|,
literal|"add"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|voidType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|,
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List<Object>"
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List<Object>"
argument_list|,
literal|"remove"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|intType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List<Object>"
argument_list|,
literal|"size"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"List<Object>"
argument_list|,
literal|"isEmpty"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"ArrayList<Object>"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<Object,Object>"
argument_list|,
literal|"put"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|,
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<Object,Object>"
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<Object,Object>"
argument_list|,
literal|"remove"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<Object,Object>"
argument_list|,
literal|"size"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<Object,Object>"
argument_list|,
literal|"isEmpty"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"HashMap<Object,Object>"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,Object>"
argument_list|,
literal|"put"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|,
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|,
name|objectType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,Object>"
argument_list|,
literal|"get"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,Object>"
argument_list|,
literal|"remove"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|objectType
argument_list|,
operator|new
name|Type
index|[]
block|{
name|objectType
block|}
argument_list|,
literal|null
argument_list|,
operator|new
name|Type
index|[]
block|{
name|stringType
block|}
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,Object>"
argument_list|,
literal|"size"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|intType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addMethod
argument_list|(
literal|"Map<String,Object>"
argument_list|,
literal|"isEmpty"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|booleanType
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addConstructor
argument_list|(
literal|"HashMap<String,Object>"
argument_list|,
literal|"new"
argument_list|,
operator|new
name|Type
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|copyDefaultStructs
specifier|private
name|void
name|copyDefaultStructs
parameter_list|()
block|{
name|copyStruct
argument_list|(
literal|"Void"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Boolean"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Byte"
argument_list|,
literal|"Number"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Short"
argument_list|,
literal|"Number"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Character"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Integer"
argument_list|,
literal|"Number"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Long"
argument_list|,
literal|"Number"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Float"
argument_list|,
literal|"Number"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Double"
argument_list|,
literal|"Number"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Number"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"CharSequence"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"String"
argument_list|,
literal|"CharSequence"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"List"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"ArrayList"
argument_list|,
literal|"List"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Map"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"HashMap"
argument_list|,
literal|"Map"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Map<String,def>"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"HashMap<String,def>"
argument_list|,
literal|"Map<String,def>"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"List<Object>"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"ArrayList<Object>"
argument_list|,
literal|"List"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Map<Object,Object>"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"HashMap<Object,Object>"
argument_list|,
literal|"Map<Object,Object>"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Map<String,Object>"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"HashMap<String,Object>"
argument_list|,
literal|"Map<String,Object>"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
name|copyStruct
argument_list|(
literal|"Executable"
argument_list|,
literal|"Object"
argument_list|)
expr_stmt|;
block|}
DECL|method|addDefaultTransforms
specifier|private
name|void
name|addDefaultTransforms
parameter_list|()
block|{
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|byteType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanTobyte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|shortType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanToshort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|intType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanToint"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|longType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanTolong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|floatType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanTofloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|doubleType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanTodouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|objectType
argument_list|,
literal|"Boolean"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|defType
argument_list|,
literal|"Boolean"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|numberType
argument_list|,
literal|"Utility"
argument_list|,
literal|"booleanToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Boolean"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"byteToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|objectType
argument_list|,
literal|"Byte"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|defType
argument_list|,
literal|"Byte"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|numberType
argument_list|,
literal|"Byte"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|byteobjType
argument_list|,
literal|"Byte"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"byteToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"byteToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"byteToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"byteToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"byteToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"byteToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"shortToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|objectType
argument_list|,
literal|"Short"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|defType
argument_list|,
literal|"Short"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|numberType
argument_list|,
literal|"Short"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"shortToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|shortobjType
argument_list|,
literal|"Short"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"shortToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"shortToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"shortToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"shortToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"shortToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|objectType
argument_list|,
literal|"Character"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|defType
argument_list|,
literal|"Character"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|numberType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|charobjType
argument_list|,
literal|"Character"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"charToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"intToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|objectType
argument_list|,
literal|"Integer"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|defType
argument_list|,
literal|"Integer"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|numberType
argument_list|,
literal|"Integer"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"intToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"intToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"intToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|intobjType
argument_list|,
literal|"Integer"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"intToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"intToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"intToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"longToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|objectType
argument_list|,
literal|"Long"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|defType
argument_list|,
literal|"Long"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|numberType
argument_list|,
literal|"Long"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"longToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"longToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"longToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"longToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|longobjType
argument_list|,
literal|"Long"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"longToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"longToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"floatToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|objectType
argument_list|,
literal|"Float"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|defType
argument_list|,
literal|"Float"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|numberType
argument_list|,
literal|"Float"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"floatToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"floatToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"floatToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"floatToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"floatToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|floatobjType
argument_list|,
literal|"Float"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"floatToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"doubleToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|objectType
argument_list|,
literal|"Double"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|defType
argument_list|,
literal|"Double"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|numberType
argument_list|,
literal|"Double"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"doubleToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"doubleToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"doubleToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"doubleToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"doubleToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"doubleToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Double"
argument_list|,
literal|"valueOf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|booleanType
argument_list|,
literal|"Boolean"
argument_list|,
literal|"booleanValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|byteType
argument_list|,
literal|"Number"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|shortType
argument_list|,
literal|"Number"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|charType
argument_list|,
literal|"Character"
argument_list|,
literal|"charValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|intType
argument_list|,
literal|"Number"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|longType
argument_list|,
literal|"Number"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|floatType
argument_list|,
literal|"Number"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|objectType
argument_list|,
name|doubleType
argument_list|,
literal|"Number"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|booleanType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|byteType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefTobyte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|shortType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToshort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|charType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|intType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToint"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|longType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefTolong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|floatType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefTofloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|doubleType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefTodouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|byteobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|shortobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|charobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|intobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|longobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|floatobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|defType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Def"
argument_list|,
literal|"DefToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|byteType
argument_list|,
literal|"Number"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|shortType
argument_list|,
literal|"Number"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|intType
argument_list|,
literal|"Number"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|longType
argument_list|,
literal|"Number"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|floatType
argument_list|,
literal|"Number"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|doubleType
argument_list|,
literal|"Number"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|numberType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Boolean"
argument_list|,
literal|"booleanValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|byteType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanTobyte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|shortType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToshort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|intType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToint"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|longType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanTolong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|floatType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanTofloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanTodouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|numberType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|booleanobjType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"BooleanToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"ByteToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|byteType
argument_list|,
literal|"Byte"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|shortType
argument_list|,
literal|"Byte"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"ByteTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|intType
argument_list|,
literal|"Byte"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|longType
argument_list|,
literal|"Byte"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|floatType
argument_list|,
literal|"Byte"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Byte"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|byteobjType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"ShortToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|byteType
argument_list|,
literal|"Short"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|shortType
argument_list|,
literal|"Short"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"ShortTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|intType
argument_list|,
literal|"Short"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|longType
argument_list|,
literal|"Short"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|floatType
argument_list|,
literal|"Short"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Short"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|shortobjType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|byteType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterTobyte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|shortType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToshort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|charType
argument_list|,
literal|"Character"
argument_list|,
literal|"charValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|intType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToint"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|longType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterTolong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|floatType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterTofloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterTodouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|charobjType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"CharacterToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"IntegerToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|byteType
argument_list|,
literal|"Integer"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|shortType
argument_list|,
literal|"Integer"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"IntegerTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|intType
argument_list|,
literal|"Integer"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|longType
argument_list|,
literal|"Integer"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|floatType
argument_list|,
literal|"Integer"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Integer"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|intobjType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"LongToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|byteType
argument_list|,
literal|"Long"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|shortType
argument_list|,
literal|"Long"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"LongTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|intType
argument_list|,
literal|"Long"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|longType
argument_list|,
literal|"Long"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|floatType
argument_list|,
literal|"Long"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Long"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|longobjType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"FloatToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|byteType
argument_list|,
literal|"Float"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|shortType
argument_list|,
literal|"Float"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"FloatTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|intType
argument_list|,
literal|"Float"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|longType
argument_list|,
literal|"Float"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|floatType
argument_list|,
literal|"Float"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Float"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|floatobjType
argument_list|,
name|doubleobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToDouble"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|booleanType
argument_list|,
literal|"Utility"
argument_list|,
literal|"DoubleToboolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|byteType
argument_list|,
literal|"Double"
argument_list|,
literal|"byteValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|shortType
argument_list|,
literal|"Double"
argument_list|,
literal|"shortValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|charType
argument_list|,
literal|"Utility"
argument_list|,
literal|"DoubleTochar"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|intType
argument_list|,
literal|"Double"
argument_list|,
literal|"intValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|longType
argument_list|,
literal|"Double"
argument_list|,
literal|"longValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|floatType
argument_list|,
literal|"Double"
argument_list|,
literal|"floatValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|doubleType
argument_list|,
literal|"Double"
argument_list|,
literal|"doubleValue"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|booleanobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|byteobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToByte"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|shortobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToShort"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|charobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToCharacter"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|intobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToInteger"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|longobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToLong"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addTransform
argument_list|(
name|doubleobjType
argument_list|,
name|floatobjType
argument_list|,
literal|"Utility"
argument_list|,
literal|"NumberToFloat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|addDefaultBounds
specifier|private
name|void
name|addDefaultBounds
parameter_list|()
block|{
name|addBound
argument_list|(
name|byteobjType
argument_list|,
name|numberType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|shortobjType
argument_list|,
name|numberType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|shortobjType
argument_list|,
name|byteobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|intobjType
argument_list|,
name|numberType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|intobjType
argument_list|,
name|byteobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|intobjType
argument_list|,
name|shortobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|longobjType
argument_list|,
name|numberType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|longobjType
argument_list|,
name|byteobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|longobjType
argument_list|,
name|shortobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|longobjType
argument_list|,
name|intobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|floatobjType
argument_list|,
name|numberType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|floatobjType
argument_list|,
name|byteobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|floatobjType
argument_list|,
name|shortobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|floatobjType
argument_list|,
name|intobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|floatobjType
argument_list|,
name|longobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|doubleobjType
argument_list|,
name|numberType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|doubleobjType
argument_list|,
name|byteobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|doubleobjType
argument_list|,
name|shortobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|doubleobjType
argument_list|,
name|intobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|doubleobjType
argument_list|,
name|longobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|doubleobjType
argument_list|,
name|floatobjType
argument_list|,
name|numberType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|stringType
argument_list|,
name|charseqType
argument_list|,
name|charseqType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|arraylistType
argument_list|,
name|listType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|olistType
argument_list|,
name|listType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|olistType
argument_list|,
name|arraylistType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|oarraylistType
argument_list|,
name|listType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|oarraylistType
argument_list|,
name|olistType
argument_list|,
name|olistType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|oarraylistType
argument_list|,
name|arraylistType
argument_list|,
name|arraylistType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|hashmapType
argument_list|,
name|mapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|omapType
argument_list|,
name|mapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|omapType
argument_list|,
name|hashmapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|ohashmapType
argument_list|,
name|mapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|ohashmapType
argument_list|,
name|hashmapType
argument_list|,
name|hashmapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|ohashmapType
argument_list|,
name|omapType
argument_list|,
name|omapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|smapType
argument_list|,
name|mapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|smapType
argument_list|,
name|hashmapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|smapType
argument_list|,
name|omapType
argument_list|,
name|omapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|smapType
argument_list|,
name|ohashmapType
argument_list|,
name|omapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|shashmapType
argument_list|,
name|mapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|shashmapType
argument_list|,
name|hashmapType
argument_list|,
name|hashmapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|shashmapType
argument_list|,
name|omapType
argument_list|,
name|omapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|shashmapType
argument_list|,
name|ohashmapType
argument_list|,
name|ohashmapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|shashmapType
argument_list|,
name|smapType
argument_list|,
name|smapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|somapType
argument_list|,
name|mapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|somapType
argument_list|,
name|hashmapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|somapType
argument_list|,
name|omapType
argument_list|,
name|omapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|somapType
argument_list|,
name|ohashmapType
argument_list|,
name|omapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|somapType
argument_list|,
name|smapType
argument_list|,
name|smapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|somapType
argument_list|,
name|shashmapType
argument_list|,
name|smapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|sohashmapType
argument_list|,
name|mapType
argument_list|,
name|mapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|sohashmapType
argument_list|,
name|hashmapType
argument_list|,
name|hashmapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|sohashmapType
argument_list|,
name|omapType
argument_list|,
name|omapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|sohashmapType
argument_list|,
name|ohashmapType
argument_list|,
name|ohashmapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|sohashmapType
argument_list|,
name|smapType
argument_list|,
name|smapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|sohashmapType
argument_list|,
name|shashmapType
argument_list|,
name|shashmapType
argument_list|)
expr_stmt|;
name|addBound
argument_list|(
name|sohashmapType
argument_list|,
name|somapType
argument_list|,
name|somapType
argument_list|)
expr_stmt|;
block|}
DECL|method|addStruct
specifier|public
specifier|final
name|void
name|addStruct
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|matches
argument_list|(
literal|"^[_a-zA-Z][<>,_a-zA-Z0-9]*$"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid struct name ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|structs
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate struct name ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Struct
name|struct
init|=
operator|new
name|Struct
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|,
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
operator|.
name|getType
argument_list|(
name|clazz
argument_list|)
argument_list|)
decl_stmt|;
name|structs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|struct
argument_list|)
expr_stmt|;
block|}
DECL|method|addClass
specifier|public
specifier|final
name|void
name|addClass
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Struct
name|struct
init|=
name|structs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|struct
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Struct ["
operator|+
name|name
operator|+
literal|"] is not defined."
argument_list|)
throw|;
block|}
if|if
condition|(
name|classes
operator|.
name|containsKey
argument_list|(
name|struct
operator|.
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate struct class ["
operator|+
name|struct
operator|.
name|clazz
operator|+
literal|"] when defining dynamic."
argument_list|)
throw|;
block|}
name|classes
operator|.
name|put
argument_list|(
name|struct
operator|.
name|clazz
argument_list|,
name|struct
argument_list|)
expr_stmt|;
block|}
DECL|method|addConstructor
specifier|public
specifier|final
name|void
name|addConstructor
parameter_list|(
specifier|final
name|String
name|struct
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Type
index|[]
name|args
parameter_list|,
specifier|final
name|Type
index|[]
name|genargs
parameter_list|)
block|{
specifier|final
name|Struct
name|owner
init|=
name|structs
operator|.
name|get
argument_list|(
name|struct
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Owner struct ["
operator|+
name|struct
operator|+
literal|"] not defined for constructor ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|matches
argument_list|(
literal|"^[_a-zA-Z][_a-zA-Z0-9]*$"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid constructor name ["
operator|+
name|name
operator|+
literal|"] with the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|owner
operator|.
name|constructors
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate constructor name ["
operator|+
name|name
operator|+
literal|"] found within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|owner
operator|.
name|statics
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Constructors and functions may not have the same name"
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] within the same struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|owner
operator|.
name|methods
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Constructors and methods may not have the same name"
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] within the same struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Class
index|[]
name|classes
init|=
operator|new
name|Class
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|classes
operator|.
name|length
condition|;
operator|++
name|count
control|)
block|{
if|if
condition|(
name|genargs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|genargs
index|[
name|count
index|]
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|args
index|[
name|count
index|]
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Generic argument ["
operator|+
name|genargs
index|[
name|count
index|]
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" is not a sub class of ["
operator|+
name|args
index|[
name|count
index|]
operator|.
name|name
operator|+
literal|"] in the constructor"
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|" ] from the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
name|classes
index|[
name|count
index|]
operator|=
name|args
index|[
name|count
index|]
operator|.
name|clazz
expr_stmt|;
block|}
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
argument_list|<
name|?
argument_list|>
name|reflect
decl_stmt|;
try|try
block|{
name|reflect
operator|=
name|owner
operator|.
name|clazz
operator|.
name|getConstructor
argument_list|(
name|classes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Constructor ["
operator|+
name|name
operator|+
literal|"] not found for class"
operator|+
literal|" ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"] with arguments "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|classes
argument_list|)
operator|+
literal|"."
argument_list|)
throw|;
block|}
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|asm
init|=
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
operator|.
name|getMethod
argument_list|(
name|reflect
argument_list|)
decl_stmt|;
specifier|final
name|Constructor
name|constructor
init|=
operator|new
name|Constructor
argument_list|(
name|name
argument_list|,
name|owner
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|genargs
operator|!=
literal|null
condition|?
name|genargs
else|:
name|args
argument_list|)
argument_list|,
name|asm
argument_list|,
name|reflect
argument_list|)
decl_stmt|;
name|owner
operator|.
name|constructors
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|constructor
argument_list|)
expr_stmt|;
block|}
DECL|method|addMethod
specifier|public
specifier|final
name|void
name|addMethod
parameter_list|(
specifier|final
name|String
name|struct
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|alias
parameter_list|,
specifier|final
name|boolean
name|statik
parameter_list|,
specifier|final
name|Type
name|rtn
parameter_list|,
specifier|final
name|Type
index|[]
name|args
parameter_list|,
specifier|final
name|Type
name|genrtn
parameter_list|,
specifier|final
name|Type
index|[]
name|genargs
parameter_list|)
block|{
specifier|final
name|Struct
name|owner
init|=
name|structs
operator|.
name|get
argument_list|(
name|struct
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Owner struct ["
operator|+
name|struct
operator|+
literal|"] not defined"
operator|+
literal|" for "
operator|+
operator|(
name|statik
condition|?
literal|"function"
else|:
literal|"method"
operator|)
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|matches
argument_list|(
literal|"^[_a-zA-Z][_a-zA-Z0-9]*$"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid "
operator|+
operator|(
name|statik
condition|?
literal|"function"
else|:
literal|"method"
operator|)
operator|+
literal|" name ["
operator|+
name|name
operator|+
literal|"] with the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|owner
operator|.
name|constructors
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Constructors and "
operator|+
operator|(
name|statik
condition|?
literal|"functions"
else|:
literal|"methods"
operator|)
operator|+
literal|" may not have the same name ["
operator|+
name|name
operator|+
literal|"] within the same struct"
operator|+
literal|" ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|owner
operator|.
name|statics
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|statik
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate function name ["
operator|+
name|name
operator|+
literal|"] found within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Functions and methods may not have the same name"
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] within the same struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|owner
operator|.
name|methods
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|statik
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Functions and methods may not have the same name"
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] within the same struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate method name ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" found within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|genrtn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|genrtn
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|rtn
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Generic return ["
operator|+
name|genrtn
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" is not a sub class of ["
operator|+
name|rtn
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"] in the method"
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|" ] from the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|genargs
operator|!=
literal|null
operator|&&
name|genargs
operator|.
name|length
operator|!=
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Generic arguments arity ["
operator|+
name|genargs
operator|.
name|length
operator|+
literal|"] is not the same as "
operator|+
operator|(
name|statik
condition|?
literal|"function"
else|:
literal|"method"
operator|)
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"] arguments arity"
operator|+
literal|" ["
operator|+
name|args
operator|.
name|length
operator|+
literal|"] within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Class
index|[]
name|classes
init|=
operator|new
name|Class
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|classes
operator|.
name|length
condition|;
operator|++
name|count
control|)
block|{
if|if
condition|(
name|genargs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|genargs
index|[
name|count
index|]
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|args
index|[
name|count
index|]
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Generic argument ["
operator|+
name|genargs
index|[
name|count
index|]
operator|.
name|name
operator|+
literal|"] is not a sub class"
operator|+
literal|" of ["
operator|+
name|args
index|[
name|count
index|]
operator|.
name|name
operator|+
literal|"] in the "
operator|+
operator|(
name|statik
condition|?
literal|"function"
else|:
literal|"method"
operator|)
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|" ] from the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
name|classes
index|[
name|count
index|]
operator|=
name|args
index|[
name|count
index|]
operator|.
name|clazz
expr_stmt|;
block|}
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|reflect
decl_stmt|;
try|try
block|{
name|reflect
operator|=
name|owner
operator|.
name|clazz
operator|.
name|getMethod
argument_list|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
operator|(
name|statik
condition|?
literal|"Function"
else|:
literal|"Method"
operator|)
operator|+
literal|" ["
operator|+
operator|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
operator|)
operator|+
literal|"] not found for class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" with arguments "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|classes
argument_list|)
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|reflect
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|rtn
operator|.
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Specified return type class ["
operator|+
name|rtn
operator|.
name|clazz
operator|+
literal|"]"
operator|+
literal|" does not match the found return type class ["
operator|+
name|reflect
operator|.
name|getReturnType
argument_list|()
operator|+
literal|"] for the "
operator|+
operator|(
name|statik
condition|?
literal|"function"
else|:
literal|"method"
operator|)
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
name|asm
init|=
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|commons
operator|.
name|Method
operator|.
name|getMethod
argument_list|(
name|reflect
argument_list|)
decl_stmt|;
name|MethodHandle
name|handle
decl_stmt|;
try|try
block|{
if|if
condition|(
name|statik
condition|)
block|{
name|handle
operator|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
operator|.
name|in
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
operator|.
name|findStatic
argument_list|(
name|owner
operator|.
name|clazz
argument_list|,
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|rtn
operator|.
name|clazz
argument_list|,
name|classes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handle
operator|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
operator|.
name|in
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
operator|.
name|findVirtual
argument_list|(
name|owner
operator|.
name|clazz
argument_list|,
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|rtn
operator|.
name|clazz
argument_list|,
name|classes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method ["
operator|+
operator|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
operator|)
operator|+
literal|"]"
operator|+
literal|" not found for class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" with arguments "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|classes
argument_list|)
operator|+
literal|"."
argument_list|)
throw|;
block|}
specifier|final
name|Method
name|method
init|=
operator|new
name|Method
argument_list|(
name|name
argument_list|,
name|owner
argument_list|,
name|genrtn
operator|!=
literal|null
condition|?
name|genrtn
else|:
name|rtn
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|genargs
operator|!=
literal|null
condition|?
name|genargs
else|:
name|args
argument_list|)
argument_list|,
name|asm
argument_list|,
name|reflect
argument_list|,
name|handle
argument_list|)
decl_stmt|;
specifier|final
name|int
name|modifiers
init|=
name|reflect
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|statik
condition|)
block|{
if|if
condition|(
operator|!
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Function ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"] is not linked to a static Java method."
argument_list|)
throw|;
block|}
name|owner
operator|.
name|functions
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"] is not linked to a non-static Java method."
argument_list|)
throw|;
block|}
name|owner
operator|.
name|methods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addField
specifier|public
specifier|final
name|void
name|addField
parameter_list|(
specifier|final
name|String
name|struct
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|alias
parameter_list|,
specifier|final
name|boolean
name|statik
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|Type
name|generic
parameter_list|)
block|{
specifier|final
name|Struct
name|owner
init|=
name|structs
operator|.
name|get
argument_list|(
name|struct
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Owner struct ["
operator|+
name|struct
operator|+
literal|"] not defined for "
operator|+
operator|(
name|statik
condition|?
literal|"static"
else|:
literal|"member"
operator|)
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|matches
argument_list|(
literal|"^[_a-zA-Z][_a-zA-Z0-9]*$"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid "
operator|+
operator|(
name|statik
condition|?
literal|"static"
else|:
literal|"member"
operator|)
operator|+
literal|" name ["
operator|+
name|name
operator|+
literal|"] with the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|owner
operator|.
name|statics
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|statik
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate static name ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" found within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Statics and members may not have the same name "
operator|+
literal|"["
operator|+
name|name
operator|+
literal|"] within the same struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|owner
operator|.
name|members
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|statik
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Statics and members may not have the same name "
operator|+
literal|"["
operator|+
name|name
operator|+
literal|"] within the same struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate member name ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" found within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|generic
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|generic
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|type
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Generic type ["
operator|+
name|generic
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" is not a sub class of ["
operator|+
name|type
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"] for the field"
operator|+
literal|" ["
operator|+
name|name
operator|+
literal|" ] from the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|reflect
decl_stmt|;
try|try
block|{
name|reflect
operator|=
name|owner
operator|.
name|clazz
operator|.
name|getField
argument_list|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
operator|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
operator|)
operator|+
literal|"]"
operator|+
literal|" not found for class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|MethodHandle
name|getter
init|=
literal|null
decl_stmt|;
name|MethodHandle
name|setter
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|statik
condition|)
block|{
name|getter
operator|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
operator|.
name|in
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
operator|.
name|findGetter
argument_list|(
name|owner
operator|.
name|clazz
argument_list|,
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|,
name|type
operator|.
name|clazz
argument_list|)
expr_stmt|;
name|setter
operator|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
operator|.
name|in
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
operator|.
name|findSetter
argument_list|(
name|owner
operator|.
name|clazz
argument_list|,
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|,
name|type
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
decl||
name|IllegalAccessException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Getter/Setter ["
operator|+
operator|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
operator|)
operator|+
literal|"]"
operator|+
literal|" not found for class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|owner
argument_list|,
name|generic
operator|==
literal|null
condition|?
name|type
else|:
name|generic
argument_list|,
name|type
argument_list|,
name|reflect
argument_list|,
name|getter
argument_list|,
name|setter
argument_list|)
decl_stmt|;
specifier|final
name|int
name|modifiers
init|=
name|reflect
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|statik
condition|)
block|{
if|if
condition|(
operator|!
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isFinal
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Static ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"] is not linked to static Java field."
argument_list|)
throw|;
block|}
name|owner
operator|.
name|statics
operator|.
name|put
argument_list|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Member ["
operator|+
name|name
operator|+
literal|"]"
operator|+
literal|" within the struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"] is not linked to non-static Java field."
argument_list|)
throw|;
block|}
name|owner
operator|.
name|members
operator|.
name|put
argument_list|(
name|alias
operator|==
literal|null
condition|?
name|name
else|:
name|alias
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copyStruct
specifier|public
specifier|final
name|void
name|copyStruct
parameter_list|(
specifier|final
name|String
name|struct
parameter_list|,
specifier|final
name|String
modifier|...
name|children
parameter_list|)
block|{
specifier|final
name|Struct
name|owner
init|=
name|structs
operator|.
name|get
argument_list|(
name|struct
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Owner struct ["
operator|+
name|struct
operator|+
literal|"] not defined for copy."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|children
operator|.
name|length
condition|;
operator|++
name|count
control|)
block|{
specifier|final
name|Struct
name|child
init|=
name|structs
operator|.
name|get
argument_list|(
name|children
index|[
name|count
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|struct
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Child struct ["
operator|+
name|children
index|[
name|count
index|]
operator|+
literal|"]"
operator|+
literal|" not defined for copy to owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
try|try
block|{
name|owner
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|child
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Child struct ["
operator|+
name|child
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" is not a super type of owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"] in copy."
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|object
init|=
name|child
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|&&
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isInterface
argument_list|(
name|owner
operator|.
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|method
range|:
name|child
operator|.
name|methods
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|owner
operator|.
name|methods
operator|.
name|get
argument_list|(
name|method
operator|.
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|object
condition|?
name|Object
operator|.
name|class
else|:
name|owner
operator|.
name|clazz
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|reflect
decl_stmt|;
name|MethodHandle
name|handle
decl_stmt|;
try|try
block|{
name|reflect
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|reflect
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method ["
operator|+
name|method
operator|.
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"] not found for"
operator|+
literal|" class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"] with arguments "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|method
operator|.
name|reflect
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|+
literal|"."
argument_list|)
throw|;
block|}
try|try
block|{
name|handle
operator|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
operator|.
name|in
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
operator|.
name|findVirtual
argument_list|(
name|owner
operator|.
name|clazz
argument_list|,
name|method
operator|.
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|method
operator|.
name|reflect
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|method
operator|.
name|reflect
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method ["
operator|+
name|method
operator|.
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"] not found for"
operator|+
literal|" class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"] with arguments "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|method
operator|.
name|reflect
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|owner
operator|.
name|methods
operator|.
name|put
argument_list|(
name|method
operator|.
name|name
argument_list|,
operator|new
name|Method
argument_list|(
name|method
operator|.
name|name
argument_list|,
name|owner
argument_list|,
name|method
operator|.
name|rtn
argument_list|,
name|method
operator|.
name|arguments
argument_list|,
name|method
operator|.
name|method
argument_list|,
name|reflect
argument_list|,
name|handle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|child
operator|.
name|members
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|owner
operator|.
name|members
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|reflect
decl_stmt|;
name|MethodHandle
name|getter
decl_stmt|;
name|MethodHandle
name|setter
decl_stmt|;
try|try
block|{
name|reflect
operator|=
name|owner
operator|.
name|clazz
operator|.
name|getField
argument_list|(
name|field
operator|.
name|reflect
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field ["
operator|+
name|field
operator|.
name|reflect
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" not found for class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
try|try
block|{
name|getter
operator|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
operator|.
name|in
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
operator|.
name|findGetter
argument_list|(
name|owner
operator|.
name|clazz
argument_list|,
name|field
operator|.
name|name
argument_list|,
name|field
operator|.
name|type
operator|.
name|clazz
argument_list|)
expr_stmt|;
name|setter
operator|=
name|MethodHandles
operator|.
name|publicLookup
argument_list|()
operator|.
name|in
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
operator|.
name|findSetter
argument_list|(
name|owner
operator|.
name|clazz
argument_list|,
name|field
operator|.
name|name
argument_list|,
name|field
operator|.
name|type
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
decl||
name|IllegalAccessException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Getter/Setter ["
operator|+
name|field
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" not found for class ["
operator|+
name|owner
operator|.
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|owner
operator|.
name|members
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|,
operator|new
name|Field
argument_list|(
name|field
operator|.
name|name
argument_list|,
name|owner
argument_list|,
name|field
operator|.
name|type
argument_list|,
name|field
operator|.
name|generic
argument_list|,
name|reflect
argument_list|,
name|getter
argument_list|,
name|setter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addTransform
specifier|public
specifier|final
name|void
name|addTransform
parameter_list|(
specifier|final
name|Type
name|from
parameter_list|,
specifier|final
name|Type
name|to
parameter_list|,
specifier|final
name|String
name|struct
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|statik
parameter_list|)
block|{
specifier|final
name|Struct
name|owner
init|=
name|structs
operator|.
name|get
argument_list|(
name|struct
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Owner struct ["
operator|+
name|struct
operator|+
literal|"] not defined for"
operator|+
literal|" transform with cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] and cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"] cannot"
operator|+
literal|" have cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] be the same as cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Cast
name|cast
init|=
operator|new
name|Cast
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|transforms
operator|.
name|containsKey
argument_list|(
name|cast
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] already defined."
argument_list|)
throw|;
block|}
name|Method
name|method
decl_stmt|;
name|Type
name|upcast
init|=
literal|null
decl_stmt|;
name|Type
name|downcast
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|statik
condition|)
block|{
name|method
operator|=
name|owner
operator|.
name|functions
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] using a function ["
operator|+
name|name
operator|+
literal|"] that is not defined."
argument_list|)
throw|;
block|}
if|if
condition|(
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] using function ["
operator|+
name|name
operator|+
literal|"] does not have a single type argument."
argument_list|)
throw|;
block|}
name|Type
name|argument
init|=
name|method
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|from
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|argument
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce0
parameter_list|)
block|{
try|try
block|{
name|argument
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|from
operator|.
name|clazz
argument_list|)
expr_stmt|;
name|upcast
operator|=
name|argument
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] using"
operator|+
literal|" function ["
operator|+
name|name
operator|+
literal|"] cannot cast from type to the function input argument type."
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Type
name|rtn
init|=
name|method
operator|.
name|rtn
decl_stmt|;
try|try
block|{
name|rtn
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|to
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce0
parameter_list|)
block|{
try|try
block|{
name|to
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|rtn
operator|.
name|clazz
argument_list|)
expr_stmt|;
name|downcast
operator|=
name|to
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] using"
operator|+
literal|" function ["
operator|+
name|name
operator|+
literal|"] cannot cast to type to the function return argument type."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|method
operator|=
name|owner
operator|.
name|methods
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] using a method ["
operator|+
name|name
operator|+
literal|"] that is not defined."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|method
operator|.
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] using method ["
operator|+
name|name
operator|+
literal|"] does not have a single type argument."
argument_list|)
throw|;
block|}
try|try
block|{
name|from
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|owner
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce0
parameter_list|)
block|{
try|try
block|{
name|owner
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|from
operator|.
name|clazz
argument_list|)
expr_stmt|;
name|upcast
operator|=
name|getType
argument_list|(
name|owner
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"] using"
operator|+
literal|" method ["
operator|+
name|name
operator|+
literal|"] cannot cast from type to the method input argument type."
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Type
name|rtn
init|=
name|method
operator|.
name|rtn
decl_stmt|;
try|try
block|{
name|rtn
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|to
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce0
parameter_list|)
block|{
try|try
block|{
name|to
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|rtn
operator|.
name|clazz
argument_list|)
expr_stmt|;
name|downcast
operator|=
name|to
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Transform with owner struct ["
operator|+
name|owner
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" and cast type from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to cast type to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"]"
operator|+
literal|" using method ["
operator|+
name|name
operator|+
literal|"] cannot cast to type to the method return argument type."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|Transform
name|transform
init|=
operator|new
name|Transform
argument_list|(
name|cast
argument_list|,
name|method
argument_list|,
name|upcast
argument_list|,
name|downcast
argument_list|)
decl_stmt|;
name|transforms
operator|.
name|put
argument_list|(
name|cast
argument_list|,
name|transform
argument_list|)
expr_stmt|;
block|}
DECL|method|addBound
specifier|public
specifier|final
name|void
name|addBound
parameter_list|(
specifier|final
name|Type
name|type0
parameter_list|,
specifier|final
name|Type
name|type1
parameter_list|,
specifier|final
name|Type
name|bound
parameter_list|)
block|{
specifier|final
name|Pair
name|pair0
init|=
operator|new
name|Pair
argument_list|(
name|type0
argument_list|,
name|type1
argument_list|)
decl_stmt|;
specifier|final
name|Pair
name|pair1
init|=
operator|new
name|Pair
argument_list|(
name|type1
argument_list|,
name|type0
argument_list|)
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|containsKey
argument_list|(
name|pair0
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bound already defined for types ["
operator|+
name|type0
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|type1
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|bounds
operator|.
name|containsKey
argument_list|(
name|pair1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bound already defined for types ["
operator|+
name|type1
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|type0
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|bounds
operator|.
name|put
argument_list|(
name|pair0
argument_list|,
name|bound
argument_list|)
expr_stmt|;
name|bounds
operator|.
name|put
argument_list|(
name|pair1
argument_list|,
name|bound
argument_list|)
expr_stmt|;
block|}
DECL|method|getType
name|Type
name|getType
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|int
name|dimensions
init|=
name|getDimensions
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|String
name|structstr
init|=
name|dimensions
operator|==
literal|0
condition|?
name|name
else|:
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Struct
name|struct
init|=
name|structs
operator|.
name|get
argument_list|(
name|structstr
argument_list|)
decl_stmt|;
if|if
condition|(
name|struct
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The struct with name ["
operator|+
name|name
operator|+
literal|"] has not been defined."
argument_list|)
throw|;
block|}
return|return
name|getType
argument_list|(
name|struct
argument_list|,
name|dimensions
argument_list|)
return|;
block|}
DECL|method|getType
name|Type
name|getType
parameter_list|(
specifier|final
name|Struct
name|struct
parameter_list|,
specifier|final
name|int
name|dimensions
parameter_list|)
block|{
name|String
name|name
init|=
name|struct
operator|.
name|name
decl_stmt|;
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
name|type
init|=
name|struct
operator|.
name|type
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|struct
operator|.
name|clazz
decl_stmt|;
name|Sort
name|sort
decl_stmt|;
if|if
condition|(
name|dimensions
operator|>
literal|0
condition|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|char
index|[]
name|brackets
init|=
operator|new
name|char
index|[
name|dimensions
index|]
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|dimensions
condition|;
operator|++
name|count
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"[]"
argument_list|)
expr_stmt|;
name|brackets
index|[
name|count
index|]
operator|=
literal|'['
expr_stmt|;
block|}
specifier|final
name|String
name|descriptor
init|=
operator|new
name|String
argument_list|(
name|brackets
argument_list|)
operator|+
name|struct
operator|.
name|type
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|name
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|type
operator|=
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
operator|.
name|getType
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|type
operator|.
name|getInternalName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The class ["
operator|+
name|type
operator|.
name|getInternalName
argument_list|()
operator|+
literal|"]"
operator|+
literal|" could not be found to create type ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|sort
operator|=
name|Sort
operator|.
name|ARRAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"def"
operator|.
name|equals
argument_list|(
name|struct
operator|.
name|name
argument_list|)
condition|)
block|{
name|sort
operator|=
name|Sort
operator|.
name|DEF
expr_stmt|;
block|}
else|else
block|{
name|sort
operator|=
name|Sort
operator|.
name|OBJECT
expr_stmt|;
for|for
control|(
name|Sort
name|value
range|:
name|Sort
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|clazz
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|value
operator|.
name|clazz
operator|.
name|equals
argument_list|(
name|struct
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|sort
operator|=
name|value
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
operator|new
name|Type
argument_list|(
name|name
argument_list|,
name|struct
argument_list|,
name|clazz
argument_list|,
name|type
argument_list|,
name|sort
argument_list|)
return|;
block|}
DECL|method|getDimensions
specifier|private
name|int
name|getDimensions
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|int
name|dimensions
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|int
name|length
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|length
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|'['
operator|&&
operator|++
name|index
operator|<
name|length
operator|&&
name|name
operator|.
name|charAt
argument_list|(
name|index
operator|++
argument_list|)
operator|==
literal|']'
condition|)
block|{
operator|++
name|dimensions
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid array braces in canonical name ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|dimensions
return|;
block|}
block|}
end_class

end_unit

