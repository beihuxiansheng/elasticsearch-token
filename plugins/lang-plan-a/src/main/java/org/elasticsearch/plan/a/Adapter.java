begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plan.a
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|tree
operator|.
name|ParseTree
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
operator|.
name|Definition
operator|.
name|Cast
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
operator|.
name|Definition
operator|.
name|Type
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
operator|.
name|PlanAParser
operator|.
name|ExpressionContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
operator|.
name|PlanAParser
operator|.
name|PrecedenceContext
import|;
end_import

begin_class
DECL|class|Adapter
class|class
name|Adapter
block|{
DECL|class|StatementMetadata
specifier|static
class|class
name|StatementMetadata
block|{
DECL|field|source
specifier|final
name|ParserRuleContext
name|source
decl_stmt|;
DECL|field|last
name|boolean
name|last
decl_stmt|;
DECL|field|allExit
name|boolean
name|allExit
decl_stmt|;
DECL|field|allReturn
name|boolean
name|allReturn
decl_stmt|;
DECL|field|anyReturn
name|boolean
name|anyReturn
decl_stmt|;
DECL|field|allBreak
name|boolean
name|allBreak
decl_stmt|;
DECL|field|anyBreak
name|boolean
name|anyBreak
decl_stmt|;
DECL|field|allContinue
name|boolean
name|allContinue
decl_stmt|;
DECL|field|anyContinue
name|boolean
name|anyContinue
decl_stmt|;
DECL|method|StatementMetadata
specifier|private
name|StatementMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|last
operator|=
literal|false
expr_stmt|;
name|allExit
operator|=
literal|false
expr_stmt|;
name|allReturn
operator|=
literal|false
expr_stmt|;
name|anyReturn
operator|=
literal|false
expr_stmt|;
name|allBreak
operator|=
literal|false
expr_stmt|;
name|anyBreak
operator|=
literal|false
expr_stmt|;
name|allContinue
operator|=
literal|false
expr_stmt|;
name|anyContinue
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|class|ExpressionMetadata
specifier|static
class|class
name|ExpressionMetadata
block|{
DECL|field|source
specifier|final
name|ParserRuleContext
name|source
decl_stmt|;
DECL|field|read
name|boolean
name|read
decl_stmt|;
DECL|field|statement
name|boolean
name|statement
decl_stmt|;
DECL|field|preConst
name|Object
name|preConst
decl_stmt|;
DECL|field|postConst
name|Object
name|postConst
decl_stmt|;
DECL|field|isNull
name|boolean
name|isNull
decl_stmt|;
DECL|field|to
name|Type
name|to
decl_stmt|;
DECL|field|from
name|Type
name|from
decl_stmt|;
DECL|field|explicit
name|boolean
name|explicit
decl_stmt|;
DECL|field|typesafe
name|boolean
name|typesafe
decl_stmt|;
DECL|field|cast
name|Cast
name|cast
decl_stmt|;
DECL|method|ExpressionMetadata
specifier|private
name|ExpressionMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|read
operator|=
literal|true
expr_stmt|;
name|statement
operator|=
literal|false
expr_stmt|;
name|preConst
operator|=
literal|null
expr_stmt|;
name|postConst
operator|=
literal|null
expr_stmt|;
name|isNull
operator|=
literal|false
expr_stmt|;
name|to
operator|=
literal|null
expr_stmt|;
name|from
operator|=
literal|null
expr_stmt|;
name|explicit
operator|=
literal|false
expr_stmt|;
name|typesafe
operator|=
literal|true
expr_stmt|;
name|cast
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|ExternalMetadata
specifier|static
class|class
name|ExternalMetadata
block|{
DECL|field|source
specifier|final
name|ParserRuleContext
name|source
decl_stmt|;
DECL|field|read
name|boolean
name|read
decl_stmt|;
DECL|field|storeExpr
name|ParserRuleContext
name|storeExpr
decl_stmt|;
DECL|field|token
name|int
name|token
decl_stmt|;
DECL|field|pre
name|boolean
name|pre
decl_stmt|;
DECL|field|post
name|boolean
name|post
decl_stmt|;
DECL|field|scope
name|int
name|scope
decl_stmt|;
DECL|field|current
name|Type
name|current
decl_stmt|;
DECL|field|statik
name|boolean
name|statik
decl_stmt|;
DECL|field|statement
name|boolean
name|statement
decl_stmt|;
DECL|field|constant
name|Object
name|constant
decl_stmt|;
DECL|method|ExternalMetadata
specifier|private
name|ExternalMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|read
operator|=
literal|false
expr_stmt|;
name|storeExpr
operator|=
literal|null
expr_stmt|;
name|token
operator|=
literal|0
expr_stmt|;
name|pre
operator|=
literal|false
expr_stmt|;
name|post
operator|=
literal|false
expr_stmt|;
name|scope
operator|=
literal|0
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
name|statik
operator|=
literal|false
expr_stmt|;
name|statement
operator|=
literal|false
expr_stmt|;
name|constant
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|ExtNodeMetadata
specifier|static
class|class
name|ExtNodeMetadata
block|{
DECL|field|parent
specifier|final
name|ParserRuleContext
name|parent
decl_stmt|;
DECL|field|source
specifier|final
name|ParserRuleContext
name|source
decl_stmt|;
DECL|field|target
name|Object
name|target
decl_stmt|;
DECL|field|last
name|boolean
name|last
decl_stmt|;
DECL|field|type
name|Type
name|type
decl_stmt|;
DECL|field|promote
name|Type
name|promote
decl_stmt|;
DECL|field|castFrom
name|Cast
name|castFrom
decl_stmt|;
DECL|field|castTo
name|Cast
name|castTo
decl_stmt|;
DECL|method|ExtNodeMetadata
specifier|private
name|ExtNodeMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|parent
parameter_list|,
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|target
operator|=
literal|null
expr_stmt|;
name|last
operator|=
literal|false
expr_stmt|;
name|type
operator|=
literal|null
expr_stmt|;
name|promote
operator|=
literal|null
expr_stmt|;
name|castFrom
operator|=
literal|null
expr_stmt|;
name|castTo
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|error
specifier|static
name|String
name|error
parameter_list|(
specifier|final
name|ParserRuleContext
name|ctx
parameter_list|)
block|{
return|return
literal|"Error ["
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getLine
argument_list|()
operator|+
literal|":"
operator|+
name|ctx
operator|.
name|getStart
argument_list|()
operator|.
name|getCharPositionInLine
argument_list|()
operator|+
literal|"]: "
return|;
block|}
DECL|field|definition
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|field|source
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|root
specifier|final
name|ParserRuleContext
name|root
decl_stmt|;
DECL|field|settings
specifier|final
name|CompilerSettings
name|settings
decl_stmt|;
DECL|field|statementMetadata
specifier|private
specifier|final
name|Map
argument_list|<
name|ParserRuleContext
argument_list|,
name|StatementMetadata
argument_list|>
name|statementMetadata
decl_stmt|;
DECL|field|expressionMetadata
specifier|private
specifier|final
name|Map
argument_list|<
name|ParserRuleContext
argument_list|,
name|ExpressionMetadata
argument_list|>
name|expressionMetadata
decl_stmt|;
DECL|field|externalMetadata
specifier|private
specifier|final
name|Map
argument_list|<
name|ParserRuleContext
argument_list|,
name|ExternalMetadata
argument_list|>
name|externalMetadata
decl_stmt|;
DECL|field|extNodeMetadata
specifier|private
specifier|final
name|Map
argument_list|<
name|ParserRuleContext
argument_list|,
name|ExtNodeMetadata
argument_list|>
name|extNodeMetadata
decl_stmt|;
DECL|method|Adapter
name|Adapter
parameter_list|(
specifier|final
name|Definition
name|definition
parameter_list|,
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|ParserRuleContext
name|root
parameter_list|,
specifier|final
name|CompilerSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|statementMetadata
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|expressionMetadata
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|externalMetadata
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|extNodeMetadata
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|createStatementMetadata
name|StatementMetadata
name|createStatementMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|sourcesmd
init|=
operator|new
name|StatementMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|statementMetadata
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|sourcesmd
argument_list|)
expr_stmt|;
return|return
name|sourcesmd
return|;
block|}
DECL|method|getStatementMetadata
name|StatementMetadata
name|getStatementMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|sourcesmd
init|=
name|statementMetadata
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourcesmd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Statement metadata does not exist at"
operator|+
literal|" the parse node with text ["
operator|+
name|source
operator|.
name|getText
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
return|return
name|sourcesmd
return|;
block|}
DECL|method|updateExpressionTree
name|ExpressionContext
name|updateExpressionTree
parameter_list|(
name|ExpressionContext
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|instanceof
name|PrecedenceContext
condition|)
block|{
specifier|final
name|ParserRuleContext
name|parent
init|=
name|source
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|ParseTree
name|child
range|:
name|parent
operator|.
name|children
control|)
block|{
if|if
condition|(
name|child
operator|==
name|source
condition|)
block|{
break|break;
block|}
operator|++
name|index
expr_stmt|;
block|}
while|while
condition|(
name|source
operator|instanceof
name|PrecedenceContext
condition|)
block|{
name|source
operator|=
operator|(
operator|(
name|PrecedenceContext
operator|)
name|source
operator|)
operator|.
name|expression
argument_list|()
expr_stmt|;
block|}
name|parent
operator|.
name|children
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
DECL|method|createExpressionMetadata
name|ExpressionMetadata
name|createExpressionMetadata
parameter_list|(
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|sourceemd
init|=
operator|new
name|ExpressionMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|expressionMetadata
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|sourceemd
argument_list|)
expr_stmt|;
return|return
name|sourceemd
return|;
block|}
DECL|method|getExpressionMetadata
name|ExpressionMetadata
name|getExpressionMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|sourceemd
init|=
name|expressionMetadata
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceemd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Expression metadata does not exist at"
operator|+
literal|" the parse node with text ["
operator|+
name|source
operator|.
name|getText
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
return|return
name|sourceemd
return|;
block|}
DECL|method|createExternalMetadata
name|ExternalMetadata
name|createExternalMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExternalMetadata
name|sourceemd
init|=
operator|new
name|ExternalMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|externalMetadata
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|sourceemd
argument_list|)
expr_stmt|;
return|return
name|sourceemd
return|;
block|}
DECL|method|getExternalMetadata
name|ExternalMetadata
name|getExternalMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExternalMetadata
name|sourceemd
init|=
name|externalMetadata
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceemd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"External metadata does not exist at"
operator|+
literal|" the parse node with text ["
operator|+
name|source
operator|.
name|getText
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
return|return
name|sourceemd
return|;
block|}
DECL|method|createExtNodeMetadata
name|ExtNodeMetadata
name|createExtNodeMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|parent
parameter_list|,
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|sourceemd
init|=
operator|new
name|ExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|extNodeMetadata
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|sourceemd
argument_list|)
expr_stmt|;
return|return
name|sourceemd
return|;
block|}
DECL|method|getExtNodeMetadata
name|ExtNodeMetadata
name|getExtNodeMetadata
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|sourceemd
init|=
name|extNodeMetadata
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceemd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"External metadata does not exist at"
operator|+
literal|" the parse node with text ["
operator|+
name|source
operator|.
name|getText
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
return|return
name|sourceemd
return|;
block|}
block|}
end_class

end_unit

