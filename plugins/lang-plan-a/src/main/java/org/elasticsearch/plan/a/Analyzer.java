begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plan.a
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
operator|.
name|Adapter
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
operator|.
name|Definition
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
operator|.
name|PlanAParser
operator|.
name|*
import|;
end_import

begin_class
DECL|class|Analyzer
class|class
name|Analyzer
extends|extends
name|PlanAParserBaseVisitor
argument_list|<
name|Void
argument_list|>
block|{
DECL|class|Variable
specifier|private
specifier|static
class|class
name|Variable
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|type
specifier|final
name|Type
name|type
decl_stmt|;
DECL|field|slot
specifier|final
name|int
name|slot
decl_stmt|;
DECL|method|Variable
specifier|private
name|Variable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|int
name|slot
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|slot
operator|=
name|slot
expr_stmt|;
block|}
block|}
DECL|method|analyze
specifier|static
name|void
name|analyze
parameter_list|(
specifier|final
name|Adapter
name|adapter
parameter_list|)
block|{
operator|new
name|Analyzer
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
block|}
DECL|field|adapter
specifier|private
specifier|final
name|Adapter
name|adapter
decl_stmt|;
DECL|field|definition
specifier|private
specifier|final
name|Definition
name|definition
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|CompilerSettings
name|settings
decl_stmt|;
DECL|field|scopes
specifier|private
specifier|final
name|Deque
argument_list|<
name|Integer
argument_list|>
name|scopes
decl_stmt|;
DECL|field|variables
specifier|private
specifier|final
name|Deque
argument_list|<
name|Variable
argument_list|>
name|variables
decl_stmt|;
DECL|method|Analyzer
specifier|private
name|Analyzer
parameter_list|(
specifier|final
name|Adapter
name|adapter
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
name|definition
operator|=
name|adapter
operator|.
name|definition
expr_stmt|;
name|settings
operator|=
name|adapter
operator|.
name|settings
expr_stmt|;
name|scopes
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|variables
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
name|addVariable
argument_list|(
literal|null
argument_list|,
literal|"this"
argument_list|,
name|definition
operator|.
name|execType
argument_list|)
expr_stmt|;
name|addVariable
argument_list|(
literal|null
argument_list|,
literal|"input"
argument_list|,
name|definition
operator|.
name|smapType
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|adapter
operator|.
name|root
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|adapter
operator|.
name|root
argument_list|)
expr_stmt|;
name|decrementScope
argument_list|()
expr_stmt|;
block|}
DECL|method|incrementScope
name|void
name|incrementScope
parameter_list|()
block|{
name|scopes
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|decrementScope
name|void
name|decrementScope
parameter_list|()
block|{
name|int
name|remove
init|=
name|scopes
operator|.
name|pop
argument_list|()
decl_stmt|;
while|while
condition|(
name|remove
operator|>
literal|0
condition|)
block|{
name|variables
operator|.
name|pop
argument_list|()
expr_stmt|;
operator|--
name|remove
expr_stmt|;
block|}
block|}
DECL|method|getVariable
name|Variable
name|getVariable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Variable
argument_list|>
name|itr
init|=
name|variables
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Variable
name|variable
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|variable
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|variable
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|addVariable
name|Variable
name|addVariable
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|getVariable
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument name ["
operator|+
name|name
operator|+
literal|"] already defined within the scope."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Variable name ["
operator|+
name|name
operator|+
literal|"] already defined within the scope."
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Variable
name|previous
init|=
name|variables
operator|.
name|peekFirst
argument_list|()
decl_stmt|;
name|int
name|slot
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|slot
operator|+=
name|previous
operator|.
name|slot
operator|+
name|previous
operator|.
name|type
operator|.
name|type
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Variable
name|variable
init|=
operator|new
name|Variable
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|variables
operator|.
name|push
argument_list|(
name|variable
argument_list|)
expr_stmt|;
specifier|final
name|int
name|update
init|=
name|scopes
operator|.
name|pop
argument_list|()
operator|+
literal|1
decl_stmt|;
name|scopes
operator|.
name|push
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
name|variable
return|;
block|}
annotation|@
name|Override
DECL|method|visitSource
specifier|public
name|Void
name|visitSource
parameter_list|(
specifier|final
name|SourceContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|sourcesmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statectxs
init|=
name|ctx
operator|.
name|statement
argument_list|()
decl_stmt|;
specifier|final
name|StatementContext
name|lastctx
init|=
name|statectxs
operator|.
name|get
argument_list|(
name|statectxs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|StatementContext
name|statectx
range|:
name|statectxs
control|)
block|{
if|if
condition|(
name|sourcesmd
operator|.
name|allExit
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|statectx
argument_list|)
operator|+
literal|"Statement will never be executed because all prior paths exit."
argument_list|)
throw|;
block|}
specifier|final
name|StatementMetadata
name|statesmd
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|statectx
argument_list|)
decl_stmt|;
name|statesmd
operator|.
name|last
operator|=
name|statectx
operator|==
name|lastctx
expr_stmt|;
name|visit
argument_list|(
name|statectx
argument_list|)
expr_stmt|;
if|if
condition|(
name|statesmd
operator|.
name|anyContinue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|statectx
argument_list|)
operator|+
literal|"Cannot have a continue statement outside of a loop."
argument_list|)
throw|;
block|}
if|if
condition|(
name|statesmd
operator|.
name|anyBreak
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|statectx
argument_list|)
operator|+
literal|"Cannot have a break statement outside of a loop."
argument_list|)
throw|;
block|}
name|sourcesmd
operator|.
name|allExit
operator|=
name|statesmd
operator|.
name|allExit
expr_stmt|;
name|sourcesmd
operator|.
name|allReturn
operator|=
name|statesmd
operator|.
name|allReturn
expr_stmt|;
block|}
name|decrementScope
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitIf
specifier|public
name|Void
name|visitIf
parameter_list|(
specifier|final
name|IfContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|ifsmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"If statement is not necessary."
argument_list|)
throw|;
block|}
specifier|final
name|BlockContext
name|blockctx0
init|=
name|ctx
operator|.
name|block
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|StatementMetadata
name|blocksmd0
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx0
argument_list|)
decl_stmt|;
name|blocksmd0
operator|.
name|last
operator|=
name|ifsmd
operator|.
name|last
expr_stmt|;
name|visit
argument_list|(
name|blockctx0
argument_list|)
expr_stmt|;
name|ifsmd
operator|.
name|anyReturn
operator|=
name|blocksmd0
operator|.
name|anyReturn
expr_stmt|;
name|ifsmd
operator|.
name|anyBreak
operator|=
name|blocksmd0
operator|.
name|anyBreak
expr_stmt|;
name|ifsmd
operator|.
name|anyContinue
operator|=
name|blocksmd0
operator|.
name|anyContinue
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|ELSE
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BlockContext
name|blockctx1
init|=
name|ctx
operator|.
name|block
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StatementMetadata
name|blocksmd1
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx1
argument_list|)
decl_stmt|;
name|blocksmd1
operator|.
name|last
operator|=
name|ifsmd
operator|.
name|last
expr_stmt|;
name|visit
argument_list|(
name|blockctx1
argument_list|)
expr_stmt|;
name|ifsmd
operator|.
name|allExit
operator|=
name|blocksmd0
operator|.
name|allExit
operator|&&
name|blocksmd1
operator|.
name|allExit
expr_stmt|;
name|ifsmd
operator|.
name|allReturn
operator|=
name|blocksmd0
operator|.
name|allReturn
operator|&&
name|blocksmd1
operator|.
name|allReturn
expr_stmt|;
name|ifsmd
operator|.
name|anyReturn
operator||=
name|blocksmd1
operator|.
name|anyReturn
expr_stmt|;
name|ifsmd
operator|.
name|allBreak
operator|=
name|blocksmd0
operator|.
name|allBreak
operator|&&
name|blocksmd1
operator|.
name|allBreak
expr_stmt|;
name|ifsmd
operator|.
name|anyBreak
operator||=
name|blocksmd1
operator|.
name|anyBreak
expr_stmt|;
name|ifsmd
operator|.
name|allContinue
operator|=
name|blocksmd0
operator|.
name|allContinue
operator|&&
name|blocksmd1
operator|.
name|allContinue
expr_stmt|;
name|ifsmd
operator|.
name|anyContinue
operator||=
name|blocksmd1
operator|.
name|anyContinue
expr_stmt|;
block|}
name|decrementScope
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitWhile
specifier|public
name|Void
name|visitWhile
parameter_list|(
specifier|final
name|WhileContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|whilesmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|boolean
name|exitrequired
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|boolean
name|constant
init|=
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
operator|!
name|constant
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never be executed."
argument_list|)
throw|;
block|}
name|exitrequired
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksmd
operator|.
name|allReturn
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths return so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|blocksmd
operator|.
name|allBreak
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths break so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|exitrequired
operator|&&
operator|!
name|blocksmd
operator|.
name|anyReturn
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never exit."
argument_list|)
throw|;
block|}
if|if
condition|(
name|exitrequired
operator|&&
name|blocksmd
operator|.
name|anyReturn
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
name|whilesmd
operator|.
name|allExit
operator|=
literal|true
expr_stmt|;
name|whilesmd
operator|.
name|allReturn
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|exitrequired
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never exit."
argument_list|)
throw|;
block|}
name|decrementScope
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDo
specifier|public
name|Void
name|visitDo
parameter_list|(
specifier|final
name|DoContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|dosmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksmd
operator|.
name|allReturn
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths return so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|blocksmd
operator|.
name|allBreak
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths break so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|blocksmd
operator|.
name|allContinue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never exit."
argument_list|)
throw|;
block|}
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|exitrequired
init|=
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
name|exitrequired
operator|&&
operator|!
name|blocksmd
operator|.
name|anyReturn
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never exit."
argument_list|)
throw|;
block|}
if|if
condition|(
name|exitrequired
operator|&&
name|blocksmd
operator|.
name|anyReturn
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
name|dosmd
operator|.
name|allExit
operator|=
literal|true
expr_stmt|;
name|dosmd
operator|.
name|allReturn
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exitrequired
operator|&&
operator|!
name|blocksmd
operator|.
name|anyContinue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths exit so the loop is not necessary."
argument_list|)
throw|;
block|}
block|}
name|decrementScope
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitFor
specifier|public
name|Void
name|visitFor
parameter_list|(
specifier|final
name|ForContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|forsmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|boolean
name|exitrequired
init|=
literal|false
decl_stmt|;
name|incrementScope
argument_list|()
expr_stmt|;
specifier|final
name|InitializerContext
name|initctx
init|=
name|ctx
operator|.
name|initializer
argument_list|()
decl_stmt|;
if|if
condition|(
name|initctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|initctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|initctx
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|boolean
name|constant
init|=
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
decl_stmt|;
if|if
condition|(
operator|!
name|constant
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never be executed."
argument_list|)
throw|;
block|}
name|exitrequired
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|exitrequired
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|AfterthoughtContext
name|atctx
init|=
name|ctx
operator|.
name|afterthought
argument_list|()
decl_stmt|;
if|if
condition|(
name|atctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|atctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|atctx
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockContext
name|blockctx
init|=
name|ctx
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StatementMetadata
name|blocksmd
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|blockctx
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|blockctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocksmd
operator|.
name|allReturn
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths return so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|blocksmd
operator|.
name|allBreak
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"All paths break so the loop is not necessary."
argument_list|)
throw|;
block|}
if|if
condition|(
name|exitrequired
operator|&&
operator|!
name|blocksmd
operator|.
name|anyReturn
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never exit."
argument_list|)
throw|;
block|}
if|if
condition|(
name|exitrequired
operator|&&
name|blocksmd
operator|.
name|anyReturn
operator|&&
operator|!
name|blocksmd
operator|.
name|anyBreak
condition|)
block|{
name|forsmd
operator|.
name|allExit
operator|=
literal|true
expr_stmt|;
name|forsmd
operator|.
name|allReturn
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|exitrequired
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"The loop will never exit."
argument_list|)
throw|;
block|}
name|decrementScope
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDecl
specifier|public
name|Void
name|visitDecl
parameter_list|(
specifier|final
name|DeclContext
name|ctx
parameter_list|)
block|{
specifier|final
name|DeclarationContext
name|declctx
init|=
name|ctx
operator|.
name|declaration
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitContinue
specifier|public
name|Void
name|visitContinue
parameter_list|(
specifier|final
name|ContinueContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|continuesmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|continuesmd
operator|.
name|allExit
operator|=
literal|true
expr_stmt|;
name|continuesmd
operator|.
name|allContinue
operator|=
literal|true
expr_stmt|;
name|continuesmd
operator|.
name|anyContinue
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitBreak
specifier|public
name|Void
name|visitBreak
parameter_list|(
specifier|final
name|BreakContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|breaksmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|breaksmd
operator|.
name|allExit
operator|=
literal|true
expr_stmt|;
name|breaksmd
operator|.
name|allBreak
operator|=
literal|true
expr_stmt|;
name|breaksmd
operator|.
name|anyBreak
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitReturn
specifier|public
name|Void
name|visitReturn
parameter_list|(
specifier|final
name|ReturnContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|returnsmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|objectType
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|returnsmd
operator|.
name|allExit
operator|=
literal|true
expr_stmt|;
name|returnsmd
operator|.
name|allReturn
operator|=
literal|true
expr_stmt|;
name|returnsmd
operator|.
name|anyReturn
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExpr
specifier|public
name|Void
name|visitExpr
parameter_list|(
specifier|final
name|ExprContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|exprsmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|read
operator|=
name|exprsmd
operator|.
name|last
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expremd
operator|.
name|statement
operator|&&
operator|!
name|exprsmd
operator|.
name|last
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Not a statement."
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|rtn
init|=
name|exprsmd
operator|.
name|last
operator|&&
name|expremd
operator|.
name|from
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
decl_stmt|;
name|exprsmd
operator|.
name|allExit
operator|=
name|rtn
expr_stmt|;
name|exprsmd
operator|.
name|allReturn
operator|=
name|rtn
expr_stmt|;
name|exprsmd
operator|.
name|anyReturn
operator|=
name|rtn
expr_stmt|;
name|expremd
operator|.
name|to
operator|=
name|rtn
condition|?
name|definition
operator|.
name|objectType
else|:
name|expremd
operator|.
name|from
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitMultiple
specifier|public
name|Void
name|visitMultiple
parameter_list|(
specifier|final
name|MultipleContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|multiplesmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StatementContext
argument_list|>
name|statectxs
init|=
name|ctx
operator|.
name|statement
argument_list|()
decl_stmt|;
specifier|final
name|StatementContext
name|lastctx
init|=
name|statectxs
operator|.
name|get
argument_list|(
name|statectxs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|StatementContext
name|statectx
range|:
name|statectxs
control|)
block|{
if|if
condition|(
name|multiplesmd
operator|.
name|allExit
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|statectx
argument_list|)
operator|+
literal|"Statement will never be executed because all prior paths exit."
argument_list|)
throw|;
block|}
specifier|final
name|StatementMetadata
name|statesmd
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|statectx
argument_list|)
decl_stmt|;
name|statesmd
operator|.
name|last
operator|=
name|multiplesmd
operator|.
name|last
operator|&&
name|statectx
operator|==
name|lastctx
expr_stmt|;
name|visit
argument_list|(
name|statectx
argument_list|)
expr_stmt|;
name|multiplesmd
operator|.
name|allExit
operator|=
name|statesmd
operator|.
name|allExit
expr_stmt|;
name|multiplesmd
operator|.
name|allReturn
operator|=
name|statesmd
operator|.
name|allReturn
operator|&&
operator|!
name|statesmd
operator|.
name|anyBreak
operator|&&
operator|!
name|statesmd
operator|.
name|anyContinue
expr_stmt|;
name|multiplesmd
operator|.
name|anyReturn
operator||=
name|statesmd
operator|.
name|anyReturn
expr_stmt|;
name|multiplesmd
operator|.
name|allBreak
operator|=
operator|!
name|statesmd
operator|.
name|anyReturn
operator|&&
name|statesmd
operator|.
name|allBreak
operator|&&
operator|!
name|statesmd
operator|.
name|anyContinue
expr_stmt|;
name|multiplesmd
operator|.
name|anyBreak
operator||=
name|statesmd
operator|.
name|anyBreak
expr_stmt|;
name|multiplesmd
operator|.
name|allContinue
operator|=
operator|!
name|statesmd
operator|.
name|anyReturn
operator|&&
operator|!
name|statesmd
operator|.
name|anyBreak
operator|&&
name|statesmd
operator|.
name|allContinue
expr_stmt|;
name|multiplesmd
operator|.
name|anyContinue
operator||=
name|statesmd
operator|.
name|anyContinue
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitSingle
specifier|public
name|Void
name|visitSingle
parameter_list|(
specifier|final
name|SingleContext
name|ctx
parameter_list|)
block|{
specifier|final
name|StatementMetadata
name|singlesmd
init|=
name|adapter
operator|.
name|getStatementMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|StatementContext
name|statectx
init|=
name|ctx
operator|.
name|statement
argument_list|()
decl_stmt|;
specifier|final
name|StatementMetadata
name|statesmd
init|=
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|statectx
argument_list|)
decl_stmt|;
name|statesmd
operator|.
name|last
operator|=
name|singlesmd
operator|.
name|last
expr_stmt|;
name|visit
argument_list|(
name|statectx
argument_list|)
expr_stmt|;
name|singlesmd
operator|.
name|allExit
operator|=
name|statesmd
operator|.
name|allExit
expr_stmt|;
name|singlesmd
operator|.
name|allReturn
operator|=
name|statesmd
operator|.
name|allReturn
expr_stmt|;
name|singlesmd
operator|.
name|anyReturn
operator|=
name|statesmd
operator|.
name|anyReturn
expr_stmt|;
name|singlesmd
operator|.
name|allBreak
operator|=
name|statesmd
operator|.
name|allBreak
expr_stmt|;
name|singlesmd
operator|.
name|anyBreak
operator|=
name|statesmd
operator|.
name|anyBreak
expr_stmt|;
name|singlesmd
operator|.
name|allContinue
operator|=
name|statesmd
operator|.
name|allContinue
expr_stmt|;
name|singlesmd
operator|.
name|anyContinue
operator|=
name|statesmd
operator|.
name|anyContinue
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitEmpty
specifier|public
name|Void
name|visitEmpty
parameter_list|(
specifier|final
name|EmptyContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitInitializer
specifier|public
name|Void
name|visitInitializer
parameter_list|(
name|InitializerContext
name|ctx
parameter_list|)
block|{
specifier|final
name|DeclarationContext
name|declctx
init|=
name|ctx
operator|.
name|declaration
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|declctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createStatementMetadata
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|read
operator|=
literal|false
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|expremd
operator|.
name|to
operator|=
name|expremd
operator|.
name|from
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expremd
operator|.
name|statement
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|exprctx
argument_list|)
operator|+
literal|"The intializer of a for loop must be a statement."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitAfterthought
specifier|public
name|Void
name|visitAfterthought
parameter_list|(
name|AfterthoughtContext
name|ctx
parameter_list|)
block|{
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|read
operator|=
literal|false
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|expremd
operator|.
name|to
operator|=
name|expremd
operator|.
name|from
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expremd
operator|.
name|statement
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|exprctx
argument_list|)
operator|+
literal|"The afterthought of a for loop must be a statement."
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDeclaration
specifier|public
name|Void
name|visitDeclaration
parameter_list|(
specifier|final
name|DeclarationContext
name|ctx
parameter_list|)
block|{
specifier|final
name|DecltypeContext
name|decltypectx
init|=
name|ctx
operator|.
name|decltype
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|decltypeemd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|decltypectx
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|decltypectx
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|DeclvarContext
name|declvarctx
range|:
name|ctx
operator|.
name|declvar
argument_list|()
control|)
block|{
specifier|final
name|ExpressionMetadata
name|declvaremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|declvarctx
argument_list|)
decl_stmt|;
name|declvaremd
operator|.
name|to
operator|=
name|decltypeemd
operator|.
name|from
expr_stmt|;
name|visit
argument_list|(
name|declvarctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDecltype
specifier|public
name|Void
name|visitDecltype
parameter_list|(
specifier|final
name|DecltypeContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|decltypeemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|getText
argument_list|()
decl_stmt|;
name|decltypeemd
operator|.
name|from
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitDeclvar
specifier|public
name|Void
name|visitDeclvar
parameter_list|(
specifier|final
name|DeclvarContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|declvaremd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|ID
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|declvaremd
operator|.
name|postConst
operator|=
name|addVariable
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|,
name|declvaremd
operator|.
name|to
argument_list|)
operator|.
name|slot
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exprctx
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|declvaremd
operator|.
name|to
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitPrecedence
specifier|public
name|Void
name|visitPrecedence
parameter_list|(
specifier|final
name|PrecedenceContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitNumeric
specifier|public
name|Void
name|visitNumeric
parameter_list|(
specifier|final
name|NumericContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|numericemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|negate
init|=
name|ctx
operator|.
name|parent
operator|instanceof
name|UnaryContext
operator|&&
operator|(
operator|(
name|UnaryContext
operator|)
name|ctx
operator|.
name|parent
operator|)
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|svalue
init|=
operator|(
name|negate
condition|?
literal|"-"
else|:
literal|""
operator|)
operator|+
name|ctx
operator|.
name|DECIMAL
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"f"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|floatType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid float constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|doubleType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|svalue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid double constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|String
name|svalue
init|=
name|negate
condition|?
literal|"-"
else|:
literal|""
decl_stmt|;
name|int
name|radix
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|svalue
operator|+=
name|ctx
operator|.
name|OCTAL
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
name|radix
operator|=
literal|8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|INTEGER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|svalue
operator|+=
name|ctx
operator|.
name|INTEGER
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
name|radix
operator|=
literal|10
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|HEX
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|svalue
operator|+=
name|ctx
operator|.
name|HEX
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
name|radix
operator|=
literal|16
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"d"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"D"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|doubleType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid float constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"f"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|floatType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid float constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"l"
argument_list|)
operator|||
name|svalue
operator|.
name|endsWith
argument_list|(
literal|"L"
argument_list|)
condition|)
block|{
try|try
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|longType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|svalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|svalue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|radix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid long constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
specifier|final
name|Type
name|type
init|=
name|numericemd
operator|.
name|to
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|type
operator|==
literal|null
condition|?
name|Sort
operator|.
name|INT
else|:
name|type
operator|.
name|sort
decl_stmt|;
specifier|final
name|int
name|value
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|svalue
argument_list|,
name|radix
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BYTE
operator|&&
name|value
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|value
operator|<=
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|byteType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|CHAR
operator|&&
name|value
operator|>=
name|Character
operator|.
name|MIN_VALUE
operator|&&
name|value
operator|<=
name|Character
operator|.
name|MAX_VALUE
condition|)
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|charType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
operator|(
name|char
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|SHORT
operator|&&
name|value
operator|>=
name|Short
operator|.
name|MIN_VALUE
operator|&&
name|value
operator|<=
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|shortType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
operator|(
name|short
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
name|numericemd
operator|.
name|from
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|numericemd
operator|.
name|preConst
operator|=
name|value
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Invalid int constant ["
operator|+
name|svalue
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitChar
specifier|public
name|Void
name|visitChar
parameter_list|(
specifier|final
name|CharContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|charemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|CHAR
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
name|charemd
operator|.
name|preConst
operator|=
name|ctx
operator|.
name|CHAR
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|charemd
operator|.
name|from
operator|=
name|definition
operator|.
name|charType
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitTrue
specifier|public
name|Void
name|visitTrue
parameter_list|(
specifier|final
name|TrueContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|trueemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|TRUE
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
name|trueemd
operator|.
name|preConst
operator|=
literal|true
expr_stmt|;
name|trueemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitFalse
specifier|public
name|Void
name|visitFalse
parameter_list|(
specifier|final
name|FalseContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|falseemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|FALSE
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
name|falseemd
operator|.
name|preConst
operator|=
literal|false
expr_stmt|;
name|falseemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitNull
specifier|public
name|Void
name|visitNull
parameter_list|(
specifier|final
name|NullContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|nullemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|NULL
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
name|nullemd
operator|.
name|isNull
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|nullemd
operator|.
name|to
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nullemd
operator|.
name|to
operator|.
name|sort
operator|.
name|primitive
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot cast null to a primitive type ["
operator|+
name|nullemd
operator|.
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|nullemd
operator|.
name|from
operator|=
name|nullemd
operator|.
name|to
expr_stmt|;
block|}
else|else
block|{
name|nullemd
operator|.
name|from
operator|=
name|definition
operator|.
name|objectType
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExternal
specifier|public
name|Void
name|visitExternal
parameter_list|(
specifier|final
name|ExternalContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|extemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|adapter
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|extemd
operator|.
name|read
expr_stmt|;
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|extemd
operator|.
name|statement
operator|=
name|extstartemd
operator|.
name|statement
expr_stmt|;
name|extemd
operator|.
name|preConst
operator|=
name|extstartemd
operator|.
name|constant
expr_stmt|;
name|extemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|current
expr_stmt|;
name|extemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitPostinc
specifier|public
name|Void
name|visitPostinc
parameter_list|(
specifier|final
name|PostincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|postincemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|adapter
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|postincemd
operator|.
name|read
expr_stmt|;
name|extstartemd
operator|.
name|storeExpr
operator|=
name|ctx
operator|.
name|increment
argument_list|()
expr_stmt|;
name|extstartemd
operator|.
name|token
operator|=
name|ADD
expr_stmt|;
name|extstartemd
operator|.
name|post
operator|=
literal|true
expr_stmt|;
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|postincemd
operator|.
name|statement
operator|=
literal|true
expr_stmt|;
name|postincemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|read
condition|?
name|extstartemd
operator|.
name|current
else|:
name|definition
operator|.
name|voidType
expr_stmt|;
name|postincemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitPreinc
specifier|public
name|Void
name|visitPreinc
parameter_list|(
specifier|final
name|PreincContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|preincemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|adapter
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|preincemd
operator|.
name|read
expr_stmt|;
name|extstartemd
operator|.
name|storeExpr
operator|=
name|ctx
operator|.
name|increment
argument_list|()
expr_stmt|;
name|extstartemd
operator|.
name|token
operator|=
name|ADD
expr_stmt|;
name|extstartemd
operator|.
name|pre
operator|=
literal|true
expr_stmt|;
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|preincemd
operator|.
name|statement
operator|=
literal|true
expr_stmt|;
name|preincemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|read
condition|?
name|extstartemd
operator|.
name|current
else|:
name|definition
operator|.
name|voidType
expr_stmt|;
name|preincemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitUnary
specifier|public
name|Void
name|visitUnary
parameter_list|(
specifier|final
name|UnaryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|unaryemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BOOLNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|expremd
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|!
operator|(
name|boolean
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
name|unaryemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|promote
init|=
name|promoteNumeric
argument_list|(
name|expremd
operator|.
name|from
argument_list|,
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|==
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot apply ["
operator|+
name|ctx
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|+
literal|"] "
operator|+
literal|"operation to type ["
operator|+
name|expremd
operator|.
name|from
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|expremd
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|BWNOT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|~
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|~
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exprctx
operator|instanceof
name|NumericContext
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|unaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|negateExact
argument_list|(
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|unaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|negateExact
argument_list|(
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|float
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|-
operator|(
name|double
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|int
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|long
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|float
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|unaryemd
operator|.
name|preConst
operator|=
operator|+
operator|(
name|double
operator|)
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
name|unaryemd
operator|.
name|from
operator|=
name|promote
expr_stmt|;
name|unaryemd
operator|.
name|typesafe
operator|=
name|expremd
operator|.
name|typesafe
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitCast
specifier|public
name|Void
name|visitCast
parameter_list|(
specifier|final
name|CastContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|castemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|DecltypeContext
name|decltypectx
init|=
name|ctx
operator|.
name|decltype
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|decltypemd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|decltypectx
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|decltypectx
argument_list|)
expr_stmt|;
specifier|final
name|Type
name|type
init|=
name|decltypemd
operator|.
name|from
decl_stmt|;
name|castemd
operator|.
name|from
operator|=
name|type
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|type
expr_stmt|;
name|expremd
operator|.
name|explicit
operator|=
literal|true
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
name|castemd
operator|.
name|preConst
operator|=
name|expremd
operator|.
name|postConst
expr_stmt|;
block|}
name|castemd
operator|.
name|typesafe
operator|=
name|expremd
operator|.
name|typesafe
operator|&&
name|castemd
operator|.
name|from
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitBinary
specifier|public
name|Void
name|visitBinary
parameter_list|(
specifier|final
name|BinaryContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|binaryemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|decimal
init|=
name|ctx
operator|.
name|MUL
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|DIV
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|REM
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|add
init|=
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|xor
init|=
name|ctx
operator|.
name|BWXOR
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|Type
name|promote
init|=
name|add
condition|?
name|promoteAdd
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|xor
condition|?
name|promoteXor
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|promoteNumeric
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|,
name|decimal
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot apply ["
operator|+
name|ctx
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|+
literal|"] "
operator|+
literal|"operation to types ["
operator|+
name|expremd0
operator|.
name|from
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|expremd1
operator|.
name|from
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
name|expremd0
operator|.
name|to
operator|=
name|add
operator|&&
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|?
name|expremd0
operator|.
name|from
else|:
name|promote
expr_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|add
operator|&&
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|?
name|expremd1
operator|.
name|from
else|:
name|promote
expr_stmt|;
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
operator|&&
name|expremd1
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|MUL
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|multiplyExact
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|multiplyExact
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|*
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|multiplyWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|DIV
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|/
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|divideWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|REM
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|%
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|remainderWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|addExact
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|addExact
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|+
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|addWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
literal|""
operator|+
name|expremd0
operator|.
name|postConst
operator|+
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|SUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|subtractExact
argument_list|(
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Math
operator|.
name|subtractExact
argument_list|(
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|getNumericOverflow
argument_list|()
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|-
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
name|binaryemd
operator|.
name|preConst
operator|=
name|Utility
operator|.
name|subtractWithoutOverflow
argument_list|(
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
argument_list|,
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|<<
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|<<
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|RSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>>
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>>
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|USH
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>>>
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>>>
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|&
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|&
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWXOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|^
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|^
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|^
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BWOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator||
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|binaryemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator||
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
name|binaryemd
operator|.
name|from
operator|=
name|promote
expr_stmt|;
name|binaryemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitComp
specifier|public
name|Void
name|visitComp
parameter_list|(
specifier|final
name|CompContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|compemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|equality
init|=
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|reference
init|=
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|isNull
operator|&&
name|expremd1
operator|.
name|isNull
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unnecessary comparison of null constants."
argument_list|)
throw|;
block|}
specifier|final
name|Type
name|promote
init|=
name|equality
condition|?
name|promoteEquality
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|reference
condition|?
name|promoteReference
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|)
else|:
name|promoteNumeric
argument_list|(
name|expremd0
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|from
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot apply ["
operator|+
name|ctx
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|+
literal|"] "
operator|+
literal|"operation to types ["
operator|+
name|expremd0
operator|.
name|from
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|expremd1
operator|.
name|from
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|expremd0
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
operator|&&
name|expremd1
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|promote
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|==
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ctx
operator|.
name|EQ
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|expremd0
operator|.
name|isNull
operator|&&
operator|!
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|.
name|equals
argument_list|(
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|EQR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|==
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
operator|||
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|BOOL
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|!=
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ctx
operator|.
name|NE
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|expremd0
operator|.
name|isNull
operator|&&
operator|!
name|expremd1
operator|.
name|isNull
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|.
name|equals
argument_list|(
name|expremd1
operator|.
name|postConst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|NER
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
name|expremd0
operator|.
name|postConst
operator|==
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|>=
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|GT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|>
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LTE
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|<=
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|LT
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|INT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|int
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|int
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|long
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|long
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|float
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|float
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
condition|)
block|{
name|compemd
operator|.
name|preConst
operator|=
operator|(
name|double
operator|)
name|expremd0
operator|.
name|postConst
operator|<
operator|(
name|double
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
name|compemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|compemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitBool
specifier|public
name|Void
name|visitBool
parameter_list|(
specifier|final
name|BoolContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|boolemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|expremd0
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
operator|&&
name|expremd1
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|BOOLAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|&&
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|BOOLOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolemd
operator|.
name|preConst
operator|=
operator|(
name|boolean
operator|)
name|expremd0
operator|.
name|postConst
operator|||
operator|(
name|boolean
operator|)
name|expremd1
operator|.
name|postConst
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
name|boolemd
operator|.
name|from
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|boolemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitConditional
specifier|public
name|Void
name|visitConditional
parameter_list|(
specifier|final
name|ConditionalContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|condemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionContext
name|exprctx0
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd0
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx0
argument_list|)
decl_stmt|;
name|expremd0
operator|.
name|to
operator|=
name|definition
operator|.
name|booleanType
expr_stmt|;
name|visit
argument_list|(
name|exprctx0
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd0
argument_list|)
expr_stmt|;
if|if
condition|(
name|expremd0
operator|.
name|postConst
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unnecessary conditional statement."
argument_list|)
throw|;
block|}
specifier|final
name|ExpressionContext
name|exprctx1
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd1
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx1
argument_list|)
decl_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|condemd
operator|.
name|to
expr_stmt|;
name|expremd1
operator|.
name|explicit
operator|=
name|condemd
operator|.
name|explicit
expr_stmt|;
name|visit
argument_list|(
name|exprctx1
argument_list|)
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx2
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd2
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx2
argument_list|)
decl_stmt|;
name|expremd2
operator|.
name|to
operator|=
name|condemd
operator|.
name|to
expr_stmt|;
name|expremd2
operator|.
name|explicit
operator|=
name|condemd
operator|.
name|explicit
expr_stmt|;
name|visit
argument_list|(
name|exprctx2
argument_list|)
expr_stmt|;
if|if
condition|(
name|condemd
operator|.
name|to
operator|==
literal|null
condition|)
block|{
specifier|final
name|Type
name|promote
init|=
name|promoteConditional
argument_list|(
name|expremd1
operator|.
name|from
argument_list|,
name|expremd2
operator|.
name|from
argument_list|,
name|expremd1
operator|.
name|preConst
argument_list|,
name|expremd2
operator|.
name|preConst
argument_list|)
decl_stmt|;
name|expremd1
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|expremd2
operator|.
name|to
operator|=
name|promote
expr_stmt|;
name|condemd
operator|.
name|from
operator|=
name|promote
expr_stmt|;
block|}
else|else
block|{
name|condemd
operator|.
name|from
operator|=
name|condemd
operator|.
name|to
expr_stmt|;
block|}
name|markCast
argument_list|(
name|expremd1
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd2
argument_list|)
expr_stmt|;
name|condemd
operator|.
name|typesafe
operator|=
name|expremd0
operator|.
name|typesafe
operator|&&
name|expremd1
operator|.
name|typesafe
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitAssignment
specifier|public
name|Void
name|visitAssignment
parameter_list|(
specifier|final
name|AssignmentContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|assignemd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ExtstartContext
name|extstartctx
init|=
name|ctx
operator|.
name|extstart
argument_list|()
decl_stmt|;
specifier|final
name|ExternalMetadata
name|extstartemd
init|=
name|adapter
operator|.
name|createExternalMetadata
argument_list|(
name|extstartctx
argument_list|)
decl_stmt|;
name|extstartemd
operator|.
name|read
operator|=
name|assignemd
operator|.
name|read
expr_stmt|;
name|extstartemd
operator|.
name|storeExpr
operator|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|AMUL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|MUL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ADIV
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|DIV
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AREM
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|REM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AADD
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|ADD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ASUB
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|SUB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ALSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|LSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AUSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|USH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|ARSH
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|RSH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AAND
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|BWAND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AXOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|BWXOR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|AOR
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extstartemd
operator|.
name|token
operator|=
name|BWOR
expr_stmt|;
block|}
name|visit
argument_list|(
name|extstartctx
argument_list|)
expr_stmt|;
name|assignemd
operator|.
name|statement
operator|=
literal|true
expr_stmt|;
name|assignemd
operator|.
name|from
operator|=
name|extstartemd
operator|.
name|read
condition|?
name|extstartemd
operator|.
name|current
else|:
name|definition
operator|.
name|voidType
expr_stmt|;
name|assignemd
operator|.
name|typesafe
operator|=
name|extstartemd
operator|.
name|current
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|DEF
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtstart
specifier|public
name|Void
name|visitExtstart
parameter_list|(
specifier|final
name|ExtstartContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtprecContext
name|precctx
init|=
name|ctx
operator|.
name|extprec
argument_list|()
decl_stmt|;
specifier|final
name|ExtcastContext
name|castctx
init|=
name|ctx
operator|.
name|extcast
argument_list|()
decl_stmt|;
specifier|final
name|ExttypeContext
name|typectx
init|=
name|ctx
operator|.
name|exttype
argument_list|()
decl_stmt|;
specifier|final
name|ExtvarContext
name|varctx
init|=
name|ctx
operator|.
name|extvar
argument_list|()
decl_stmt|;
specifier|final
name|ExtnewContext
name|newctx
init|=
name|ctx
operator|.
name|extnew
argument_list|()
decl_stmt|;
specifier|final
name|ExtstringContext
name|stringctx
init|=
name|ctx
operator|.
name|extstring
argument_list|()
decl_stmt|;
if|if
condition|(
name|precctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|precctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|precctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|castctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|castctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|castctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|typectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|typectx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|varctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|varctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|newctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|newctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stringctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|stringctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|stringctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtprec
specifier|public
name|Void
name|visitExtprec
parameter_list|(
specifier|final
name|ExtprecContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|precenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|precenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|ExtprecContext
name|precctx
init|=
name|ctx
operator|.
name|extprec
argument_list|()
decl_stmt|;
specifier|final
name|ExtcastContext
name|castctx
init|=
name|ctx
operator|.
name|extcast
argument_list|()
decl_stmt|;
specifier|final
name|ExttypeContext
name|typectx
init|=
name|ctx
operator|.
name|exttype
argument_list|()
decl_stmt|;
specifier|final
name|ExtvarContext
name|varctx
init|=
name|ctx
operator|.
name|extvar
argument_list|()
decl_stmt|;
specifier|final
name|ExtnewContext
name|newctx
init|=
name|ctx
operator|.
name|extnew
argument_list|()
decl_stmt|;
specifier|final
name|ExtstringContext
name|stringctx
init|=
name|ctx
operator|.
name|extstring
argument_list|()
decl_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
operator|||
name|bracectx
operator|!=
literal|null
condition|)
block|{
operator|++
name|parentemd
operator|.
name|scope
expr_stmt|;
block|}
if|if
condition|(
name|precctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|precctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|precctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|castctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|castctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|castctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|typectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|typectx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|varctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|varctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|newctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|newctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stringctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|stringctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|stringctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
name|parentemd
operator|.
name|statement
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
operator|--
name|parentemd
operator|.
name|scope
expr_stmt|;
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
operator|--
name|parentemd
operator|.
name|scope
expr_stmt|;
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|bracectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtcast
specifier|public
name|Void
name|visitExtcast
parameter_list|(
specifier|final
name|ExtcastContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|castenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|castenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|ExtprecContext
name|precctx
init|=
name|ctx
operator|.
name|extprec
argument_list|()
decl_stmt|;
specifier|final
name|ExtcastContext
name|castctx
init|=
name|ctx
operator|.
name|extcast
argument_list|()
decl_stmt|;
specifier|final
name|ExttypeContext
name|typectx
init|=
name|ctx
operator|.
name|exttype
argument_list|()
decl_stmt|;
specifier|final
name|ExtvarContext
name|varctx
init|=
name|ctx
operator|.
name|extvar
argument_list|()
decl_stmt|;
specifier|final
name|ExtnewContext
name|newctx
init|=
name|ctx
operator|.
name|extnew
argument_list|()
decl_stmt|;
specifier|final
name|ExtstringContext
name|stringctx
init|=
name|ctx
operator|.
name|extstring
argument_list|()
decl_stmt|;
if|if
condition|(
name|precctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|precctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|precctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|castctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|castctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|castctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|typectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|typectx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|varctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|varctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|varctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|newctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|newctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stringctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|ctx
argument_list|,
name|stringctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|stringctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
specifier|final
name|DecltypeContext
name|declctx
init|=
name|ctx
operator|.
name|decltype
argument_list|()
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|declemd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|declctx
argument_list|)
decl_stmt|;
name|visit
argument_list|(
name|declctx
argument_list|)
expr_stmt|;
name|castenmd
operator|.
name|castTo
operator|=
name|getLegalCast
argument_list|(
name|ctx
argument_list|,
name|parentemd
operator|.
name|current
argument_list|,
name|declemd
operator|.
name|from
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|castenmd
operator|.
name|type
operator|=
name|declemd
operator|.
name|from
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|declemd
operator|.
name|from
expr_stmt|;
name|parentemd
operator|.
name|statement
operator|=
literal|false
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtbrace
specifier|public
name|Void
name|visitExtbrace
parameter_list|(
specifier|final
name|ExtbraceContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|braceenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|braceenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|array
init|=
name|parentemd
operator|.
name|current
operator|.
name|sort
operator|==
name|Sort
operator|.
name|ARRAY
decl_stmt|;
specifier|final
name|boolean
name|def
init|=
name|parentemd
operator|.
name|current
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
decl_stmt|;
name|boolean
name|map
init|=
literal|false
decl_stmt|;
name|boolean
name|list
init|=
literal|false
decl_stmt|;
try|try
block|{
name|parentemd
operator|.
name|current
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
comment|// Do nothing.
block|}
try|try
block|{
name|parentemd
operator|.
name|current
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|list
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
comment|// Do nothing.
block|}
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
name|braceenmd
operator|.
name|last
operator|=
name|parentemd
operator|.
name|scope
operator|==
literal|0
operator|&&
name|dotctx
operator|==
literal|null
operator|&&
name|bracectx
operator|==
literal|null
expr_stmt|;
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|ctx
operator|.
name|expression
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
operator|||
name|def
condition|)
block|{
name|expremd
operator|.
name|to
operator|=
name|array
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|objectType
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|braceenmd
operator|.
name|target
operator|=
literal|"#brace"
expr_stmt|;
name|braceenmd
operator|.
name|type
operator|=
name|def
condition|?
name|definition
operator|.
name|defType
else|:
name|definition
operator|.
name|getType
argument_list|(
name|parentemd
operator|.
name|current
operator|.
name|struct
argument_list|,
name|parentemd
operator|.
name|current
operator|.
name|type
operator|.
name|getDimensions
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|analyzeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|braceenmd
operator|.
name|type
expr_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|bracectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|boolean
name|store
init|=
name|braceenmd
operator|.
name|last
operator|&&
name|parentemd
operator|.
name|storeExpr
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|get
init|=
name|parentemd
operator|.
name|read
operator|||
name|parentemd
operator|.
name|token
operator|>
literal|0
operator|||
operator|!
name|braceenmd
operator|.
name|last
decl_stmt|;
specifier|final
name|boolean
name|set
init|=
name|braceenmd
operator|.
name|last
operator|&&
name|store
decl_stmt|;
name|Method
name|getter
decl_stmt|;
name|Method
name|setter
decl_stmt|;
name|Type
name|valuetype
decl_stmt|;
name|Type
name|settype
decl_stmt|;
if|if
condition|(
name|map
condition|)
block|{
name|getter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
name|setter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"put"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
operator|(
name|getter
operator|.
name|rtn
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
operator|||
name|getter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal map get shortcut for type ["
operator|+
name|parentemd
operator|.
name|current
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
name|setter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal map set shortcut for type ["
operator|+
name|parentemd
operator|.
name|current
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
name|setter
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|getter
operator|.
name|rtn
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Shortcut argument types must match."
argument_list|)
throw|;
block|}
name|valuetype
operator|=
name|setter
operator|!=
literal|null
condition|?
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|getter
operator|!=
literal|null
condition|?
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
name|settype
operator|=
name|setter
operator|==
literal|null
condition|?
literal|null
else|:
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|list
condition|)
block|{
name|getter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
name|setter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"add"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
operator|(
name|getter
operator|.
name|rtn
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
operator|||
name|getter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|INT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal list get shortcut for type ["
operator|+
name|parentemd
operator|.
name|current
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
operator|(
name|setter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|||
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|INT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal list set shortcut for type ["
operator|+
name|parentemd
operator|.
name|current
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
name|setter
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|getter
operator|.
name|rtn
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Shortcut argument types must match."
argument_list|)
throw|;
block|}
name|valuetype
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|settype
operator|=
name|setter
operator|==
literal|null
condition|?
literal|null
else|:
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|get
operator|||
name|set
operator|)
operator|&&
operator|(
operator|!
name|get
operator|||
name|getter
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|set
operator|||
name|setter
operator|!=
literal|null
operator|)
condition|)
block|{
name|expremd
operator|.
name|to
operator|=
name|valuetype
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
name|braceenmd
operator|.
name|target
operator|=
operator|new
name|Object
index|[]
block|{
name|getter
block|,
name|setter
block|,
literal|true
block|,
literal|null
block|}
expr_stmt|;
name|braceenmd
operator|.
name|type
operator|=
name|get
condition|?
name|getter
operator|.
name|rtn
else|:
name|settype
expr_stmt|;
name|analyzeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|get
condition|?
name|getter
operator|.
name|rtn
else|:
name|setter
operator|.
name|rtn
expr_stmt|;
block|}
block|}
if|if
condition|(
name|braceenmd
operator|.
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Attempting to address a non-array type ["
operator|+
name|parentemd
operator|.
name|current
operator|.
name|name
operator|+
literal|"] as an array."
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtdot
specifier|public
name|Void
name|visitExtdot
parameter_list|(
specifier|final
name|ExtdotContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|dotemnd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|dotemnd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExtcallContext
name|callctx
init|=
name|ctx
operator|.
name|extcall
argument_list|()
decl_stmt|;
specifier|final
name|ExtfieldContext
name|fieldctx
init|=
name|ctx
operator|.
name|extfield
argument_list|()
decl_stmt|;
if|if
condition|(
name|callctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|callctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|callctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|fieldctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|fieldctx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExttype
specifier|public
name|Void
name|visitExttype
parameter_list|(
specifier|final
name|ExttypeContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|typeenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|typeenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|current
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected static type."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|typestr
init|=
name|ctx
operator|.
name|TYPE
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|typeenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|typestr
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|typeenmd
operator|.
name|type
expr_stmt|;
name|parentemd
operator|.
name|statik
operator|=
literal|true
expr_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtcall
specifier|public
name|Void
name|visitExtcall
parameter_list|(
specifier|final
name|ExtcallContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|callenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|callenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
name|callenmd
operator|.
name|last
operator|=
name|parentemd
operator|.
name|scope
operator|==
literal|0
operator|&&
name|dotctx
operator|==
literal|null
operator|&&
name|bracectx
operator|==
literal|null
expr_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|EXTID
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|current
operator|.
name|sort
operator|==
name|Sort
operator|.
name|ARRAY
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected call ["
operator|+
name|name
operator|+
literal|"] on an array."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|callenmd
operator|.
name|last
operator|&&
name|parentemd
operator|.
name|storeExpr
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot assign a value to a call ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
specifier|final
name|Struct
name|struct
init|=
name|parentemd
operator|.
name|current
operator|.
name|struct
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|arguments
init|=
name|ctx
operator|.
name|arguments
argument_list|()
operator|.
name|expression
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|arguments
operator|.
name|size
argument_list|()
decl_stmt|;
name|Type
index|[]
name|types
decl_stmt|;
specifier|final
name|Method
name|method
init|=
name|parentemd
operator|.
name|statik
condition|?
name|struct
operator|.
name|functions
operator|.
name|get
argument_list|(
name|name
argument_list|)
else|:
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|def
init|=
name|parentemd
operator|.
name|current
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
operator|&&
operator|!
name|def
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unknown call ["
operator|+
name|name
operator|+
literal|"] on type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|types
operator|=
operator|new
name|Type
index|[
name|method
operator|.
name|arguments
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|method
operator|.
name|arguments
operator|.
name|toArray
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|callenmd
operator|.
name|target
operator|=
name|method
expr_stmt|;
name|callenmd
operator|.
name|type
operator|=
name|method
operator|.
name|rtn
expr_stmt|;
name|parentemd
operator|.
name|statement
operator|=
operator|!
name|parentemd
operator|.
name|read
operator|&&
name|callenmd
operator|.
name|last
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|method
operator|.
name|rtn
expr_stmt|;
if|if
condition|(
name|size
operator|!=
name|types
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"When calling ["
operator|+
name|name
operator|+
literal|"] on type "
operator|+
literal|"["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"] expected ["
operator|+
name|types
operator|.
name|length
operator|+
literal|"] arguments,"
operator|+
literal|" but found ["
operator|+
name|arguments
operator|.
name|size
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|types
operator|=
operator|new
name|Type
index|[
name|arguments
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|types
argument_list|,
name|definition
operator|.
name|defType
argument_list|)
expr_stmt|;
name|callenmd
operator|.
name|target
operator|=
name|name
expr_stmt|;
name|callenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|defType
expr_stmt|;
name|parentemd
operator|.
name|statement
operator|=
operator|!
name|parentemd
operator|.
name|read
operator|&&
name|callenmd
operator|.
name|last
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|callenmd
operator|.
name|type
expr_stmt|;
block|}
for|for
control|(
name|int
name|argument
init|=
literal|0
init|;
name|argument
operator|<
name|size
condition|;
operator|++
name|argument
control|)
block|{
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|arguments
operator|.
name|get
argument_list|(
name|argument
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|types
index|[
name|argument
index|]
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
block|}
name|parentemd
operator|.
name|statik
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|bracectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtvar
specifier|public
name|Void
name|visitExtvar
parameter_list|(
specifier|final
name|ExtvarContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|varenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|varenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|ID
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|current
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected variable ["
operator|+
name|name
operator|+
literal|"] load."
argument_list|)
throw|;
block|}
name|varenmd
operator|.
name|last
operator|=
name|parentemd
operator|.
name|scope
operator|==
literal|0
operator|&&
name|dotctx
operator|==
literal|null
operator|&&
name|bracectx
operator|==
literal|null
expr_stmt|;
specifier|final
name|Variable
name|variable
init|=
name|getVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|variable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unknown variable ["
operator|+
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|varenmd
operator|.
name|target
operator|=
name|variable
operator|.
name|slot
expr_stmt|;
name|varenmd
operator|.
name|type
operator|=
name|variable
operator|.
name|type
expr_stmt|;
name|analyzeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|varenmd
operator|.
name|type
expr_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|bracectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtfield
specifier|public
name|Void
name|visitExtfield
parameter_list|(
specifier|final
name|ExtfieldContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|memberenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|memberenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|EXTID
argument_list|()
operator|==
literal|null
operator|&&
name|ctx
operator|.
name|EXTINTEGER
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|value
init|=
name|ctx
operator|.
name|EXTID
argument_list|()
operator|==
literal|null
condition|?
name|ctx
operator|.
name|EXTINTEGER
argument_list|()
operator|.
name|getText
argument_list|()
else|:
name|ctx
operator|.
name|EXTID
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
name|memberenmd
operator|.
name|last
operator|=
name|parentemd
operator|.
name|scope
operator|==
literal|0
operator|&&
name|dotctx
operator|==
literal|null
operator|&&
name|bracectx
operator|==
literal|null
expr_stmt|;
specifier|final
name|boolean
name|store
init|=
name|memberenmd
operator|.
name|last
operator|&&
name|parentemd
operator|.
name|storeExpr
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|current
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected field ["
operator|+
name|value
operator|+
literal|"] load."
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentemd
operator|.
name|current
operator|.
name|sort
operator|==
name|Sort
operator|.
name|ARRAY
condition|)
block|{
if|if
condition|(
literal|"length"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|parentemd
operator|.
name|read
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Must read array field [length]."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|store
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot write to read-only array field [length]."
argument_list|)
throw|;
block|}
name|memberenmd
operator|.
name|target
operator|=
literal|"#length"
expr_stmt|;
name|memberenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected array field ["
operator|+
name|value
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|parentemd
operator|.
name|current
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
name|memberenmd
operator|.
name|target
operator|=
name|value
expr_stmt|;
name|memberenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|defType
expr_stmt|;
name|analyzeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|memberenmd
operator|.
name|type
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Struct
name|struct
init|=
name|parentemd
operator|.
name|current
operator|.
name|struct
decl_stmt|;
specifier|final
name|Field
name|field
init|=
name|parentemd
operator|.
name|statik
condition|?
name|struct
operator|.
name|statics
operator|.
name|get
argument_list|(
name|value
argument_list|)
else|:
name|struct
operator|.
name|members
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|store
operator|&&
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isFinal
argument_list|(
name|field
operator|.
name|reflect
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot write to read-only"
operator|+
literal|" field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|memberenmd
operator|.
name|target
operator|=
name|field
expr_stmt|;
name|memberenmd
operator|.
name|type
operator|=
name|field
operator|.
name|type
expr_stmt|;
name|analyzeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|memberenmd
operator|.
name|type
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|boolean
name|get
init|=
name|parentemd
operator|.
name|read
operator|||
name|parentemd
operator|.
name|token
operator|>
literal|0
operator|||
operator|!
name|memberenmd
operator|.
name|last
decl_stmt|;
specifier|final
name|boolean
name|set
init|=
name|memberenmd
operator|.
name|last
operator|&&
name|store
decl_stmt|;
name|Method
name|getter
init|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"get"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Method
name|setter
init|=
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"set"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|constant
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
operator|(
name|getter
operator|.
name|rtn
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
operator|||
operator|!
name|getter
operator|.
name|arguments
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal get shortcut on field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
operator|(
name|setter
operator|.
name|rtn
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
operator|||
name|setter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal set shortcut on field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|Type
name|settype
init|=
name|setter
operator|==
literal|null
condition|?
literal|null
else|:
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|getter
operator|==
literal|null
operator|&&
name|setter
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|EXTID
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|parentemd
operator|.
name|current
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|getter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
name|setter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"put"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
operator|(
name|getter
operator|.
name|rtn
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
operator|||
name|getter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|STRING
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal map get shortcut ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
operator|(
name|setter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|||
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|STRING
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal map set shortcut ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
name|setter
operator|!=
literal|null
operator|&&
operator|!
name|getter
operator|.
name|rtn
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Shortcut argument types must match."
argument_list|)
throw|;
block|}
name|settype
operator|=
name|setter
operator|==
literal|null
condition|?
literal|null
else|:
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|constant
operator|=
name|value
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
comment|//Do nothing.
block|}
block|}
elseif|else
if|if
condition|(
name|ctx
operator|.
name|EXTINTEGER
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|parentemd
operator|.
name|current
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|getter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
name|setter
operator|=
name|parentemd
operator|.
name|current
operator|.
name|struct
operator|.
name|methods
operator|.
name|get
argument_list|(
literal|"add"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
operator|(
name|getter
operator|.
name|rtn
operator|.
name|sort
operator|==
name|Sort
operator|.
name|VOID
operator|||
name|getter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|getter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|INT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal list get shortcut ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
operator|(
name|setter
operator|.
name|rtn
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
operator|||
name|setter
operator|.
name|arguments
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|||
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|INT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal list add shortcut ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
name|setter
operator|!=
literal|null
operator|&&
operator|!
name|getter
operator|.
name|rtn
operator|.
name|equals
argument_list|(
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Shortcut argument types must match."
argument_list|)
throw|;
block|}
name|settype
operator|=
name|setter
operator|==
literal|null
condition|?
literal|null
else|:
name|setter
operator|.
name|arguments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|constant
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Illegal list shortcut value ["
operator|+
name|value
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|exception
parameter_list|)
block|{
comment|//Do nothing.
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|(
name|get
operator|||
name|set
operator|)
operator|&&
operator|(
operator|!
name|get
operator|||
name|getter
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|set
operator|||
name|setter
operator|!=
literal|null
operator|)
condition|)
block|{
name|memberenmd
operator|.
name|target
operator|=
operator|new
name|Object
index|[]
block|{
name|getter
block|,
name|setter
block|,
name|constant
operator|!=
literal|null
block|,
name|constant
block|}
expr_stmt|;
name|memberenmd
operator|.
name|type
operator|=
name|get
condition|?
name|getter
operator|.
name|rtn
else|:
name|settype
expr_stmt|;
name|analyzeLoadStoreExternal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|get
condition|?
name|getter
operator|.
name|rtn
else|:
name|setter
operator|.
name|rtn
expr_stmt|;
block|}
block|}
if|if
condition|(
name|memberenmd
operator|.
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unknown field ["
operator|+
name|value
operator|+
literal|"] for type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
name|parentemd
operator|.
name|statik
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|bracectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtnew
specifier|public
name|Void
name|visitExtnew
parameter_list|(
name|ExtnewContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|newenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|newenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
name|newenmd
operator|.
name|last
operator|=
name|parentemd
operator|.
name|scope
operator|==
literal|0
operator|&&
name|dotctx
operator|==
literal|null
operator|&&
name|bracectx
operator|==
literal|null
expr_stmt|;
specifier|final
name|String
name|name
init|=
name|ctx
operator|.
name|TYPE
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|Struct
name|struct
init|=
name|definition
operator|.
name|structs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|current
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected new call."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|struct
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Specified type ["
operator|+
name|name
operator|+
literal|"] not found."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|newenmd
operator|.
name|last
operator|&&
name|parentemd
operator|.
name|storeExpr
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot assign a value to a new call."
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|newclass
init|=
name|ctx
operator|.
name|arguments
argument_list|()
operator|!=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|newarray
init|=
operator|!
name|ctx
operator|.
name|expression
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ExpressionContext
argument_list|>
name|arguments
init|=
name|newclass
condition|?
name|ctx
operator|.
name|arguments
argument_list|()
operator|.
name|expression
argument_list|()
else|:
name|ctx
operator|.
name|expression
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|arguments
operator|.
name|size
argument_list|()
decl_stmt|;
name|Type
index|[]
name|types
decl_stmt|;
if|if
condition|(
name|newarray
condition|)
block|{
if|if
condition|(
operator|!
name|parentemd
operator|.
name|read
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"A newly created array must be assigned."
argument_list|)
throw|;
block|}
name|types
operator|=
operator|new
name|Type
index|[
name|size
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|types
argument_list|,
name|definition
operator|.
name|intType
argument_list|)
expr_stmt|;
name|newenmd
operator|.
name|target
operator|=
literal|"#makearray"
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|1
condition|)
block|{
name|newenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|struct
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|newenmd
operator|.
name|type
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|newenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|struct
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|struct
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"A newly created array cannot have zero dimensions."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|newclass
condition|)
block|{
specifier|final
name|Constructor
name|constructor
init|=
name|struct
operator|.
name|constructors
operator|.
name|get
argument_list|(
literal|"new"
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructor
operator|!=
literal|null
condition|)
block|{
name|types
operator|=
operator|new
name|Type
index|[
name|constructor
operator|.
name|arguments
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|constructor
operator|.
name|arguments
operator|.
name|toArray
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|newenmd
operator|.
name|target
operator|=
name|constructor
expr_stmt|;
name|newenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|getType
argument_list|(
name|struct
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parentemd
operator|.
name|statement
operator|=
operator|!
name|parentemd
operator|.
name|read
operator|&&
name|newenmd
operator|.
name|last
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|newenmd
operator|.
name|type
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unknown new call on type ["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unknown parser state."
argument_list|)
throw|;
block|}
if|if
condition|(
name|size
operator|!=
name|types
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"When calling ["
operator|+
name|name
operator|+
literal|"] on type "
operator|+
literal|"["
operator|+
name|struct
operator|.
name|name
operator|+
literal|"] expected ["
operator|+
name|types
operator|.
name|length
operator|+
literal|"] arguments,"
operator|+
literal|" but found ["
operator|+
name|arguments
operator|.
name|size
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|argument
init|=
literal|0
init|;
name|argument
operator|<
name|size
condition|;
operator|++
name|argument
control|)
block|{
specifier|final
name|ExpressionContext
name|exprctx
init|=
name|adapter
operator|.
name|updateExpressionTree
argument_list|(
name|arguments
operator|.
name|get
argument_list|(
name|argument
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|expremd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|exprctx
argument_list|)
decl_stmt|;
name|expremd
operator|.
name|to
operator|=
name|types
index|[
name|argument
index|]
expr_stmt|;
name|visit
argument_list|(
name|exprctx
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|expremd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|bracectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitExtstring
specifier|public
name|Void
name|visitExtstring
parameter_list|(
specifier|final
name|ExtstringContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|memberenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|memberenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|final
name|String
name|string
init|=
name|ctx
operator|.
name|STRING
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
specifier|final
name|ExtdotContext
name|dotctx
init|=
name|ctx
operator|.
name|extdot
argument_list|()
decl_stmt|;
specifier|final
name|ExtbraceContext
name|bracectx
init|=
name|ctx
operator|.
name|extbrace
argument_list|()
decl_stmt|;
name|memberenmd
operator|.
name|last
operator|=
name|parentemd
operator|.
name|scope
operator|==
literal|0
operator|&&
name|dotctx
operator|==
literal|null
operator|&&
name|bracectx
operator|==
literal|null
expr_stmt|;
specifier|final
name|boolean
name|store
init|=
name|memberenmd
operator|.
name|last
operator|&&
name|parentemd
operator|.
name|storeExpr
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|parentemd
operator|.
name|current
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected String constant ["
operator|+
name|string
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|parentemd
operator|.
name|read
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Must read String constant ["
operator|+
name|string
operator|+
literal|"]."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|store
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Cannot write to read-only String constant ["
operator|+
name|string
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|memberenmd
operator|.
name|target
operator|=
name|string
expr_stmt|;
name|memberenmd
operator|.
name|type
operator|=
name|definition
operator|.
name|stringType
expr_stmt|;
name|parentemd
operator|.
name|current
operator|=
name|definition
operator|.
name|stringType
expr_stmt|;
if|if
condition|(
name|memberenmd
operator|.
name|last
condition|)
block|{
name|parentemd
operator|.
name|constant
operator|=
name|string
expr_stmt|;
block|}
if|if
condition|(
name|dotctx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|dotctx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|dotctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bracectx
operator|!=
literal|null
condition|)
block|{
name|adapter
operator|.
name|createExtNodeMetadata
argument_list|(
name|parent
argument_list|,
name|bracectx
argument_list|)
expr_stmt|;
name|visit
argument_list|(
name|bracectx
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|visitArguments
specifier|public
name|Void
name|visitArguments
parameter_list|(
specifier|final
name|ArgumentsContext
name|ctx
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|error
argument_list|(
name|ctx
argument_list|)
operator|+
literal|"Unexpected parser state."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visitIncrement
specifier|public
name|Void
name|visitIncrement
parameter_list|(
name|IncrementContext
name|ctx
parameter_list|)
block|{
specifier|final
name|ExpressionMetadata
name|incremd
init|=
name|adapter
operator|.
name|getExpressionMetadata
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|incremd
operator|.
name|to
operator|==
literal|null
condition|?
literal|null
else|:
name|incremd
operator|.
name|to
operator|.
name|sort
decl_stmt|;
specifier|final
name|boolean
name|positive
init|=
name|ctx
operator|.
name|INCR
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|incremd
operator|.
name|to
operator|==
literal|null
condition|)
block|{
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|sort
condition|)
block|{
case|case
name|LONG
case|:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1L
else|:
operator|-
literal|1L
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|longType
expr_stmt|;
case|case
name|FLOAT
case|:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1.0F
else|:
operator|-
literal|1.0F
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|floatType
expr_stmt|;
case|case
name|DOUBLE
case|:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1.0
else|:
operator|-
literal|1.0
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|doubleType
expr_stmt|;
default|default:
name|incremd
operator|.
name|preConst
operator|=
name|positive
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
name|incremd
operator|.
name|from
operator|=
name|definition
operator|.
name|intType
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|analyzeLoadStoreExternal
specifier|private
name|void
name|analyzeLoadStoreExternal
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|)
block|{
specifier|final
name|ExtNodeMetadata
name|extenmd
init|=
name|adapter
operator|.
name|getExtNodeMetadata
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|ParserRuleContext
name|parent
init|=
name|extenmd
operator|.
name|parent
decl_stmt|;
specifier|final
name|ExternalMetadata
name|parentemd
init|=
name|adapter
operator|.
name|getExternalMetadata
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|extenmd
operator|.
name|last
operator|&&
name|parentemd
operator|.
name|storeExpr
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ParserRuleContext
name|store
init|=
name|parentemd
operator|.
name|storeExpr
decl_stmt|;
specifier|final
name|ExpressionMetadata
name|storeemd
init|=
name|adapter
operator|.
name|createExpressionMetadata
argument_list|(
name|parentemd
operator|.
name|storeExpr
argument_list|)
decl_stmt|;
specifier|final
name|int
name|token
init|=
name|parentemd
operator|.
name|token
decl_stmt|;
if|if
condition|(
name|token
operator|>
literal|0
condition|)
block|{
name|visit
argument_list|(
name|store
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|add
init|=
name|token
operator|==
name|ADD
decl_stmt|;
specifier|final
name|boolean
name|xor
init|=
name|token
operator|==
name|BWAND
operator|||
name|token
operator|==
name|BWXOR
operator|||
name|token
operator|==
name|BWOR
decl_stmt|;
specifier|final
name|boolean
name|decimal
init|=
name|token
operator|==
name|MUL
operator|||
name|token
operator|==
name|DIV
operator|||
name|token
operator|==
name|REM
operator|||
name|token
operator|==
name|SUB
decl_stmt|;
name|extenmd
operator|.
name|promote
operator|=
name|add
condition|?
name|promoteAdd
argument_list|(
name|extenmd
operator|.
name|type
argument_list|,
name|storeemd
operator|.
name|from
argument_list|)
else|:
name|xor
condition|?
name|promoteXor
argument_list|(
name|extenmd
operator|.
name|type
argument_list|,
name|storeemd
operator|.
name|from
argument_list|)
else|:
name|promoteNumeric
argument_list|(
name|extenmd
operator|.
name|type
argument_list|,
name|storeemd
operator|.
name|from
argument_list|,
name|decimal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|extenmd
operator|.
name|promote
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot apply compound assignment to "
operator|+
literal|" types ["
operator|+
name|extenmd
operator|.
name|type
operator|.
name|name
operator|+
literal|"] and ["
operator|+
name|storeemd
operator|.
name|from
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|extenmd
operator|.
name|castFrom
operator|=
name|getLegalCast
argument_list|(
name|source
argument_list|,
name|extenmd
operator|.
name|type
argument_list|,
name|extenmd
operator|.
name|promote
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|extenmd
operator|.
name|castTo
operator|=
name|getLegalCast
argument_list|(
name|source
argument_list|,
name|extenmd
operator|.
name|promote
argument_list|,
name|extenmd
operator|.
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|storeemd
operator|.
name|to
operator|=
name|add
operator|&&
name|extenmd
operator|.
name|promote
operator|.
name|sort
operator|==
name|Sort
operator|.
name|STRING
condition|?
name|storeemd
operator|.
name|from
else|:
name|extenmd
operator|.
name|promote
expr_stmt|;
name|markCast
argument_list|(
name|storeemd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeemd
operator|.
name|to
operator|=
name|extenmd
operator|.
name|type
expr_stmt|;
name|visit
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|markCast
argument_list|(
name|storeemd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|markCast
specifier|private
name|void
name|markCast
parameter_list|(
specifier|final
name|ExpressionMetadata
name|emd
parameter_list|)
block|{
if|if
condition|(
name|emd
operator|.
name|from
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|emd
operator|.
name|source
argument_list|)
operator|+
literal|"From cast type should never be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|emd
operator|.
name|to
operator|!=
literal|null
condition|)
block|{
name|emd
operator|.
name|cast
operator|=
name|getLegalCast
argument_list|(
name|emd
operator|.
name|source
argument_list|,
name|emd
operator|.
name|from
argument_list|,
name|emd
operator|.
name|to
argument_list|,
name|emd
operator|.
name|explicit
operator|||
operator|!
name|emd
operator|.
name|typesafe
argument_list|)
expr_stmt|;
if|if
condition|(
name|emd
operator|.
name|preConst
operator|!=
literal|null
operator|&&
name|emd
operator|.
name|to
operator|.
name|sort
operator|.
name|constant
condition|)
block|{
name|emd
operator|.
name|postConst
operator|=
name|constCast
argument_list|(
name|emd
operator|.
name|source
argument_list|,
name|emd
operator|.
name|preConst
argument_list|,
name|emd
operator|.
name|cast
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|emd
operator|.
name|source
argument_list|)
operator|+
literal|"To cast type should never be null."
argument_list|)
throw|;
block|}
block|}
DECL|method|getLegalCast
specifier|private
name|Cast
name|getLegalCast
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|Type
name|from
parameter_list|,
specifier|final
name|Type
name|to
parameter_list|,
specifier|final
name|boolean
name|explicit
parameter_list|)
block|{
specifier|final
name|Cast
name|cast
init|=
operator|new
name|Cast
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return
name|cast
return|;
block|}
if|if
condition|(
name|from
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
operator|&&
name|to
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
operator|||
name|from
operator|.
name|sort
operator|!=
name|Sort
operator|.
name|VOID
operator|&&
name|to
operator|.
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
specifier|final
name|Transform
name|transform
init|=
name|definition
operator|.
name|transforms
operator|.
name|get
argument_list|(
name|cast
argument_list|)
decl_stmt|;
if|if
condition|(
name|transform
operator|!=
literal|null
condition|)
block|{
return|return
name|transform
return|;
block|}
return|return
name|cast
return|;
block|}
switch|switch
condition|(
name|from
operator|.
name|sort
condition|)
block|{
case|case
name|BOOL
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|OBJECT
case|:
case|case
name|BOOL_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
block|}
break|break;
case|case
name|BYTE
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|CHAR
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|SHORT
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|CHAR
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|CHAR
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|INT
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|LONG
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|FLOAT
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|DOUBLE
case|:
return|return
name|cast
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|DOUBLE
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|cast
return|;
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|OBJECT
case|:
case|case
name|NUMBER
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|BOOL_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|BOOL
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
block|}
break|break;
case|case
name|BYTE_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|CHAR
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|SHORT_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|CHAR
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|CHAR_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|INT_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|LONG_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|FLOAT_OBJ
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|FLOAT_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DOUBLE_OBJ
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
case|case
name|DOUBLE_OBJ
case|:
switch|switch
condition|(
name|to
operator|.
name|sort
condition|)
block|{
case|case
name|DOUBLE
case|:
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|CHAR
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|BYTE_OBJ
case|:
case|case
name|SHORT_OBJ
case|:
case|case
name|CHAR_OBJ
case|:
case|case
name|INT_OBJ
case|:
case|case
name|LONG_OBJ
case|:
case|case
name|FLOAT_OBJ
case|:
if|if
condition|(
name|explicit
condition|)
return|return
name|checkTransform
argument_list|(
name|source
argument_list|,
name|cast
argument_list|)
return|;
break|break;
block|}
break|break;
block|}
try|try
block|{
name|from
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|to
operator|.
name|clazz
argument_list|)
expr_stmt|;
return|return
name|cast
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce0
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|explicit
condition|)
block|{
name|to
operator|.
name|clazz
operator|.
name|asSubclass
argument_list|(
name|from
operator|.
name|clazz
argument_list|)
expr_stmt|;
return|return
name|cast
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Cannot cast from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Cannot cast from ["
operator|+
name|from
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkTransform
specifier|private
name|Transform
name|checkTransform
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|Cast
name|cast
parameter_list|)
block|{
specifier|final
name|Transform
name|transform
init|=
name|definition
operator|.
name|transforms
operator|.
name|get
argument_list|(
name|cast
argument_list|)
decl_stmt|;
if|if
condition|(
name|transform
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Cannot cast from ["
operator|+
name|cast
operator|.
name|from
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|cast
operator|.
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
return|return
name|transform
return|;
block|}
DECL|method|constCast
specifier|private
name|Object
name|constCast
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|Object
name|constant
parameter_list|,
specifier|final
name|Cast
name|cast
parameter_list|)
block|{
if|if
condition|(
name|cast
operator|instanceof
name|Transform
condition|)
block|{
specifier|final
name|Transform
name|transform
init|=
operator|(
name|Transform
operator|)
name|cast
decl_stmt|;
return|return
name|invokeTransform
argument_list|(
name|source
argument_list|,
name|transform
argument_list|,
name|constant
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|Sort
name|fsort
init|=
name|cast
operator|.
name|from
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|tsort
init|=
name|cast
operator|.
name|to
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|fsort
operator|==
name|tsort
condition|)
block|{
return|return
name|constant
return|;
block|}
elseif|else
if|if
condition|(
name|fsort
operator|.
name|numeric
operator|&&
name|tsort
operator|.
name|numeric
condition|)
block|{
name|Number
name|number
decl_stmt|;
if|if
condition|(
name|fsort
operator|==
name|Sort
operator|.
name|CHAR
condition|)
block|{
name|number
operator|=
call|(
name|int
call|)
argument_list|(
name|char
argument_list|)
name|constant
expr_stmt|;
block|}
else|else
block|{
name|number
operator|=
operator|(
name|Number
operator|)
name|constant
expr_stmt|;
block|}
switch|switch
condition|(
name|tsort
condition|)
block|{
case|case
name|BYTE
case|:
return|return
name|number
operator|.
name|byteValue
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
name|number
operator|.
name|shortValue
argument_list|()
return|;
case|case
name|CHAR
case|:
return|return
operator|(
name|char
operator|)
name|number
operator|.
name|intValue
argument_list|()
return|;
case|case
name|INT
case|:
return|return
name|number
operator|.
name|intValue
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
name|number
operator|.
name|longValue
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
name|number
operator|.
name|floatValue
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
name|number
operator|.
name|doubleValue
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Expected numeric type for cast."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"No valid constant cast from "
operator|+
literal|"["
operator|+
name|cast
operator|.
name|from
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"] to "
operator|+
literal|"["
operator|+
name|cast
operator|.
name|to
operator|.
name|clazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|invokeTransform
specifier|private
name|Object
name|invokeTransform
parameter_list|(
specifier|final
name|ParserRuleContext
name|source
parameter_list|,
specifier|final
name|Transform
name|transform
parameter_list|,
specifier|final
name|Object
name|object
parameter_list|)
block|{
specifier|final
name|Method
name|method
init|=
name|transform
operator|.
name|method
decl_stmt|;
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
name|jmethod
init|=
name|method
operator|.
name|reflect
decl_stmt|;
specifier|final
name|int
name|modifiers
init|=
name|jmethod
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
return|return
name|jmethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|object
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|jmethod
operator|.
name|invoke
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
decl||
name|NullPointerException
decl||
name|ExceptionInInitializerError
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|error
argument_list|(
name|source
argument_list|)
operator|+
literal|"Unable to invoke transform to cast constant from "
operator|+
literal|"["
operator|+
name|transform
operator|.
name|from
operator|.
name|name
operator|+
literal|"] to ["
operator|+
name|transform
operator|.
name|to
operator|.
name|name
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
DECL|method|promoteNumeric
specifier|private
name|Type
name|promoteNumeric
parameter_list|(
specifier|final
name|Type
name|from
parameter_list|,
name|boolean
name|decimal
parameter_list|,
name|boolean
name|primitive
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|from
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort
operator|==
name|Sort
operator|.
name|NUMBER
operator|)
operator|&&
name|decimal
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sort
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|)
operator|&&
name|decimal
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort
operator|==
name|Sort
operator|.
name|NUMBER
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort
operator|.
name|numeric
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|promoteNumeric
specifier|private
name|Type
name|promoteNumeric
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|,
name|boolean
name|decimal
parameter_list|,
name|boolean
name|primitive
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
if|if
condition|(
name|decimal
condition|)
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|NUMBER
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|NUMBER
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
block|}
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|NUMBER
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|NUMBER
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|promoteAdd
specifier|private
name|Type
name|promoteAdd
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|STRING
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|STRING
condition|)
block|{
return|return
name|definition
operator|.
name|stringType
return|;
block|}
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|promoteXor
specifier|private
name|Type
name|promoteXor
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|||
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|definition
operator|.
name|booleanType
return|;
block|}
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|promoteEquality
specifier|private
name|Type
name|promoteEquality
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
specifier|final
name|boolean
name|primitive
init|=
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|booleanType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
name|primitive
argument_list|)
return|;
block|}
return|return
name|definition
operator|.
name|objectType
return|;
block|}
DECL|method|promoteReference
specifier|private
name|Type
name|promoteReference
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|)
block|{
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
condition|)
block|{
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|definition
operator|.
name|booleanType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
return|return
name|promoteNumeric
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
return|return
name|definition
operator|.
name|objectType
return|;
block|}
DECL|method|promoteConditional
specifier|private
name|Type
name|promoteConditional
parameter_list|(
specifier|final
name|Type
name|from0
parameter_list|,
specifier|final
name|Type
name|from1
parameter_list|,
specifier|final
name|Object
name|const0
parameter_list|,
specifier|final
name|Object
name|const1
parameter_list|)
block|{
if|if
condition|(
name|from0
operator|.
name|equals
argument_list|(
name|from1
argument_list|)
condition|)
block|{
return|return
name|from0
return|;
block|}
specifier|final
name|Sort
name|sort0
init|=
name|from0
operator|.
name|sort
decl_stmt|;
specifier|final
name|Sort
name|sort1
init|=
name|from1
operator|.
name|sort
decl_stmt|;
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DEF
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DEF
condition|)
block|{
return|return
name|definition
operator|.
name|defType
return|;
block|}
specifier|final
name|boolean
name|primitive
init|=
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
decl_stmt|;
if|if
condition|(
name|sort0
operator|.
name|bool
operator|&&
name|sort1
operator|.
name|bool
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|booleanType
else|:
name|definition
operator|.
name|booleanobjType
return|;
block|}
if|if
condition|(
name|sort0
operator|.
name|numeric
operator|&&
name|sort1
operator|.
name|numeric
condition|)
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|DOUBLE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|doubleType
else|:
name|definition
operator|.
name|doubleobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|FLOAT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|floatType
else|:
name|definition
operator|.
name|floatobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|LONG_OBJ
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|LONG_OBJ
condition|)
block|{
return|return
name|sort0
operator|.
name|primitive
operator|&&
name|sort1
operator|.
name|primitive
condition|?
name|definition
operator|.
name|longType
else|:
name|definition
operator|.
name|longobjType
return|;
block|}
else|else
block|{
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|constant
init|=
operator|(
name|short
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|constant
init|=
operator|(
name|short
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|shortType
else|:
name|definition
operator|.
name|shortobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|charType
else|:
name|definition
operator|.
name|charobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|const1
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const1
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Character
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Character
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|sort0
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort0
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|BYTE
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|BYTE_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Byte
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Byte
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|SHORT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|SHORT_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Short
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|CHAR
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|CHAR_OBJ
condition|)
block|{
if|if
condition|(
name|const0
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|constant
init|=
operator|(
name|int
operator|)
name|const0
decl_stmt|;
if|if
condition|(
name|constant
operator|<=
name|Character
operator|.
name|MAX_VALUE
operator|&&
name|constant
operator|>=
name|Character
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|byteType
else|:
name|definition
operator|.
name|byteobjType
return|;
block|}
block|}
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
elseif|else
if|if
condition|(
name|sort1
operator|==
name|Sort
operator|.
name|INT
operator|||
name|sort1
operator|==
name|Sort
operator|.
name|INT_OBJ
condition|)
block|{
return|return
name|primitive
condition|?
name|definition
operator|.
name|intType
else|:
name|definition
operator|.
name|intobjType
return|;
block|}
block|}
block|}
block|}
specifier|final
name|Pair
name|pair
init|=
operator|new
name|Pair
argument_list|(
name|from0
argument_list|,
name|from1
argument_list|)
decl_stmt|;
specifier|final
name|Type
name|bound
init|=
name|definition
operator|.
name|bounds
operator|.
name|get
argument_list|(
name|pair
argument_list|)
decl_stmt|;
return|return
name|bound
operator|==
literal|null
condition|?
name|definition
operator|.
name|objectType
else|:
name|bound
return|;
block|}
block|}
end_class

end_unit

