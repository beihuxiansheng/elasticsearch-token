begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plan.a
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plan
operator|.
name|a
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ANTLRInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|v4
operator|.
name|runtime
operator|.
name|ParserRuleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
operator|.
name|BootstrapInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|CodeSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_class
DECL|class|Compiler
specifier|final
class|class
name|Compiler
block|{
DECL|field|DEFAULT_DEFINITION
specifier|private
specifier|static
name|Definition
name|DEFAULT_DEFINITION
init|=
operator|new
name|Definition
argument_list|(
operator|new
name|Definition
argument_list|()
argument_list|)
decl_stmt|;
comment|/** we define the class with lowest privileges */
DECL|field|CODESOURCE
specifier|private
specifier|static
specifier|final
name|CodeSource
name|CODESOURCE
decl_stmt|;
static|static
block|{
try|try
block|{
name|CODESOURCE
operator|=
operator|new
name|CodeSource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:"
operator|+
name|BootstrapInfo
operator|.
name|UNTRUSTED_CODEBASE
argument_list|)
argument_list|,
operator|(
name|Certificate
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|impossible
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
block|}
DECL|class|Loader
specifier|static
class|class
name|Loader
extends|extends
name|SecureClassLoader
block|{
DECL|method|Loader
name|Loader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|define
name|Class
argument_list|<
name|?
extends|extends
name|Executable
argument_list|>
name|define
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|defineClass
argument_list|(
name|name
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|CODESOURCE
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Executable
operator|.
name|class
argument_list|)
return|;
block|}
block|}
DECL|method|compile
specifier|static
name|Executable
name|compile
parameter_list|(
name|Loader
name|loader
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|source
parameter_list|,
specifier|final
name|Definition
name|custom
parameter_list|,
name|CompilerSettings
name|settings
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Definition
name|definition
init|=
name|custom
operator|==
literal|null
condition|?
name|DEFAULT_DEFINITION
else|:
operator|new
name|Definition
argument_list|(
name|custom
argument_list|)
decl_stmt|;
comment|//long end = System.currentTimeMillis() - start;
comment|//System.out.println("types: " + end);
comment|//start = System.currentTimeMillis();
comment|//final ParserRuleContext root = createParseTree(source, types);
specifier|final
name|ANTLRInputStream
name|stream
init|=
operator|new
name|ANTLRInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|ErrorHandlingLexer
name|lexer
init|=
operator|new
name|ErrorHandlingLexer
argument_list|(
name|stream
argument_list|)
decl_stmt|;
specifier|final
name|PlanAParser
name|parser
init|=
operator|new
name|PlanAParser
argument_list|(
operator|new
name|CommonTokenStream
argument_list|(
name|lexer
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ParserErrorStrategy
name|strategy
init|=
operator|new
name|ParserErrorStrategy
argument_list|()
decl_stmt|;
name|lexer
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|lexer
operator|.
name|setTypes
argument_list|(
name|definition
operator|.
name|structs
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|//List<? extends Token> tokens = lexer.getAllTokens();
comment|//for (final Token token : tokens) {
comment|//    System.out.println(token.getType() + " " + token.getText());
comment|//}
name|parser
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|ParserRuleContext
name|root
init|=
name|parser
operator|.
name|source
argument_list|()
decl_stmt|;
comment|//end = System.currentTimeMillis() - start;
comment|//System.out.println("tree: " + end);
specifier|final
name|Adapter
name|adapter
init|=
operator|new
name|Adapter
argument_list|(
name|definition
argument_list|,
name|source
argument_list|,
name|root
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Analyzer
operator|.
name|analyze
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|//System.out.println(root.toStringTree(parser));
comment|//end = System.currentTimeMillis() - start;
comment|//System.out.println("analyze: " + end);
comment|//start = System.currentTimeMillis();
specifier|final
name|byte
index|[]
name|bytes
init|=
name|Writer
operator|.
name|write
argument_list|(
name|adapter
argument_list|)
decl_stmt|;
comment|//end = System.currentTimeMillis() - start;
comment|//System.out.println("write: " + end);
comment|//start = System.currentTimeMillis();
specifier|final
name|Executable
name|executable
init|=
name|createExecutable
argument_list|(
name|loader
argument_list|,
name|definition
argument_list|,
name|name
argument_list|,
name|source
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
comment|//end = System.currentTimeMillis() - start;
comment|//System.out.println("create: " + end);
return|return
name|executable
return|;
block|}
DECL|method|createParseTree
specifier|private
specifier|static
name|ParserRuleContext
name|createParseTree
parameter_list|(
name|String
name|source
parameter_list|,
name|Definition
name|definition
parameter_list|)
block|{
specifier|final
name|ANTLRInputStream
name|stream
init|=
operator|new
name|ANTLRInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|ErrorHandlingLexer
name|lexer
init|=
operator|new
name|ErrorHandlingLexer
argument_list|(
name|stream
argument_list|)
decl_stmt|;
specifier|final
name|PlanAParser
name|parser
init|=
operator|new
name|PlanAParser
argument_list|(
operator|new
name|CommonTokenStream
argument_list|(
name|lexer
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ParserErrorStrategy
name|strategy
init|=
operator|new
name|ParserErrorStrategy
argument_list|()
decl_stmt|;
name|lexer
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|lexer
operator|.
name|setTypes
argument_list|(
name|definition
operator|.
name|structs
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|removeErrorListeners
argument_list|()
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|ParserRuleContext
name|root
init|=
name|parser
operator|.
name|source
argument_list|()
decl_stmt|;
comment|// System.out.println(root.toStringTree(parser));
return|return
name|root
return|;
block|}
DECL|method|createExecutable
specifier|private
specifier|static
name|Executable
name|createExecutable
parameter_list|(
name|Loader
name|loader
parameter_list|,
name|Definition
name|definition
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|source
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
comment|// for debugging:
comment|//try {
comment|//   FileOutputStream f = new FileOutputStream(new File("/Users/jdconrad/lang/generated/out.class"), false);
comment|//   f.write(bytes);
comment|//   f.close();
comment|//} catch (Exception e) {
comment|//   throw new RuntimeException(e);
comment|//}
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Executable
argument_list|>
name|clazz
init|=
name|loader
operator|.
name|define
argument_list|(
name|Writer
operator|.
name|CLASS_NAME
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
argument_list|<
name|?
extends|extends
name|Executable
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Definition
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|definition
argument_list|,
name|name
argument_list|,
name|source
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An internal error occurred attempting to define the script ["
operator|+
name|name
operator|+
literal|"]."
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
DECL|method|Compiler
specifier|private
name|Compiler
parameter_list|()
block|{}
block|}
end_class

end_unit

