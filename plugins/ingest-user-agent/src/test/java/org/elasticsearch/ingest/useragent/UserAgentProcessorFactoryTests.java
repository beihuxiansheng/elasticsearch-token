begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.useragent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|useragent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_class
DECL|class|UserAgentProcessorFactoryTests
specifier|public
class|class
name|UserAgentProcessorFactoryTests
extends|extends
name|ESTestCase
block|{
DECL|field|userAgentParsers
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|UserAgentParser
argument_list|>
name|userAgentParsers
decl_stmt|;
DECL|field|regexWithoutDevicesFilename
specifier|private
specifier|static
name|String
name|regexWithoutDevicesFilename
init|=
literal|"regexes_without_devices.yml"
decl_stmt|;
DECL|field|userAgentConfigDir
specifier|private
specifier|static
name|Path
name|userAgentConfigDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createUserAgentParsers
specifier|public
specifier|static
name|void
name|createUserAgentParsers
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|configDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|userAgentConfigDir
operator|=
name|configDir
operator|.
name|resolve
argument_list|(
literal|"ingest-user-agent"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|userAgentConfigDir
argument_list|)
expr_stmt|;
comment|// Copy file, leaving out the device parsers at the end
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|UserAgentProcessor
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/regexes.yml"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|;
name|BufferedWriter
name|writer
operator|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|userAgentConfigDir
operator|.
name|resolve
argument_list|(
name|regexWithoutDevicesFilename
argument_list|)
argument_list|)
init|;
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"device_parsers:"
argument_list|)
condition|)
block|{
break|break;
block|}
name|writer
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
block|}
name|userAgentParsers
operator|=
name|IngestUserAgentPlugin
operator|.
name|createUserAgentParsers
argument_list|(
name|userAgentConfigDir
argument_list|,
operator|new
name|UserAgentCache
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildDefaults
specifier|public
name|void
name|testBuildDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|String
name|processorTag
init|=
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|UserAgentProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTag
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|processorTag
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTargetField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"user_agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getUaPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getOsPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getDevicePatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getProperties
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|UserAgentProcessor
operator|.
name|Property
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|processor
operator|.
name|isIgnoreMissing
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildWithIgnoreMissing
specifier|public
name|void
name|testBuildWithIgnoreMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"ignore_missing"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|processorTag
init|=
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|UserAgentProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTag
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|processorTag
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTargetField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"user_agent"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getUaPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getOsPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getDevicePatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getProperties
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|UserAgentProcessor
operator|.
name|Property
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|processor
operator|.
name|isIgnoreMissing
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildTargetField
specifier|public
name|void
name|testBuildTargetField
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"target_field"
argument_list|,
literal|"_target_field"
argument_list|)
expr_stmt|;
name|UserAgentProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getTargetField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_target_field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildRegexFile
specifier|public
name|void
name|testBuildRegexFile
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"regex_file"
argument_list|,
name|regexWithoutDevicesFilename
argument_list|)
expr_stmt|;
name|UserAgentProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getUaPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getOsPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getUaParser
argument_list|()
operator|.
name|getDevicePatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildNonExistingRegexFile
specifier|public
name|void
name|testBuildNonExistingRegexFile
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"regex_file"
argument_list|,
literal|"does-not-exist.yml"
argument_list|)
expr_stmt|;
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[regex_file] regex file [does-not-exist.yml] doesn't exist (has to exist at node startup)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuildFields
specifier|public
name|void
name|testBuildFields
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|UserAgentProcessor
operator|.
name|Property
argument_list|>
name|properties
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|UserAgentProcessor
operator|.
name|Property
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numFields
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|UserAgentProcessor
operator|.
name|Property
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|UserAgentProcessor
operator|.
name|Property
name|property
init|=
name|UserAgentProcessor
operator|.
name|Property
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|property
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"properties"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|UserAgentProcessor
name|processor
init|=
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|getProperties
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|properties
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidProperty
specifier|public
name|void
name|testInvalidProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"properties"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[properties] illegal property value [invalid]. valid values are [NAME, MAJOR, MINOR, "
operator|+
literal|"PATCH, OS, OS_NAME, OS_MAJOR, OS_MINOR, DEVICE, BUILD]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidPropertiesType
specifier|public
name|void
name|testInvalidPropertiesType
parameter_list|()
throws|throws
name|Exception
block|{
name|UserAgentProcessor
operator|.
name|Factory
name|factory
init|=
operator|new
name|UserAgentProcessor
operator|.
name|Factory
argument_list|(
name|userAgentParsers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"_field"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"properties"
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
name|ElasticsearchParseException
name|e
init|=
name|expectThrows
argument_list|(
name|ElasticsearchParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"[properties] property isn't a list, but of type [java.lang.String]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

