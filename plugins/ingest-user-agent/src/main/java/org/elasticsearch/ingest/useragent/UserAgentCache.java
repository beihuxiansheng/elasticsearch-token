begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.useragent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|useragent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|useragent
operator|.
name|UserAgentParser
operator|.
name|Details
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|UserAgentCache
class|class
name|UserAgentCache
block|{
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|CompositeCacheKey
argument_list|,
name|Details
argument_list|>
name|cache
decl_stmt|;
DECL|method|UserAgentCache
name|UserAgentCache
parameter_list|(
name|long
name|cacheSize
parameter_list|)
block|{
name|cache
operator|=
name|CacheBuilder
operator|.
expr|<
name|CompositeCacheKey
operator|,
name|Details
operator|>
name|builder
argument_list|()
operator|.
name|setMaximumWeight
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|Details
name|get
parameter_list|(
name|String
name|parserName
parameter_list|,
name|String
name|userAgent
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
operator|new
name|CompositeCacheKey
argument_list|(
name|parserName
argument_list|,
name|userAgent
argument_list|)
argument_list|)
return|;
block|}
DECL|method|put
specifier|public
name|void
name|put
parameter_list|(
name|String
name|parserName
parameter_list|,
name|String
name|userAgent
parameter_list|,
name|Details
name|details
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
operator|new
name|CompositeCacheKey
argument_list|(
name|parserName
argument_list|,
name|userAgent
argument_list|)
argument_list|,
name|details
argument_list|)
expr_stmt|;
block|}
DECL|class|CompositeCacheKey
specifier|private
specifier|static
specifier|final
class|class
name|CompositeCacheKey
block|{
DECL|field|parserName
specifier|private
specifier|final
name|String
name|parserName
decl_stmt|;
DECL|field|userAgent
specifier|private
specifier|final
name|String
name|userAgent
decl_stmt|;
DECL|method|CompositeCacheKey
name|CompositeCacheKey
parameter_list|(
name|String
name|parserName
parameter_list|,
name|String
name|userAgent
parameter_list|)
block|{
name|this
operator|.
name|parserName
operator|=
name|parserName
expr_stmt|;
name|this
operator|.
name|userAgent
operator|=
name|userAgent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|CompositeCacheKey
condition|)
block|{
name|CompositeCacheKey
name|s
init|=
operator|(
name|CompositeCacheKey
operator|)
name|obj
decl_stmt|;
return|return
name|parserName
operator|.
name|equals
argument_list|(
name|s
operator|.
name|parserName
argument_list|)
operator|&&
name|userAgent
operator|.
name|equals
argument_list|(
name|s
operator|.
name|userAgent
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|parserName
argument_list|,
name|userAgent
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

