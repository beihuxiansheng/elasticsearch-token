begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest.useragent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|useragent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|AbstractProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|useragent
operator|.
name|UserAgentParser
operator|.
name|Details
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|useragent
operator|.
name|UserAgentParser
operator|.
name|VersionedName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
operator|.
name|newConfigurationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
operator|.
name|readBooleanProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
operator|.
name|readOptionalList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|ConfigurationUtils
operator|.
name|readStringProperty
import|;
end_import

begin_class
DECL|class|UserAgentProcessor
specifier|public
class|class
name|UserAgentProcessor
extends|extends
name|AbstractProcessor
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"user_agent"
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|targetField
specifier|private
specifier|final
name|String
name|targetField
decl_stmt|;
DECL|field|properties
specifier|private
specifier|final
name|Set
argument_list|<
name|Property
argument_list|>
name|properties
decl_stmt|;
DECL|field|parser
specifier|private
specifier|final
name|UserAgentParser
name|parser
decl_stmt|;
DECL|field|ignoreMissing
specifier|private
specifier|final
name|boolean
name|ignoreMissing
decl_stmt|;
DECL|method|UserAgentProcessor
specifier|public
name|UserAgentProcessor
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|targetField
parameter_list|,
name|UserAgentParser
name|parser
parameter_list|,
name|Set
argument_list|<
name|Property
argument_list|>
name|properties
parameter_list|,
name|boolean
name|ignoreMissing
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|targetField
operator|=
name|targetField
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
name|this
operator|.
name|ignoreMissing
operator|=
name|ignoreMissing
expr_stmt|;
block|}
DECL|method|isIgnoreMissing
name|boolean
name|isIgnoreMissing
parameter_list|()
block|{
return|return
name|ignoreMissing
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|IngestDocument
name|ingestDocument
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|userAgent
init|=
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
name|field
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|ignoreMissing
argument_list|)
decl_stmt|;
if|if
condition|(
name|userAgent
operator|==
literal|null
operator|&&
name|ignoreMissing
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|userAgent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field ["
operator|+
name|field
operator|+
literal|"] is null, cannot parse user-agent."
argument_list|)
throw|;
block|}
name|Details
name|uaClient
init|=
name|parser
operator|.
name|parse
argument_list|(
name|userAgent
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|uaDetails
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
name|property
range|:
name|this
operator|.
name|properties
control|)
block|{
switch|switch
condition|(
name|property
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|uaClient
operator|.
name|userAgent
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|userAgent
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|uaClient
operator|.
name|userAgent
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Other"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAJOR
case|:
if|if
condition|(
name|uaClient
operator|.
name|userAgent
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|userAgent
operator|.
name|major
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"major"
argument_list|,
name|uaClient
operator|.
name|userAgent
operator|.
name|major
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MINOR
case|:
if|if
condition|(
name|uaClient
operator|.
name|userAgent
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|userAgent
operator|.
name|minor
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"minor"
argument_list|,
name|uaClient
operator|.
name|userAgent
operator|.
name|minor
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PATCH
case|:
if|if
condition|(
name|uaClient
operator|.
name|userAgent
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|userAgent
operator|.
name|patch
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"patch"
argument_list|,
name|uaClient
operator|.
name|userAgent
operator|.
name|patch
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BUILD
case|:
if|if
condition|(
name|uaClient
operator|.
name|userAgent
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|userAgent
operator|.
name|build
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"build"
argument_list|,
name|uaClient
operator|.
name|userAgent
operator|.
name|build
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OS
case|:
if|if
condition|(
name|uaClient
operator|.
name|operatingSystem
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"os"
argument_list|,
name|buildFullOSName
argument_list|(
name|uaClient
operator|.
name|operatingSystem
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"os"
argument_list|,
literal|"Other"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OS_NAME
case|:
if|if
condition|(
name|uaClient
operator|.
name|operatingSystem
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|operatingSystem
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"os_name"
argument_list|,
name|uaClient
operator|.
name|operatingSystem
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"os_name"
argument_list|,
literal|"Other"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OS_MAJOR
case|:
if|if
condition|(
name|uaClient
operator|.
name|operatingSystem
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|operatingSystem
operator|.
name|major
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"os_major"
argument_list|,
name|uaClient
operator|.
name|operatingSystem
operator|.
name|major
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OS_MINOR
case|:
if|if
condition|(
name|uaClient
operator|.
name|operatingSystem
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|operatingSystem
operator|.
name|minor
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"os_minor"
argument_list|,
name|uaClient
operator|.
name|operatingSystem
operator|.
name|minor
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEVICE
case|:
if|if
condition|(
name|uaClient
operator|.
name|device
operator|!=
literal|null
operator|&&
name|uaClient
operator|.
name|device
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"device"
argument_list|,
name|uaClient
operator|.
name|device
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uaDetails
operator|.
name|put
argument_list|(
literal|"device"
argument_list|,
literal|"Other"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|targetField
argument_list|,
name|uaDetails
argument_list|)
expr_stmt|;
block|}
comment|/** To maintain compatibility with logstash-filter-useragent */
DECL|method|buildFullOSName
specifier|private
name|String
name|buildFullOSName
parameter_list|(
name|VersionedName
name|operatingSystem
parameter_list|)
block|{
if|if
condition|(
name|operatingSystem
operator|==
literal|null
operator|||
name|operatingSystem
operator|.
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|operatingSystem
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|operatingSystem
operator|.
name|major
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|operatingSystem
operator|.
name|major
argument_list|)
expr_stmt|;
if|if
condition|(
name|operatingSystem
operator|.
name|minor
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|operatingSystem
operator|.
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|operatingSystem
operator|.
name|patch
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|operatingSystem
operator|.
name|patch
argument_list|)
expr_stmt|;
if|if
condition|(
name|operatingSystem
operator|.
name|build
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|operatingSystem
operator|.
name|build
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
DECL|method|getField
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|getTargetField
name|String
name|getTargetField
parameter_list|()
block|{
return|return
name|targetField
return|;
block|}
DECL|method|getProperties
name|Set
argument_list|<
name|Property
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|getUaParser
name|UserAgentParser
name|getUaParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
specifier|final
class|class
name|Factory
implements|implements
name|Processor
operator|.
name|Factory
block|{
DECL|field|userAgentParsers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|UserAgentParser
argument_list|>
name|userAgentParsers
decl_stmt|;
DECL|method|Factory
specifier|public
name|Factory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|UserAgentParser
argument_list|>
name|userAgentParsers
parameter_list|)
block|{
name|this
operator|.
name|userAgentParsers
operator|=
name|userAgentParsers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|UserAgentProcessor
name|create
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Processor
operator|.
name|Factory
argument_list|>
name|factories
parameter_list|,
name|String
name|processorTag
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|field
init|=
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"field"
argument_list|)
decl_stmt|;
name|String
name|targetField
init|=
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"target_field"
argument_list|,
literal|"user_agent"
argument_list|)
decl_stmt|;
name|String
name|regexFilename
init|=
name|readStringProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"regex_file"
argument_list|,
name|IngestUserAgentPlugin
operator|.
name|DEFAULT_PARSER_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|propertyNames
init|=
name|readOptionalList
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"properties"
argument_list|)
decl_stmt|;
name|boolean
name|ignoreMissing
init|=
name|readBooleanProperty
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
name|config
argument_list|,
literal|"ignore_missing"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|UserAgentParser
name|parser
init|=
name|userAgentParsers
operator|.
name|get
argument_list|(
name|regexFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
throw|throw
name|newConfigurationException
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
literal|"regex_file"
argument_list|,
literal|"regex file ["
operator|+
name|regexFilename
operator|+
literal|"] doesn't exist (has to exist at node startup)"
argument_list|)
throw|;
block|}
specifier|final
name|Set
argument_list|<
name|Property
argument_list|>
name|properties
decl_stmt|;
if|if
condition|(
name|propertyNames
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Property
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|propertyNames
control|)
block|{
try|try
block|{
name|properties
operator|.
name|add
argument_list|(
name|Property
operator|.
name|parseProperty
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
name|newConfigurationException
argument_list|(
name|TYPE
argument_list|,
name|processorTag
argument_list|,
literal|"properties"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|properties
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Property
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|UserAgentProcessor
argument_list|(
name|processorTag
argument_list|,
name|field
argument_list|,
name|targetField
argument_list|,
name|parser
argument_list|,
name|properties
argument_list|,
name|ignoreMissing
argument_list|)
return|;
block|}
block|}
DECL|enum|Property
enum|enum
name|Property
block|{
DECL|enum constant|NAME
DECL|enum constant|MAJOR
DECL|enum constant|MINOR
DECL|enum constant|PATCH
DECL|enum constant|OS
DECL|enum constant|OS_NAME
DECL|enum constant|OS_MAJOR
DECL|enum constant|OS_MINOR
DECL|enum constant|DEVICE
DECL|enum constant|BUILD
name|NAME
block|,
name|MAJOR
block|,
name|MINOR
block|,
name|PATCH
block|,
name|OS
block|,
name|OS_NAME
block|,
name|OS_MAJOR
block|,
name|OS_MINOR
block|,
name|DEVICE
block|,
name|BUILD
block|;
DECL|method|parseProperty
specifier|public
specifier|static
name|Property
name|parseProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
try|try
block|{
return|return
name|valueOf
argument_list|(
name|propertyName
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal property value ["
operator|+
name|propertyName
operator|+
literal|"]. valid values are "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Property
operator|.
name|class
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

