begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RawCollationKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RuleBasedCollator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|util
operator|.
name|ULocale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|IndexableBinaryStringTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|DocValuesIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|LongSupplier
import|;
end_import

begin_class
DECL|class|ICUCollationKeywordFieldMapper
specifier|public
class|class
name|ICUCollationKeywordFieldMapper
extends|extends
name|FieldMapper
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"icu_collation_keyword"
decl_stmt|;
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|MappedFieldType
name|FIELD_TYPE
init|=
operator|new
name|CollationFieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|NULL_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|NULL_VALUE
init|=
literal|null
decl_stmt|;
block|}
DECL|class|CollationFieldType
specifier|public
specifier|static
specifier|final
class|class
name|CollationFieldType
extends|extends
name|StringFieldType
block|{
DECL|field|collator
specifier|private
name|Collator
name|collator
init|=
literal|null
decl_stmt|;
DECL|method|CollationFieldType
specifier|public
name|CollationFieldType
parameter_list|()
block|{
name|setIndexAnalyzer
argument_list|(
name|Lucene
operator|.
name|KEYWORD_ANALYZER
argument_list|)
expr_stmt|;
name|setSearchAnalyzer
argument_list|(
name|Lucene
operator|.
name|KEYWORD_ANALYZER
argument_list|)
expr_stmt|;
block|}
DECL|method|CollationFieldType
specifier|protected
name|CollationFieldType
parameter_list|(
name|CollationFieldType
name|ref
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|this
operator|.
name|collator
operator|=
name|ref
operator|.
name|collator
expr_stmt|;
block|}
DECL|method|clone
specifier|public
name|CollationFieldType
name|clone
parameter_list|()
block|{
return|return
operator|new
name|CollationFieldType
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|collator
argument_list|,
operator|(
operator|(
name|CollationFieldType
operator|)
name|o
operator|)
operator|.
name|collator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkCompatibility
specifier|public
name|void
name|checkCompatibility
parameter_list|(
name|MappedFieldType
name|otherFT
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|super
operator|.
name|checkCompatibility
argument_list|(
name|otherFT
argument_list|,
name|conflicts
argument_list|,
name|strict
argument_list|)
expr_stmt|;
name|CollationFieldType
name|other
init|=
operator|(
name|CollationFieldType
operator|)
name|otherFT
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|collator
argument_list|,
name|other
operator|.
name|collator
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"mapper ["
operator|+
name|name
argument_list|()
operator|+
literal|"] has different [collator]"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|collator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|typeName
specifier|public
name|String
name|typeName
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
DECL|method|collator
specifier|public
name|Collator
name|collator
parameter_list|()
block|{
return|return
name|collator
return|;
block|}
DECL|method|setCollator
specifier|public
name|void
name|setCollator
parameter_list|(
name|Collator
name|collator
parameter_list|)
block|{
name|checkIfFrozen
argument_list|()
expr_stmt|;
name|this
operator|.
name|collator
operator|=
name|collator
operator|.
name|isFrozen
argument_list|()
condition|?
name|collator
else|:
name|collator
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nullValueQuery
specifier|public
name|Query
name|nullValueQuery
parameter_list|()
block|{
if|if
condition|(
name|nullValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|termQuery
argument_list|(
name|nullValue
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fielddataBuilder
specifier|public
name|IndexFieldData
operator|.
name|Builder
name|fielddataBuilder
parameter_list|()
block|{
name|failIfNoDocValues
argument_list|()
expr_stmt|;
return|return
operator|new
name|DocValuesIndexFieldData
operator|.
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indexedValueForSearch
specifier|protected
name|BytesRef
name|indexedValueForSearch
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|BytesRef
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|value
operator|)
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collator
operator|!=
literal|null
condition|)
block|{
name|RawCollationKey
name|key
init|=
name|collator
operator|.
name|getRawCollationKey
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|BytesRef
argument_list|(
name|key
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|size
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"collator is null"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|fuzzyQuery
specifier|public
name|Query
name|fuzzyQuery
parameter_list|(
name|Object
name|value
parameter_list|,
name|Fuzziness
name|fuzziness
parameter_list|,
name|int
name|prefixLength
parameter_list|,
name|int
name|maxExpansions
parameter_list|,
name|boolean
name|transpositions
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|prefixQuery
specifier|public
name|Query
name|prefixQuery
parameter_list|(
name|String
name|value
parameter_list|,
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|regexpQuery
specifier|public
name|Query
name|regexpQuery
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|maxDeterminizedStates
parameter_list|,
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|field|COLLATE_FORMAT
specifier|public
specifier|static
name|DocValueFormat
name|COLLATE_FORMAT
init|=
operator|new
name|DocValueFormat
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
literal|"collate"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{             }
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|long
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|double
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
name|int
name|encodedLength
init|=
name|IndexableBinaryStringTools
operator|.
name|getEncodedLength
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
decl_stmt|;
name|char
index|[]
name|encoded
init|=
operator|new
name|char
index|[
name|encodedLength
index|]
decl_stmt|;
name|IndexableBinaryStringTools
operator|.
name|encode
argument_list|(
name|value
operator|.
name|bytes
argument_list|,
name|value
operator|.
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|,
name|encodedLength
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|encodedLength
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|parseLong
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|roundUp
parameter_list|,
name|LongSupplier
name|now
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|parseDouble
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|roundUp
parameter_list|,
name|LongSupplier
name|now
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|parseBytesRef
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|char
index|[]
name|encoded
init|=
name|value
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|decodedLength
init|=
name|IndexableBinaryStringTools
operator|.
name|getDecodedLength
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|encoded
operator|.
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decoded
init|=
operator|new
name|byte
index|[
name|decodedLength
index|]
decl_stmt|;
name|IndexableBinaryStringTools
operator|.
name|decode
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|,
name|encoded
operator|.
name|length
argument_list|,
name|decoded
argument_list|,
literal|0
argument_list|,
name|decodedLength
argument_list|)
expr_stmt|;
return|return
operator|new
name|BytesRef
argument_list|(
name|decoded
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|docValueFormat
specifier|public
name|DocValueFormat
name|docValueFormat
parameter_list|(
specifier|final
name|String
name|format
parameter_list|,
specifier|final
name|DateTimeZone
name|timeZone
parameter_list|)
block|{
return|return
name|COLLATE_FORMAT
return|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|FieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|ICUCollationKeywordFieldMapper
argument_list|>
block|{
DECL|field|rules
specifier|private
name|String
name|rules
init|=
literal|null
decl_stmt|;
DECL|field|language
specifier|private
name|String
name|language
init|=
literal|null
decl_stmt|;
DECL|field|country
specifier|private
name|String
name|country
init|=
literal|null
decl_stmt|;
DECL|field|variant
specifier|private
name|String
name|variant
init|=
literal|null
decl_stmt|;
DECL|field|strength
specifier|private
name|String
name|strength
init|=
literal|null
decl_stmt|;
DECL|field|decomposition
specifier|private
name|String
name|decomposition
init|=
literal|null
decl_stmt|;
DECL|field|alternate
specifier|private
name|String
name|alternate
init|=
literal|null
decl_stmt|;
DECL|field|caseLevel
specifier|private
name|boolean
name|caseLevel
init|=
literal|false
decl_stmt|;
DECL|field|caseFirst
specifier|private
name|String
name|caseFirst
init|=
literal|null
decl_stmt|;
DECL|field|numeric
specifier|private
name|boolean
name|numeric
init|=
literal|false
decl_stmt|;
DECL|field|variableTop
specifier|private
name|String
name|variableTop
init|=
literal|null
decl_stmt|;
DECL|field|hiraganaQuaternaryMode
specifier|private
name|boolean
name|hiraganaQuaternaryMode
init|=
literal|false
decl_stmt|;
DECL|field|nullValue
specifier|private
name|String
name|nullValue
init|=
name|Defaults
operator|.
name|NULL_VALUE
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|,
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|CollationFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|CollationFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indexOptions
specifier|public
name|Builder
name|indexOptions
parameter_list|(
name|IndexOptions
name|indexOptions
parameter_list|)
block|{
if|if
condition|(
name|indexOptions
operator|.
name|compareTo
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"] field does not support positions, got [index_options]="
operator|+
name|indexOptionToString
argument_list|(
name|indexOptions
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|indexOptions
argument_list|(
name|indexOptions
argument_list|)
return|;
block|}
DECL|method|rules
specifier|public
name|String
name|rules
parameter_list|()
block|{
return|return
name|rules
return|;
block|}
DECL|method|rules
specifier|public
name|Builder
name|rules
parameter_list|(
specifier|final
name|String
name|rules
parameter_list|)
block|{
name|this
operator|.
name|rules
operator|=
name|rules
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|language
specifier|public
name|String
name|language
parameter_list|()
block|{
return|return
name|language
return|;
block|}
DECL|method|language
specifier|public
name|Builder
name|language
parameter_list|(
specifier|final
name|String
name|language
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|country
specifier|public
name|String
name|country
parameter_list|()
block|{
return|return
name|country
return|;
block|}
DECL|method|country
specifier|public
name|Builder
name|country
parameter_list|(
specifier|final
name|String
name|country
parameter_list|)
block|{
name|this
operator|.
name|country
operator|=
name|country
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|variant
specifier|public
name|String
name|variant
parameter_list|()
block|{
return|return
name|variant
return|;
block|}
DECL|method|variant
specifier|public
name|Builder
name|variant
parameter_list|(
specifier|final
name|String
name|variant
parameter_list|)
block|{
name|this
operator|.
name|variant
operator|=
name|variant
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|strength
specifier|public
name|String
name|strength
parameter_list|()
block|{
return|return
name|strength
return|;
block|}
DECL|method|strength
specifier|public
name|Builder
name|strength
parameter_list|(
specifier|final
name|String
name|strength
parameter_list|)
block|{
name|this
operator|.
name|strength
operator|=
name|strength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|decomposition
specifier|public
name|String
name|decomposition
parameter_list|()
block|{
return|return
name|decomposition
return|;
block|}
DECL|method|decomposition
specifier|public
name|Builder
name|decomposition
parameter_list|(
specifier|final
name|String
name|decomposition
parameter_list|)
block|{
name|this
operator|.
name|decomposition
operator|=
name|decomposition
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|alternate
specifier|public
name|String
name|alternate
parameter_list|()
block|{
return|return
name|alternate
return|;
block|}
DECL|method|alternate
specifier|public
name|Builder
name|alternate
parameter_list|(
specifier|final
name|String
name|alternate
parameter_list|)
block|{
name|this
operator|.
name|alternate
operator|=
name|alternate
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|caseLevel
specifier|public
name|boolean
name|caseLevel
parameter_list|()
block|{
return|return
name|caseLevel
return|;
block|}
DECL|method|caseLevel
specifier|public
name|Builder
name|caseLevel
parameter_list|(
specifier|final
name|boolean
name|caseLevel
parameter_list|)
block|{
name|this
operator|.
name|caseLevel
operator|=
name|caseLevel
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|caseFirst
specifier|public
name|String
name|caseFirst
parameter_list|()
block|{
return|return
name|caseFirst
return|;
block|}
DECL|method|caseFirst
specifier|public
name|Builder
name|caseFirst
parameter_list|(
specifier|final
name|String
name|caseFirst
parameter_list|)
block|{
name|this
operator|.
name|caseFirst
operator|=
name|caseFirst
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|numeric
specifier|public
name|boolean
name|numeric
parameter_list|()
block|{
return|return
name|numeric
return|;
block|}
DECL|method|numeric
specifier|public
name|Builder
name|numeric
parameter_list|(
specifier|final
name|boolean
name|numeric
parameter_list|)
block|{
name|this
operator|.
name|numeric
operator|=
name|numeric
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|variableTop
specifier|public
name|String
name|variableTop
parameter_list|()
block|{
return|return
name|variableTop
return|;
block|}
DECL|method|variableTop
specifier|public
name|Builder
name|variableTop
parameter_list|(
specifier|final
name|String
name|variableTop
parameter_list|)
block|{
name|this
operator|.
name|variableTop
operator|=
name|variableTop
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|hiraganaQuaternaryMode
specifier|public
name|boolean
name|hiraganaQuaternaryMode
parameter_list|()
block|{
return|return
name|hiraganaQuaternaryMode
return|;
block|}
DECL|method|hiraganaQuaternaryMode
specifier|public
name|Builder
name|hiraganaQuaternaryMode
parameter_list|(
specifier|final
name|boolean
name|hiraganaQuaternaryMode
parameter_list|)
block|{
name|this
operator|.
name|hiraganaQuaternaryMode
operator|=
name|hiraganaQuaternaryMode
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|buildCollator
specifier|public
name|Collator
name|buildCollator
parameter_list|()
block|{
name|Collator
name|collator
decl_stmt|;
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|collator
operator|=
operator|new
name|RuleBasedCollator
argument_list|(
name|rules
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse collation rules"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|ULocale
name|locale
decl_stmt|;
if|if
condition|(
name|country
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|variant
operator|!=
literal|null
condition|)
block|{
name|locale
operator|=
operator|new
name|ULocale
argument_list|(
name|language
argument_list|,
name|country
argument_list|,
name|variant
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locale
operator|=
operator|new
name|ULocale
argument_list|(
name|language
argument_list|,
name|country
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|locale
operator|=
operator|new
name|ULocale
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
name|collator
operator|=
name|Collator
operator|.
name|getInstance
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collator
operator|=
name|Collator
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
comment|// set the strength flag, otherwise it will be the default.
if|if
condition|(
name|strength
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|strength
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"primary"
argument_list|)
condition|)
block|{
name|collator
operator|.
name|setStrength
argument_list|(
name|Collator
operator|.
name|PRIMARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strength
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"secondary"
argument_list|)
condition|)
block|{
name|collator
operator|.
name|setStrength
argument_list|(
name|Collator
operator|.
name|SECONDARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strength
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tertiary"
argument_list|)
condition|)
block|{
name|collator
operator|.
name|setStrength
argument_list|(
name|Collator
operator|.
name|TERTIARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strength
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"quaternary"
argument_list|)
condition|)
block|{
name|collator
operator|.
name|setStrength
argument_list|(
name|Collator
operator|.
name|QUATERNARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strength
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"identical"
argument_list|)
condition|)
block|{
name|collator
operator|.
name|setStrength
argument_list|(
name|Collator
operator|.
name|IDENTICAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid strength: "
operator|+
name|strength
argument_list|)
throw|;
block|}
block|}
comment|// set the decomposition flag, otherwise it will be the default.
if|if
condition|(
name|decomposition
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|decomposition
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|collator
operator|.
name|setDecomposition
argument_list|(
name|Collator
operator|.
name|NO_DECOMPOSITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decomposition
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"canonical"
argument_list|)
condition|)
block|{
name|collator
operator|.
name|setDecomposition
argument_list|(
name|Collator
operator|.
name|CANONICAL_DECOMPOSITION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid decomposition: "
operator|+
name|decomposition
argument_list|)
throw|;
block|}
block|}
comment|// expert options: concrete subclasses are always a RuleBasedCollator
name|RuleBasedCollator
name|rbc
init|=
operator|(
name|RuleBasedCollator
operator|)
name|collator
decl_stmt|;
if|if
condition|(
name|alternate
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|alternate
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"shifted"
argument_list|)
condition|)
block|{
name|rbc
operator|.
name|setAlternateHandlingShifted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alternate
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"non-ignorable"
argument_list|)
condition|)
block|{
name|rbc
operator|.
name|setAlternateHandlingShifted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid alternate: "
operator|+
name|alternate
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|caseLevel
condition|)
block|{
name|rbc
operator|.
name|setCaseLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|caseFirst
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|caseFirst
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"lower"
argument_list|)
condition|)
block|{
name|rbc
operator|.
name|setLowerCaseFirst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|caseFirst
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"upper"
argument_list|)
condition|)
block|{
name|rbc
operator|.
name|setUpperCaseFirst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid caseFirst: "
operator|+
name|caseFirst
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|numeric
condition|)
block|{
name|rbc
operator|.
name|setNumericCollation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|variableTop
operator|!=
literal|null
condition|)
block|{
name|rbc
operator|.
name|setVariableTop
argument_list|(
name|variableTop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiraganaQuaternaryMode
condition|)
block|{
name|rbc
operator|.
name|setHiraganaQuaternary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// freeze so thread-safe
return|return
name|collator
operator|.
name|freeze
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|ICUCollationKeywordFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
specifier|final
name|Collator
name|collator
init|=
name|buildCollator
argument_list|()
decl_stmt|;
name|fieldType
argument_list|()
operator|.
name|setCollator
argument_list|(
name|collator
argument_list|)
expr_stmt|;
name|setupFieldType
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
operator|new
name|ICUCollationKeywordFieldMapper
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|,
name|copyTo
argument_list|,
name|rules
argument_list|,
name|language
argument_list|,
name|country
argument_list|,
name|variant
argument_list|,
name|strength
argument_list|,
name|decomposition
argument_list|,
name|alternate
argument_list|,
name|caseLevel
argument_list|,
name|caseFirst
argument_list|,
name|numeric
argument_list|,
name|variableTop
argument_list|,
name|hiraganaQuaternaryMode
argument_list|,
name|collator
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|TypeParsers
operator|.
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
literal|"null_value"
case|:
if|if
condition|(
name|fieldNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Property [null_value] cannot be null."
argument_list|)
throw|;
block|}
name|builder
operator|.
name|nullValue
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"norms"
case|:
name|builder
operator|.
name|omitNorms
argument_list|(
operator|!
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|,
literal|"norms"
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"rules"
case|:
name|builder
operator|.
name|rules
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"language"
case|:
name|builder
operator|.
name|language
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"country"
case|:
name|builder
operator|.
name|country
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"variant"
case|:
name|builder
operator|.
name|variant
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"strength"
case|:
name|builder
operator|.
name|strength
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"decomposition"
case|:
name|builder
operator|.
name|decomposition
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"alternate"
case|:
name|builder
operator|.
name|alternate
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"case_level"
case|:
name|builder
operator|.
name|caseLevel
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"case_first"
case|:
name|builder
operator|.
name|caseFirst
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"numeric"
case|:
name|builder
operator|.
name|numeric
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"variable_top"
case|:
name|builder
operator|.
name|variableTop
argument_list|(
name|XContentMapValues
operator|.
name|nodeStringValue
argument_list|(
name|fieldNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"hiragana_quaternary_mode"
case|:
name|builder
operator|.
name|hiraganaQuaternaryMode
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|field|rules
specifier|private
specifier|final
name|String
name|rules
decl_stmt|;
DECL|field|language
specifier|private
specifier|final
name|String
name|language
decl_stmt|;
DECL|field|country
specifier|private
specifier|final
name|String
name|country
decl_stmt|;
DECL|field|variant
specifier|private
specifier|final
name|String
name|variant
decl_stmt|;
DECL|field|strength
specifier|private
specifier|final
name|String
name|strength
decl_stmt|;
DECL|field|decomposition
specifier|private
specifier|final
name|String
name|decomposition
decl_stmt|;
DECL|field|alternate
specifier|private
specifier|final
name|String
name|alternate
decl_stmt|;
DECL|field|caseLevel
specifier|private
specifier|final
name|boolean
name|caseLevel
decl_stmt|;
DECL|field|caseFirst
specifier|private
specifier|final
name|String
name|caseFirst
decl_stmt|;
DECL|field|numeric
specifier|private
specifier|final
name|boolean
name|numeric
decl_stmt|;
DECL|field|variableTop
specifier|private
specifier|final
name|String
name|variableTop
decl_stmt|;
DECL|field|hiraganaQuaternaryMode
specifier|private
specifier|final
name|boolean
name|hiraganaQuaternaryMode
decl_stmt|;
DECL|field|collator
specifier|private
specifier|final
name|Collator
name|collator
decl_stmt|;
DECL|method|ICUCollationKeywordFieldMapper
specifier|protected
name|ICUCollationKeywordFieldMapper
parameter_list|(
name|String
name|simpleName
parameter_list|,
name|MappedFieldType
name|fieldType
parameter_list|,
name|MappedFieldType
name|defaultFieldType
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|,
name|CopyTo
name|copyTo
parameter_list|,
name|String
name|rules
parameter_list|,
name|String
name|language
parameter_list|,
name|String
name|country
parameter_list|,
name|String
name|variant
parameter_list|,
name|String
name|strength
parameter_list|,
name|String
name|decomposition
parameter_list|,
name|String
name|alternate
parameter_list|,
name|boolean
name|caseLevel
parameter_list|,
name|String
name|caseFirst
parameter_list|,
name|boolean
name|numeric
parameter_list|,
name|String
name|variableTop
parameter_list|,
name|boolean
name|hiraganaQuaternaryMode
parameter_list|,
name|Collator
name|collator
parameter_list|)
block|{
name|super
argument_list|(
name|simpleName
argument_list|,
name|fieldType
argument_list|,
name|defaultFieldType
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
assert|assert
name|collator
operator|.
name|isFrozen
argument_list|()
assert|;
name|this
operator|.
name|rules
operator|=
name|rules
expr_stmt|;
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
name|this
operator|.
name|country
operator|=
name|country
expr_stmt|;
name|this
operator|.
name|variant
operator|=
name|variant
expr_stmt|;
name|this
operator|.
name|strength
operator|=
name|strength
expr_stmt|;
name|this
operator|.
name|decomposition
operator|=
name|decomposition
expr_stmt|;
name|this
operator|.
name|alternate
operator|=
name|alternate
expr_stmt|;
name|this
operator|.
name|caseLevel
operator|=
name|caseLevel
expr_stmt|;
name|this
operator|.
name|caseFirst
operator|=
name|caseFirst
expr_stmt|;
name|this
operator|.
name|numeric
operator|=
name|numeric
expr_stmt|;
name|this
operator|.
name|variableTop
operator|=
name|variableTop
expr_stmt|;
name|this
operator|.
name|hiraganaQuaternaryMode
operator|=
name|hiraganaQuaternaryMode
expr_stmt|;
name|this
operator|.
name|collator
operator|=
name|collator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|CollationFieldType
name|fieldType
parameter_list|()
block|{
return|return
operator|(
name|CollationFieldType
operator|)
name|super
operator|.
name|fieldType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|boolean
name|updateAllTypes
parameter_list|)
block|{
name|super
operator|.
name|doMerge
argument_list|(
name|mergeWith
argument_list|,
name|updateAllTypes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ICUCollationKeywordFieldMapper
name|icuMergeWith
init|=
operator|(
name|ICUCollationKeywordFieldMapper
operator|)
name|mergeWith
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|rules
argument_list|,
name|icuMergeWith
operator|.
name|rules
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update rules setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|language
argument_list|,
name|icuMergeWith
operator|.
name|language
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update language setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|country
argument_list|,
name|icuMergeWith
operator|.
name|country
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update country setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|variant
argument_list|,
name|icuMergeWith
operator|.
name|variant
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update variant setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|strength
argument_list|,
name|icuMergeWith
operator|.
name|strength
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update strength setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|decomposition
argument_list|,
name|icuMergeWith
operator|.
name|decomposition
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update decomposition setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|alternate
argument_list|,
name|icuMergeWith
operator|.
name|alternate
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update alternate setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|caseLevel
operator|!=
name|icuMergeWith
operator|.
name|caseLevel
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update case_level setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|caseFirst
argument_list|,
name|icuMergeWith
operator|.
name|caseFirst
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update case_first setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numeric
operator|!=
name|icuMergeWith
operator|.
name|numeric
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update numeric setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|variableTop
argument_list|,
name|icuMergeWith
operator|.
name|variableTop
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update variable_top setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiraganaQuaternaryMode
operator|!=
name|icuMergeWith
operator|.
name|hiraganaQuaternaryMode
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
literal|"Cannot update hiragana_quaternary_mode setting for ["
operator|+
name|CONTENT_TYPE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't merge because of conflicts: "
operator|+
name|conflicts
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"null_value"
argument_list|,
name|fieldType
argument_list|()
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|rules
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"rules"
argument_list|,
name|rules
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|language
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|country
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"country"
argument_list|,
name|country
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|variant
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"variant"
argument_list|,
name|variant
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|strength
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
name|strength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|decomposition
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"decomposition"
argument_list|,
name|decomposition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|alternate
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"alternate"
argument_list|,
name|alternate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|caseLevel
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"case_level"
argument_list|,
name|caseLevel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|caseFirst
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"case_first"
argument_list|,
name|caseFirst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|numeric
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"numeric"
argument_list|,
name|numeric
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|variableTop
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"variable_top"
argument_list|,
name|variableTop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|hiraganaQuaternaryMode
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"hiragana_quaternary_mode"
argument_list|,
name|hiraganaQuaternaryMode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|IndexableField
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|value
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|externalValueSet
argument_list|()
condition|)
block|{
name|value
operator|=
name|context
operator|.
name|externalValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|value
operator|=
name|fieldType
argument_list|()
operator|.
name|nullValueAsString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|RawCollationKey
name|key
init|=
name|collator
operator|.
name|getRawCollationKey
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|binaryValue
init|=
operator|new
name|BytesRef
argument_list|(
name|key
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
operator|||
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
condition|)
block|{
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|binaryValue
argument_list|,
name|fieldType
argument_list|()
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|fieldType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|binaryValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

