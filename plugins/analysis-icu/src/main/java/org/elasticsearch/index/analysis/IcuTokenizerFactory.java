begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|lang
operator|.
name|UCharacter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|lang
operator|.
name|UProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|lang
operator|.
name|UScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RuleBasedBreakIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|DefaultICUTokenizerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|ICUTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|ICUTokenizerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|IcuTokenizerFactory
specifier|public
class|class
name|IcuTokenizerFactory
extends|extends
name|AbstractTokenizerFactory
block|{
DECL|field|config
specifier|private
specifier|final
name|ICUTokenizerConfig
name|config
decl_stmt|;
DECL|field|RULE_FILES
specifier|private
specifier|static
specifier|final
name|String
name|RULE_FILES
init|=
literal|"rule_files"
decl_stmt|;
DECL|method|IcuTokenizerFactory
specifier|public
name|IcuTokenizerFactory
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|config
operator|=
name|getIcuConfig
argument_list|(
name|environment
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|Tokenizer
name|create
parameter_list|()
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ICUTokenizer
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ICUTokenizer
argument_list|(
name|config
argument_list|)
return|;
block|}
block|}
DECL|method|getIcuConfig
specifier|private
name|ICUTokenizerConfig
name|getIcuConfig
parameter_list|(
name|Environment
name|env
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|tailored
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|String
index|[]
name|ruleFiles
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|RULE_FILES
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|scriptAndResourcePath
range|:
name|ruleFiles
control|)
block|{
name|int
name|colonPos
init|=
name|scriptAndResourcePath
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonPos
operator|==
operator|-
literal|1
operator|||
name|colonPos
operator|==
name|scriptAndResourcePath
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|RULE_FILES
operator|+
literal|" should contain comma-separated \"code:rulefile\" pairs"
argument_list|)
throw|;
block|}
name|String
name|scriptCode
init|=
name|scriptAndResourcePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonPos
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|resourcePath
init|=
name|scriptAndResourcePath
operator|.
name|substring
argument_list|(
name|colonPos
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|tailored
operator|.
name|put
argument_list|(
name|UCharacter
operator|.
name|getPropertyValueEnum
argument_list|(
name|UProperty
operator|.
name|SCRIPT
argument_list|,
name|scriptCode
argument_list|)
argument_list|,
name|resourcePath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tailored
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|BreakIterator
name|breakers
index|[]
init|=
operator|new
name|BreakIterator
index|[
name|UScript
operator|.
name|CODE_LIMIT
index|]
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|tailored
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|code
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|resourcePath
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|breakers
index|[
name|code
index|]
operator|=
name|parseRules
argument_list|(
name|resourcePath
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
comment|// cjkAsWords is not configurable yet.
name|ICUTokenizerConfig
name|config
init|=
operator|new
name|DefaultICUTokenizerConfig
argument_list|(
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|BreakIterator
name|getBreakIterator
parameter_list|(
name|int
name|script
parameter_list|)
block|{
if|if
condition|(
name|breakers
index|[
name|script
index|]
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|BreakIterator
operator|)
name|breakers
index|[
name|script
index|]
operator|.
name|clone
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getBreakIterator
argument_list|(
name|script
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|config
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to load ICU rule files"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
comment|//parse a single RBBi rule file
DECL|method|parseRules
specifier|private
name|BreakIterator
name|parseRules
parameter_list|(
name|String
name|filename
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|path
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|String
name|rules
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|path
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|v
parameter_list|)
lambda|->
name|v
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|==
literal|false
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|RuleBasedBreakIterator
argument_list|(
name|rules
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

