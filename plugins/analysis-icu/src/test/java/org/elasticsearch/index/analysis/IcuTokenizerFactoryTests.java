begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
operator|.
name|ICUTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|analysis
operator|.
name|icu
operator|.
name|AnalysisICUPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
operator|.
name|assertTokenStreamContents
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|IcuTokenizerFactoryTests
specifier|public
class|class
name|IcuTokenizerFactoryTests
extends|extends
name|ESTestCase
block|{
DECL|method|testSimpleIcuTokenizer
specifier|public
name|void
name|testSimpleIcuTokenizer
parameter_list|()
throws|throws
name|IOException
block|{
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|()
decl_stmt|;
name|TokenizerFactory
name|tokenizerFactory
init|=
name|analysisService
operator|.
name|tokenizer
argument_list|(
literal|"icu_tokenizer"
argument_list|)
decl_stmt|;
name|ICUTokenizer
name|tokenizer
init|=
operator|(
name|ICUTokenizer
operator|)
name|tokenizerFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"åæ¥èµ, one-two"
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"åæ¥èµ"
block|,
literal|"one"
block|,
literal|"two"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testIcuCustomizeRuleFile
specifier|public
name|void
name|testIcuCustomizeRuleFile
parameter_list|()
throws|throws
name|IOException
block|{
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|()
decl_stmt|;
comment|// test the tokenizer with single rule file
name|TokenizerFactory
name|tokenizerFactory
init|=
name|analysisService
operator|.
name|tokenizer
argument_list|(
literal|"user_rule_tokenizer"
argument_list|)
decl_stmt|;
name|ICUTokenizer
name|tokenizer
init|=
operator|(
name|ICUTokenizer
operator|)
name|tokenizerFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"One-two punch.  Brang-, not brung-it.  This one--not that one--is the right one, -ish."
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"One-two"
block|,
literal|"punch"
block|,
literal|"Brang"
block|,
literal|"not"
block|,
literal|"brung-it"
block|,
literal|"This"
block|,
literal|"one"
block|,
literal|"not"
block|,
literal|"that"
block|,
literal|"one"
block|,
literal|"is"
block|,
literal|"the"
block|,
literal|"right"
block|,
literal|"one"
block|,
literal|"ish"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleIcuCustomizeRuleFiles
specifier|public
name|void
name|testMultipleIcuCustomizeRuleFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|()
decl_stmt|;
comment|// test the tokenizer with two rule files
name|TokenizerFactory
name|tokenizerFactory
init|=
name|analysisService
operator|.
name|tokenizer
argument_list|(
literal|"multi_rule_tokenizer"
argument_list|)
decl_stmt|;
name|ICUTokenizer
name|tokenizer
init|=
operator|(
name|ICUTokenizer
operator|)
name|tokenizerFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"Some English.  ÐÐµÐ¼Ð½Ð¾Ð³Ð¾ ÑÑÑÑÐºÐ¸Ð¹.  à¸à¹à¸­à¸à¸§à¸²à¸¡à¸ à¸²à¸©à¸²à¹à¸à¸¢à¹à¸¥à¹à¸ à¹ à¸à¹à¸­à¸¢ à¹  More English."
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Some"
block|,
literal|"English"
block|,
literal|"ÐÐµÐ¼Ð½Ð¾Ð³Ð¾ ÑÑÑÑÐºÐ¸Ð¹.  "
block|,
literal|"à¸à¹à¸­à¸à¸§à¸²à¸¡à¸ à¸²à¸©à¸²à¹à¸à¸¢à¹à¸¥à¹à¸ à¹ à¸à¹à¸­à¸¢ à¹  "
block|,
literal|"More"
block|,
literal|"English"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createAnalysisService
specifier|private
specifier|static
name|AnalysisService
name|createAnalysisService
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|keywords
init|=
name|IcuTokenizerFactoryTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"KeywordTokenizer.rbbi"
argument_list|)
decl_stmt|;
name|InputStream
name|latin
init|=
name|IcuTokenizerFactoryTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"Latin-dont-break-on-hyphens.rbbi"
argument_list|)
decl_stmt|;
name|Path
name|home
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|config
init|=
name|home
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|keywords
argument_list|,
name|config
operator|.
name|resolve
argument_list|(
literal|"KeywordTokenizer.rbbi"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|latin
argument_list|,
name|config
operator|.
name|resolve
argument_list|(
literal|"Latin-dont-break-on-hyphens.rbbi"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|json
init|=
literal|"/org/elasticsearch/index/analysis/icu_analysis.json"
decl_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|loadFromStream
argument_list|(
name|json
argument_list|,
name|IcuTokenizerFactoryTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|json
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|home
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|createAnalysisService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
name|nodeSettings
argument_list|,
name|settings
argument_list|,
operator|new
name|AnalysisICUPlugin
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

