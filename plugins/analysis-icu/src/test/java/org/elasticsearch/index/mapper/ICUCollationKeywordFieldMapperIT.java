begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertOrderedSearchHits
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RuleBasedCollator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|util
operator|.
name|ULocale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|analysis
operator|.
name|icu
operator|.
name|AnalysisICUPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
DECL|class|ICUCollationKeywordFieldMapperIT
specifier|public
class|class
name|ICUCollationKeywordFieldMapperIT
extends|extends
name|ESIntegTestCase
block|{
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|AnalysisICUPlugin
operator|.
name|class
argument_list|)
return|;
block|}
comment|/*     * Turkish has some funny casing.     * This test shows how you can solve this kind of thing easily with collation.     * Instead of using LowerCaseFilter, use a turkish collator with primary strength.     * Then things will sort and match correctly.     */
DECL|method|testBasicUsage
specifier|public
name|void
name|testBasicUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|String
index|[]
name|equilavent
init|=
block|{
literal|"I WÄ°LL USE TURKÄ°SH CASING"
block|,
literal|"Ä± will use turkish casÄ±ng"
block|}
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"tr"
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
comment|// both values should collate to same value
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|0
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|1
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
comment|// searching for either of the terms should return both results since they collate to the same value
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"collate"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|equilavent
index|[
literal|0
index|]
else|:
name|equilavent
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
comment|// secondary sort should kick in because both will collate to same value
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|/*     * Test usage of the decomposition option for unicode normalization.     */
DECL|method|testNormalization
specifier|public
name|void
name|testNormalization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|String
index|[]
name|equilavent
init|=
block|{
literal|"I W\u0049\u0307LL USE TURKÄ°SH CASING"
block|,
literal|"Ä± will use turkish casÄ±ng"
block|}
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"tr"
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|field
argument_list|(
literal|"decomposition"
argument_list|,
literal|"canonical"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|0
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|1
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
comment|// searching for either of the terms should return both results since they collate to the same value
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"collate"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|equilavent
index|[
literal|0
index|]
else|:
name|equilavent
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
comment|// secondary sort should kick in because both will collate to same value
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|/*     * Test secondary strength, for english case is not significant.     */
DECL|method|testSecondaryStrength
specifier|public
name|void
name|testSecondaryStrength
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|String
index|[]
name|equilavent
init|=
block|{
literal|"TESTING"
block|,
literal|"testing"
block|}
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"secondary"
argument_list|)
operator|.
name|field
argument_list|(
literal|"decomposition"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|0
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|1
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"collate"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|equilavent
index|[
literal|0
index|]
else|:
name|equilavent
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
comment|// secondary sort should kick in because both will collate to same value
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting alternate=shifted to shift whitespace, punctuation and symbols     * to quaternary level     */
DECL|method|testIgnorePunctuation
specifier|public
name|void
name|testIgnorePunctuation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|String
index|[]
name|equilavent
init|=
block|{
literal|"foo-bar"
block|,
literal|"foo bar"
block|}
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|field
argument_list|(
literal|"alternate"
argument_list|,
literal|"shifted"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|0
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|1
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"collate"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|equilavent
index|[
literal|0
index|]
else|:
name|equilavent
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
comment|// secondary sort should kick in because both will collate to same value
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting alternate=shifted and variableTop to shift whitespace, but not     * punctuation or symbols, to quaternary level     */
DECL|method|testIgnoreWhitespace
specifier|public
name|void
name|testIgnoreWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|field
argument_list|(
literal|"alternate"
argument_list|,
literal|"shifted"
argument_list|)
operator|.
name|field
argument_list|(
literal|"variable_top"
argument_list|,
literal|" "
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"foo bar\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"foobar\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"foo-bar\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
comment|// secondary sort should kick in on docs 1 and 3 because same value collate value
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"3"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
comment|/*      * Setting numeric to encode digits with numeric value, so that      * foobar-9 sorts before foobar-10      */
DECL|method|testNumerics
specifier|public
name|void
name|testNumerics
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"numeric"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"foobar-10\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"foobar-9\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting caseLevel=true to create an additional case level between     * secondary and tertiary     */
DECL|method|testIgnoreAccentsButNotCase
specifier|public
name|void
name|testIgnoreAccentsButNotCase
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|field
argument_list|(
literal|"case_level"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"rÃ©sumÃ©\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"Resume\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"resume\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"RÃ©sumÃ©\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"3"
argument_list|,
literal|"1"
argument_list|,
literal|"4"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting caseFirst=upper to cause uppercase strings to sort     * before lowercase ones.     */
DECL|method|testUpperCaseFirst
specifier|public
name|void
name|testUpperCaseFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"tertiary"
argument_list|)
operator|.
name|field
argument_list|(
literal|"case_first"
argument_list|,
literal|"upper"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"resume\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\"Resume\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|/*     * For german, you might want oe to sort and match with o umlaut.     * This is not the default, but you can make a customized ruleset to do this.     *     * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.     *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383     */
DECL|method|testCustomRules
specifier|public
name|void
name|testCustomRules
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|index
init|=
literal|"foo"
decl_stmt|;
name|String
name|type
init|=
literal|"mytype"
decl_stmt|;
name|RuleBasedCollator
name|baseCollator
init|=
operator|(
name|RuleBasedCollator
operator|)
name|Collator
operator|.
name|getInstance
argument_list|(
operator|new
name|ULocale
argument_list|(
literal|"de_DE"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|DIN5007_2_tailorings
init|=
literal|"& ae , a\u0308& AE , A\u0308"
operator|+
literal|"& oe , o\u0308& OE , O\u0308"
operator|+
literal|"& ue , u\u0308& UE , u\u0308"
decl_stmt|;
name|RuleBasedCollator
name|tailoredCollator
init|=
operator|new
name|RuleBasedCollator
argument_list|(
name|baseCollator
operator|.
name|getRules
argument_list|()
operator|+
name|DIN5007_2_tailorings
argument_list|)
decl_stmt|;
name|String
name|tailoredRules
init|=
name|tailoredCollator
operator|.
name|getRules
argument_list|()
decl_stmt|;
name|String
index|[]
name|equilavent
init|=
block|{
literal|"TÃ¶ne"
block|,
literal|"Toene"
block|}
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"icu_collation_keyword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"rules"
argument_list|,
name|tailoredRules
argument_list|)
operator|.
name|field
argument_list|(
literal|"strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|0
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"collate\":\""
operator|+
name|equilavent
index|[
literal|1
index|]
operator|+
literal|"\"}"
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequest
name|request
init|=
operator|new
name|SearchRequest
argument_list|()
operator|.
name|indices
argument_list|(
name|index
argument_list|)
operator|.
name|types
argument_list|(
name|type
argument_list|)
operator|.
name|source
argument_list|(
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|query
argument_list|(
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
literal|"collate"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|equilavent
index|[
literal|0
index|]
else|:
name|equilavent
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|sort
argument_list|(
literal|"collate"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_uid"
argument_list|,
name|SortOrder
operator|.
name|DESC
argument_list|)
comment|// secondary sort should kick in because both will collate to same value
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|response
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertOrderedSearchHits
argument_list|(
name|response
argument_list|,
literal|"2"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

