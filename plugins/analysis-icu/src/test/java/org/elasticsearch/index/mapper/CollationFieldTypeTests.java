begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RawCollationKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|util
operator|.
name|ULocale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermInSetQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ICUCollationKeywordFieldMapper
operator|.
name|CollationFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MappedFieldType
operator|.
name|Relation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|CollationFieldTypeTests
specifier|public
class|class
name|CollationFieldTypeTests
extends|extends
name|FieldTypeTestCase
block|{
annotation|@
name|Override
DECL|method|createDefaultFieldType
specifier|protected
name|MappedFieldType
name|createDefaultFieldType
parameter_list|()
block|{
return|return
operator|new
name|CollationFieldType
argument_list|()
return|;
block|}
DECL|method|testIsFieldWithinQuery
specifier|public
name|void
name|testIsFieldWithinQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|CollationFieldType
name|ft
init|=
operator|new
name|CollationFieldType
argument_list|()
decl_stmt|;
comment|// current impl ignores args and shourd always return INTERSECTS
name|assertEquals
argument_list|(
name|Relation
operator|.
name|INTERSECTS
argument_list|,
name|ft
operator|.
name|isFieldWithinQuery
argument_list|(
literal|null
argument_list|,
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermQuery
specifier|public
name|void
name|testTermQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|Collator
name|collator
init|=
name|Collator
operator|.
name|getInstance
argument_list|(
operator|new
name|ULocale
argument_list|(
literal|"tr"
argument_list|)
argument_list|)
decl_stmt|;
name|collator
operator|.
name|setStrength
argument_list|(
name|Collator
operator|.
name|PRIMARY
argument_list|)
expr_stmt|;
name|collator
operator|.
name|freeze
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CollationFieldType
operator|)
name|ft
operator|)
operator|.
name|setCollator
argument_list|(
name|collator
argument_list|)
expr_stmt|;
name|RawCollationKey
name|key
init|=
name|collator
operator|.
name|getRawCollationKey
argument_list|(
literal|"Ä± will use turkish casÄ±ng"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BytesRef
name|expected
init|=
operator|new
name|BytesRef
argument_list|(
name|key
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|size
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|expected
argument_list|)
argument_list|)
argument_list|,
name|ft
operator|.
name|termQuery
argument_list|(
literal|"I WÄ°LL USE TURKÄ°SH CASING"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|termQuery
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermsQuery
specifier|public
name|void
name|testTermsQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|Collator
name|collator
init|=
name|Collator
operator|.
name|getInstance
argument_list|()
operator|.
name|freeze
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CollationFieldType
operator|)
name|ft
operator|)
operator|.
name|setCollator
argument_list|(
name|collator
argument_list|)
expr_stmt|;
name|RawCollationKey
name|fooKey
init|=
name|collator
operator|.
name|getRawCollationKey
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RawCollationKey
name|barKey
init|=
name|collator
operator|.
name|getRawCollationKey
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BytesRef
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|fooKey
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|fooKey
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|barKey
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|barKey
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TermInSetQuery
argument_list|(
literal|"field"
argument_list|,
name|terms
argument_list|)
argument_list|,
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|termsQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegexpQuery
specifier|public
name|void
name|testRegexpQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|regexpQuery
argument_list|(
literal|"foo.*"
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyQuery
specifier|public
name|void
name|testFuzzyQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|fuzzyQuery
argument_list|(
literal|"foo"
argument_list|,
name|Fuzziness
operator|.
name|fromEdits
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixQuery
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|prefixQuery
argument_list|(
literal|"prefix"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
block|{
name|MappedFieldType
name|ft
init|=
name|createDefaultFieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setName
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|Collator
name|collator
init|=
name|Collator
operator|.
name|getInstance
argument_list|()
operator|.
name|freeze
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CollationFieldType
operator|)
name|ft
operator|)
operator|.
name|setCollator
argument_list|(
name|collator
argument_list|)
expr_stmt|;
name|RawCollationKey
name|aKey
init|=
name|collator
operator|.
name|getRawCollationKey
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RawCollationKey
name|bKey
init|=
name|collator
operator|.
name|getRawCollationKey
argument_list|(
literal|"b"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TermRangeQuery
name|expected
init|=
operator|new
name|TermRangeQuery
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|aKey
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|aKey
operator|.
name|size
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|bKey
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|bKey
operator|.
name|size
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|ft
operator|.
name|rangeQuery
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cannot search on field [field] since it is not indexed."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

