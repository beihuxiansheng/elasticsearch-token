begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.deletebyquery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|deletebyquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|PreProcessModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|deletebyquery
operator|.
name|DeleteByQueryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|deletebyquery
operator|.
name|TransportDeleteByQueryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|deletebyquery
operator|.
name|RestDeleteByQueryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestModule
import|;
end_import

begin_class
DECL|class|DeleteByQueryModule
specifier|public
class|class
name|DeleteByQueryModule
extends|extends
name|AbstractModule
implements|implements
name|PreProcessModule
block|{
annotation|@
name|Override
DECL|method|processModule
specifier|public
name|void
name|processModule
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
if|if
condition|(
name|module
operator|instanceof
name|RestModule
condition|)
block|{
name|RestModule
name|restModule
init|=
operator|(
name|RestModule
operator|)
name|module
decl_stmt|;
name|restModule
operator|.
name|addRestAction
argument_list|(
name|RestDeleteByQueryAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|module
operator|instanceof
name|ActionModule
condition|)
block|{
name|ActionModule
name|actionModule
init|=
operator|(
name|ActionModule
operator|)
name|module
decl_stmt|;
name|actionModule
operator|.
name|registerAction
argument_list|(
name|DeleteByQueryAction
operator|.
name|INSTANCE
argument_list|,
name|TransportDeleteByQueryAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{     }
block|}
end_class

end_unit

