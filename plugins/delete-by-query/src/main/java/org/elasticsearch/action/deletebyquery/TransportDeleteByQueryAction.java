begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.deletebyquery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|deletebyquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|TransportSearchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|TransportSearchScrollAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|HandledTransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexNameExpressionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHitField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Delete-By-Query implementation that uses efficient scrolling and bulks deletions to delete large set of documents.  */
end_comment

begin_class
DECL|class|TransportDeleteByQueryAction
specifier|public
class|class
name|TransportDeleteByQueryAction
extends|extends
name|HandledTransportAction
argument_list|<
name|DeleteByQueryRequest
argument_list|,
name|DeleteByQueryResponse
argument_list|>
block|{
DECL|field|searchAction
specifier|private
specifier|final
name|TransportSearchAction
name|searchAction
decl_stmt|;
DECL|field|scrollAction
specifier|private
specifier|final
name|TransportSearchScrollAction
name|scrollAction
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportDeleteByQueryAction
specifier|public
name|TransportDeleteByQueryAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|Client
name|client
parameter_list|,
name|TransportSearchAction
name|transportSearchAction
parameter_list|,
name|TransportSearchScrollAction
name|transportSearchScrollAction
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|,
name|IndexNameExpressionResolver
name|indexNameExpressionResolver
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|DeleteByQueryAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|actionFilters
argument_list|,
name|indexNameExpressionResolver
argument_list|,
name|DeleteByQueryRequest
operator|::
operator|new
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchAction
operator|=
name|transportSearchAction
expr_stmt|;
name|this
operator|.
name|scrollAction
operator|=
name|transportSearchScrollAction
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|DeleteByQueryRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|DeleteByQueryResponse
argument_list|>
name|listener
parameter_list|)
block|{
operator|new
name|AsyncDeleteByQueryAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|class|AsyncDeleteByQueryAction
class|class
name|AsyncDeleteByQueryAction
block|{
DECL|field|request
specifier|private
specifier|final
name|DeleteByQueryRequest
name|request
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|DeleteByQueryResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|timedOut
specifier|private
specifier|final
name|AtomicBoolean
name|timedOut
decl_stmt|;
DECL|field|total
specifier|private
specifier|final
name|AtomicLong
name|total
decl_stmt|;
DECL|field|shardFailures
specifier|private
specifier|volatile
name|ShardOperationFailedException
index|[]
name|shardFailures
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexDeleteByQueryResponse
argument_list|>
name|results
decl_stmt|;
DECL|method|AsyncDeleteByQueryAction
name|AsyncDeleteByQueryAction
parameter_list|(
name|DeleteByQueryRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|DeleteByQueryResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|timedOut
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|total
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardFailures
operator|=
name|ShardSearchFailure
operator|.
name|EMPTY_ARRAY
expr_stmt|;
name|this
operator|.
name|results
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
name|executeScan
argument_list|()
expr_stmt|;
block|}
DECL|method|executeScan
name|void
name|executeScan
parameter_list|()
block|{
try|try
block|{
specifier|final
name|SearchRequest
name|scanRequest
init|=
operator|new
name|SearchRequest
argument_list|(
name|request
operator|.
name|indices
argument_list|()
argument_list|)
operator|.
name|types
argument_list|(
name|request
operator|.
name|types
argument_list|()
argument_list|)
operator|.
name|indicesOptions
argument_list|(
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
decl_stmt|;
name|scanRequest
operator|.
name|scroll
argument_list|(
name|request
operator|.
name|scroll
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|routing
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scanRequest
operator|.
name|routing
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"_routing"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"_parent"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
operator|new
name|SearchSourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|request
operator|.
name|query
argument_list|()
argument_list|)
operator|.
name|fields
argument_list|(
name|fields
argument_list|)
operator|.
name|sort
argument_list|(
literal|"_doc"
argument_list|)
comment|// important for performance
operator|.
name|fetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|version
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|source
operator|.
name|size
argument_list|(
name|request
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|timeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|timeout
argument_list|(
name|request
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanRequest
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"executing scan request"
argument_list|)
expr_stmt|;
name|searchAction
operator|.
name|execute
argument_list|(
name|scanRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
name|long
name|hits
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"first request executed: found [{}] document(s) to delete"
argument_list|,
name|hits
argument_list|)
expr_stmt|;
name|total
operator|.
name|set
argument_list|(
name|hits
argument_list|)
expr_stmt|;
name|deleteHits
argument_list|(
literal|null
argument_list|,
name|searchResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unable to execute the initial scan request of delete by query"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeScroll
name|void
name|executeScroll
parameter_list|(
specifier|final
name|String
name|scrollId
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"executing scroll request [{}]"
argument_list|,
name|scrollId
argument_list|)
expr_stmt|;
name|scrollAction
operator|.
name|execute
argument_list|(
operator|new
name|SearchScrollRequest
argument_list|(
name|scrollId
argument_list|)
operator|.
name|scroll
argument_list|(
name|request
operator|.
name|scroll
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchResponse
name|scrollResponse
parameter_list|)
block|{
name|deleteHits
argument_list|(
name|scrollId
argument_list|,
name|scrollResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"scroll request [{}] failed, scrolling document(s) is stopped"
argument_list|,
name|e
argument_list|,
name|scrollId
argument_list|)
expr_stmt|;
name|finishHim
argument_list|(
name|scrollId
argument_list|,
name|hasTimedOut
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unable to execute scroll request [{}]"
argument_list|,
name|t
argument_list|,
name|scrollId
argument_list|)
expr_stmt|;
name|finishHim
argument_list|(
name|scrollId
argument_list|,
literal|false
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteHits
name|void
name|deleteHits
parameter_list|(
name|String
name|scrollId
parameter_list|,
name|SearchResponse
name|scrollResponse
parameter_list|)
block|{
specifier|final
name|SearchHit
index|[]
name|docs
init|=
name|scrollResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nextScrollId
init|=
name|scrollResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|addShardFailures
argument_list|(
name|scrollResponse
operator|.
name|getShardFailures
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"scroll request [{}] executed: [{}] document(s) returned"
argument_list|,
name|scrollId
argument_list|,
name|docs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|docs
operator|.
name|length
operator|==
literal|0
operator|)
operator|||
operator|(
name|nextScrollId
operator|==
literal|null
operator|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"scrolling documents terminated"
argument_list|)
expr_stmt|;
comment|// if scrollId is null we are on the first request - just pass the nextScrollId which sill be non-null if the query matched no docs
name|finishHim
argument_list|(
name|scrollId
operator|==
literal|null
condition|?
name|nextScrollId
else|:
name|scrollId
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|hasTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"scrolling documents timed out"
argument_list|)
expr_stmt|;
comment|// if scrollId is null we are on the first request - just pass the nextScrollId which sill be non-null if the query matched no docs
name|finishHim
argument_list|(
name|scrollId
operator|==
literal|null
condition|?
name|nextScrollId
else|:
name|scrollId
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Delete the scrolled documents using the Bulk API
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|doc
range|:
name|docs
control|)
block|{
name|DeleteRequest
name|delete
init|=
operator|new
name|DeleteRequest
argument_list|(
name|doc
operator|.
name|index
argument_list|()
argument_list|,
name|doc
operator|.
name|type
argument_list|()
argument_list|,
name|doc
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|doc
operator|.
name|version
argument_list|()
argument_list|)
decl_stmt|;
name|SearchHitField
name|routing
init|=
name|doc
operator|.
name|field
argument_list|(
literal|"_routing"
argument_list|)
decl_stmt|;
if|if
condition|(
name|routing
operator|!=
literal|null
condition|)
block|{
name|delete
operator|.
name|routing
argument_list|(
operator|(
name|String
operator|)
name|routing
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SearchHitField
name|parent
init|=
name|doc
operator|.
name|field
argument_list|(
literal|"_parent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|delete
operator|.
name|parent
argument_list|(
operator|(
name|String
operator|)
name|parent
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bulkRequest
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"executing bulk request with [{}] deletions"
argument_list|,
name|bulkRequest
operator|.
name|numberOfActions
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BulkResponse
name|bulkResponse
parameter_list|)
block|{
name|onBulkResponse
argument_list|(
name|nextScrollId
argument_list|,
name|bulkResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onBulkFailure
argument_list|(
name|nextScrollId
argument_list|,
name|docs
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onBulkResponse
name|void
name|onBulkResponse
parameter_list|(
name|String
name|scrollId
parameter_list|,
name|BulkResponse
name|bulkResponse
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|bulkResponse
operator|.
name|getItems
argument_list|()
control|)
block|{
name|IndexDeleteByQueryResponse
name|indexCounter
init|=
name|results
operator|.
name|get
argument_list|(
name|item
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexCounter
operator|==
literal|null
condition|)
block|{
name|indexCounter
operator|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
name|item
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexCounter
operator|.
name|incrementFound
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|indexCounter
operator|.
name|incrementFailed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DeleteResponse
name|delete
init|=
name|item
operator|.
name|getResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|isFound
argument_list|()
condition|)
block|{
name|indexCounter
operator|.
name|incrementDeleted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|indexCounter
operator|.
name|incrementMissing
argument_list|()
expr_stmt|;
block|}
block|}
name|results
operator|.
name|put
argument_list|(
name|item
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexCounter
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"scrolling next batch of document(s) with scroll id [{}]"
argument_list|,
name|scrollId
argument_list|)
expr_stmt|;
name|executeScroll
argument_list|(
name|scrollId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unable to process bulk response"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|finishHim
argument_list|(
name|scrollId
argument_list|,
literal|false
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onBulkFailure
name|void
name|onBulkFailure
parameter_list|(
name|String
name|scrollId
parameter_list|,
name|SearchHit
index|[]
name|docs
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"execution of scroll request failed: {}"
argument_list|,
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|doc
range|:
name|docs
control|)
block|{
name|IndexDeleteByQueryResponse
name|indexCounter
init|=
name|results
operator|.
name|get
argument_list|(
name|doc
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexCounter
operator|==
literal|null
condition|)
block|{
name|indexCounter
operator|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
name|doc
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexCounter
operator|.
name|incrementFound
argument_list|()
expr_stmt|;
name|indexCounter
operator|.
name|incrementFailed
argument_list|()
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|doc
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexCounter
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"scrolling document terminated due to scroll request failure [{}]"
argument_list|,
name|scrollId
argument_list|)
expr_stmt|;
name|finishHim
argument_list|(
name|scrollId
argument_list|,
name|hasTimedOut
argument_list|()
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unable to process bulk failure"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|finishHim
argument_list|(
name|scrollId
argument_list|,
literal|false
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|finishHim
name|void
name|finishHim
parameter_list|(
specifier|final
name|String
name|scrollId
parameter_list|,
name|boolean
name|scrollTimedOut
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|scrollTimedOut
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"delete-by-query response marked as timed out"
argument_list|)
expr_stmt|;
name|timedOut
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|scrollId
argument_list|)
condition|)
block|{
name|client
operator|.
name|prepareClearScroll
argument_list|()
operator|.
name|addScrollId
argument_list|(
name|scrollId
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|ActionListener
argument_list|<
name|ClearScrollResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|ClearScrollResponse
name|clearScrollResponse
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"scroll id [{}] cleared"
argument_list|,
name|scrollId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"unable to clear scroll id [{}]: {}"
argument_list|,
name|scrollId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"scrolling document(s) terminated with failures: {}"
argument_list|,
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"scrolling document(s) terminated with success"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|buildResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasTimedOut
name|boolean
name|hasTimedOut
parameter_list|()
block|{
return|return
name|request
operator|.
name|timeout
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|>=
operator|(
name|startTime
operator|+
name|request
operator|.
name|timeout
argument_list|()
operator|.
name|millis
argument_list|()
operator|)
operator|)
return|;
block|}
DECL|method|addShardFailure
name|void
name|addShardFailure
parameter_list|(
name|ShardOperationFailedException
name|failure
parameter_list|)
block|{
name|addShardFailures
argument_list|(
operator|new
name|ShardOperationFailedException
index|[]
block|{
name|failure
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addShardFailures
name|void
name|addShardFailures
parameter_list|(
name|ShardOperationFailedException
index|[]
name|failures
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|failures
argument_list|)
condition|)
block|{
name|ShardOperationFailedException
index|[]
name|duplicates
init|=
operator|new
name|ShardOperationFailedException
index|[
name|shardFailures
operator|.
name|length
operator|+
name|failures
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|shardFailures
argument_list|,
literal|0
argument_list|,
name|duplicates
argument_list|,
literal|0
argument_list|,
name|shardFailures
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|failures
argument_list|,
literal|0
argument_list|,
name|duplicates
argument_list|,
name|shardFailures
operator|.
name|length
argument_list|,
name|failures
operator|.
name|length
argument_list|)
expr_stmt|;
name|shardFailures
operator|=
name|ExceptionsHelper
operator|.
name|groupBy
argument_list|(
name|duplicates
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildResponse
specifier|protected
name|DeleteByQueryResponse
name|buildResponse
parameter_list|()
block|{
name|long
name|took
init|=
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|long
name|deleted
init|=
literal|0
decl_stmt|;
name|long
name|missing
init|=
literal|0
decl_stmt|;
name|long
name|failed
init|=
literal|0
decl_stmt|;
comment|// Calculates the total number  deleted/failed/missing documents
for|for
control|(
name|IndexDeleteByQueryResponse
name|result
range|:
name|results
operator|.
name|values
argument_list|()
control|)
block|{
name|deleted
operator|=
name|deleted
operator|+
name|result
operator|.
name|getDeleted
argument_list|()
expr_stmt|;
name|missing
operator|=
name|missing
operator|+
name|result
operator|.
name|getMissing
argument_list|()
expr_stmt|;
name|failed
operator|=
name|failed
operator|+
name|result
operator|.
name|getFailed
argument_list|()
expr_stmt|;
block|}
name|IndexDeleteByQueryResponse
index|[]
name|indices
init|=
name|results
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|IndexDeleteByQueryResponse
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|DeleteByQueryResponse
argument_list|(
name|took
argument_list|,
name|timedOut
operator|.
name|get
argument_list|()
argument_list|,
name|total
operator|.
name|get
argument_list|()
argument_list|,
name|deleted
argument_list|,
name|missing
argument_list|,
name|failed
argument_list|,
name|indices
argument_list|,
name|shardFailures
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

