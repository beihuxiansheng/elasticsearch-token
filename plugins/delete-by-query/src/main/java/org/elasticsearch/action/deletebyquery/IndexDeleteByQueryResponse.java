begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.deletebyquery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|deletebyquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Delete by query response executed on a specific index.  */
end_comment

begin_class
DECL|class|IndexDeleteByQueryResponse
specifier|public
class|class
name|IndexDeleteByQueryResponse
extends|extends
name|ActionResponse
implements|implements
name|ToXContent
block|{
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|IndexDeleteByQueryResponse
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|IndexDeleteByQueryResponse
index|[
literal|0
index|]
decl_stmt|;
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|found
specifier|private
name|long
name|found
init|=
literal|0L
decl_stmt|;
DECL|field|deleted
specifier|private
name|long
name|deleted
init|=
literal|0L
decl_stmt|;
DECL|field|missing
specifier|private
name|long
name|missing
init|=
literal|0L
decl_stmt|;
DECL|field|failed
specifier|private
name|long
name|failed
init|=
literal|0L
decl_stmt|;
DECL|method|IndexDeleteByQueryResponse
name|IndexDeleteByQueryResponse
parameter_list|()
block|{     }
DECL|method|IndexDeleteByQueryResponse
name|IndexDeleteByQueryResponse
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
comment|/**      * Instantiates an IndexDeleteByQueryResponse with given values for counters. Counters should not be negative.      */
DECL|method|IndexDeleteByQueryResponse
specifier|public
name|IndexDeleteByQueryResponse
parameter_list|(
name|String
name|index
parameter_list|,
name|long
name|found
parameter_list|,
name|long
name|deleted
parameter_list|,
name|long
name|missing
parameter_list|,
name|long
name|failed
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|incrementFound
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|incrementDeleted
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|incrementMissing
argument_list|(
name|missing
argument_list|)
expr_stmt|;
name|incrementFailed
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
DECL|method|getFound
specifier|public
name|long
name|getFound
parameter_list|()
block|{
return|return
name|found
return|;
block|}
DECL|method|incrementFound
specifier|public
name|void
name|incrementFound
parameter_list|()
block|{
name|incrementFound
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|incrementFound
specifier|public
name|void
name|incrementFound
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
assert|assert
operator|(
name|found
operator|+
name|delta
operator|>=
literal|0
operator|)
operator|:
literal|"counter 'found' cannot be negative"
assert|;
name|this
operator|.
name|found
operator|=
name|found
operator|+
name|delta
expr_stmt|;
block|}
DECL|method|getDeleted
specifier|public
name|long
name|getDeleted
parameter_list|()
block|{
return|return
name|deleted
return|;
block|}
DECL|method|incrementDeleted
specifier|public
name|void
name|incrementDeleted
parameter_list|()
block|{
name|incrementDeleted
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|incrementDeleted
specifier|public
name|void
name|incrementDeleted
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
assert|assert
operator|(
name|deleted
operator|+
name|delta
operator|>=
literal|0
operator|)
operator|:
literal|"counter 'deleted' cannot be negative"
assert|;
name|this
operator|.
name|deleted
operator|=
name|deleted
operator|+
name|delta
expr_stmt|;
block|}
DECL|method|getMissing
specifier|public
name|long
name|getMissing
parameter_list|()
block|{
return|return
name|missing
return|;
block|}
DECL|method|incrementMissing
specifier|public
name|void
name|incrementMissing
parameter_list|()
block|{
name|incrementMissing
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|incrementMissing
specifier|public
name|void
name|incrementMissing
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
assert|assert
operator|(
name|missing
operator|+
name|delta
operator|>=
literal|0
operator|)
operator|:
literal|"counter 'missing' cannot be negative"
assert|;
name|this
operator|.
name|missing
operator|=
name|missing
operator|+
name|delta
expr_stmt|;
block|}
DECL|method|getFailed
specifier|public
name|long
name|getFailed
parameter_list|()
block|{
return|return
name|failed
return|;
block|}
DECL|method|incrementFailed
specifier|public
name|void
name|incrementFailed
parameter_list|()
block|{
name|incrementFailed
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|incrementFailed
specifier|public
name|void
name|incrementFailed
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
assert|assert
operator|(
name|failed
operator|+
name|delta
operator|>=
literal|0
operator|)
operator|:
literal|"counter 'failed' cannot be negative"
assert|;
name|this
operator|.
name|failed
operator|=
name|failed
operator|+
name|delta
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|index
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|found
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|deleted
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|missing
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|failed
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|missing
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|failed
argument_list|)
expr_stmt|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|FOUND
specifier|static
specifier|final
name|String
name|FOUND
init|=
literal|"found"
decl_stmt|;
DECL|field|DELETED
specifier|static
specifier|final
name|String
name|DELETED
init|=
literal|"deleted"
decl_stmt|;
DECL|field|MISSING
specifier|static
specifier|final
name|String
name|MISSING
init|=
literal|"missing"
decl_stmt|;
DECL|field|FAILED
specifier|static
specifier|final
name|String
name|FAILED
init|=
literal|"failed"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FOUND
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|DELETED
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MISSING
argument_list|,
name|missing
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FAILED
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

