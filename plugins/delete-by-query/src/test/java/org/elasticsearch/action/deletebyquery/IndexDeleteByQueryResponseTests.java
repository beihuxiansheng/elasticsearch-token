begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.deletebyquery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|deletebyquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|IndexDeleteByQueryResponseTests
specifier|public
class|class
name|IndexDeleteByQueryResponseTests
extends|extends
name|ESTestCase
block|{
annotation|@
name|Test
DECL|method|testIncrements
specifier|public
name|void
name|testIncrements
parameter_list|()
block|{
name|String
name|indexName
init|=
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// Use randomInt to prevent range overflow
name|long
name|found
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|deleted
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|missing
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|failed
init|=
name|Math
operator|.
name|abs
argument_list|(
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|IndexDeleteByQueryResponse
name|response
init|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
name|indexName
argument_list|,
name|found
argument_list|,
name|deleted
argument_list|,
name|missing
argument_list|,
name|failed
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMissing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|missing
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|failed
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|incrementFound
argument_list|()
expr_stmt|;
name|response
operator|.
name|incrementDeleted
argument_list|()
expr_stmt|;
name|response
operator|.
name|incrementMissing
argument_list|()
expr_stmt|;
name|response
operator|.
name|incrementFailed
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|found
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|deleted
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMissing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|missing
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|failed
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use randomInt to prevent range overflow
name|long
name|inc
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|response
operator|.
name|incrementFound
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|response
operator|.
name|incrementDeleted
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|response
operator|.
name|incrementMissing
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|response
operator|.
name|incrementFailed
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|found
operator|+
literal|1
operator|+
name|inc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|deleted
operator|+
literal|1
operator|+
name|inc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMissing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|missing
operator|+
literal|1
operator|+
name|inc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|failed
operator|+
literal|1
operator|+
name|inc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNegativeCounters
specifier|public
name|void
name|testNegativeCounters
parameter_list|()
block|{
name|assumeTrue
argument_list|(
literal|"assertions must be enable for this test to pass"
argument_list|,
name|assertionsEnabled
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
literal|"index"
argument_list|,
operator|-
literal|1L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'found' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
literal|"index"
argument_list|,
literal|0L
argument_list|,
operator|-
literal|1L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'deleted' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
literal|"index"
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
operator|-
literal|1L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'missing' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
literal|"index"
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'failed' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNegativeIncrements
specifier|public
name|void
name|testNegativeIncrements
parameter_list|()
block|{
name|assumeTrue
argument_list|(
literal|"assertions must be enable for this test to pass"
argument_list|,
name|assertionsEnabled
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|IndexDeleteByQueryResponse
name|response
init|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|incrementFound
argument_list|(
operator|-
literal|10L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'found' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexDeleteByQueryResponse
name|response
init|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|incrementDeleted
argument_list|(
operator|-
literal|10L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'deleted' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexDeleteByQueryResponse
name|response
init|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|incrementMissing
argument_list|(
operator|-
literal|10L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'missing' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexDeleteByQueryResponse
name|response
init|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|incrementFailed
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an assertion error concerning the negative counter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"message contains error about a negative counter: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"counter 'failed' cannot be negative"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexDeleteByQueryResponse
name|response
init|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Version
name|testVersion
init|=
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|output
operator|.
name|setVersion
argument_list|(
name|testVersion
argument_list|)
expr_stmt|;
name|response
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|StreamInput
name|streamInput
init|=
name|StreamInput
operator|.
name|wrap
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|streamInput
operator|.
name|setVersion
argument_list|(
name|testVersion
argument_list|)
expr_stmt|;
name|IndexDeleteByQueryResponse
name|deserializedResponse
init|=
operator|new
name|IndexDeleteByQueryResponse
argument_list|()
decl_stmt|;
name|deserializedResponse
operator|.
name|readFrom
argument_list|(
name|streamInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserializedResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserializedResponse
operator|.
name|getFound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getFound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserializedResponse
operator|.
name|getDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getDeleted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserializedResponse
operator|.
name|getMissing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getMissing
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deserializedResponse
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|response
operator|.
name|getFailed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

