begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.deletebyquery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|deletebyquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|StringText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESSingleNodeTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|boolQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|rangeQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|TransportDeleteByQueryActionTests
specifier|public
class|class
name|TransportDeleteByQueryActionTests
extends|extends
name|ESSingleNodeTestCase
block|{
annotation|@
name|Test
DECL|method|testExecuteScanFailsOnMissingIndex
specifier|public
name|void
name|testExecuteScanFailsOnMissingIndex
parameter_list|()
block|{
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
operator|.
name|indices
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"none"
block|}
argument_list|)
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|executeScan
argument_list|()
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scan request should fail on missing index"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFailure
argument_list|(
name|listener
argument_list|,
literal|"no such index"
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteScan
specifier|public
name|void
name|testExecuteScan
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|200
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|long
name|limit
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
operator|.
name|indices
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|)
operator|.
name|query
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"num"
argument_list|)
operator|.
name|lte
argument_list|(
name|limit
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|executeScan
argument_list|()
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scan request should return the exact number of documents"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|DeleteByQueryResponse
name|response
init|=
name|listener
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTotalFound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTotalDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteScrollFailsOnMissingScrollId
specifier|public
name|void
name|testExecuteScrollFailsOnMissingScrollId
parameter_list|()
block|{
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|executeScroll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scroll request should fail on missing scroll id"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFailure
argument_list|(
name|listener
argument_list|,
literal|"scrollId is missing"
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteScrollFailsOnMalformedScrollId
specifier|public
name|void
name|testExecuteScrollFailsOnMalformedScrollId
parameter_list|()
block|{
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|executeScroll
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scroll request should fail on malformed scroll id"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFailure
argument_list|(
name|listener
argument_list|,
literal|"Failed to decode scrollId"
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteScrollFailsOnExpiredScrollId
specifier|public
name|void
name|testExecuteScrollFailsOnExpiredScrollId
parameter_list|()
block|{
specifier|final
name|long
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setScroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
name|ClearScrollResponse
name|clearScrollResponse
init|=
name|client
argument_list|()
operator|.
name|prepareClearScroll
argument_list|()
operator|.
name|addScrollId
argument_list|(
name|scrollId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|clearScrollResponse
operator|.
name|isSucceeded
argument_list|()
argument_list|)
expr_stmt|;
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
operator|.
name|indices
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|)
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|executeScroll
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scroll request returns zero documents on expired scroll id"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertThrowableContains
argument_list|(
name|listener
operator|.
name|getError
argument_list|()
argument_list|,
literal|"No search context found"
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteScrollTimedOut
specifier|public
name|void
name|testExecuteScrollTimedOut
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setScroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
operator|.
name|indices
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|)
operator|.
name|timeout
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
specifier|final
name|TransportDeleteByQueryAction
operator|.
name|AsyncDeleteByQueryAction
name|async
init|=
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
decl_stmt|;
comment|// Wait until the action timed out
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
name|async
operator|.
name|hasTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|async
operator|.
name|executeScroll
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scroll request returns zero documents on expired scroll id"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteScrollNoDocuments
specifier|public
name|void
name|testExecuteScrollNoDocuments
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setScroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
operator|.
name|indices
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|)
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|executeScroll
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scroll request returns zero documents"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalFound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteScroll
specifier|public
name|void
name|testExecuteScroll
parameter_list|()
block|{
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|long
name|limit
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setScroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|setQuery
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"num"
argument_list|)
operator|.
name|lte
argument_list|(
name|limit
argument_list|)
argument_list|)
argument_list|)
operator|.
name|fields
argument_list|(
literal|"_routing"
argument_list|,
literal|"_parent"
argument_list|)
operator|.
name|setFetchSource
argument_list|(
literal|false
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
operator|.
name|indices
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|)
operator|.
name|size
argument_list|(
literal|100
argument_list|)
operator|.
name|query
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|rangeQuery
argument_list|(
literal|"num"
argument_list|)
operator|.
name|lte
argument_list|(
name|limit
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|executeScroll
argument_list|(
name|searchResponse
operator|.
name|getScrollId
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"scroll request should return all documents"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
comment|// docs that have been returned on the 1st page have been skipped
specifier|final
name|long
name|expectedDeleted
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|limit
operator|-
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDeleted
argument_list|)
argument_list|)
expr_stmt|;
name|assertSearchContextsClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnBulkResponse
specifier|public
name|void
name|testOnBulkResponse
parameter_list|()
block|{
specifier|final
name|int
name|nbItems
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|long
name|deleted
init|=
literal|0
decl_stmt|;
name|long
name|missing
init|=
literal|0
decl_stmt|;
name|long
name|failed
init|=
literal|0
decl_stmt|;
name|BulkItemResponse
index|[]
name|items
init|=
operator|new
name|BulkItemResponse
index|[
name|nbItems
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbItems
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|delete
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|delete
operator|=
literal|false
expr_stmt|;
name|missing
operator|++
expr_stmt|;
block|}
else|else
block|{
name|deleted
operator|++
expr_stmt|;
block|}
name|items
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|DeleteResponse
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|1
argument_list|,
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|items
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"item failed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|failed
operator|++
expr_stmt|;
block|}
block|}
comment|// We just need a valid scroll id
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setScroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|onBulkResponse
argument_list|(
name|scrollId
argument_list|,
operator|new
name|BulkResponse
argument_list|(
name|items
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"waiting for bulk response to complete"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|failed
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalMissing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|missing
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
argument_list|()
operator|.
name|prepareClearScroll
argument_list|()
operator|.
name|addScrollId
argument_list|(
name|scrollId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOnBulkResponseMultipleIndices
specifier|public
name|void
name|testOnBulkResponseMultipleIndices
parameter_list|()
block|{
specifier|final
name|int
name|nbIndices
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// Holds counters for the total + all indices
specifier|final
name|long
index|[]
name|found
init|=
operator|new
name|long
index|[
literal|1
operator|+
name|nbIndices
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|deleted
init|=
operator|new
name|long
index|[
literal|1
operator|+
name|nbIndices
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|missing
init|=
operator|new
name|long
index|[
literal|1
operator|+
name|nbIndices
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|failed
init|=
operator|new
name|long
index|[
literal|1
operator|+
name|nbIndices
index|]
decl_stmt|;
specifier|final
name|int
name|nbItems
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|found
index|[
literal|0
index|]
operator|=
name|nbItems
expr_stmt|;
name|BulkItemResponse
index|[]
name|items
init|=
operator|new
name|BulkItemResponse
index|[
name|nbItems
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbItems
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|nbIndices
argument_list|)
decl_stmt|;
name|found
index|[
name|index
index|]
operator|=
name|found
index|[
name|index
index|]
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|delete
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|delete
operator|=
literal|false
expr_stmt|;
name|missing
index|[
literal|0
index|]
operator|=
name|missing
index|[
literal|0
index|]
operator|+
literal|1
expr_stmt|;
name|missing
index|[
name|index
index|]
operator|=
name|missing
index|[
name|index
index|]
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|deleted
index|[
literal|0
index|]
operator|=
name|deleted
index|[
literal|0
index|]
operator|+
literal|1
expr_stmt|;
name|deleted
index|[
name|index
index|]
operator|=
name|deleted
index|[
name|index
index|]
operator|+
literal|1
expr_stmt|;
block|}
name|items
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|DeleteResponse
argument_list|(
literal|"test-"
operator|+
name|index
argument_list|,
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|1
argument_list|,
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|items
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
literal|"test-"
operator|+
name|index
argument_list|,
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"item failed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|failed
index|[
literal|0
index|]
operator|=
name|failed
index|[
literal|0
index|]
operator|+
literal|1
expr_stmt|;
name|failed
index|[
name|index
index|]
operator|=
name|failed
index|[
name|index
index|]
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|// We just need a valid scroll id
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setScroll
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|scrollId
init|=
name|searchResponse
operator|.
name|getScrollId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|onBulkResponse
argument_list|(
name|scrollId
argument_list|,
operator|new
name|BulkResponse
argument_list|(
name|items
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"waiting for bulk response to complete"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|deleted
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|failed
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getTotalMissing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|missing
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|nbIndices
condition|;
name|i
operator|++
control|)
block|{
name|IndexDeleteByQueryResponse
name|indexResponse
init|=
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getIndex
argument_list|(
literal|"test-"
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
index|[
name|i
index|]
operator|>=
literal|1
condition|)
block|{
name|assertNotNull
argument_list|(
name|indexResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|getFound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|found
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|getDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|deleted
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|getFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|failed
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|getMissing
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|missing
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|indexResponse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|client
argument_list|()
operator|.
name|prepareClearScroll
argument_list|()
operator|.
name|addScrollId
argument_list|(
name|scrollId
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOnBulkFailureNoDocuments
specifier|public
name|void
name|testOnBulkFailureNoDocuments
parameter_list|()
block|{
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
operator|.
name|onBulkFailure
argument_list|(
literal|null
argument_list|,
operator|new
name|SearchHit
index|[
literal|0
index|]
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"This is a bulk failure"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"waiting for bulk failure to complete"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFailure
argument_list|(
name|listener
argument_list|,
literal|"This is a bulk failure"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnBulkFailure
specifier|public
name|void
name|testOnBulkFailure
parameter_list|()
block|{
specifier|final
name|int
name|nbDocs
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|SearchHit
index|[]
name|docs
init|=
operator|new
name|SearchHit
index|[
name|nbDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbDocs
condition|;
name|i
operator|++
control|)
block|{
name|InternalSearchHit
name|doc
init|=
operator|new
name|InternalSearchHit
argument_list|(
name|randomInt
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|StringText
argument_list|(
literal|"type"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|doc
operator|.
name|shard
argument_list|(
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
literal|"test"
argument_list|,
name|randomInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|doc
expr_stmt|;
block|}
name|DeleteByQueryRequest
name|delete
init|=
operator|new
name|DeleteByQueryRequest
argument_list|()
decl_stmt|;
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|TransportDeleteByQueryAction
operator|.
name|AsyncDeleteByQueryAction
name|async
init|=
name|newAsyncAction
argument_list|(
name|delete
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|async
operator|.
name|onBulkFailure
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"This is a bulk failure"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"waiting for bulk failure to complete"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFailure
argument_list|(
name|listener
argument_list|,
literal|"This is a bulk failure"
argument_list|)
expr_stmt|;
name|DeleteByQueryResponse
name|response
init|=
name|async
operator|.
name|buildResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTotalFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|nbDocs
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getTotalDeleted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishHim
specifier|public
name|void
name|testFinishHim
parameter_list|()
block|{
name|TestActionListener
name|listener
init|=
operator|new
name|TestActionListener
argument_list|()
decl_stmt|;
name|newAsyncAction
argument_list|(
operator|new
name|DeleteByQueryRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|finishHim
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"waiting for finishHim to complete with success"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|TestActionListener
argument_list|()
expr_stmt|;
name|newAsyncAction
argument_list|(
operator|new
name|DeleteByQueryRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|finishHim
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"waiting for finishHim to complete with timed out = true"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertNoFailures
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|TestActionListener
argument_list|()
expr_stmt|;
name|newAsyncAction
argument_list|(
operator|new
name|DeleteByQueryRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|finishHim
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"Fake error"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForCompletion
argument_list|(
literal|"waiting for finishHim to complete with error"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|assertFailure
argument_list|(
name|listener
argument_list|,
literal|"Fake error"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newAsyncAction
specifier|private
name|TransportDeleteByQueryAction
operator|.
name|AsyncDeleteByQueryAction
name|newAsyncAction
parameter_list|(
name|DeleteByQueryRequest
name|request
parameter_list|,
name|TestActionListener
name|listener
parameter_list|)
block|{
name|TransportDeleteByQueryAction
name|action
init|=
name|getInstanceFromNode
argument_list|(
name|TransportDeleteByQueryAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
operator|.
expr|new
name|AsyncDeleteByQueryAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
return|;
block|}
DECL|method|waitForCompletion
specifier|private
name|void
name|waitForCompletion
parameter_list|(
name|String
name|testName
parameter_list|,
specifier|final
name|TestActionListener
name|listener
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|" --> waiting for delete-by-query [{}] to complete"
argument_list|,
name|testName
argument_list|)
expr_stmt|;
try|try
block|{
name|awaitBusy
argument_list|(
parameter_list|()
lambda|->
name|listener
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"exception when waiting for delete-by-query ["
operator|+
name|testName
operator|+
literal|"] to complete: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"exception when waiting for delete-by-query [{}] to complete"
argument_list|,
name|e
argument_list|,
name|testName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertFailure
specifier|private
name|void
name|assertFailure
parameter_list|(
name|TestActionListener
name|listener
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|listener
operator|.
name|getError
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Strings
operator|.
name|hasText
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"error message should contain ["
operator|+
name|expectedMessage
operator|+
literal|"] but got ["
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoFailures
specifier|private
name|void
name|assertNoFailures
parameter_list|(
name|TestActionListener
name|listener
parameter_list|)
block|{
name|assertNull
argument_list|(
name|listener
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|listener
operator|.
name|getResponse
argument_list|()
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSearchContextsClosed
specifier|private
name|void
name|assertSearchContextsClosed
parameter_list|()
block|{
name|NodesStatsResponse
name|nodesStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeStats
name|nodeStat
range|:
name|nodesStats
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|nodeStat
operator|.
name|getIndices
argument_list|()
operator|.
name|getSearch
argument_list|()
operator|.
name|getOpenContexts
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertThrowableContains
specifier|private
name|void
name|assertThrowableContains
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|String
name|expectedFailure
parameter_list|)
block|{
name|assertThat
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|expectedFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertShardFailuresContains
specifier|private
name|void
name|assertShardFailuresContains
parameter_list|(
name|ShardOperationFailedException
index|[]
name|shardFailures
parameter_list|,
name|String
name|expectedFailure
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|shardFailures
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardOperationFailedException
name|failure
range|:
name|shardFailures
control|)
block|{
name|Throwable
name|t
init|=
name|failure
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedFailure
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"failed to find shard failure ["
operator|+
name|expectedFailure
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|class|TestActionListener
specifier|private
class|class
name|TestActionListener
implements|implements
name|ActionListener
argument_list|<
name|DeleteByQueryResponse
argument_list|>
block|{
DECL|field|count
specifier|private
specifier|final
name|CountDown
name|count
init|=
operator|new
name|CountDown
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|response
specifier|private
name|DeleteByQueryResponse
name|response
decl_stmt|;
DECL|field|error
specifier|private
name|Throwable
name|error
decl_stmt|;
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|DeleteByQueryResponse
name|response
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
finally|finally
block|{
name|count
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|error
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
name|count
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isTerminated
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
return|return
name|count
operator|.
name|isCountedDown
argument_list|()
return|;
block|}
DECL|method|getResponse
specifier|public
name|DeleteByQueryResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|getError
specifier|public
name|Throwable
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
block|}
block|}
end_class

end_unit

