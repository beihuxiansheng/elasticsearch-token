begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.gateway.hdfs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|Gateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|hdfs
operator|.
name|HdfsGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|HdfsIndexGateway
specifier|public
class|class
name|HdfsIndexGateway
extends|extends
name|AbstractIndexComponent
implements|implements
name|IndexGateway
block|{
DECL|field|fileSystem
specifier|private
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|field|indexPath
specifier|private
specifier|final
name|Path
name|indexPath
decl_stmt|;
DECL|method|HdfsIndexGateway
annotation|@
name|Inject
specifier|public
name|HdfsIndexGateway
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|Gateway
name|gateway
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
literal|null
decl_stmt|;
name|String
name|pathSetting
init|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathSetting
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|pathSetting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gateway
operator|instanceof
name|HdfsGateway
condition|)
block|{
name|HdfsGateway
name|hdfsGateway
init|=
operator|(
name|HdfsGateway
operator|)
name|gateway
decl_stmt|;
name|fileSystem
operator|=
name|hdfsGateway
operator|.
name|fileSystem
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|hdfsGateway
operator|.
name|path
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Must configure an hdfs gateway to use index hdfs gateway"
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexPath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"indices"
argument_list|)
argument_list|,
name|index
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|type
annotation|@
name|Override
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
literal|"hdfs"
return|;
block|}
DECL|method|fileSystem
specifier|public
name|FileSystem
name|fileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileSystem
return|;
block|}
DECL|method|indexPath
specifier|public
name|Path
name|indexPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexPath
return|;
block|}
DECL|method|shardGatewayClass
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|IndexShardGateway
argument_list|>
name|shardGatewayClass
parameter_list|()
block|{
return|return
name|HdfsIndexShardGateway
operator|.
name|class
return|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|delete
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
if|if
condition|(
name|delete
condition|)
block|{
try|try
block|{
name|fileSystem
operator|.
name|delete
argument_list|(
name|indexPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to delete [{}]"
argument_list|,
name|e
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

