begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.blobstore.hdfs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|AppendableBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|DataOutputStreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|HdfsAppendableBlobContainer
specifier|public
class|class
name|HdfsAppendableBlobContainer
extends|extends
name|AbstractHdfsBlobContainer
implements|implements
name|AppendableBlobContainer
block|{
DECL|method|HdfsAppendableBlobContainer
specifier|public
name|HdfsAppendableBlobContainer
parameter_list|(
name|HdfsBlobStore
name|blobStore
parameter_list|,
name|BlobPath
name|blobPath
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|blobStore
argument_list|,
name|blobPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|appendBlob
annotation|@
name|Override
specifier|public
name|AppendableBlob
name|appendBlob
parameter_list|(
name|String
name|blobName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HdfsAppendableBlob
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|blobName
argument_list|)
argument_list|)
return|;
block|}
DECL|method|canAppendToExistingBlob
annotation|@
name|Override
specifier|public
name|boolean
name|canAppendToExistingBlob
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|class|HdfsAppendableBlob
specifier|private
class|class
name|HdfsAppendableBlob
implements|implements
name|AppendableBlob
block|{
DECL|field|file
specifier|private
specifier|final
name|Path
name|file
decl_stmt|;
DECL|field|fsDataStream
specifier|private
specifier|final
name|FSDataOutputStream
name|fsDataStream
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|DataOutputStreamOutput
name|out
decl_stmt|;
DECL|method|HdfsAppendableBlob
specifier|public
name|HdfsAppendableBlob
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|fsDataStream
operator|=
name|blobStore
operator|.
name|fileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|=
operator|new
name|DataOutputStreamOutput
argument_list|(
name|fsDataStream
argument_list|)
expr_stmt|;
block|}
DECL|method|append
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
specifier|final
name|AppendBlobListener
name|listener
parameter_list|)
block|{
name|blobStore
operator|.
name|executorService
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|listener
operator|.
name|withStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fsDataStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fsDataStream
operator|.
name|sync
argument_list|()
expr_stmt|;
name|listener
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|close
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|fsDataStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
end_class

end_unit

