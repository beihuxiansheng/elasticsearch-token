begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.jgroups
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|jgroups
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|logging
operator|.
name|CustomLogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * @author kimchy (Shay Banon)  */
end_comment

begin_class
DECL|class|JgroupsCustomLogFactory
specifier|public
class|class
name|JgroupsCustomLogFactory
implements|implements
name|CustomLogFactory
block|{
DECL|method|getLog
annotation|@
name|Override
specifier|public
name|Log
name|getLog
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|getLog
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLog
annotation|@
name|Override
specifier|public
name|Log
name|getLog
parameter_list|(
name|String
name|category
parameter_list|)
block|{
return|return
operator|new
name|JgroupsESLog
argument_list|(
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|category
operator|.
name|replace
argument_list|(
literal|"org.jgroups."
argument_list|,
literal|"jgroups."
argument_list|)
operator|.
name|replace
argument_list|(
literal|".protocols."
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|class|JgroupsESLog
specifier|private
specifier|static
class|class
name|JgroupsESLog
implements|implements
name|Log
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|JgroupsESLog
specifier|private
name|JgroupsESLog
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
DECL|method|isFatalEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isFatalEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isErrorEnabled
argument_list|()
return|;
block|}
DECL|method|isErrorEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isErrorEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isErrorEnabled
argument_list|()
return|;
block|}
DECL|method|isWarnEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isWarnEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isWarnEnabled
argument_list|()
return|;
block|}
DECL|method|isInfoEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isInfoEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isInfoEnabled
argument_list|()
return|;
block|}
DECL|method|isDebugEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isDebugEnabled
argument_list|()
return|;
block|}
DECL|method|isTraceEnabled
annotation|@
name|Override
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
name|logger
operator|.
name|isTraceEnabled
argument_list|()
return|;
block|}
DECL|method|debug
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|debug
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|error
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|error
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|fatal
annotation|@
name|Override
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|fatal
annotation|@
name|Override
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|info
annotation|@
name|Override
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|info
annotation|@
name|Override
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|trace
annotation|@
name|Override
specifier|public
name|void
name|trace
parameter_list|(
name|Object
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|trace
annotation|@
name|Override
specifier|public
name|void
name|trace
parameter_list|(
name|Object
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|trace
annotation|@
name|Override
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|trace
annotation|@
name|Override
specifier|public
name|void
name|trace
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|warn
annotation|@
name|Override
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|warn
annotation|@
name|Override
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|setLevel
annotation|@
name|Override
specifier|public
name|void
name|setLevel
parameter_list|(
name|String
name|level
parameter_list|)
block|{
comment|// ignore
block|}
DECL|method|getLevel
annotation|@
name|Override
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

