begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.discovery.ec2
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|discovery
operator|.
name|ec2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|util
operator|.
name|json
operator|.
name|Jackson
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SetOnce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|SpecialPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|aws
operator|.
name|AwsEc2Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|aws
operator|.
name|AwsEc2ServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|aws
operator|.
name|network
operator|.
name|Ec2NameResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|aws
operator|.
name|util
operator|.
name|SocketAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|ec2
operator|.
name|AwsEc2UnicastHostsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|UnicastHostsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|DiscoveryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_class
DECL|class|Ec2DiscoveryPlugin
specifier|public
class|class
name|Ec2DiscoveryPlugin
extends|extends
name|Plugin
implements|implements
name|DiscoveryPlugin
implements|,
name|Closeable
block|{
DECL|field|logger
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Ec2DiscoveryPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|deprecationLogger
specifier|private
specifier|static
specifier|final
name|DeprecationLogger
name|deprecationLogger
init|=
operator|new
name|DeprecationLogger
argument_list|(
name|logger
argument_list|)
decl_stmt|;
DECL|field|EC2
specifier|public
specifier|static
specifier|final
name|String
name|EC2
init|=
literal|"ec2"
decl_stmt|;
static|static
block|{
name|SpecialPermission
operator|.
name|check
argument_list|()
expr_stmt|;
comment|// Initializing Jackson requires RuntimePermission accessDeclaredMembers
comment|// The ClientConfiguration class requires RuntimePermission getClassLoader
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
comment|// kick jackson to do some static caching of declared members info
name|Jackson
operator|.
name|jsonNodeOf
argument_list|(
literal|"{}"
argument_list|)
expr_stmt|;
comment|// ClientConfiguration clinit has some classloader problems
comment|// TODO: fix that
name|Class
operator|.
name|forName
argument_list|(
literal|"com.amazonaws.ClientConfiguration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|)
class|;
end_class

begin_decl_stmt
unit|}      private
DECL|field|settings
name|Settings
name|settings
decl_stmt|;
end_decl_stmt

begin_comment
comment|// stashed when created in order to properly close
end_comment

begin_decl_stmt
DECL|field|ec2Service
specifier|private
specifier|final
name|SetOnce
argument_list|<
name|AwsEc2ServiceImpl
argument_list|>
name|ec2Service
init|=
operator|new
name|SetOnce
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_constructor
DECL|method|Ec2DiscoveryPlugin
specifier|public
name|Ec2DiscoveryPlugin
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
end_constructor

begin_function
annotation|@
name|Override
DECL|method|getDiscoveryTypes
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|Discovery
argument_list|>
argument_list|>
name|getDiscoveryTypes
parameter_list|(
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|UnicastHostsProvider
name|hostsProvider
parameter_list|)
block|{
comment|// this is for backcompat with pre 5.1, where users would set discovery.type to use ec2 hosts provider
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|EC2
argument_list|,
parameter_list|()
lambda|->
operator|new
name|ZenDiscovery
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|clusterService
argument_list|,
name|hostsProvider
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getCustomNameResolver
specifier|public
name|NetworkService
operator|.
name|CustomNameResolver
name|getCustomNameResolver
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Register _ec2_, _ec2:xxx_ network names"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Ec2NameResolver
argument_list|(
name|settings
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getZenHostsProviders
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|UnicastHostsProvider
argument_list|>
argument_list|>
name|getZenHostsProviders
parameter_list|(
name|TransportService
name|transportService
parameter_list|,
name|NetworkService
name|networkService
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|EC2
argument_list|,
parameter_list|()
lambda|->
block|{
name|ec2Service
operator|.
name|set
argument_list|(
operator|new
name|AwsEc2ServiceImpl
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|AwsEc2UnicastHostsProvider
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|ec2Service
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
comment|// Register global cloud aws settings: cloud.aws (might have been registered in ec2 plugin)
name|AwsEc2Service
operator|.
name|KEY_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|SECRET_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|PROTOCOL_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|PROXY_HOST_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|PROXY_PORT_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|PROXY_USERNAME_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|PROXY_PASSWORD_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|SIGNER_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|REGION_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|READ_TIMEOUT
argument_list|,
comment|// Register EC2 specific settings: cloud.aws.ec2
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|KEY_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SECRET_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROTOCOL_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_HOST_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PORT_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_USERNAME_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PASSWORD_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SIGNER_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|REGION_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|ENDPOINT_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|READ_TIMEOUT
argument_list|,
comment|// Register EC2 discovery settings: discovery.ec2
name|AwsEc2Service
operator|.
name|DISCOVERY_EC2
operator|.
name|HOST_TYPE_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|DISCOVERY_EC2
operator|.
name|ANY_GROUP_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|DISCOVERY_EC2
operator|.
name|GROUPS_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|DISCOVERY_EC2
operator|.
name|AVAILABILITY_ZONES_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|DISCOVERY_EC2
operator|.
name|NODE_CACHE_TIME_SETTING
argument_list|,
name|AwsEc2Service
operator|.
name|DISCOVERY_EC2
operator|.
name|TAG_SETTING
argument_list|,
comment|// Register cloud node settings: cloud.node
name|AwsEc2Service
operator|.
name|AUTO_ATTRIBUTE_SETTING
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|additionalSettings
specifier|public
name|Settings
name|additionalSettings
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// For 5.0, discovery.type was used prior to the new discovery.zen.hosts_provider
comment|// setting existed. This check looks for the legacy setting, and sets hosts provider if set
name|String
name|discoveryType
init|=
name|DiscoveryModule
operator|.
name|DISCOVERY_TYPE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|discoveryType
operator|.
name|equals
argument_list|(
name|EC2
argument_list|)
condition|)
block|{
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
literal|"Using "
operator|+
name|DiscoveryModule
operator|.
name|DISCOVERY_TYPE_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|" setting to set hosts provider is deprecated. "
operator|+
literal|"Set \""
operator|+
name|DiscoveryModule
operator|.
name|DISCOVERY_HOSTS_PROVIDER_SETTING
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|EC2
operator|+
literal|"\" instead"
argument_list|)
expr_stmt|;
if|if
condition|(
name|DiscoveryModule
operator|.
name|DISCOVERY_HOSTS_PROVIDER_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_HOSTS_PROVIDER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|EC2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Adds a node attribute for the ec2 availability zone
name|String
name|azMetadataUrl
init|=
name|AwsEc2ServiceImpl
operator|.
name|EC2_METADATA_URL
operator|+
literal|"placement/availability-zone"
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|getAvailabilityZoneNodeAttributes
argument_list|(
name|settings
argument_list|,
name|azMetadataUrl
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// pkg private for testing
end_comment

begin_function
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"We call getInputStream in doPrivileged and provide SocketPermission"
argument_list|)
DECL|method|getAvailabilityZoneNodeAttributes
specifier|static
name|Settings
name|getAvailabilityZoneNodeAttributes
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|azMetadataUrl
parameter_list|)
block|{
if|if
condition|(
name|AwsEc2Service
operator|.
name|AUTO_ATTRIBUTE_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
name|Settings
operator|.
name|EMPTY
return|;
block|}
name|Settings
operator|.
name|Builder
name|attrs
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
decl_stmt|;
specifier|final
name|URLConnection
name|urlConnection
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|azMetadataUrl
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"obtaining ec2 [placement/availability-zone] from ec2 meta-data url {}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|urlConnection
operator|=
name|SocketAccess
operator|.
name|doPrivilegedIOException
argument_list|(
name|url
operator|::
name|openConnection
argument_list|)
expr_stmt|;
name|urlConnection
operator|.
name|setConnectTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should not happen, we know the url is not malformed, and openConnection does not actually hit network
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
init|(
name|InputStream
name|in
init|=
name|SocketAccess
operator|.
name|doPrivilegedIOException
argument_list|(
name|urlConnection
operator|::
name|getInputStream
argument_list|)
init|;
name|BufferedReader
name|urlReader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|String
name|metadataResult
init|=
name|urlReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadataResult
operator|==
literal|null
operator|||
name|metadataResult
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no ec2 metadata returned from "
operator|+
name|url
argument_list|)
throw|;
block|}
else|else
block|{
name|attrs
operator|.
name|put
argument_list|(
name|Node
operator|.
name|NODE_ATTRIBUTES
operator|.
name|getKey
argument_list|()
operator|+
literal|"aws_availability_zone"
argument_list|,
name|metadataResult
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// this is lenient so the plugin does not fail when installed outside of ec2
name|logger
operator|.
name|error
argument_list|(
literal|"failed to get metadata for [placement/availability-zone]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|attrs
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|ec2Service
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

