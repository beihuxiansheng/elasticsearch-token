begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.ec2
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|ec2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonWebServiceRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|AWSCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|BasicAWSCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|auth
operator|.
name|DefaultAWSCredentialsProviderChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|http
operator|.
name|IdleConnectionReaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|internal
operator|.
name|StaticCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|ec2
operator|.
name|AmazonEC2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|ec2
operator|.
name|AmazonEC2Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Randomness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SecureString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_class
DECL|class|AwsEc2ServiceImpl
class|class
name|AwsEc2ServiceImpl
extends|extends
name|AbstractComponent
implements|implements
name|AwsEc2Service
implements|,
name|Closeable
block|{
DECL|field|EC2_METADATA_URL
specifier|public
specifier|static
specifier|final
name|String
name|EC2_METADATA_URL
init|=
literal|"http://169.254.169.254/latest/meta-data/"
decl_stmt|;
DECL|field|client
specifier|private
name|AmazonEC2Client
name|client
decl_stmt|;
DECL|method|AwsEc2ServiceImpl
name|AwsEc2ServiceImpl
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|client
specifier|public
specifier|synchronized
name|AmazonEC2
name|client
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
return|;
block|}
name|this
operator|.
name|client
operator|=
operator|new
name|AmazonEC2Client
argument_list|(
name|buildCredentials
argument_list|(
name|logger
argument_list|,
name|settings
argument_list|)
argument_list|,
name|buildConfiguration
argument_list|(
name|logger
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|endpoint
init|=
name|findEndpoint
argument_list|(
name|logger
argument_list|,
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|client
return|;
block|}
DECL|method|buildCredentials
specifier|protected
specifier|static
name|AWSCredentialsProvider
name|buildCredentials
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|AWSCredentialsProvider
name|credentials
decl_stmt|;
try|try
init|(
name|SecureString
name|key
init|=
name|ACCESS_KEY_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
init|;
name|SecureString
name|secret
operator|=
name|SECRET_KEY_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
init|)
block|{
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|secret
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Using either environment variables, system properties or instance profile credentials"
argument_list|)
expr_stmt|;
name|credentials
operator|=
operator|new
name|DefaultAWSCredentialsProviderChain
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Using basic key/secret credentials"
argument_list|)
expr_stmt|;
name|credentials
operator|=
operator|new
name|StaticCredentialsProvider
argument_list|(
operator|new
name|BasicAWSCredentials
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|secret
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|credentials
return|;
block|}
DECL|method|buildConfiguration
specifier|protected
specifier|static
name|ClientConfiguration
name|buildConfiguration
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|ClientConfiguration
name|clientConfiguration
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
comment|// the response metadata cache is only there for diagnostics purposes,
comment|// but can force objects from every response to the old generation.
name|clientConfiguration
operator|.
name|setResponseMetadataCacheSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|clientConfiguration
operator|.
name|setProtocol
argument_list|(
name|PROTOCOL_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PROXY_HOST_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|String
name|proxyHost
init|=
name|PROXY_HOST_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|Integer
name|proxyPort
init|=
name|PROXY_PORT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
decl_stmt|;
try|try
init|(
name|SecureString
name|proxyUsername
init|=
name|PROXY_USERNAME_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
init|;                  SecureString proxyPassword = PROXY_PASSWORD_SETTING.get(settings)
block|)
block|{
name|clientConfiguration
operator|.
name|withProxyHost
argument_list|(
name|proxyHost
argument_list|)
operator|.
name|withProxyPort
argument_list|(
name|proxyPort
argument_list|)
operator|.
name|withProxyUsername
argument_list|(
name|proxyUsername
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withProxyPassword
argument_list|(
name|proxyPassword
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Increase the number of retries in case of 5xx API responses
specifier|final
name|Random
name|rand
init|=
name|Randomness
operator|.
name|get
argument_list|()
decl_stmt|;
name|RetryPolicy
name|retryPolicy
init|=
operator|new
name|RetryPolicy
argument_list|(
name|RetryPolicy
operator|.
name|RetryCondition
operator|.
name|NO_RETRY_CONDITION
argument_list|,
operator|new
name|RetryPolicy
operator|.
name|BackoffStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|delayBeforeNextRetry
parameter_list|(
name|AmazonWebServiceRequest
name|originalRequest
parameter_list|,
name|AmazonClientException
name|exception
parameter_list|,
name|int
name|retriesAttempted
parameter_list|)
block|{
comment|// with 10 retries the max delay time is 320s/320000ms (10 * 2^5 * 1 * 1000)
name|logger
operator|.
name|warn
argument_list|(
literal|"EC2 API request failed, retry again. Reason was:"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return
literal|1000L
operator|*
call|(
name|long
call|)
argument_list|(
literal|10d
operator|*
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|retriesAttempted
operator|/
literal|2.0d
argument_list|)
operator|*
operator|(
literal|1.0d
operator|+
name|rand
operator|.
name|nextDouble
argument_list|()
operator|)
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|clientConfiguration
operator|.
name|setRetryPolicy
parameter_list|(
name|retryPolicy
parameter_list|)
constructor_decl|;
name|clientConfiguration
operator|.
name|setSocketTimeout
argument_list|(
operator|(
name|int
operator|)
name|READ_TIMEOUT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clientConfiguration
return|;
block|}
end_class

begin_function
DECL|method|findEndpoint
specifier|protected
specifier|static
name|String
name|findEndpoint
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|endpoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ENDPOINT_SETTING
operator|.
name|exists
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|endpoint
operator|=
name|ENDPOINT_SETTING
operator|.
name|get
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using explicit ec2 endpoint [{}]"
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Ensure that IdleConnectionReaper is shutdown
name|IdleConnectionReaper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

