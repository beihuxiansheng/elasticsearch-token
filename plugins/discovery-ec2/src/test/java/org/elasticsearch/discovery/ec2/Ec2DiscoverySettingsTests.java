begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.ec2
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|ec2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|isEmptyString
import|;
end_import

begin_class
DECL|class|Ec2DiscoverySettingsTests
specifier|public
class|class
name|Ec2DiscoverySettingsTests
extends|extends
name|ESTestCase
block|{
DECL|field|AWS
specifier|private
specifier|static
specifier|final
name|Settings
name|AWS
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|KEY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"global-key"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|SECRET_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"global-secret"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|PROTOCOL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"https"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|PROXY_HOST_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"global-proxy-host"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|PROXY_PORT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|10000
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|PROXY_USERNAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"global-proxy-username"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|PROXY_PASSWORD_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"global-proxy-password"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|SIGNER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"global-signer"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|REGION_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"global-region"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|EC2
specifier|private
specifier|static
specifier|final
name|Settings
name|EC2
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|KEY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-key"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SECRET_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-secret"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROTOCOL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"http"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_HOST_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-proxy-host"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PORT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|20000
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_USERNAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-proxy-username"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PASSWORD_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-proxy-password"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SIGNER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-signer"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|REGION_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-region"
argument_list|)
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|ENDPOINT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"ec2-endpoint"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/**      * We test when only cloud.aws settings are set      */
DECL|method|testRepositorySettingsGlobalOnly
specifier|public
name|void
name|testRepositorySettingsGlobalOnly
parameter_list|()
block|{
name|Settings
name|nodeSettings
init|=
name|buildSettings
argument_list|(
name|AWS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|KEY_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"global-key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SECRET_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"global-secret"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROTOCOL_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_HOST_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"global-proxy-host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PORT_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_USERNAME_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"global-proxy-username"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PASSWORD_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"global-proxy-password"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SIGNER_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"global-signer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|REGION_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"global-region"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|ENDPOINT_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|isEmptyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * We test when cloud.aws settings are overloaded by cloud.aws.ec2 settings      */
DECL|method|testRepositorySettingsGlobalOverloadedByEC2
specifier|public
name|void
name|testRepositorySettingsGlobalOverloadedByEC2
parameter_list|()
block|{
name|Settings
name|nodeSettings
init|=
name|buildSettings
argument_list|(
name|AWS
argument_list|,
name|EC2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|KEY_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SECRET_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-secret"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROTOCOL_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_HOST_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-proxy-host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PORT_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_USERNAME_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-proxy-username"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|PROXY_PASSWORD_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-proxy-password"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|SIGNER_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-signer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|REGION_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-region"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|AwsEc2Service
operator|.
name|CLOUD_EC2
operator|.
name|ENDPOINT_SETTING
operator|.
name|get
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ec2-endpoint"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buildSettings
specifier|private
name|Settings
name|buildSettings
parameter_list|(
name|Settings
modifier|...
name|global
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Settings
name|settings
range|:
name|global
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

