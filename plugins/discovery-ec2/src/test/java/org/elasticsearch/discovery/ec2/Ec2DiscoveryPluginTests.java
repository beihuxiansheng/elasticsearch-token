begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.ec2
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|ec2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|ec2
operator|.
name|AwsEc2Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|ec2
operator|.
name|Ec2DiscoveryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|Ec2DiscoveryPluginTests
specifier|public
class|class
name|Ec2DiscoveryPluginTests
extends|extends
name|ESTestCase
block|{
DECL|method|getNodeAttributes
specifier|private
name|Settings
name|getNodeAttributes
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|Settings
name|realSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|AUTO_ATTRIBUTE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|Ec2DiscoveryPlugin
operator|.
name|getAvailabilityZoneNodeAttributes
argument_list|(
name|realSettings
argument_list|,
name|url
argument_list|)
return|;
block|}
DECL|method|assertNodeAttributes
specifier|private
name|void
name|assertNodeAttributes
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|Settings
name|additional
init|=
name|getNodeAttributes
argument_list|(
name|settings
argument_list|,
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|additional
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|additional
operator|.
name|get
argument_list|(
name|Node
operator|.
name|NODE_ATTRIBUTES
operator|.
name|getKey
argument_list|()
operator|+
literal|"aws_availability_zone"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNodeAttributesDisabled
specifier|public
name|void
name|testNodeAttributesDisabled
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|AwsEc2Service
operator|.
name|AUTO_ATTRIBUTE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNodeAttributes
argument_list|(
name|settings
argument_list|,
literal|"bogus"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeAttributes
specifier|public
name|void
name|testNodeAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|zoneUrl
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|zoneUrl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"us-east-1c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNodeAttributes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|zoneUrl
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"us-east-1c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeAttributesBogusUrl
specifier|public
name|void
name|testNodeAttributesBogusUrl
parameter_list|()
block|{
name|UncheckedIOException
name|e
init|=
name|expectThrows
argument_list|(
name|UncheckedIOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getNodeAttributes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
literal|"no protocol: bogus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeAttributesEmpty
specifier|public
name|void
name|testNodeAttributesEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|zoneUrl
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getNodeAttributes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|zoneUrl
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"no ec2 metadata returned"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeAttributesErrorLenient
specifier|public
name|void
name|testNodeAttributesErrorLenient
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dne
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"dne"
argument_list|)
decl_stmt|;
name|assertNodeAttributes
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|dne
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

