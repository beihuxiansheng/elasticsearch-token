begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.wares
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|wares
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|support
operator|.
name|RestUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_comment
comment|/**  * A servlet that can be used to dispatch requests to elasticsearch. A {@link Node} will be started, reading  * config from either<tt>/WEB-INF/elasticsearch.json</tt> or<tt>/WEB-INF/elasticsearch.yml</tt> but, by defualt,  * with its internal HTTP interface disabled.  *  *<p>The node is registered as a servlet context attribute under<tt>elasticsearchNode</tt> so its easily  * accessible from other web resources if needed.  *  *<p>The servlet can be registered under a prefix URI, and it will automatically adjust to handle it.  */
end_comment

begin_class
DECL|class|NodeServlet
specifier|public
class|class
name|NodeServlet
extends|extends
name|HttpServlet
block|{
DECL|field|NODE_KEY
specifier|public
specifier|static
name|String
name|NODE_KEY
init|=
literal|"elasticsearchNode"
decl_stmt|;
DECL|field|node
specifier|private
name|Node
name|node
decl_stmt|;
DECL|field|restController
specifier|private
name|RestController
name|restController
decl_stmt|;
DECL|method|init
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|getServletContext
argument_list|()
operator|.
name|log
argument_list|(
literal|"Initializing elasticsearch Node '"
operator|+
name|getServletName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
decl_stmt|;
name|InputStream
name|resourceAsStream
init|=
name|getServletContext
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/WEB-INF/elasticsearch.json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceAsStream
operator|!=
literal|null
condition|)
block|{
name|settings
operator|.
name|loadFromStream
argument_list|(
literal|"/WEB-INF/elasticsearch.json"
argument_list|,
name|resourceAsStream
argument_list|)
expr_stmt|;
try|try
block|{
name|resourceAsStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|resourceAsStream
operator|=
name|getServletContext
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/WEB-INF/elasticsearch.yml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceAsStream
operator|!=
literal|null
condition|)
block|{
name|settings
operator|.
name|loadFromStream
argument_list|(
literal|"/WEB-INF/elasticsearch.yml"
argument_list|,
name|resourceAsStream
argument_list|)
expr_stmt|;
try|try
block|{
name|resourceAsStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|settings
operator|.
name|get
argument_list|(
literal|"http.enabled"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|settings
operator|.
name|put
argument_list|(
literal|"http.enabled"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|NodeBuilder
operator|.
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|node
argument_list|()
expr_stmt|;
name|restController
operator|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|RestController
operator|.
name|class
argument_list|)
expr_stmt|;
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|NODE_KEY
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|destroy
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|getServletContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|NODE_KEY
argument_list|)
expr_stmt|;
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|service
annotation|@
name|Override
specifier|protected
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|ServletRestRequest
name|request
init|=
operator|new
name|ServletRestRequest
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|ServletRestChannel
name|channel
init|=
operator|new
name|ServletRestChannel
argument_list|(
name|request
argument_list|,
name|resp
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|restController
operator|.
name|dispatchRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No mapping found for ["
operator|+
name|request
operator|.
name|uri
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|channel
operator|.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to dispatch request"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|channel
operator|.
name|sendFailure
operator|!=
literal|null
condition|)
block|{
throw|throw
name|channel
operator|.
name|sendFailure
throw|;
block|}
block|}
DECL|class|ServletRestChannel
specifier|static
class|class
name|ServletRestChannel
implements|implements
name|RestChannel
block|{
DECL|field|restRequest
specifier|final
name|RestRequest
name|restRequest
decl_stmt|;
DECL|field|resp
specifier|final
name|HttpServletResponse
name|resp
decl_stmt|;
DECL|field|latch
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|sendFailure
name|IOException
name|sendFailure
decl_stmt|;
DECL|method|ServletRestChannel
name|ServletRestChannel
parameter_list|(
name|RestRequest
name|restRequest
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
block|{
name|this
operator|.
name|restRequest
operator|=
name|restRequest
expr_stmt|;
name|this
operator|.
name|resp
operator|=
name|resp
expr_stmt|;
name|this
operator|.
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|sendResponse
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{
name|resp
operator|.
name|setContentType
argument_list|(
name|response
operator|.
name|contentType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|RestUtils
operator|.
name|isBrowser
argument_list|(
name|restRequest
operator|.
name|header
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
condition|)
block|{
name|resp
operator|.
name|addHeader
argument_list|(
literal|"Access-Control-Allow-Origin"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
if|if
condition|(
name|restRequest
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|OPTIONS
condition|)
block|{
comment|// also add more access control parameters
name|resp
operator|.
name|addHeader
argument_list|(
literal|"Access-Control-Max-Age"
argument_list|,
literal|"1728000"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|addHeader
argument_list|(
literal|"Access-Control-Allow-Methods"
argument_list|,
literal|"PUT, DELETE"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|addHeader
argument_list|(
literal|"Access-Control-Allow-Headers"
argument_list|,
literal|"X-Requested-With"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|opaque
init|=
name|restRequest
operator|.
name|header
argument_list|(
literal|"X-Opaque-Id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|opaque
operator|!=
literal|null
condition|)
block|{
name|resp
operator|.
name|addHeader
argument_list|(
literal|"X-Opaque-Id"
argument_list|,
name|opaque
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|contentLength
init|=
name|response
operator|.
name|contentLength
argument_list|()
operator|+
name|response
operator|.
name|prefixContentLength
argument_list|()
operator|+
name|response
operator|.
name|suffixContentLength
argument_list|()
decl_stmt|;
name|resp
operator|.
name|setContentLength
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
name|ServletOutputStream
name|out
init|=
name|resp
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|prefixContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|response
operator|.
name|prefixContent
argument_list|()
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|prefixContentLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|contentLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|suffixContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|response
operator|.
name|suffixContent
argument_list|()
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|suffixContentLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sendFailure
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

