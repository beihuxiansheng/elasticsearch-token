begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.memcached.netty
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|memcached
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|memcached
operator|.
name|MemcachedRestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|memcached
operator|.
name|MemcachedTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|util
operator|.
name|Unicode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|MemcachedRestChannel
specifier|public
class|class
name|MemcachedRestChannel
implements|implements
name|RestChannel
block|{
DECL|field|CRLF
specifier|public
specifier|static
specifier|final
name|ChannelBuffer
name|CRLF
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|VALUE
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|VALUE
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"VALUE "
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|EXISTS
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|EXISTS
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"EXISTS\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|NOT_FOUND
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|NOT_FOUND
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"NOT_FOUND\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|NOT_STORED
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|NOT_STORED
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"NOT_STORED\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|STORED
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|STORED
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"STORED\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|DELETED
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|DELETED
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"DELETED\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|END
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|END
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"END\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|OK
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|OK
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"OK\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ERROR
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|ERROR
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"ERROR\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|CLIENT_ERROR
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|CLIENT_ERROR
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"CLIENT_ERROR\r\n"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|Channel
name|channel
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|MemcachedRestRequest
name|request
decl_stmt|;
DECL|method|MemcachedRestChannel
specifier|public
name|MemcachedRestChannel
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|MemcachedRestRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|sendResponse
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|isBinary
argument_list|()
condition|)
block|{
try|try
block|{
name|ChannelBuffer
name|writeBuffer
init|=
name|ChannelBuffers
operator|.
name|dynamicBuffer
argument_list|(
literal|24
operator|+
name|request
operator|.
name|getUriBytes
argument_list|()
operator|.
name|length
operator|+
name|response
operator|.
name|contentLength
argument_list|()
operator|+
literal|12
argument_list|)
decl_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x81
argument_list|)
expr_stmt|;
comment|// magic
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|GET
condition|)
block|{
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x00
argument_list|)
expr_stmt|;
comment|// opcode
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|POST
condition|)
block|{
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x01
argument_list|)
expr_stmt|;
comment|// opcode
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|DELETE
condition|)
block|{
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x04
argument_list|)
expr_stmt|;
comment|// opcode
block|}
name|short
name|keyLength
init|=
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|GET
condition|?
operator|(
name|short
operator|)
name|request
operator|.
name|getUriBytes
argument_list|()
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|writeBuffer
operator|.
name|writeShort
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
name|int
name|extrasLength
init|=
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|GET
condition|?
literal|4
else|:
literal|0
decl_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|extrasLength
argument_list|)
expr_stmt|;
comment|// extra length = flags + expiry
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// data type unused
if|if
condition|(
name|response
operator|.
name|status
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|>=
literal|500
condition|)
block|{
comment|// TODO should we use this?
name|writeBuffer
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
literal|0x0A
argument_list|)
expr_stmt|;
comment|// status code
block|}
else|else
block|{
name|writeBuffer
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
literal|0x0000
argument_list|)
expr_stmt|;
comment|// OK
block|}
name|int
name|dataLength
init|=
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|GET
condition|?
name|response
operator|.
name|contentLength
argument_list|()
else|:
literal|0
decl_stmt|;
name|writeBuffer
operator|.
name|writeInt
argument_list|(
name|dataLength
operator|+
name|keyLength
operator|+
name|extrasLength
argument_list|)
expr_stmt|;
comment|// data length
name|writeBuffer
operator|.
name|writeInt
argument_list|(
name|request
operator|.
name|getOpaque
argument_list|()
argument_list|)
expr_stmt|;
comment|// opaque
name|writeBuffer
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// cas
if|if
condition|(
name|extrasLength
operator|>
literal|0
condition|)
block|{
name|writeBuffer
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyLength
operator|>
literal|0
condition|)
block|{
name|writeBuffer
operator|.
name|writeBytes
argument_list|(
name|request
operator|.
name|getUriBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataLength
operator|>
literal|0
condition|)
block|{
name|writeBuffer
operator|.
name|writeBytes
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|contentLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|write
argument_list|(
name|writeBuffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MemcachedTransportException
argument_list|(
literal|"Failed to write response"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|response
operator|.
name|status
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|>=
literal|500
condition|)
block|{
name|channel
operator|.
name|write
argument_list|(
name|ERROR
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|POST
condition|)
block|{
comment|// TODO this is SET, can we send a payload?
name|channel
operator|.
name|write
argument_list|(
name|STORED
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|==
name|RestRequest
operator|.
name|Method
operator|.
name|DELETE
condition|)
block|{
name|channel
operator|.
name|write
argument_list|(
name|DELETED
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// GET
try|try
block|{
name|ChannelBuffer
name|writeBuffer
init|=
name|ChannelBuffers
operator|.
name|dynamicBuffer
argument_list|(
name|response
operator|.
name|contentLength
argument_list|()
operator|+
literal|512
argument_list|)
decl_stmt|;
name|writeBuffer
operator|.
name|writeBytes
argument_list|(
name|VALUE
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeBytes
argument_list|(
name|Unicode
operator|.
name|fromStringAsBytes
argument_list|(
name|request
operator|.
name|uri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|'0'
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeBytes
argument_list|(
name|Bytes
operator|.
name|itoa
argument_list|(
name|response
operator|.
name|contentLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|'\r'
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|'\n'
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeBytes
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|contentLength
argument_list|()
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|'\r'
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|'\n'
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|writeBytes
argument_list|(
name|END
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|writeBuffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MemcachedTransportException
argument_list|(
literal|"Failed to write 'get' response"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

