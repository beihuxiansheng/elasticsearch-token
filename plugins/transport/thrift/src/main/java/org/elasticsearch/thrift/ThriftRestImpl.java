begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.thrift
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|ThriftRestImpl
specifier|public
class|class
name|ThriftRestImpl
extends|extends
name|AbstractComponent
implements|implements
name|Rest
operator|.
name|Iface
block|{
DECL|field|restController
specifier|private
specifier|final
name|RestController
name|restController
decl_stmt|;
DECL|method|ThriftRestImpl
annotation|@
name|Inject
specifier|public
name|ThriftRestImpl
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|restController
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|restController
operator|=
name|restController
expr_stmt|;
block|}
DECL|method|execute
annotation|@
name|Override
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|RestResponse
name|execute
parameter_list|(
name|RestRequest
name|request
parameter_list|)
throws|throws
name|TException
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"thrift message {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|RestResponse
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|RestResponse
argument_list|>
argument_list|()
decl_stmt|;
name|restController
operator|.
name|dispatchRequest
argument_list|(
operator|new
name|ThriftRestRequest
argument_list|(
name|request
argument_list|)
argument_list|,
operator|new
name|RestChannel
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|sendResponse
parameter_list|(
name|RestResponse
name|response
parameter_list|)
block|{
name|ref
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|convert
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
literal|"failed to generate response"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|convert
specifier|private
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|RestResponse
name|convert
parameter_list|(
name|RestResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|RestResponse
name|tResponse
init|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|RestResponse
argument_list|(
name|getStatus
argument_list|(
name|response
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|contentLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tResponse
operator|.
name|setBody
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|response
operator|.
name|content
argument_list|()
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|contentLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tResponse
return|;
block|}
DECL|method|getStatus
specifier|private
name|Status
name|getStatus
parameter_list|(
name|RestResponse
operator|.
name|Status
name|status
parameter_list|)
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|CONTINUE
case|:
return|return
name|Status
operator|.
name|CONTINUE
return|;
case|case
name|SWITCHING_PROTOCOLS
case|:
return|return
name|Status
operator|.
name|SWITCHING_PROTOCOLS
return|;
case|case
name|OK
case|:
return|return
name|Status
operator|.
name|OK
return|;
case|case
name|CREATED
case|:
return|return
name|Status
operator|.
name|CREATED
return|;
case|case
name|ACCEPTED
case|:
return|return
name|Status
operator|.
name|ACCEPTED
return|;
case|case
name|NON_AUTHORITATIVE_INFORMATION
case|:
return|return
name|Status
operator|.
name|NON_AUTHORITATIVE_INFORMATION
return|;
case|case
name|NO_CONTENT
case|:
return|return
name|Status
operator|.
name|NO_CONTENT
return|;
case|case
name|RESET_CONTENT
case|:
return|return
name|Status
operator|.
name|RESET_CONTENT
return|;
case|case
name|PARTIAL_CONTENT
case|:
return|return
name|Status
operator|.
name|PARTIAL_CONTENT
return|;
case|case
name|MULTI_STATUS
case|:
comment|// no status for this??
return|return
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
return|;
case|case
name|MULTIPLE_CHOICES
case|:
return|return
name|Status
operator|.
name|MULTIPLE_CHOICES
return|;
case|case
name|MOVED_PERMANENTLY
case|:
return|return
name|Status
operator|.
name|MOVED_PERMANENTLY
return|;
case|case
name|FOUND
case|:
return|return
name|Status
operator|.
name|FOUND
return|;
case|case
name|SEE_OTHER
case|:
return|return
name|Status
operator|.
name|SEE_OTHER
return|;
case|case
name|NOT_MODIFIED
case|:
return|return
name|Status
operator|.
name|NOT_MODIFIED
return|;
case|case
name|USE_PROXY
case|:
return|return
name|Status
operator|.
name|USE_PROXY
return|;
case|case
name|TEMPORARY_REDIRECT
case|:
return|return
name|Status
operator|.
name|TEMPORARY_REDIRECT
return|;
case|case
name|BAD_REQUEST
case|:
return|return
name|Status
operator|.
name|BAD_REQUEST
return|;
case|case
name|UNAUTHORIZED
case|:
return|return
name|Status
operator|.
name|UNAUTHORIZED
return|;
case|case
name|PAYMENT_REQUIRED
case|:
return|return
name|Status
operator|.
name|PAYMENT_REQUIRED
return|;
case|case
name|FORBIDDEN
case|:
return|return
name|Status
operator|.
name|FORBIDDEN
return|;
case|case
name|NOT_FOUND
case|:
return|return
name|Status
operator|.
name|NOT_FOUND
return|;
case|case
name|METHOD_NOT_ALLOWED
case|:
return|return
name|Status
operator|.
name|METHOD_NOT_ALLOWED
return|;
case|case
name|NOT_ACCEPTABLE
case|:
return|return
name|Status
operator|.
name|NOT_ACCEPTABLE
return|;
case|case
name|PROXY_AUTHENTICATION
case|:
return|return
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
return|;
case|case
name|REQUEST_TIMEOUT
case|:
return|return
name|Status
operator|.
name|REQUEST_TIMEOUT
return|;
case|case
name|CONFLICT
case|:
return|return
name|Status
operator|.
name|CONFLICT
return|;
case|case
name|GONE
case|:
return|return
name|Status
operator|.
name|GONE
return|;
case|case
name|LENGTH_REQUIRED
case|:
return|return
name|Status
operator|.
name|LENGTH_REQUIRED
return|;
case|case
name|PRECONDITION_FAILED
case|:
return|return
name|Status
operator|.
name|PRECONDITION_FAILED
return|;
case|case
name|REQUEST_ENTITY_TOO_LARGE
case|:
return|return
name|Status
operator|.
name|REQUEST_ENTITY_TOO_LARGE
return|;
case|case
name|REQUEST_URI_TOO_LONG
case|:
return|return
name|Status
operator|.
name|REQUEST_URI_TOO_LONG
return|;
case|case
name|UNSUPPORTED_MEDIA_TYPE
case|:
return|return
name|Status
operator|.
name|UNSUPPORTED_MEDIA_TYPE
return|;
case|case
name|REQUESTED_RANGE_NOT_SATISFIED
case|:
return|return
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
return|;
case|case
name|EXPECTATION_FAILED
case|:
return|return
name|Status
operator|.
name|EXPECTATION_FAILED
return|;
case|case
name|UNPROCESSABLE_ENTITY
case|:
return|return
name|Status
operator|.
name|BAD_REQUEST
return|;
case|case
name|LOCKED
case|:
return|return
name|Status
operator|.
name|BAD_REQUEST
return|;
case|case
name|FAILED_DEPENDENCY
case|:
return|return
name|Status
operator|.
name|BAD_REQUEST
return|;
case|case
name|INTERNAL_SERVER_ERROR
case|:
return|return
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
return|;
case|case
name|NOT_IMPLEMENTED
case|:
return|return
name|Status
operator|.
name|NOT_IMPLEMENTED
return|;
case|case
name|BAD_GATEWAY
case|:
return|return
name|Status
operator|.
name|BAD_GATEWAY
return|;
case|case
name|SERVICE_UNAVAILABLE
case|:
return|return
name|Status
operator|.
name|SERVICE_UNAVAILABLE
return|;
case|case
name|GATEWAY_TIMEOUT
case|:
return|return
name|Status
operator|.
name|GATEWAY_TIMEOUT
return|;
case|case
name|HTTP_VERSION_NOT_SUPPORTED
case|:
return|return
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
return|;
default|default:
return|return
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
return|;
block|}
block|}
block|}
end_class

end_unit

