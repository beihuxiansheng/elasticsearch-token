begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
DECL|package|org.elasticsearch.thrift
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|RestResponse
specifier|public
class|class
name|RestResponse
implements|implements
name|TBase
argument_list|<
name|RestResponse
argument_list|,
name|RestResponse
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"RestResponse"
argument_list|)
decl_stmt|;
DECL|field|STATUS_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|TField
name|STATUS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"status"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|HEADERS_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|TField
name|HEADERS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"headers"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
DECL|field|BODY_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|TField
name|BODY_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"body"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|/**      * @see org.elasticsearch.thrift.Status      */
DECL|field|status
specifier|public
name|Status
name|status
decl_stmt|;
DECL|field|headers
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
decl_stmt|;
DECL|field|body
specifier|public
name|ByteBuffer
name|body
decl_stmt|;
comment|/**      * The set of fields this struct contains, along with convenience methods for finding and manipulating them.      */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
comment|/**          * @see org.elasticsearch.thrift.Status          */
DECL|enum constant|STATUS
name|STATUS
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"status"
argument_list|)
block|,
DECL|enum constant|HEADERS
name|HEADERS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"headers"
argument_list|)
block|,
DECL|enum constant|BODY
name|BODY
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"body"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Find the _Fields constant that matches fieldId, or null if its not found.          */
DECL|method|findByThriftId
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// STATUS
return|return
name|STATUS
return|;
case|case
literal|2
case|:
comment|// HEADERS
return|return
name|HEADERS
return|;
case|case
literal|3
case|:
comment|// BODY
return|return
name|BODY
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**          * Find the _Fields constant that matches fieldId, throwing an exception          * if it is not found.          */
DECL|method|findByThriftIdOrThrow
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**          * Find the _Fields constant that matches name, or null if its not found.          */
DECL|method|findByName
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STATUS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"status"
argument_list|,
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|EnumMetaData
argument_list|(
name|TType
operator|.
name|ENUM
argument_list|,
name|Status
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|HEADERS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"headers"
argument_list|,
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BODY
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"body"
argument_list|,
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|RestResponse
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|RestResponse
specifier|public
name|RestResponse
parameter_list|()
block|{     }
DECL|method|RestResponse
specifier|public
name|RestResponse
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
DECL|method|RestResponse
specifier|public
name|RestResponse
parameter_list|(
name|RestResponse
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetStatus
argument_list|()
condition|)
block|{
name|this
operator|.
name|status
operator|=
name|other
operator|.
name|status
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetHeaders
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__headers_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__headers_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__headers
operator|.
name|put
argument_list|(
name|__this__headers_copy_key
argument_list|,
name|__this__headers_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|headers
operator|=
name|__this__headers
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetBody
argument_list|()
condition|)
block|{
name|this
operator|.
name|body
operator|=
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|body
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
DECL|method|deepCopy
specifier|public
name|RestResponse
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|RestResponse
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|status
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|headers
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|body
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * @see org.elasticsearch.thrift.Status      */
DECL|method|getStatus
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
return|;
block|}
comment|/**      * @see org.elasticsearch.thrift.Status      */
DECL|method|setStatus
specifier|public
name|RestResponse
name|setStatus
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetStatus
specifier|public
name|void
name|unsetStatus
parameter_list|()
block|{
name|this
operator|.
name|status
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns true if field status is set (has been asigned a value) and false otherwise      */
DECL|method|isSetStatus
specifier|public
name|boolean
name|isSetStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|status
operator|!=
literal|null
return|;
block|}
DECL|method|setStatusIsSet
specifier|public
name|void
name|setStatusIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|status
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getHeadersSize
specifier|public
name|int
name|getHeadersSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|headers
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|headers
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|putToHeaders
specifier|public
name|void
name|putToHeaders
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|headers
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|headers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeaders
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|this
operator|.
name|headers
return|;
block|}
DECL|method|setHeaders
specifier|public
name|RestResponse
name|setHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetHeaders
specifier|public
name|void
name|unsetHeaders
parameter_list|()
block|{
name|this
operator|.
name|headers
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns true if field headers is set (has been asigned a value) and false otherwise      */
DECL|method|isSetHeaders
specifier|public
name|boolean
name|isSetHeaders
parameter_list|()
block|{
return|return
name|this
operator|.
name|headers
operator|!=
literal|null
return|;
block|}
DECL|method|setHeadersIsSet
specifier|public
name|void
name|setHeadersIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|headers
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getBody
specifier|public
name|byte
index|[]
name|getBody
parameter_list|()
block|{
name|setBody
argument_list|(
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|body
operator|.
name|array
argument_list|()
return|;
block|}
DECL|method|BufferForBody
specifier|public
name|ByteBuffer
name|BufferForBody
parameter_list|()
block|{
return|return
name|body
return|;
block|}
DECL|method|setBody
specifier|public
name|RestResponse
name|setBody
parameter_list|(
name|byte
index|[]
name|body
parameter_list|)
block|{
name|setBody
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBody
specifier|public
name|RestResponse
name|setBody
parameter_list|(
name|ByteBuffer
name|body
parameter_list|)
block|{
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetBody
specifier|public
name|void
name|unsetBody
parameter_list|()
block|{
name|this
operator|.
name|body
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns true if field body is set (has been asigned a value) and false otherwise      */
DECL|method|isSetBody
specifier|public
name|boolean
name|isSetBody
parameter_list|()
block|{
return|return
name|this
operator|.
name|body
operator|!=
literal|null
return|;
block|}
DECL|method|setBodyIsSet
specifier|public
name|void
name|setBodyIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|body
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|STATUS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStatus
argument_list|(
operator|(
name|Status
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HEADERS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetHeaders
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setHeaders
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BODY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBody
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBody
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|getFieldValue
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|STATUS
case|:
return|return
name|getStatus
argument_list|()
return|;
case|case
name|HEADERS
case|:
return|return
name|getHeaders
argument_list|()
return|;
case|case
name|BODY
case|:
return|return
name|getBody
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/**      * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise      */
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|STATUS
case|:
return|return
name|isSetStatus
argument_list|()
return|;
case|case
name|HEADERS
case|:
return|return
name|isSetHeaders
argument_list|()
return|;
case|case
name|BODY
case|:
return|return
name|isSetBody
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|RestResponse
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|RestResponse
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|RestResponse
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_status
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStatus
argument_list|()
decl_stmt|;
name|boolean
name|that_present_status
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_status
operator|||
name|that_present_status
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_status
operator|&&
name|that_present_status
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|status
operator|.
name|equals
argument_list|(
name|that
operator|.
name|status
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_headers
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetHeaders
argument_list|()
decl_stmt|;
name|boolean
name|that_present_headers
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_headers
operator|||
name|that_present_headers
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_headers
operator|&&
name|that_present_headers
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|headers
operator|.
name|equals
argument_list|(
name|that
operator|.
name|headers
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_body
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBody
argument_list|()
decl_stmt|;
name|boolean
name|that_present_body
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_body
operator|||
name|that_present_body
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_body
operator|&&
name|that_present_body
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|body
operator|.
name|equals
argument_list|(
name|that
operator|.
name|body
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|RestResponse
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|RestResponse
name|typedOther
init|=
operator|(
name|RestResponse
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStatus
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStatus
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|status
argument_list|,
name|typedOther
operator|.
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetHeaders
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetHeaders
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetHeaders
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|headers
argument_list|,
name|typedOther
operator|.
name|headers
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBody
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetBody
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBody
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|body
argument_list|,
name|typedOther
operator|.
name|body
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|fieldForId
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
DECL|method|read
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// STATUS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|status
operator|=
name|Status
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// HEADERS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map10
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|headers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map10
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i11
init|=
literal|0
init|;
name|_i11
operator|<
name|_map10
operator|.
name|size
condition|;
operator|++
name|_i11
control|)
block|{
name|String
name|_key12
decl_stmt|;
name|String
name|_val13
decl_stmt|;
name|_key12
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val13
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|headers
operator|.
name|put
argument_list|(
name|_key12
argument_list|,
name|_val13
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// BODY
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|body
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STATUS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|status
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|headers
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSetHeaders
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|HEADERS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|headers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter14
range|:
name|this
operator|.
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter14
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter14
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|body
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSetBody
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BODY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|body
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RestResponse("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"status:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|status
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetHeaders
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"headers:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|headers
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|headers
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetBody
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"body:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|body
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|body
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TProtocolException
argument_list|(
literal|"Required field 'status' was not present! Struct: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

