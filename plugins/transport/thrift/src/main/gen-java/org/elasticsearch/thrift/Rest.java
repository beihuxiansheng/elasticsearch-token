begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
DECL|package|org.elasticsearch.thrift
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|Rest
specifier|public
class|class
name|Rest
block|{
DECL|interface|Iface
specifier|public
interface|interface
name|Iface
block|{
DECL|method|execute
specifier|public
name|RestResponse
name|execute
parameter_list|(
name|RestRequest
name|request
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
DECL|interface|AsyncIface
specifier|public
interface|interface
name|AsyncIface
block|{
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|execute_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
DECL|class|Client
specifier|public
specifier|static
class|class
name|Client
implements|implements
name|TServiceClient
implements|,
name|Iface
block|{
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TServiceClientFactory
argument_list|<
name|Client
argument_list|>
block|{
DECL|method|Factory
specifier|public
name|Factory
parameter_list|()
block|{             }
DECL|method|getClient
specifier|public
name|Client
name|getClient
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
return|;
block|}
DECL|method|getClient
specifier|public
name|Client
name|getClient
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
return|;
block|}
block|}
DECL|method|Client
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
name|this
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
DECL|method|Client
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
name|iprot_
operator|=
name|iprot
expr_stmt|;
name|oprot_
operator|=
name|oprot
expr_stmt|;
block|}
DECL|field|iprot_
specifier|protected
name|TProtocol
name|iprot_
decl_stmt|;
DECL|field|oprot_
specifier|protected
name|TProtocol
name|oprot_
decl_stmt|;
DECL|field|seqid_
specifier|protected
name|int
name|seqid_
decl_stmt|;
DECL|method|getInputProtocol
specifier|public
name|TProtocol
name|getInputProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|iprot_
return|;
block|}
DECL|method|getOutputProtocol
specifier|public
name|TProtocol
name|getOutputProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|oprot_
return|;
block|}
DECL|method|execute
specifier|public
name|RestResponse
name|execute
parameter_list|(
name|RestRequest
name|request
parameter_list|)
throws|throws
name|TException
block|{
name|send_execute
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|recv_execute
argument_list|()
return|;
block|}
DECL|method|send_execute
specifier|public
name|void
name|send_execute
parameter_list|(
name|RestRequest
name|request
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"execute"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|execute_args
name|args
init|=
operator|new
name|execute_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|recv_execute
specifier|public
name|RestResponse
name|recv_execute
parameter_list|()
throws|throws
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"execute failed: out of sequence response"
argument_list|)
throw|;
block|}
name|execute_result
name|result
init|=
operator|new
name|execute_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"execute failed: unknown result"
argument_list|)
throw|;
block|}
block|}
DECL|class|AsyncClient
specifier|public
specifier|static
class|class
name|AsyncClient
extends|extends
name|TAsyncClient
implements|implements
name|AsyncIface
block|{
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TAsyncClientFactory
argument_list|<
name|AsyncClient
argument_list|>
block|{
DECL|field|clientManager
specifier|private
name|TAsyncClientManager
name|clientManager
decl_stmt|;
DECL|field|protocolFactory
specifier|private
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
DECL|method|Factory
specifier|public
name|Factory
parameter_list|(
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|clientManager
expr_stmt|;
name|this
operator|.
name|protocolFactory
operator|=
name|protocolFactory
expr_stmt|;
block|}
DECL|method|getAsyncClient
specifier|public
name|AsyncClient
name|getAsyncClient
parameter_list|(
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
return|return
operator|new
name|AsyncClient
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
return|;
block|}
block|}
DECL|method|AsyncClient
specifier|public
name|AsyncClient
parameter_list|(
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
name|super
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|execute_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|execute_call
name|method_call
init|=
operator|new
name|execute_call
argument_list|(
name|request
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
DECL|class|execute_call
specifier|public
specifier|static
class|class
name|execute_call
extends|extends
name|TAsyncMethodCall
block|{
DECL|field|request
specifier|private
name|RestRequest
name|request
decl_stmt|;
DECL|method|execute_call
specifier|public
name|execute_call
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|execute_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|write_args
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"execute"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|execute_args
name|args
init|=
operator|new
name|execute_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult
specifier|public
name|RestResponse
name|getResult
parameter_list|()
throws|throws
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_execute
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|Processor
specifier|public
specifier|static
class|class
name|Processor
implements|implements
name|TProcessor
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Processor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|Processor
specifier|public
name|Processor
parameter_list|(
name|Iface
name|iface
parameter_list|)
block|{
name|iface_
operator|=
name|iface
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"execute"
argument_list|,
operator|new
name|execute
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|interface|ProcessFunction
specifier|protected
specifier|static
interface|interface
name|ProcessFunction
block|{
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
DECL|field|iface_
specifier|private
name|Iface
name|iface_
decl_stmt|;
DECL|field|processMap_
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessFunction
argument_list|>
name|processMap_
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessFunction
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|process
specifier|public
name|boolean
name|process
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
name|ProcessFunction
name|fn
init|=
name|processMap_
operator|.
name|get
argument_list|(
name|msg
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
argument_list|,
literal|"Invalid method name: '"
operator|+
name|msg
operator|.
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|class|execute
specifier|private
class|class
name|execute
implements|implements
name|ProcessFunction
block|{
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|execute_args
name|args
init|=
operator|new
name|execute_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"execute"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|execute_result
name|result
init|=
operator|new
name|execute_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|execute
argument_list|(
name|args
operator|.
name|request
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"execute"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|execute_args
specifier|public
specifier|static
class|class
name|execute_args
implements|implements
name|TBase
argument_list|<
name|execute_args
argument_list|,
name|execute_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"execute_args"
argument_list|)
decl_stmt|;
DECL|field|REQUEST_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|TField
name|REQUEST_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"request"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
DECL|field|request
specifier|public
name|RestRequest
name|request
decl_stmt|;
comment|/**          * The set of fields this struct contains, along with convenience methods for finding and manipulating them.          */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
DECL|enum constant|REQUEST
name|REQUEST
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"request"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**              * Find the _Fields constant that matches fieldId, or null if its not found.              */
DECL|method|findByThriftId
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// REQUEST
return|return
name|REQUEST
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**              * Find the _Fields constant that matches fieldId, throwing an exception              * if it is not found.              */
DECL|method|findByThriftIdOrThrow
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**              * Find the _Fields constant that matches name, or null if its not found.              */
DECL|method|findByName
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|REQUEST
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"request"
argument_list|,
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|RestRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|execute_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|execute_args
specifier|public
name|execute_args
parameter_list|()
block|{         }
DECL|method|execute_args
specifier|public
name|execute_args
parameter_list|(
name|RestRequest
name|request
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
comment|/**          * Performs a deep copy on<i>other</i>.          */
DECL|method|execute_args
specifier|public
name|execute_args
parameter_list|(
name|execute_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetRequest
argument_list|()
condition|)
block|{
name|this
operator|.
name|request
operator|=
operator|new
name|RestRequest
argument_list|(
name|other
operator|.
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deepCopy
specifier|public
name|execute_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|execute_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|clone
specifier|public
name|execute_args
name|clone
parameter_list|()
block|{
return|return
operator|new
name|execute_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|request
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getRequest
specifier|public
name|RestRequest
name|getRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
return|;
block|}
DECL|method|setRequest
specifier|public
name|execute_args
name|setRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetRequest
specifier|public
name|void
name|unsetRequest
parameter_list|()
block|{
name|this
operator|.
name|request
operator|=
literal|null
expr_stmt|;
block|}
comment|/**          * Returns true if field request is set (has been asigned a value) and false otherwise          */
DECL|method|isSetRequest
specifier|public
name|boolean
name|isSetRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
operator|!=
literal|null
return|;
block|}
DECL|method|setRequestIsSet
specifier|public
name|void
name|setRequestIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|request
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|REQUEST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRequest
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRequest
argument_list|(
operator|(
name|RestRequest
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|setFieldValue
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|setFieldValue
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldID
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getFieldValue
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|REQUEST
case|:
return|return
name|getRequest
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|getFieldValue
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|getFieldValue
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldId
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise          */
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|REQUEST
case|:
return|return
name|isSetRequest
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
return|return
name|isSet
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|execute_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|execute_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|execute_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_request
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRequest
argument_list|()
decl_stmt|;
name|boolean
name|that_present_request
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_request
operator|||
name|that_present_request
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_request
operator|&&
name|that_present_request
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|request
operator|.
name|equals
argument_list|(
name|that
operator|.
name|request
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|execute_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|execute_args
name|typedOther
init|=
operator|(
name|execute_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRequest
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRequest
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRequest
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|request
argument_list|,
name|typedOther
operator|.
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|read
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// REQUEST
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|request
operator|=
operator|new
name|RestRequest
argument_list|()
expr_stmt|;
name|this
operator|.
name|request
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|request
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|REQUEST_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|request
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"execute_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"request:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|request
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|request
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TProtocolException
argument_list|(
literal|"Required field 'request' was not present! Struct: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|execute_result
specifier|public
specifier|static
class|class
name|execute_result
implements|implements
name|TBase
argument_list|<
name|execute_result
argument_list|,
name|execute_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
DECL|field|STRUCT_DESC
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"execute_result"
argument_list|)
decl_stmt|;
DECL|field|SUCCESS_FIELD_DESC
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|field|success
specifier|public
name|RestResponse
name|success
decl_stmt|;
comment|/**          * The set of fields this struct contains, along with convenience methods for finding and manipulating them.          */
DECL|enum|_Fields
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
DECL|enum constant|SUCCESS
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|;
DECL|field|byName
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**              * Find the _Fields constant that matches fieldId, or null if its not found.              */
DECL|method|findByThriftId
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**              * Find the _Fields constant that matches fieldId, throwing an exception              * if it is not found.              */
DECL|method|findByThriftIdOrThrow
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**              * Find the _Fields constant that matches name, or null if its not found.              */
DECL|method|findByName
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|field|_thriftId
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
DECL|field|_fieldName
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
DECL|method|_Fields
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|getThriftFieldId
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
DECL|field|metaDataMap
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|RestResponse
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|execute_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
DECL|method|execute_result
specifier|public
name|execute_result
parameter_list|()
block|{         }
DECL|method|execute_result
specifier|public
name|execute_result
parameter_list|(
name|RestResponse
name|success
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
comment|/**          * Performs a deep copy on<i>other</i>.          */
DECL|method|execute_result
specifier|public
name|execute_result
parameter_list|(
name|execute_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|RestResponse
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deepCopy
specifier|public
name|execute_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|execute_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|clone
specifier|public
name|execute_result
name|clone
parameter_list|()
block|{
return|return
operator|new
name|execute_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getSuccess
specifier|public
name|RestResponse
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
DECL|method|setSuccess
specifier|public
name|execute_result
name|setSuccess
parameter_list|(
name|RestResponse
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unsetSuccess
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/**          * Returns true if field success is set (has been asigned a value) and false otherwise          */
DECL|method|isSetSuccess
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
DECL|method|setSuccessIsSet
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setFieldValue
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|RestResponse
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|setFieldValue
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|setFieldValue
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldID
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getFieldValue
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|getFieldValue
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|getFieldValue
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldId
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise          */
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
DECL|method|isSet
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
return|return
name|isSet
argument_list|(
name|_Fields
operator|.
name|findByThriftIdOrThrow
argument_list|(
name|fieldID
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|execute_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|execute_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|execute_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|execute_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|execute_result
name|typedOther
init|=
operator|(
name|execute_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|read
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|RestResponse
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"execute_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validate
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
block|}
end_class

end_unit

