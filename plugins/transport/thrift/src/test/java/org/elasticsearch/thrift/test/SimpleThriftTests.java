begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.thrift.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|Rest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|thrift
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|SimpleThriftTests
specifier|public
class|class
name|SimpleThriftTests
block|{
DECL|field|node
specifier|private
name|Node
name|node
decl_stmt|;
DECL|field|transport
specifier|private
name|TTransport
name|transport
decl_stmt|;
DECL|field|client
specifier|private
name|Rest
operator|.
name|Client
name|client
decl_stmt|;
DECL|method|setup
annotation|@
name|BeforeMethod
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|TTransportException
block|{
name|node
operator|=
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"gateway.type"
argument_list|,
literal|"none"
argument_list|)
argument_list|)
operator|.
name|node
argument_list|()
expr_stmt|;
name|transport
operator|=
operator|new
name|TSocket
argument_list|(
literal|"localhost"
argument_list|,
literal|9500
argument_list|)
expr_stmt|;
name|TProtocol
name|protocol
init|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|Rest
operator|.
name|Client
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
annotation|@
name|AfterMethod
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleApis
annotation|@
name|Test
specifier|public
name|void
name|testSimpleApis
parameter_list|()
throws|throws
name|Exception
block|{
name|RestRequest
name|request
init|=
operator|new
name|RestRequest
argument_list|(
name|Method
operator|.
name|POST
argument_list|,
literal|"/test/type1"
argument_list|)
decl_stmt|;
name|request
operator|.
name|setBody
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|copiedBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RestResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|parseBody
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Status
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"ok"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"_index"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"_type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type1"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|RestRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
literal|"/_cluster/health"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|execute
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parseBody
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseBody
parameter_list|(
name|RestResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
operator|.
name|createParser
argument_list|(
name|response
operator|.
name|bufferForBody
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|response
operator|.
name|bufferForBody
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|response
operator|.
name|bufferForBody
argument_list|()
operator|.
name|remaining
argument_list|()
argument_list|)
operator|.
name|map
argument_list|()
return|;
block|}
block|}
end_class

end_unit

