begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|analysis
operator|.
name|ukrainian
operator|.
name|AnalysisUkrainianPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|SimpleUkrainianAnalyzerTests
specifier|public
class|class
name|SimpleUkrainianAnalyzerTests
extends|extends
name|ESTestCase
block|{
DECL|method|testBasicUsage
specifier|public
name|void
name|testBasicUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|testAnalyzer
argument_list|(
literal|"ÑÐµÑÐ³Ñ"
argument_list|,
literal|"ÑÐµÑÐ³Ð°"
argument_list|)
expr_stmt|;
name|testAnalyzer
argument_list|(
literal|"ÑÑÑÐ°ÑÑÑÑÑ"
argument_list|,
literal|"ÑÑÑÐ°ÑÐ¸ÑÑ"
argument_list|)
expr_stmt|;
name|testAnalyzer
argument_list|(
literal|"ÐºÐ¾Ð»Ñ"
argument_list|,
literal|"ÐºÐ¾Ð»Ð°"
argument_list|,
literal|"ÐºÐ¾Ð»Ð¾"
argument_list|,
literal|"ÐºÑÐ»"
argument_list|)
expr_stmt|;
name|testAnalyzer
argument_list|(
literal|"Ð¦Ñ Ð¿'ÑÑÐ° Ñ ÑÐ²Ð¾Ñ ÑÐµÑÐ³Ñ ÑÑÑÐ°ÑÑÑÑÑ Ð¿Ð¾ ÐºÐ¾Ð»Ñ."
argument_list|,
literal|"Ð¿'ÑÑÐ°"
argument_list|,
literal|"ÑÐµÑÐ³Ð°"
argument_list|,
literal|"ÑÑÑÐ°ÑÐ¸ÑÑ"
argument_list|,
literal|"ÐºÐ¾Ð»Ð°"
argument_list|,
literal|"ÐºÐ¾Ð»Ð¾"
argument_list|,
literal|"ÐºÑÐ»"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnalyzer
specifier|private
specifier|static
name|void
name|testAnalyzer
parameter_list|(
name|String
name|source
parameter_list|,
name|String
modifier|...
name|expected_terms
parameter_list|)
throws|throws
name|IOException
block|{
name|TestAnalysis
name|analysis
init|=
name|createTestAnalysis
argument_list|(
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"_na_"
argument_list|)
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|,
operator|new
name|AnalysisUkrainianPlugin
argument_list|()
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|analysis
operator|.
name|indexAnalyzers
operator|.
name|get
argument_list|(
literal|"ukrainian"
argument_list|)
operator|.
name|analyzer
argument_list|()
decl_stmt|;
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"test"
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|term1
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|expected_terms
control|)
block|{
name|assertThat
argument_list|(
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|term1
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ts
operator|.
name|incrementToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

