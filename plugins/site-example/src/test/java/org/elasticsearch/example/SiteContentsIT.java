begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.example
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|example
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingHttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ExternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * verifies content is actually served for the site plugin  */
end_comment

begin_class
DECL|class|SiteContentsIT
specifier|public
class|class
name|SiteContentsIT
extends|extends
name|ESIntegTestCase
block|{
comment|// TODO: probably a better way to test, but we don't want to really
comment|// define a fake rest spec or anything?
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|TestCluster
name|cluster
init|=
name|cluster
argument_list|()
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"this test will not work from an IDE unless you pass test.cluster pointing to a running instance"
argument_list|,
name|cluster
operator|instanceof
name|ExternalTestCluster
argument_list|)
expr_stmt|;
name|ExternalTestCluster
name|externalCluster
init|=
operator|(
name|ExternalTestCluster
operator|)
name|cluster
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|HttpClients
operator|.
name|createMinimal
argument_list|(
operator|new
name|PoolingHttpClientConnectionManager
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|InetSocketAddress
name|address
range|:
name|externalCluster
operator|.
name|httpAddresses
argument_list|()
control|)
block|{
name|RestResponse
name|restResponse
init|=
operator|new
name|RestResponse
argument_list|(
operator|new
name|HttpRequestBuilder
argument_list|(
name|httpClient
argument_list|)
operator|.
name|host
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|port
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"/_plugin/site-example/"
argument_list|)
operator|.
name|method
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|restResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|restResponse
operator|.
name|getBodyAsString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected body contents: "
operator|+
name|body
argument_list|,
name|body
operator|.
name|contains
argument_list|(
literal|"<body>Page body</body>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

