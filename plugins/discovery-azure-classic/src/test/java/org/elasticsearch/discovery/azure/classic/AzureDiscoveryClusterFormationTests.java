begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.azure.classic
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|azure
operator|.
name|classic
package|;
end_package

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|management
operator|.
name|compute
operator|.
name|models
operator|.
name|DeploymentSlot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|windowsazure
operator|.
name|management
operator|.
name|compute
operator|.
name|models
operator|.
name|DeploymentStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpsConfigurator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpsServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|classic
operator|.
name|management
operator|.
name|AzureComputeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|mocksocket
operator|.
name|MockHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|discovery
operator|.
name|azure
operator|.
name|classic
operator|.
name|AzureDiscoveryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESIntegTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_class
annotation|@
name|ESIntegTestCase
operator|.
name|ClusterScope
argument_list|(
name|numDataNodes
operator|=
literal|2
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|)
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"use http server"
argument_list|)
comment|// TODO this should be a IT but currently all ITs in this project run against a real cluster
DECL|class|AzureDiscoveryClusterFormationTests
specifier|public
class|class
name|AzureDiscoveryClusterFormationTests
extends|extends
name|ESIntegTestCase
block|{
DECL|class|TestPlugin
specifier|public
specifier|static
class|class
name|TestPlugin
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|AzureComputeService
operator|.
name|Management
operator|.
name|ENDPOINT_SETTING
argument_list|)
return|;
block|}
block|}
DECL|field|httpsServer
specifier|private
specifier|static
name|HttpsServer
name|httpsServer
decl_stmt|;
DECL|field|logDir
specifier|private
specifier|static
name|Path
name|logDir
decl_stmt|;
annotation|@
name|Override
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|AzureDiscoveryPlugin
operator|.
name|class
argument_list|,
name|TestPlugin
operator|.
name|class
argument_list|)
return|;
block|}
DECL|field|keyStoreFile
specifier|private
specifier|static
name|Path
name|keyStoreFile
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupKeyStore
specifier|public
specifier|static
name|void
name|setupKeyStore
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|keyStoreFile
operator|=
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"test-node.jks"
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|AzureDiscoveryClusterFormationTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-node.jks"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
literal|"can't find keystore file"
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|stream
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
name|Path
name|resolve
init|=
name|logDir
operator|.
name|resolve
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectory
argument_list|(
name|resolve
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_HOSTS_PROVIDER_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|AzureDiscoveryPlugin
operator|.
name|AZURE
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_LOGS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|resolve
argument_list|)
operator|.
name|put
argument_list|(
name|TransportSettings
operator|.
name|PORT
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|Node
operator|.
name|WRITE_PORTS_FILE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"true"
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Management
operator|.
name|ENDPOINT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"https://"
operator|+
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|httpsServer
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyStoreFile
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Management
operator|.
name|KEYSTORE_PATH_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyStoreFile
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Discovery
operator|.
name|HOST_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|AzureUnicastHostsProvider
operator|.
name|HostType
operator|.
name|PUBLIC_IP
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Management
operator|.
name|KEYSTORE_PASSWORD_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"keypass"
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Management
operator|.
name|KEYSTORE_TYPE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"jks"
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Management
operator|.
name|SERVICE_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"myservice"
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Management
operator|.
name|SUBSCRIPTION_ID_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"subscription"
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Discovery
operator|.
name|DEPLOYMENT_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"mydeployment"
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Discovery
operator|.
name|ENDPOINT_NAME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"myendpoint"
argument_list|)
operator|.
name|put
argument_list|(
name|AzureComputeService
operator|.
name|Discovery
operator|.
name|DEPLOYMENT_SLOT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|AzureUnicastHostsProvider
operator|.
name|Deployment
operator|.
name|PRODUCTION
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Creates mock EC2 endpoint providing the list of started nodes to the DescribeInstances API call      */
annotation|@
name|BeforeClass
DECL|method|startHttpd
specifier|public
specifier|static
name|void
name|startHttpd
parameter_list|()
throws|throws
name|Exception
block|{
name|logDir
operator|=
name|createTempDir
argument_list|()
expr_stmt|;
name|SSLContext
name|sslContext
init|=
name|getSSLContext
argument_list|()
decl_stmt|;
name|httpsServer
operator|=
name|MockHttpServer
operator|.
name|createHttps
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|httpsServer
operator|.
name|setHttpsConfigurator
argument_list|(
operator|new
name|HttpsConfigurator
argument_list|(
name|sslContext
argument_list|)
argument_list|)
expr_stmt|;
name|httpsServer
operator|.
name|createContext
argument_list|(
literal|"/subscription/services/hostedservices/myservice"
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
block|{
name|Headers
name|headers
init|=
name|s
operator|.
name|getResponseHeaders
argument_list|()
decl_stmt|;
name|headers
operator|.
name|add
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/xml; charset=UTF-8"
argument_list|)
expr_stmt|;
name|XMLOutputFactory
name|xmlOutputFactory
init|=
name|XMLOutputFactory
operator|.
name|newFactory
argument_list|()
decl_stmt|;
name|xmlOutputFactory
operator|.
name|setProperty
argument_list|(
name|XMLOutputFactory
operator|.
name|IS_REPAIRING_NAMESPACES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLStreamWriter
name|sw
decl_stmt|;
try|try
block|{
name|sw
operator|=
name|xmlOutputFactory
operator|.
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|String
name|namespace
init|=
literal|"http://schemas.microsoft.com/windowsazure"
decl_stmt|;
name|sw
operator|.
name|setDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
name|XMLConstants
operator|.
name|DEFAULT_NS_PREFIX
argument_list|,
literal|"HostedService"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|{
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"Deployments"
argument_list|)
expr_stmt|;
block|{
name|Path
index|[]
name|files
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|resolve
init|=
name|files
index|[
name|i
index|]
operator|.
name|resolve
argument_list|(
literal|"transport.ports"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|resolve
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|addresses
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|resolve
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|addresses
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|address
init|=
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|indexOfLastColon
init|=
name|address
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|address
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfLastColon
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|address
operator|.
name|substring
argument_list|(
name|indexOfLastColon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"Deployment"
argument_list|)
expr_stmt|;
block|{
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
literal|"mydeployment"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"DeploymentSlot"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
name|DeploymentSlot
operator|.
name|Production
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"Status"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
name|DeploymentStatus
operator|.
name|Running
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"RoleInstanceList"
argument_list|)
expr_stmt|;
block|{
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"RoleInstance"
argument_list|)
expr_stmt|;
block|{
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"RoleName"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"IpAddress"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"InstanceEndpoints"
argument_list|)
expr_stmt|;
block|{
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"InstanceEndpoint"
argument_list|)
expr_stmt|;
block|{
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
literal|"myendpoint"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"Vip"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeStartElement
argument_list|(
literal|"PublicPort"
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeCharacters
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|sw
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|sw
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|sw
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|responseAsBytes
init|=
name|out
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|s
operator|.
name|sendResponseHeaders
argument_list|(
literal|200
argument_list|,
name|responseAsBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|OutputStream
name|responseBody
init|=
name|s
operator|.
name|getResponseBody
argument_list|()
decl_stmt|;
name|responseBody
operator|.
name|write
argument_list|(
name|responseAsBytes
argument_list|)
expr_stmt|;
name|responseBody
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|Loggers
operator|.
name|getLogger
argument_list|(
name|AzureDiscoveryClusterFormationTests
operator|.
name|class
argument_list|)
operator|.
name|error
argument_list|(
literal|"Failed serializing XML"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|httpsServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getSSLContext
specifier|private
specifier|static
name|SSLContext
name|getSSLContext
parameter_list|()
throws|throws
name|Exception
block|{
name|char
index|[]
name|passphrase
init|=
literal|"keypass"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JKS"
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|AzureDiscoveryClusterFormationTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-node.jks"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
literal|"can't find keystore file"
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|stream
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
block|}
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
literal|"SunX509"
argument_list|)
decl_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
literal|"SunX509"
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|ks
argument_list|)
expr_stmt|;
name|SSLContext
name|ssl
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|ssl
operator|.
name|init
argument_list|(
name|kmf
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
name|tmf
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|ssl
return|;
block|}
annotation|@
name|AfterClass
DECL|method|stopHttpd
specifier|public
specifier|static
name|void
name|stopHttpd
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|internalCluster
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// shut them all down otherwise we get spammed with connection refused exceptions
name|internalCluster
argument_list|()
operator|.
name|stopRandomDataNode
argument_list|()
expr_stmt|;
block|}
name|httpsServer
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|httpsServer
operator|=
literal|null
expr_stmt|;
name|logDir
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testJoin
specifier|public
name|void
name|testJoin
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
comment|// only wait for the cluster to form
name|ensureClusterSizeConsistency
argument_list|()
expr_stmt|;
comment|// add one more node and wait for it to join
name|internalCluster
argument_list|()
operator|.
name|startDataOnlyNode
argument_list|()
expr_stmt|;
name|ensureClusterSizeConsistency
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

