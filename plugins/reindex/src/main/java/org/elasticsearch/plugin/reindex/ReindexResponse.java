begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ReindexResponse
specifier|public
class|class
name|ReindexResponse
extends|extends
name|BulkIndexByScrollResponse
block|{
DECL|field|CREATED_FIELD
specifier|static
specifier|final
name|String
name|CREATED_FIELD
init|=
literal|"created"
decl_stmt|;
DECL|field|created
specifier|private
name|long
name|created
decl_stmt|;
DECL|method|ReindexResponse
specifier|public
name|ReindexResponse
parameter_list|()
block|{     }
DECL|method|ReindexResponse
specifier|public
name|ReindexResponse
parameter_list|(
name|long
name|took
parameter_list|,
name|long
name|created
parameter_list|,
name|long
name|updated
parameter_list|,
name|int
name|batches
parameter_list|,
name|long
name|versionConflicts
parameter_list|,
name|long
name|noops
parameter_list|,
name|List
argument_list|<
name|Failure
argument_list|>
name|indexingFailures
parameter_list|,
name|List
argument_list|<
name|ShardSearchFailure
argument_list|>
name|searchFailures
parameter_list|)
block|{
name|super
argument_list|(
name|took
argument_list|,
name|updated
argument_list|,
name|batches
argument_list|,
name|versionConflicts
argument_list|,
name|noops
argument_list|,
name|indexingFailures
argument_list|,
name|searchFailures
argument_list|)
expr_stmt|;
name|this
operator|.
name|created
operator|=
name|created
expr_stmt|;
block|}
DECL|method|getCreated
specifier|public
name|long
name|getCreated
parameter_list|()
block|{
return|return
name|created
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|created
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|CREATED_FIELD
argument_list|,
name|created
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|toStringName
specifier|protected
name|String
name|toStringName
parameter_list|()
block|{
return|return
literal|"ReindexResponse"
return|;
block|}
annotation|@
name|Override
DECL|method|innerToString
specifier|protected
name|void
name|innerToString
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|",created="
argument_list|)
operator|.
name|append
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the first few failures to build a useful for toString.      */
DECL|method|truncatedFailures
specifier|protected
name|void
name|truncatedFailures
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|",failures=["
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Failure
argument_list|>
name|failures
init|=
name|getIndexingFailures
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|written
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|failures
operator|.
name|hasNext
argument_list|()
operator|&&
name|written
operator|<
literal|3
condition|)
block|{
name|Failure
name|failure
init|=
name|failures
operator|.
name|next
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|written
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|written
operator|++
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

