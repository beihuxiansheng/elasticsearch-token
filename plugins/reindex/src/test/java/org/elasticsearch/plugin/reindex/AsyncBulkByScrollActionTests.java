begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BackoffPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|FilterClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|client
operator|.
name|NoOpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
operator|.
name|randomSimpleString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BackoffPolicy
operator|.
name|constantBackoff
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyCollectionOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|iterableWithSize
import|;
end_import

begin_class
DECL|class|AsyncBulkByScrollActionTests
specifier|public
class|class
name|AsyncBulkByScrollActionTests
extends|extends
name|ESTestCase
block|{
DECL|field|client
specifier|private
name|MyMockClient
name|client
decl_stmt|;
DECL|field|threadPool
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|mainRequest
specifier|private
name|DummyAbstractBulkByScrollRequest
name|mainRequest
decl_stmt|;
DECL|field|firstSearchRequest
specifier|private
name|SearchRequest
name|firstSearchRequest
decl_stmt|;
DECL|field|listener
specifier|private
name|PlainActionFuture
argument_list|<
name|BulkIndexByScrollResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|scrollId
specifier|private
name|String
name|scrollId
decl_stmt|;
DECL|field|task
specifier|private
name|BulkByScrollTask
name|task
decl_stmt|;
annotation|@
name|Before
DECL|method|setupForTest
specifier|public
name|void
name|setupForTest
parameter_list|()
block|{
name|client
operator|=
operator|new
name|MyMockClient
argument_list|(
operator|new
name|NoOpClient
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|mainRequest
operator|=
operator|new
name|DummyAbstractBulkByScrollRequest
argument_list|()
expr_stmt|;
name|firstSearchRequest
operator|=
literal|null
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|scrollId
operator|=
literal|null
expr_stmt|;
name|task
operator|=
operator|new
name|BulkByScrollTask
argument_list|(
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|"test"
argument_list|,
parameter_list|()
lambda|->
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDownAndVerifyCommonStuff
specifier|public
name|void
name|tearDownAndVerifyCommonStuff
parameter_list|()
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Generates a random scrollId and registers it so that when the test      * finishes we check that it was cleared. Subsequent calls reregister a new      * random scroll id so it is checked instead.      */
DECL|method|scrollId
specifier|private
name|String
name|scrollId
parameter_list|()
block|{
name|scrollId
operator|=
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Empty string's get special behavior we don't want
return|return
name|scrollId
return|;
block|}
DECL|method|testScrollResponseSetsTotal
specifier|public
name|void
name|testScrollResponseSetsTotal
parameter_list|()
block|{
comment|// Default is 0, meaning unstarted
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|total
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|InternalSearchHits
name|hits
init|=
operator|new
name|InternalSearchHits
argument_list|(
literal|null
argument_list|,
name|total
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|InternalSearchResponse
name|searchResponse
init|=
operator|new
name|InternalSearchResponse
argument_list|(
name|hits
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
operator|.
name|onScrollResponse
argument_list|(
operator|new
name|SearchResponse
argument_list|(
name|searchResponse
argument_list|,
name|scrollId
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
name|randomLong
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|total
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEachScrollResponseIsABatch
specifier|public
name|void
name|testEachScrollResponseIsABatch
parameter_list|()
block|{
comment|// Replace the generic thread pool with one that executes immediately so the batch is updated immediately
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Executor
name|generic
parameter_list|()
block|{
return|return
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|int
name|maxBatches
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|batches
init|=
literal|1
init|;
name|batches
operator|<
name|maxBatches
condition|;
name|batches
operator|++
control|)
block|{
name|InternalSearchHit
name|hit
init|=
operator|new
name|InternalSearchHit
argument_list|(
literal|0
argument_list|,
literal|"id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|InternalSearchHits
name|hits
init|=
operator|new
name|InternalSearchHits
argument_list|(
operator|new
name|InternalSearchHit
index|[]
block|{
name|hit
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|InternalSearchResponse
name|searchResponse
init|=
operator|new
name|InternalSearchResponse
argument_list|(
name|hits
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
operator|.
name|onScrollResponse
argument_list|(
operator|new
name|SearchResponse
argument_list|(
name|searchResponse
argument_list|,
name|scrollId
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
name|randomLong
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batches
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBulkResponseSetsLotsOfStatus
specifier|public
name|void
name|testBulkResponseSetsLotsOfStatus
parameter_list|()
block|{
name|mainRequest
operator|.
name|setAbortOnVersionConflict
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|maxBatches
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
name|versionConflicts
init|=
literal|0
decl_stmt|;
name|long
name|created
init|=
literal|0
decl_stmt|;
name|long
name|updated
init|=
literal|0
decl_stmt|;
name|long
name|deleted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|batches
init|=
literal|0
init|;
name|batches
operator|<
name|maxBatches
condition|;
name|batches
operator|++
control|)
block|{
name|BulkItemResponse
index|[]
name|responses
init|=
operator|new
name|BulkItemResponse
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|responses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"name"
argument_list|,
literal|"uid"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|opType
decl_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|opType
operator|=
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|versionConflicts
operator|++
expr_stmt|;
name|responses
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
name|opType
argument_list|,
operator|new
name|Failure
argument_list|(
name|shardId
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"id"
operator|+
name|i
argument_list|,
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|createdResponse
decl_stmt|;
switch|switch
condition|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|opType
operator|=
name|randomFrom
argument_list|(
literal|"index"
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
name|createdResponse
operator|=
literal|true
expr_stmt|;
name|created
operator|++
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|opType
operator|=
name|randomFrom
argument_list|(
literal|"index"
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
name|createdResponse
operator|=
literal|false
expr_stmt|;
name|updated
operator|++
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|opType
operator|=
literal|"delete"
expr_stmt|;
name|createdResponse
operator|=
literal|false
expr_stmt|;
name|deleted
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad scenario"
argument_list|)
throw|;
block|}
name|responses
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
name|opType
argument_list|,
operator|new
name|IndexResponse
argument_list|(
name|shardId
argument_list|,
literal|"type"
argument_list|,
literal|"id"
operator|+
name|i
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|createdResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
operator|.
name|onBulkResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
name|responses
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Mimicks a ThreadPool rejecting execution of the task.      */
DECL|method|testThreadPoolRejectionsAbortRequest
specifier|public
name|void
name|testThreadPoolRejectionsAbortRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Executor
name|generic
parameter_list|()
block|{
return|return
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
operator|(
operator|(
name|AbstractRunnable
operator|)
name|command
operator|)
operator|.
name|onRejection
argument_list|(
operator|new
name|EsRejectedExecutionException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|InternalSearchHits
name|hits
init|=
operator|new
name|InternalSearchHits
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|InternalSearchResponse
name|searchResponse
init|=
operator|new
name|InternalSearchResponse
argument_list|(
name|hits
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
operator|.
name|onScrollResponse
argument_list|(
operator|new
name|SearchResponse
argument_list|(
name|searchResponse
argument_list|,
name|scrollId
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
name|randomLong
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"EsRejectedExecutionException[test]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|client
operator|.
name|scrollsCleared
argument_list|,
name|contains
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Mimicks shard search failures usually caused by the data node serving the      * scroll request going down.      */
DECL|method|testShardFailuresAbortRequest
specifier|public
name|void
name|testShardFailuresAbortRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardSearchFailure
name|shardFailure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
operator|.
name|onScrollResponse
argument_list|(
operator|new
name|SearchResponse
argument_list|(
literal|null
argument_list|,
name|scrollId
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
name|randomLong
argument_list|()
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|shardFailure
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|BulkIndexByScrollResponse
name|response
init|=
name|listener
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexingFailures
argument_list|()
argument_list|,
name|emptyCollectionOf
argument_list|(
name|Failure
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getSearchFailures
argument_list|()
argument_list|,
name|contains
argument_list|(
name|shardFailure
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
operator|.
name|scrollsCleared
argument_list|,
name|contains
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Mimicks bulk indexing failures.      */
DECL|method|testBulkFailuresAbortRequest
specifier|public
name|void
name|testBulkFailuresAbortRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|Failure
name|failure
init|=
operator|new
name|Failure
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|DummyAbstractAsyncBulkByScrollAction
name|action
init|=
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|onBulkResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
operator|new
name|BulkItemResponse
index|[]
block|{
operator|new
name|BulkItemResponse
argument_list|(
literal|0
argument_list|,
literal|"index"
argument_list|,
name|failure
argument_list|)
block|}
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|BulkIndexByScrollResponse
name|response
init|=
name|listener
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexingFailures
argument_list|()
argument_list|,
name|contains
argument_list|(
name|failure
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getSearchFailures
argument_list|()
argument_list|,
name|emptyCollectionOf
argument_list|(
name|ShardSearchFailure
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Mimicks script failures or general wrongness by implementers.      */
DECL|method|testListenerReceiveBuildBulkExceptions
specifier|public
name|void
name|testListenerReceiveBuildBulkExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyAbstractAsyncBulkByScrollAction
name|action
init|=
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BulkRequest
name|buildBulk
parameter_list|(
name|Iterable
argument_list|<
name|SearchHit
argument_list|>
name|docs
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"surprise"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|InternalSearchHit
name|hit
init|=
operator|new
name|InternalSearchHit
argument_list|(
literal|0
argument_list|,
literal|"id"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|InternalSearchHits
name|hits
init|=
operator|new
name|InternalSearchHits
argument_list|(
operator|new
name|InternalSearchHit
index|[]
block|{
name|hit
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|InternalSearchResponse
name|searchResponse
init|=
operator|new
name|InternalSearchResponse
argument_list|(
name|hits
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|action
operator|.
name|onScrollResponse
argument_list|(
operator|new
name|SearchResponse
argument_list|(
name|searchResponse
argument_list|,
name|scrollId
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
name|randomLong
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected failure."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"surprise"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Mimicks bulk rejections. These should be retried and eventually succeed.      */
DECL|method|testBulkRejectionsRetryWithEnoughRetries
specifier|public
name|void
name|testBulkRejectionsRetryWithEnoughRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bulksToTry
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|long
name|retryAttempts
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bulksToTry
condition|;
name|i
operator|++
control|)
block|{
name|retryAttempts
operator|+=
name|retryTestCase
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|retryAttempts
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getRetries
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Mimicks bulk rejections. These should be retried but we fail anyway because we run out of retries.      */
DECL|method|testBulkRejectionsRetryAndFailAnyway
specifier|public
name|void
name|testBulkRejectionsRetryAndFailAnyway
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|retryAttempts
init|=
name|retryTestCase
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|retryAttempts
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
operator|.
name|getRetries
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|retryTestCase
specifier|private
name|long
name|retryTestCase
parameter_list|(
name|boolean
name|failWithRejection
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|totalFailures
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|mainRequest
operator|.
name|getMaxRetries
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|retryAttempts
init|=
name|totalFailures
operator|-
operator|(
name|failWithRejection
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|client
operator|.
name|bulksToReject
operator|=
name|client
operator|.
name|bulksAttempts
operator|.
name|get
argument_list|()
operator|+
name|totalFailures
expr_stmt|;
comment|/*          * When we get a successful bulk response we usually start the next scroll request but lets just intercept that so we don't have to          * deal with it. We just wait for it to happen.          */
name|CountDownLatch
name|successLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DummyAbstractAsyncBulkByScrollAction
name|action
init|=
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
block|{
annotation|@
name|Override
name|BackoffPolicy
name|backoffPolicy
parameter_list|()
block|{
comment|// Force a backoff time of 0 to prevent sleeping
return|return
name|constantBackoff
argument_list|(
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
argument_list|,
name|retryAttempts
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|startNextScrollRequest
parameter_list|()
block|{
name|successLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|BulkRequest
name|request
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|request
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|sendBulkRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|failWithRejection
condition|)
block|{
name|BulkIndexByScrollResponse
name|response
init|=
name|listener
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndexingFailures
argument_list|()
argument_list|,
name|iterableWithSize
argument_list|(
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getIndexingFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|,
name|RestStatus
operator|.
name|TOO_MANY_REQUESTS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getSearchFailures
argument_list|()
argument_list|,
name|emptyCollectionOf
argument_list|(
name|ShardSearchFailure
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|successLatch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
return|return
name|retryAttempts
return|;
block|}
comment|/**      * The default retry time matches what we say it is in the javadoc for the request.      */
DECL|method|testDefaultRetryTimes
specifier|public
name|void
name|testDefaultRetryTimes
parameter_list|()
block|{
name|Iterator
argument_list|<
name|TimeValue
argument_list|>
name|policy
init|=
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
operator|.
name|backoffPolicy
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|millis
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|policy
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|millis
operator|+=
name|policy
operator|.
name|next
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
comment|/*          * This is the total number of milliseconds that a reindex made with the default settings will backoff before attempting one final          * time. If that request is rejected then the whole process fails with a rejected exception.          */
name|int
name|defaultBackoffBeforeFailing
init|=
literal|24670
decl_stmt|;
name|assertEquals
argument_list|(
name|defaultBackoffBeforeFailing
argument_list|,
name|millis
argument_list|)
expr_stmt|;
block|}
DECL|class|DummyAbstractAsyncBulkByScrollAction
specifier|private
class|class
name|DummyAbstractAsyncBulkByScrollAction
extends|extends
name|AbstractAsyncBulkByScrollAction
argument_list|<
name|DummyAbstractBulkByScrollRequest
argument_list|,
name|BulkIndexByScrollResponse
argument_list|>
block|{
DECL|method|DummyAbstractAsyncBulkByScrollAction
specifier|public
name|DummyAbstractAsyncBulkByScrollAction
parameter_list|()
block|{
name|super
argument_list|(
name|AsyncBulkByScrollActionTests
operator|.
name|this
operator|.
name|task
argument_list|,
name|logger
argument_list|,
name|client
argument_list|,
name|threadPool
argument_list|,
name|AsyncBulkByScrollActionTests
operator|.
name|this
operator|.
name|mainRequest
argument_list|,
name|firstSearchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildBulk
specifier|protected
name|BulkRequest
name|buildBulk
parameter_list|(
name|Iterable
argument_list|<
name|SearchHit
argument_list|>
name|docs
parameter_list|)
block|{
return|return
operator|new
name|BulkRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|buildResponse
specifier|protected
name|BulkIndexByScrollResponse
name|buildResponse
parameter_list|(
name|TimeValue
name|took
parameter_list|,
name|List
argument_list|<
name|Failure
argument_list|>
name|indexingFailures
parameter_list|,
name|List
argument_list|<
name|ShardSearchFailure
argument_list|>
name|searchFailures
parameter_list|)
block|{
return|return
operator|new
name|BulkIndexByScrollResponse
argument_list|(
name|took
argument_list|,
name|task
operator|.
name|getStatus
argument_list|()
argument_list|,
name|indexingFailures
argument_list|,
name|searchFailures
argument_list|)
return|;
block|}
block|}
DECL|class|DummyAbstractBulkByScrollRequest
specifier|private
specifier|static
class|class
name|DummyAbstractBulkByScrollRequest
extends|extends
name|AbstractBulkByScrollRequest
argument_list|<
name|DummyAbstractBulkByScrollRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|self
specifier|protected
name|DummyAbstractBulkByScrollRequest
name|self
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
DECL|class|MyMockClient
specifier|private
specifier|static
class|class
name|MyMockClient
extends|extends
name|FilterClient
block|{
DECL|field|scrollsCleared
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|scrollsCleared
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|bulksAttempts
specifier|private
specifier|final
name|AtomicInteger
name|bulksAttempts
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|bulksToReject
specifier|private
name|int
name|bulksToReject
init|=
literal|0
decl_stmt|;
DECL|method|MyMockClient
specifier|public
name|MyMockClient
parameter_list|(
name|Client
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|Request
extends|extends
name|ActionRequest
argument_list|<
name|Request
argument_list|>
parameter_list|,
name|Response
extends|extends
name|ActionResponse
parameter_list|,
DECL|method|doExecute
name|RequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|,
name|RequestBuilder
argument_list|>
parameter_list|>
name|void
name|doExecute
parameter_list|(
name|Action
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|,
name|RequestBuilder
argument_list|>
name|action
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|ClearScrollRequest
condition|)
block|{
name|ClearScrollRequest
name|clearScroll
init|=
operator|(
name|ClearScrollRequest
operator|)
name|request
decl_stmt|;
name|scrollsCleared
operator|.
name|addAll
argument_list|(
name|clearScroll
operator|.
name|getScrollIds
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|(
name|Response
operator|)
operator|new
name|ClearScrollResponse
argument_list|(
literal|true
argument_list|,
name|clearScroll
operator|.
name|getScrollIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|request
operator|instanceof
name|BulkRequest
condition|)
block|{
name|BulkRequest
name|bulk
init|=
operator|(
name|BulkRequest
operator|)
name|request
decl_stmt|;
name|int
name|toReject
decl_stmt|;
if|if
condition|(
name|bulksAttempts
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|bulksToReject
condition|)
block|{
name|toReject
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|toReject
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|bulk
operator|.
name|requests
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|BulkItemResponse
index|[]
name|responses
init|=
operator|new
name|BulkItemResponse
index|[
name|bulk
operator|.
name|requests
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bulk
operator|.
name|requests
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ActionRequest
argument_list|<
name|?
argument_list|>
name|item
init|=
name|bulk
operator|.
name|requests
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|opType
decl_stmt|;
name|DocWriteResponse
name|response
decl_stmt|;
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
operator|(
operator|(
name|ReplicationRequest
argument_list|<
name|?
argument_list|>
operator|)
name|item
operator|)
operator|.
name|index
argument_list|()
argument_list|,
literal|"uuid"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|IndexRequest
condition|)
block|{
name|IndexRequest
name|index
init|=
operator|(
name|IndexRequest
operator|)
name|item
decl_stmt|;
name|opType
operator|=
name|index
operator|.
name|opType
argument_list|()
operator|.
name|lowercase
argument_list|()
expr_stmt|;
name|response
operator|=
operator|new
name|IndexResponse
argument_list|(
name|shardId
argument_list|,
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|UpdateRequest
condition|)
block|{
name|UpdateRequest
name|update
init|=
operator|(
name|UpdateRequest
operator|)
name|item
decl_stmt|;
name|opType
operator|=
literal|"update"
expr_stmt|;
name|response
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|shardId
argument_list|,
name|update
operator|.
name|type
argument_list|()
argument_list|,
name|update
operator|.
name|id
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|DeleteRequest
condition|)
block|{
name|DeleteRequest
name|delete
init|=
operator|(
name|DeleteRequest
operator|)
name|item
decl_stmt|;
name|opType
operator|=
literal|"delete"
expr_stmt|;
name|response
operator|=
operator|new
name|DeleteResponse
argument_list|(
name|shardId
argument_list|,
name|delete
operator|.
name|type
argument_list|()
argument_list|,
name|delete
operator|.
name|id
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown request:  "
operator|+
name|item
argument_list|)
throw|;
block|}
if|if
condition|(
name|i
operator|==
name|toReject
condition|)
block|{
name|responses
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
name|opType
argument_list|,
operator|new
name|Failure
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|,
name|response
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|EsRejectedExecutionException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responses
index|[
name|i
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|i
argument_list|,
name|opType
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
name|listener
operator|.
name|onResponse
argument_list|(
operator|(
name|Response
operator|)
operator|new
name|BulkResponse
argument_list|(
name|responses
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|doExecute
argument_list|(
name|action
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

