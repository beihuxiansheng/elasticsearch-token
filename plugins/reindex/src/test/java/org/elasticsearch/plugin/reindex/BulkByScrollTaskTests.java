begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|BulkByScrollTaskTests
specifier|public
class|class
name|BulkByScrollTaskTests
extends|extends
name|ESTestCase
block|{
DECL|field|task
specifier|private
name|BulkByScrollTask
name|task
decl_stmt|;
annotation|@
name|Before
DECL|method|createTask
specifier|public
name|void
name|createTask
parameter_list|()
block|{
name|task
operator|=
operator|new
name|BulkByScrollTask
argument_list|(
literal|1
argument_list|,
literal|"test_type"
argument_list|,
literal|"test_action"
argument_list|,
parameter_list|()
lambda|->
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicData
specifier|public
name|void
name|testBasicData
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_type"
argument_list|,
name|task
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_action"
argument_list|,
name|task
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testProgress
specifier|public
name|void
name|testProgress
parameter_list|()
block|{
name|long
name|created
init|=
literal|0
decl_stmt|;
name|long
name|updated
init|=
literal|0
decl_stmt|;
name|long
name|deleted
init|=
literal|0
decl_stmt|;
name|long
name|versionConflicts
init|=
literal|0
decl_stmt|;
name|long
name|noops
init|=
literal|0
decl_stmt|;
name|int
name|batch
init|=
literal|0
decl_stmt|;
name|BulkByScrollTask
operator|.
name|Status
name|status
init|=
name|task
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batch
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalHits
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|task
operator|.
name|setTotal
argument_list|(
name|totalHits
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|p
init|=
literal|0
init|;
name|p
operator|<
name|totalHits
condition|;
name|p
operator|++
control|)
block|{
name|status
operator|=
name|task
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHits
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batch
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|created
operator|++
expr_stmt|;
name|task
operator|.
name|countCreated
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updated
operator|++
expr_stmt|;
name|task
operator|.
name|countUpdated
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|deleted
operator|++
expr_stmt|;
name|task
operator|.
name|countDeleted
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|versionConflicts
operator|++
expr_stmt|;
name|task
operator|.
name|countVersionConflict
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|batch
operator|++
expr_stmt|;
name|task
operator|.
name|countBatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|noops
operator|++
expr_stmt|;
name|task
operator|.
name|countNoop
argument_list|()
expr_stmt|;
block|}
block|}
name|status
operator|=
name|task
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHits
argument_list|,
name|status
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|created
argument_list|,
name|status
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updated
argument_list|,
name|status
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deleted
argument_list|,
name|status
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionConflicts
argument_list|,
name|status
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batch
argument_list|,
name|status
operator|.
name|getBatches
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|noops
argument_list|,
name|status
operator|.
name|getNoops
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStatusHatesNegatives
specifier|public
name|void
name|testStatusHatesNegatives
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|BulkByScrollTask
operator|.
name|Status
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

