begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|FilterClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|client
operator|.
name|NoOpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
operator|.
name|randomSimpleString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyCollectionOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|AsyncBulkByScrollActionTest
specifier|public
class|class
name|AsyncBulkByScrollActionTest
extends|extends
name|ESTestCase
block|{
DECL|field|client
specifier|private
name|MockClearScrollClient
name|client
decl_stmt|;
DECL|field|threadPool
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|mainRequest
specifier|private
name|DummyAbstractBulkByScrollRequest
name|mainRequest
decl_stmt|;
DECL|field|firstSearchRequest
specifier|private
name|SearchRequest
name|firstSearchRequest
decl_stmt|;
DECL|field|listener
specifier|private
name|PlainActionFuture
argument_list|<
name|Object
argument_list|>
name|listener
decl_stmt|;
DECL|field|scrollId
specifier|private
name|String
name|scrollId
decl_stmt|;
annotation|@
name|Before
DECL|method|setupForTest
specifier|public
name|void
name|setupForTest
parameter_list|()
block|{
name|client
operator|=
operator|new
name|MockClearScrollClient
argument_list|(
operator|new
name|NoOpClient
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|mainRequest
operator|=
operator|new
name|DummyAbstractBulkByScrollRequest
argument_list|()
expr_stmt|;
name|firstSearchRequest
operator|=
literal|null
expr_stmt|;
name|listener
operator|=
operator|new
name|PlainActionFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|scrollId
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDownAndVerifyCommonStuff
specifier|public
name|void
name|tearDownAndVerifyCommonStuff
parameter_list|()
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|scrollId
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|client
operator|.
name|scrollsCleared
argument_list|,
name|contains
argument_list|(
name|scrollId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generates a random scrollId and registers it so that when the test      * finishes we check that it was cleared. Subsequent calls reregister a new      * random scroll id so it is checked instead.      */
DECL|method|scrollId
specifier|private
name|String
name|scrollId
parameter_list|()
block|{
name|scrollId
operator|=
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|scrollId
return|;
block|}
comment|/**      * Mimicks a ThreadPool rejecting execution of the task.      */
DECL|method|testThreadPoolRejectionsAbortRequest
specifier|public
name|void
name|testThreadPoolRejectionsAbortRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getTestName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Executor
name|generic
parameter_list|()
block|{
return|return
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
operator|(
operator|(
name|AbstractRunnable
operator|)
name|command
operator|)
operator|.
name|onRejection
argument_list|(
operator|new
name|EsRejectedExecutionException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
operator|.
name|onScrollResponse
argument_list|(
operator|new
name|SearchResponse
argument_list|(
literal|null
argument_list|,
name|scrollId
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
name|randomLong
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"EsRejectedExecutionException[test]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Mimicks shard search failures usually caused by the data node serving the      * scroll request going down.      */
DECL|method|testShardFailuresAbortRequest
specifier|public
name|void
name|testShardFailuresAbortRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardSearchFailure
name|shardFailure
init|=
operator|new
name|ShardSearchFailure
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|DummyAbstractAsyncBulkByScrollAction
name|action
init|=
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|onScrollResponse
argument_list|(
operator|new
name|SearchResponse
argument_list|(
literal|null
argument_list|,
name|scrollId
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
name|randomLong
argument_list|()
argument_list|,
operator|new
name|ShardSearchFailure
index|[]
block|{
name|shardFailure
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|indexingFailures
argument_list|()
argument_list|,
name|emptyCollectionOf
argument_list|(
name|Failure
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|searchFailures
argument_list|()
argument_list|,
name|contains
argument_list|(
name|shardFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Mimicks bulk indexing failures.      */
DECL|method|testBulkFailuresAbortRequest
specifier|public
name|void
name|testBulkFailuresAbortRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|Failure
name|failure
init|=
operator|new
name|Failure
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|DummyAbstractAsyncBulkByScrollAction
name|action
init|=
operator|new
name|DummyAbstractAsyncBulkByScrollAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|onBulkResponse
argument_list|(
operator|new
name|BulkResponse
argument_list|(
operator|new
name|BulkItemResponse
index|[]
block|{
operator|new
name|BulkItemResponse
argument_list|(
literal|0
argument_list|,
literal|"index"
argument_list|,
name|failure
argument_list|)
block|}
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|indexingFailures
argument_list|()
argument_list|,
name|contains
argument_list|(
name|failure
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|action
operator|.
name|searchFailures
argument_list|()
argument_list|,
name|emptyCollectionOf
argument_list|(
name|ShardSearchFailure
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|DummyAbstractAsyncBulkByScrollAction
specifier|private
class|class
name|DummyAbstractAsyncBulkByScrollAction
extends|extends
name|AbstractAsyncBulkByScrollAction
argument_list|<
name|DummyAbstractBulkByScrollRequest
argument_list|,
name|Object
argument_list|>
block|{
DECL|method|DummyAbstractAsyncBulkByScrollAction
specifier|public
name|DummyAbstractAsyncBulkByScrollAction
parameter_list|()
block|{
name|super
argument_list|(
name|logger
argument_list|,
name|client
argument_list|,
name|threadPool
argument_list|,
name|AsyncBulkByScrollActionTest
operator|.
name|this
operator|.
name|mainRequest
argument_list|,
name|firstSearchRequest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildBulk
specifier|protected
name|BulkRequest
name|buildBulk
parameter_list|(
name|Iterable
argument_list|<
name|SearchHit
argument_list|>
name|docs
parameter_list|)
block|{
return|return
operator|new
name|BulkRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|buildResponse
specifier|protected
name|Object
name|buildResponse
parameter_list|(
name|long
name|took
parameter_list|)
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
block|}
DECL|class|DummyAbstractBulkByScrollRequest
specifier|private
specifier|static
class|class
name|DummyAbstractBulkByScrollRequest
extends|extends
name|AbstractBulkByScrollRequest
argument_list|<
name|DummyAbstractBulkByScrollRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|self
specifier|protected
name|DummyAbstractBulkByScrollRequest
name|self
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
DECL|class|MockClearScrollClient
specifier|private
specifier|static
class|class
name|MockClearScrollClient
extends|extends
name|FilterClient
block|{
DECL|field|scrollsCleared
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|scrollsCleared
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MockClearScrollClient
specifier|public
name|MockClearScrollClient
parameter_list|(
name|Client
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doExecute
specifier|protected
parameter_list|<
name|Request
extends|extends
name|ActionRequest
argument_list|<
name|Request
argument_list|>
parameter_list|,
name|Response
extends|extends
name|ActionResponse
parameter_list|,
name|RequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|,
name|RequestBuilder
argument_list|>
parameter_list|>
name|void
name|doExecute
parameter_list|(
name|Action
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|,
name|RequestBuilder
argument_list|>
name|action
parameter_list|,
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|ClearScrollRequest
condition|)
block|{
name|ClearScrollRequest
name|clearScroll
init|=
operator|(
name|ClearScrollRequest
operator|)
name|request
decl_stmt|;
name|scrollsCleared
operator|.
name|addAll
argument_list|(
name|clearScroll
operator|.
name|getScrollIds
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|(
name|Response
operator|)
operator|new
name|ClearScrollResponse
argument_list|(
literal|true
argument_list|,
name|clearScroll
operator|.
name|getScrollIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|doExecute
argument_list|(
name|action
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

