begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.reindex
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|reindex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|TypeSafeMatcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|AbstractBulkIndexByScrollResponseMatcher
specifier|public
specifier|abstract
class|class
name|AbstractBulkIndexByScrollResponseMatcher
parameter_list|<
name|Response
extends|extends
name|BulkIndexByScrollResponse
parameter_list|,
name|Self
extends|extends
name|AbstractBulkIndexByScrollResponseMatcher
parameter_list|<
name|Response
parameter_list|,
name|Self
parameter_list|>
parameter_list|>
extends|extends
name|TypeSafeMatcher
argument_list|<
name|Response
argument_list|>
block|{
DECL|field|updatedMatcher
specifier|private
name|Matcher
argument_list|<
name|Long
argument_list|>
name|updatedMatcher
init|=
name|equalTo
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
comment|/**      * Matches for number of batches. Optional.      */
DECL|field|batchesMatcher
specifier|private
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|batchesMatcher
decl_stmt|;
DECL|field|versionConflictsMatcher
specifier|private
name|Matcher
argument_list|<
name|Long
argument_list|>
name|versionConflictsMatcher
init|=
name|equalTo
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
DECL|field|failuresMatcher
specifier|private
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|failuresMatcher
init|=
name|equalTo
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|reasonCancelledMatcher
specifier|private
name|Matcher
argument_list|<
name|String
argument_list|>
name|reasonCancelledMatcher
init|=
name|nullValue
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|self
specifier|protected
specifier|abstract
name|Self
name|self
parameter_list|()
function_decl|;
DECL|method|updated
specifier|public
name|Self
name|updated
parameter_list|(
name|Matcher
argument_list|<
name|Long
argument_list|>
name|updatedMatcher
parameter_list|)
block|{
name|this
operator|.
name|updatedMatcher
operator|=
name|updatedMatcher
expr_stmt|;
return|return
name|self
argument_list|()
return|;
block|}
DECL|method|updated
specifier|public
name|Self
name|updated
parameter_list|(
name|long
name|updated
parameter_list|)
block|{
return|return
name|updated
argument_list|(
name|equalTo
argument_list|(
name|updated
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Set the matches for the number of batches. Defaults to matching any      * integer because we usually don't care about how many batches the job      * takes.      */
DECL|method|batches
specifier|public
name|Self
name|batches
parameter_list|(
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|batchesMatcher
parameter_list|)
block|{
name|this
operator|.
name|batchesMatcher
operator|=
name|batchesMatcher
expr_stmt|;
return|return
name|self
argument_list|()
return|;
block|}
DECL|method|batches
specifier|public
name|Self
name|batches
parameter_list|(
name|int
name|batches
parameter_list|)
block|{
return|return
name|batches
argument_list|(
name|equalTo
argument_list|(
name|batches
argument_list|)
argument_list|)
return|;
block|}
DECL|method|batches
specifier|public
name|Self
name|batches
parameter_list|(
name|int
name|total
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
comment|// Round up
return|return
name|batches
argument_list|(
operator|(
name|total
operator|+
name|batchSize
operator|-
literal|1
operator|)
operator|/
name|batchSize
argument_list|)
return|;
block|}
DECL|method|versionConflicts
specifier|public
name|Self
name|versionConflicts
parameter_list|(
name|Matcher
argument_list|<
name|Long
argument_list|>
name|versionConflictsMatcher
parameter_list|)
block|{
name|this
operator|.
name|versionConflictsMatcher
operator|=
name|versionConflictsMatcher
expr_stmt|;
return|return
name|self
argument_list|()
return|;
block|}
DECL|method|versionConflicts
specifier|public
name|Self
name|versionConflicts
parameter_list|(
name|long
name|versionConflicts
parameter_list|)
block|{
return|return
name|versionConflicts
argument_list|(
name|equalTo
argument_list|(
name|versionConflicts
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Set the matcher for the size of the failures list. For more in depth      * matching do it by hand. The type signatures required to match the      * actual failures list here just don't work.      */
DECL|method|failures
specifier|public
name|Self
name|failures
parameter_list|(
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|failuresMatcher
parameter_list|)
block|{
name|this
operator|.
name|failuresMatcher
operator|=
name|failuresMatcher
expr_stmt|;
return|return
name|self
argument_list|()
return|;
block|}
comment|/**      * Set the expected size of the failures list.      */
DECL|method|failures
specifier|public
name|Self
name|failures
parameter_list|(
name|int
name|failures
parameter_list|)
block|{
return|return
name|failures
argument_list|(
name|equalTo
argument_list|(
name|failures
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reasonCancelled
specifier|public
name|Self
name|reasonCancelled
parameter_list|(
name|Matcher
argument_list|<
name|String
argument_list|>
name|reasonCancelledMatcher
parameter_list|)
block|{
name|this
operator|.
name|reasonCancelledMatcher
operator|=
name|reasonCancelledMatcher
expr_stmt|;
return|return
name|self
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|matchesSafely
specifier|protected
name|boolean
name|matchesSafely
parameter_list|(
name|Response
name|item
parameter_list|)
block|{
return|return
name|updatedMatcher
operator|.
name|matches
argument_list|(
name|item
operator|.
name|getUpdated
argument_list|()
argument_list|)
operator|&&
operator|(
name|batchesMatcher
operator|==
literal|null
operator|||
name|batchesMatcher
operator|.
name|matches
argument_list|(
name|item
operator|.
name|getBatches
argument_list|()
argument_list|)
operator|)
operator|&&
name|versionConflictsMatcher
operator|.
name|matches
argument_list|(
name|item
operator|.
name|getVersionConflicts
argument_list|()
argument_list|)
operator|&&
name|failuresMatcher
operator|.
name|matches
argument_list|(
name|item
operator|.
name|getIndexingFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|&&
name|reasonCancelledMatcher
operator|.
name|matches
argument_list|(
name|item
operator|.
name|getReasonCancelled
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|describeTo
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"indexed matches "
argument_list|)
operator|.
name|appendDescriptionOf
argument_list|(
name|updatedMatcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchesMatcher
operator|!=
literal|null
condition|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|" and batches matches "
argument_list|)
operator|.
name|appendDescriptionOf
argument_list|(
name|batchesMatcher
argument_list|)
expr_stmt|;
block|}
name|description
operator|.
name|appendText
argument_list|(
literal|" and versionConflicts matches "
argument_list|)
operator|.
name|appendDescriptionOf
argument_list|(
name|versionConflictsMatcher
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendText
argument_list|(
literal|" and failures size matches "
argument_list|)
operator|.
name|appendDescriptionOf
argument_list|(
name|failuresMatcher
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendText
argument_list|(
literal|" and reason cancelled matches "
argument_list|)
operator|.
name|appendDescriptionOf
argument_list|(
name|reasonCancelledMatcher
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

