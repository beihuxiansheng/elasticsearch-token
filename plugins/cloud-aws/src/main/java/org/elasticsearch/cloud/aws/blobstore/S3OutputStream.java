begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.aws.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|aws
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * S3OutputStream buffers data before flushing it to an underlying S3OutputStream.  */
end_comment

begin_class
DECL|class|S3OutputStream
specifier|public
specifier|abstract
class|class
name|S3OutputStream
extends|extends
name|OutputStream
block|{
comment|/**      * Limit of upload allowed by AWS S3.      */
DECL|field|MULTIPART_MAX_SIZE
specifier|protected
specifier|static
specifier|final
name|ByteSizeValue
name|MULTIPART_MAX_SIZE
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|5
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
decl_stmt|;
DECL|field|MULTIPART_MIN_SIZE
specifier|protected
specifier|static
specifier|final
name|ByteSizeValue
name|MULTIPART_MIN_SIZE
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|5
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
decl_stmt|;
DECL|field|blobStore
specifier|private
name|S3BlobStore
name|blobStore
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|blobName
specifier|private
name|String
name|blobName
decl_stmt|;
DECL|field|numberOfRetries
specifier|private
name|int
name|numberOfRetries
decl_stmt|;
DECL|field|serverSideEncryption
specifier|private
name|boolean
name|serverSideEncryption
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|flushCount
specifier|private
name|int
name|flushCount
init|=
literal|0
decl_stmt|;
DECL|method|S3OutputStream
specifier|public
name|S3OutputStream
parameter_list|(
name|S3BlobStore
name|blobStore
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|blobName
parameter_list|,
name|int
name|bufferSizeInBytes
parameter_list|,
name|int
name|numberOfRetries
parameter_list|,
name|boolean
name|serverSideEncryption
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
name|this
operator|.
name|blobName
operator|=
name|blobName
expr_stmt|;
name|this
operator|.
name|numberOfRetries
operator|=
name|numberOfRetries
expr_stmt|;
name|this
operator|.
name|serverSideEncryption
operator|=
name|serverSideEncryption
expr_stmt|;
if|if
condition|(
name|bufferSizeInBytes
operator|<
name|MULTIPART_MIN_SIZE
operator|.
name|getBytes
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Buffer size can't be smaller than "
operator|+
name|MULTIPART_MIN_SIZE
argument_list|)
throw|;
block|}
if|if
condition|(
name|bufferSizeInBytes
operator|>
name|MULTIPART_MAX_SIZE
operator|.
name|getBytes
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Buffer size can't be larger than "
operator|+
name|MULTIPART_MAX_SIZE
argument_list|)
throw|;
block|}
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSizeInBytes
index|]
expr_stmt|;
block|}
DECL|method|flush
specifier|public
specifier|abstract
name|void
name|flush
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|closing
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|flushBuffer
specifier|private
name|void
name|flushBuffer
parameter_list|(
name|boolean
name|closing
parameter_list|)
throws|throws
name|IOException
block|{
name|flush
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
name|closing
argument_list|)
expr_stmt|;
name|flushCount
operator|++
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
name|flushBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|buffer
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|flushBuffer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|getBlobStore
specifier|public
name|S3BlobStore
name|getBlobStore
parameter_list|()
block|{
return|return
name|blobStore
return|;
block|}
DECL|method|getBucketName
specifier|public
name|String
name|getBucketName
parameter_list|()
block|{
return|return
name|bucketName
return|;
block|}
DECL|method|getBlobName
specifier|public
name|String
name|getBlobName
parameter_list|()
block|{
return|return
name|blobName
return|;
block|}
DECL|method|getBufferSize
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|length
return|;
block|}
DECL|method|getNumberOfRetries
specifier|public
name|int
name|getNumberOfRetries
parameter_list|()
block|{
return|return
name|numberOfRetries
return|;
block|}
DECL|method|isServerSideEncryption
specifier|public
name|boolean
name|isServerSideEncryption
parameter_list|()
block|{
return|return
name|serverSideEncryption
return|;
block|}
DECL|method|getLength
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|getFlushCount
specifier|public
name|int
name|getFlushCount
parameter_list|()
block|{
return|return
name|flushCount
return|;
block|}
block|}
end_class

end_unit

