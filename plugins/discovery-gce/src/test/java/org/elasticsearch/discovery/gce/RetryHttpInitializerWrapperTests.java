begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery.gce
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|gce
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|googleapis
operator|.
name|testing
operator|.
name|auth
operator|.
name|oauth2
operator|.
name|MockGoogleCredential
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|http
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|json
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|json
operator|.
name|jackson2
operator|.
name|JacksonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|testing
operator|.
name|http
operator|.
name|MockHttpTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|testing
operator|.
name|http
operator|.
name|MockLowLevelHttpRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|testing
operator|.
name|http
operator|.
name|MockLowLevelHttpResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|client
operator|.
name|testing
operator|.
name|util
operator|.
name|MockSleeper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|Compute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|RetryHttpInitializerWrapperTests
specifier|public
class|class
name|RetryHttpInitializerWrapperTests
block|{
DECL|class|FailThenSuccessBackoffTransport
specifier|static
specifier|private
class|class
name|FailThenSuccessBackoffTransport
extends|extends
name|MockHttpTransport
block|{
DECL|field|lowLevelExecCalls
specifier|public
name|int
name|lowLevelExecCalls
decl_stmt|;
DECL|field|errorStatusCode
name|int
name|errorStatusCode
decl_stmt|;
DECL|field|callsBeforeSuccess
name|int
name|callsBeforeSuccess
decl_stmt|;
DECL|field|throwException
name|boolean
name|throwException
decl_stmt|;
DECL|method|FailThenSuccessBackoffTransport
specifier|protected
name|FailThenSuccessBackoffTransport
parameter_list|(
name|int
name|errorStatusCode
parameter_list|,
name|int
name|callsBeforeSuccess
parameter_list|)
block|{
name|this
operator|.
name|errorStatusCode
operator|=
name|errorStatusCode
expr_stmt|;
name|this
operator|.
name|callsBeforeSuccess
operator|=
name|callsBeforeSuccess
expr_stmt|;
name|this
operator|.
name|throwException
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|FailThenSuccessBackoffTransport
specifier|protected
name|FailThenSuccessBackoffTransport
parameter_list|(
name|int
name|errorStatusCode
parameter_list|,
name|int
name|callsBeforeSuccess
parameter_list|,
name|boolean
name|throwException
parameter_list|)
block|{
name|this
operator|.
name|errorStatusCode
operator|=
name|errorStatusCode
expr_stmt|;
name|this
operator|.
name|callsBeforeSuccess
operator|=
name|callsBeforeSuccess
expr_stmt|;
name|this
operator|.
name|throwException
operator|=
name|throwException
expr_stmt|;
block|}
DECL|field|retryableGetRequest
specifier|public
name|LowLevelHttpRequest
name|retryableGetRequest
init|=
operator|new
name|MockLowLevelHttpRequest
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LowLevelHttpResponse
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|lowLevelExecCalls
operator|++
expr_stmt|;
if|if
condition|(
name|lowLevelExecCalls
operator|<=
name|callsBeforeSuccess
condition|)
block|{
if|if
condition|(
name|throwException
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Test IOException"
argument_list|)
throw|;
block|}
comment|// Return failure on the first call
name|MockLowLevelHttpResponse
name|response
init|=
operator|new
name|MockLowLevelHttpResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setContent
argument_list|(
literal|"Request should fail"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatusCode
argument_list|(
name|errorStatusCode
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|// Return success on the second
name|MockLowLevelHttpResponse
name|response
init|=
operator|new
name|MockLowLevelHttpResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setStatusCode
argument_list|(
literal|200
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|buildRequest
specifier|public
name|LowLevelHttpRequest
name|buildRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|url
parameter_list|)
block|{
return|return
name|retryableGetRequest
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleRetry
specifier|public
name|void
name|testSimpleRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|FailThenSuccessBackoffTransport
name|fakeTransport
init|=
operator|new
name|FailThenSuccessBackoffTransport
argument_list|(
name|HttpStatusCodes
operator|.
name|STATUS_CODE_SERVER_ERROR
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|MockGoogleCredential
name|credential
init|=
operator|new
name|MockGoogleCredential
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockSleeper
name|mockSleeper
init|=
operator|new
name|MockSleeper
argument_list|()
decl_stmt|;
name|RetryHttpInitializerWrapper
name|retryHttpInitializerWrapper
init|=
operator|new
name|RetryHttpInitializerWrapper
argument_list|(
name|credential
argument_list|,
name|mockSleeper
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|Compute
name|client
init|=
operator|new
name|Compute
operator|.
name|Builder
argument_list|(
name|fakeTransport
argument_list|,
operator|new
name|JacksonFactory
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|setHttpRequestInitializer
argument_list|(
name|retryHttpInitializerWrapper
argument_list|)
operator|.
name|setApplicationName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpRequest
name|request
init|=
name|client
operator|.
name|getRequestFactory
argument_list|()
operator|.
name|buildRequest
argument_list|(
literal|"Get"
argument_list|,
operator|new
name|GenericUrl
argument_list|(
literal|"http://elasticsearch.com"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
name|request
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|mockSleeper
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetryWaitTooLong
specifier|public
name|void
name|testRetryWaitTooLong
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxWaitTime
init|=
literal|10
decl_stmt|;
name|int
name|maxRetryTimes
init|=
literal|50
decl_stmt|;
name|FailThenSuccessBackoffTransport
name|fakeTransport
init|=
operator|new
name|FailThenSuccessBackoffTransport
argument_list|(
name|HttpStatusCodes
operator|.
name|STATUS_CODE_SERVER_ERROR
argument_list|,
name|maxRetryTimes
argument_list|)
decl_stmt|;
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JacksonFactory
argument_list|()
decl_stmt|;
name|MockGoogleCredential
name|credential
init|=
operator|new
name|MockGoogleCredential
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockSleeper
name|oneTimeSleeper
init|=
operator|new
name|MockSleeper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|sleep
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|maxWaitTime
argument_list|)
expr_stmt|;
name|super
operator|.
name|sleep
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// important number, use this to get count
block|}
block|}
decl_stmt|;
name|RetryHttpInitializerWrapper
name|retryHttpInitializerWrapper
init|=
operator|new
name|RetryHttpInitializerWrapper
argument_list|(
name|credential
argument_list|,
name|oneTimeSleeper
argument_list|,
name|maxWaitTime
argument_list|)
decl_stmt|;
name|Compute
name|client
init|=
operator|new
name|Compute
operator|.
name|Builder
argument_list|(
name|fakeTransport
argument_list|,
name|jsonFactory
argument_list|,
literal|null
argument_list|)
operator|.
name|setHttpRequestInitializer
argument_list|(
name|retryHttpInitializerWrapper
argument_list|)
operator|.
name|setApplicationName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpRequest
name|request1
init|=
name|client
operator|.
name|getRequestFactory
argument_list|()
operator|.
name|buildRequest
argument_list|(
literal|"Get"
argument_list|,
operator|new
name|GenericUrl
argument_list|(
literal|"http://elasticsearch.com"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|request1
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Request should fail if wait too long"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpResponseException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|HttpStatusCodes
operator|.
name|STATUS_CODE_SERVER_ERROR
argument_list|)
argument_list|)
expr_stmt|;
comment|// should only retry once.
name|assertThat
argument_list|(
name|oneTimeSleeper
operator|.
name|getCount
argument_list|()
argument_list|,
name|lessThan
argument_list|(
name|maxRetryTimes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIOExceptionRetry
specifier|public
name|void
name|testIOExceptionRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|FailThenSuccessBackoffTransport
name|fakeTransport
init|=
operator|new
name|FailThenSuccessBackoffTransport
argument_list|(
name|HttpStatusCodes
operator|.
name|STATUS_CODE_SERVER_ERROR
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockGoogleCredential
name|credential
init|=
operator|new
name|MockGoogleCredential
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|MockSleeper
name|mockSleeper
init|=
operator|new
name|MockSleeper
argument_list|()
decl_stmt|;
name|RetryHttpInitializerWrapper
name|retryHttpInitializerWrapper
init|=
operator|new
name|RetryHttpInitializerWrapper
argument_list|(
name|credential
argument_list|,
name|mockSleeper
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|Compute
name|client
init|=
operator|new
name|Compute
operator|.
name|Builder
argument_list|(
name|fakeTransport
argument_list|,
operator|new
name|JacksonFactory
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|setHttpRequestInitializer
argument_list|(
name|retryHttpInitializerWrapper
argument_list|)
operator|.
name|setApplicationName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpRequest
name|request
init|=
name|client
operator|.
name|getRequestFactory
argument_list|()
operator|.
name|buildRequest
argument_list|(
literal|"Get"
argument_list|,
operator|new
name|GenericUrl
argument_list|(
literal|"http://elasticsearch.com"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
name|request
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|mockSleeper
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

