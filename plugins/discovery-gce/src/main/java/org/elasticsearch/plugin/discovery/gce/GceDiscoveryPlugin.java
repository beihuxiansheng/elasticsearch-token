begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.discovery.gce
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|discovery
operator|.
name|gce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|gce
operator|.
name|GceComputeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|gce
operator|.
name|GceModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|gce
operator|.
name|GceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|gce
operator|.
name|GceUnicastHostsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|GceDiscoveryPlugin
specifier|public
class|class
name|GceDiscoveryPlugin
extends|extends
name|Plugin
block|{
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|GceDiscoveryPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|GceDiscoveryPlugin
specifier|public
name|GceDiscoveryPlugin
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"discovery-gce"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"Cloud Google Compute Engine Discovery Plugin"
return|;
block|}
annotation|@
name|Override
DECL|method|nodeModules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|nodeModules
parameter_list|()
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDiscoveryAlive
argument_list|(
name|settings
argument_list|,
name|logger
argument_list|)
condition|)
block|{
name|modules
operator|.
name|add
argument_list|(
operator|new
name|GceModule
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
annotation|@
name|Override
DECL|method|nodeServices
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|nodeServices
parameter_list|()
block|{
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LifecycleComponent
argument_list|>
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDiscoveryAlive
argument_list|(
name|settings
argument_list|,
name|logger
argument_list|)
condition|)
block|{
name|services
operator|.
name|add
argument_list|(
name|GceModule
operator|.
name|getComputeServiceImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|DiscoveryModule
name|discoveryModule
parameter_list|)
block|{
if|if
condition|(
name|isDiscoveryAlive
argument_list|(
name|settings
argument_list|,
name|logger
argument_list|)
condition|)
block|{
name|discoveryModule
operator|.
name|addDiscoveryType
argument_list|(
literal|"gce"
argument_list|,
name|GceDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
name|discoveryModule
operator|.
name|addUnicastHostProvider
argument_list|(
name|GceUnicastHostsProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Check if discovery is meant to start      *      * @return true if we can start gce discovery features      */
DECL|method|isDiscoveryAlive
specifier|public
specifier|static
name|boolean
name|isDiscoveryAlive
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
comment|// User set discovery.type: gce
if|if
condition|(
name|GceDiscovery
operator|.
name|GCE
operator|.
name|equalsIgnoreCase
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"discovery.type"
argument_list|)
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"discovery.type not set to {}"
argument_list|,
name|GceDiscovery
operator|.
name|GCE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|checkProperty
argument_list|(
name|GceComputeService
operator|.
name|Fields
operator|.
name|PROJECT
argument_list|,
name|settings
operator|.
name|get
argument_list|(
name|GceComputeService
operator|.
name|Fields
operator|.
name|PROJECT
argument_list|)
argument_list|,
name|logger
argument_list|)
operator|==
literal|false
operator|||
name|checkProperty
argument_list|(
name|GceComputeService
operator|.
name|Fields
operator|.
name|ZONE
argument_list|,
name|settings
operator|.
name|getAsArray
argument_list|(
name|GceComputeService
operator|.
name|Fields
operator|.
name|ZONE
argument_list|)
argument_list|,
name|logger
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"one or more gce discovery settings are missing. "
operator|+
literal|"Check elasticsearch.yml file. Should have [{}] and [{}]."
argument_list|,
name|GceComputeService
operator|.
name|Fields
operator|.
name|PROJECT
argument_list|,
name|GceComputeService
operator|.
name|Fields
operator|.
name|ZONE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"all required properties for gce discovery are set!"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|checkProperty
specifier|private
specifier|static
name|boolean
name|checkProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasText
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} is not set."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|checkProperty
specifier|private
specifier|static
name|boolean
name|checkProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"{} is not set."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

