begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Create a simple "daemon controller", put it in the right place and check that it runs.  *  * Extends LuceneTestCase rather than ESTestCase as ESTestCase installs a system call filter, and that prevents the Spawner class doing its  * job. Also needs to run in a separate JVM to other tests that extend ESTestCase for the same reason.  */
end_comment

begin_class
DECL|class|SpawnerNoBootstrapTests
specifier|public
class|class
name|SpawnerNoBootstrapTests
extends|extends
name|LuceneTestCase
block|{
DECL|field|CONTROLLER_SOURCE
specifier|private
specifier|static
specifier|final
name|String
name|CONTROLLER_SOURCE
init|=
literal|"#!/bin/bash\n"
operator|+
literal|"\n"
operator|+
literal|"echo I am alive\n"
operator|+
literal|"\n"
operator|+
literal|"read SOMETHING\n"
decl_stmt|;
comment|/**      * Simplest case: a plugin with no controller daemon.      */
DECL|method|testNoControllerSpawn
specifier|public
name|void
name|testNoControllerSpawn
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|esHome
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"esHome"
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settingsBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|settingsBuilder
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|esHome
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|settingsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
decl_stmt|;
comment|// This plugin will NOT have a controller daemon
name|Path
name|plugin
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"a_plugin"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
try|try
init|(
name|Spawner
name|spawner
init|=
operator|new
name|Spawner
argument_list|()
init|)
block|{
name|spawner
operator|.
name|spawnNativePluginControllers
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spawner
operator|.
name|getProcesses
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Two plugins - one with a controller daemon and one without.      */
DECL|method|testControllerSpawn
specifier|public
name|void
name|testControllerSpawn
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// On Windows you cannot directly run a batch file - you have to run cmd.exe with the batch file
comment|// as an argument and that's out of the remit of the controller daemon process spawner.  If
comment|// you need to build on Windows, just don't run this test.  The process spawner itself will work
comment|// with native processes.
name|assumeFalse
argument_list|(
literal|"This test does not work on Windows"
argument_list|,
name|Constants
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|Path
name|esHome
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"esHome"
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settingsBuilder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|settingsBuilder
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|esHome
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|settingsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
decl_stmt|;
comment|// This plugin WILL have a controller daemon
name|Path
name|plugin
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"test_plugin"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|Path
name|controllerProgram
init|=
name|Spawner
operator|.
name|makeSpawnPath
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|createControllerProgram
argument_list|(
name|controllerProgram
argument_list|)
expr_stmt|;
comment|// This plugin will NOT have a controller daemon
name|Path
name|otherPlugin
init|=
name|environment
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"other_plugin"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|otherPlugin
argument_list|)
expr_stmt|;
name|Spawner
name|spawner
init|=
operator|new
name|Spawner
argument_list|()
decl_stmt|;
name|spawner
operator|.
name|spawnNativePluginControllers
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Process
argument_list|>
name|processes
init|=
name|spawner
operator|.
name|getProcesses
argument_list|()
decl_stmt|;
comment|// 1 because there should only be a reference in the list for the plugin that had the controller daemon, not the other plugin
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|processes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Process
name|process
init|=
name|processes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|stdoutReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
init|=
name|stdoutReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"I am alive"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|spawner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Fail if the process doesn't die within 1 second - usually it will be even quicker but it depends on OS scheduling
name|assertTrue
argument_list|(
name|process
operator|.
name|waitFor
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createControllerProgram
specifier|private
name|void
name|createControllerProgram
parameter_list|(
name|Path
name|outputFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|outputDir
init|=
name|outputFile
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|outputFile
argument_list|,
name|CONTROLLER_SOURCE
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_WRITE
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|GROUP_READ
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|GROUP_EXECUTE
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_READ
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_EXECUTE
argument_list|)
expr_stmt|;
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|outputFile
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

