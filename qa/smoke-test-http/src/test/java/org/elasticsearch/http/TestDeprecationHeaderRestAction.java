begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.http
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Enables testing {@code DeprecationRestHandler} via integration tests by guaranteeing a deprecated REST endpoint.  *<p>  * This adds an endpoint named<code>/_test_cluster/deprecated_settings</code> that touches specified settings given their names  * and returns their values.  */
end_comment

begin_class
DECL|class|TestDeprecationHeaderRestAction
specifier|public
class|class
name|TestDeprecationHeaderRestAction
extends|extends
name|BaseRestHandler
block|{
DECL|field|TEST_DEPRECATED_SETTING_TRUE1
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|TEST_DEPRECATED_SETTING_TRUE1
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"test.setting.deprecated.true1"
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Deprecated
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|TEST_DEPRECATED_SETTING_TRUE2
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|TEST_DEPRECATED_SETTING_TRUE2
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"test.setting.deprecated.true2"
argument_list|,
literal|true
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Deprecated
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|TEST_NOT_DEPRECATED_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Boolean
argument_list|>
name|TEST_NOT_DEPRECATED_SETTING
init|=
name|Setting
operator|.
name|boolSetting
argument_list|(
literal|"test.setting.not_deprecated"
argument_list|,
literal|false
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|NodeScope
argument_list|,
name|Setting
operator|.
name|Property
operator|.
name|Dynamic
argument_list|)
decl_stmt|;
DECL|field|SETTINGS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|SETTINGS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|settingsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|settingsMap
operator|.
name|put
argument_list|(
name|TEST_DEPRECATED_SETTING_TRUE1
operator|.
name|getKey
argument_list|()
argument_list|,
name|TEST_DEPRECATED_SETTING_TRUE1
argument_list|)
expr_stmt|;
name|settingsMap
operator|.
name|put
argument_list|(
name|TEST_DEPRECATED_SETTING_TRUE2
operator|.
name|getKey
argument_list|()
argument_list|,
name|TEST_DEPRECATED_SETTING_TRUE2
argument_list|)
expr_stmt|;
name|settingsMap
operator|.
name|put
argument_list|(
name|TEST_NOT_DEPRECATED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|TEST_NOT_DEPRECATED_SETTING
argument_list|)
expr_stmt|;
name|SETTINGS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|settingsMap
argument_list|)
expr_stmt|;
block|}
DECL|field|DEPRECATED_ENDPOINT
specifier|public
specifier|static
specifier|final
name|String
name|DEPRECATED_ENDPOINT
init|=
literal|"[/_test_cluster/deprecated_settings] exists for deprecated tests"
decl_stmt|;
DECL|field|DEPRECATED_USAGE
specifier|public
specifier|static
specifier|final
name|String
name|DEPRECATED_USAGE
init|=
literal|"[deprecated_settings] usage is deprecated. use [settings] instead"
decl_stmt|;
DECL|method|TestDeprecationHeaderRestAction
specifier|public
name|TestDeprecationHeaderRestAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|controller
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerAsDeprecatedHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_test_cluster/deprecated_settings"
argument_list|,
name|this
argument_list|,
name|DEPRECATED_ENDPOINT
argument_list|,
name|deprecationLogger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// List<String> casts
annotation|@
name|Override
DECL|method|prepareRequest
specifier|public
name|RestChannelConsumer
name|prepareRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|NodeClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|settings
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|request
operator|.
name|contentParser
argument_list|()
init|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
name|parser
operator|.
name|map
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|containsKey
argument_list|(
literal|"deprecated_settings"
argument_list|)
condition|)
block|{
name|deprecationLogger
operator|.
name|deprecated
argument_list|(
name|DEPRECATED_USAGE
argument_list|)
expr_stmt|;
name|settings
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|source
operator|.
name|get
argument_list|(
literal|"deprecated_settings"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|settings
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|source
operator|.
name|get
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|channel
lambda|->
block|{
specifier|final
name|XContentBuilder
name|builder
init|=
name|channel
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|setting
range|:
name|settings
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|setting
argument_list|,
name|SETTINGS
operator|.
name|get
argument_list|(
name|setting
argument_list|)
operator|.
name|getRaw
argument_list|(
name|this
operator|.
name|settings
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|BytesRestResponse
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|;
block|}
block|}
end_class

end_unit

