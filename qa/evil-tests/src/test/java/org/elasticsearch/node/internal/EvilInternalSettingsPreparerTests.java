begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.node.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"modifies system properties intentionally"
argument_list|)
DECL|class|EvilInternalSettingsPreparerTests
specifier|public
class|class
name|EvilInternalSettingsPreparerTests
extends|extends
name|ESTestCase
block|{
DECL|field|savedProperties
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|savedProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|baseEnvSettings
name|Settings
name|baseEnvSettings
decl_stmt|;
annotation|@
name|Before
DECL|method|saveSettingsSystemProperties
specifier|public
name|void
name|saveSettingsSystemProperties
parameter_list|()
block|{
comment|// clear out any properties the settings preparer may look for
name|savedProperties
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|propObj
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|property
init|=
operator|(
name|String
operator|)
name|propObj
decl_stmt|;
comment|// NOTE: these prefixes are prefixes of the defaults, so both are handled here
for|for
control|(
name|String
name|prefix
range|:
name|InternalSettingsPreparer
operator|.
name|PROPERTY_PREFIXES
control|)
block|{
if|if
condition|(
name|property
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|savedProperties
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|name
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|savedProperties
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|property
range|:
name|savedProperties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|restoreSettingsSystemProperties
specifier|public
name|void
name|restoreSettingsSystemProperties
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|property
range|:
name|savedProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|,
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|createBaseEnvSettings
specifier|public
name|void
name|createBaseEnvSettings
parameter_list|()
block|{
name|baseEnvSettings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|clearBaseEnvSettings
specifier|public
name|void
name|clearBaseEnvSettings
parameter_list|()
block|{
name|baseEnvSettings
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testIgnoreSystemProperties
specifier|public
name|void
name|testIgnoreSystemProperties
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.node.zone"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.zone"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|put
argument_list|(
name|baseEnvSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|env
init|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Should use setting from the system property
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"node.zone"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalSettingsPreparer
operator|.
name|IGNORE_SYSTEM_PROPERTIES_SETTING
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.zone"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|put
argument_list|(
name|baseEnvSettings
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|env
operator|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Should use setting from the system property
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"node.zone"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.node.zone"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNameSettingsPreference
specifier|public
name|void
name|testNameSettingsPreference
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
literal|"sys-prop-name"
argument_list|)
expr_stmt|;
comment|// Test system property overrides node.name
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"node-name"
argument_list|)
operator|.
name|put
argument_list|(
name|baseEnvSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|env
init|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"sys-prop-name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test name in settings overrides sys prop and node.name
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"name-in-settings"
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"node-name"
argument_list|)
operator|.
name|put
argument_list|(
name|baseEnvSettings
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|env
operator|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"name-in-settings"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test only node.name in settings
name|System
operator|.
name|clearProperty
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
literal|"node-name"
argument_list|)
operator|.
name|put
argument_list|(
name|baseEnvSettings
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|env
operator|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"node-name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test no name at all results in name being set
name|env
operator|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|baseEnvSettings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|not
argument_list|(
literal|"name-in-settings"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|not
argument_list|(
literal|"sys-prop-name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|not
argument_list|(
literal|"node-name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|env
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

