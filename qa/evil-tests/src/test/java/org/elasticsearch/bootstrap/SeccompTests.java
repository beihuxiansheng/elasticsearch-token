begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_comment
comment|/** Simple tests seccomp filter is working. */
end_comment

begin_class
DECL|class|SeccompTests
specifier|public
class|class
name|SeccompTests
extends|extends
name|ESTestCase
block|{
comment|/** command to try to run in tests */
DECL|field|EXECUTABLE
specifier|static
specifier|final
name|String
name|EXECUTABLE
init|=
name|Constants
operator|.
name|WINDOWS
condition|?
literal|"calc"
else|:
literal|"ls"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"requires seccomp filter installation"
argument_list|,
name|Natives
operator|.
name|isSeccompInstalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// otherwise security manager will block the execution, no fun
name|assumeTrue
argument_list|(
literal|"cannot test with security manager enabled"
argument_list|,
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// otherwise, since we don't have TSYNC support, rules are not applied to the test thread
comment|// (randomizedrunner class initialization happens in its own thread, after the test thread is created)
comment|// instead we just forcefully run it for the test thread here.
if|if
condition|(
operator|!
name|JNANatives
operator|.
name|LOCAL_SECCOMP_ALL
condition|)
block|{
try|try
block|{
name|Seccomp
operator|.
name|init
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unable to forcefully apply seccomp to test thread"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testNoExecution
specifier|public
name|void
name|testNoExecution
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|EXECUTABLE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to execute!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// we can't guarantee how its converted, currently its an IOException, like this:
comment|/*             java.io.IOException: Cannot run program "ls": error=13, Permission denied                     at __randomizedtesting.SeedInfo.seed([65E6C4BED11899E:FC6E1CA6AA2DB634]:0)                     at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)                     at java.lang.Runtime.exec(Runtime.java:620)                     ...                   Caused by: java.io.IOException: error=13, Permission denied                     at java.lang.UNIXProcess.forkAndExec(Native Method)                     at java.lang.UNIXProcess.<init>(UNIXProcess.java:248)                     at java.lang.ProcessImpl.start(ProcessImpl.java:134)                     at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)                     ...              */
block|}
block|}
comment|// make sure thread inherits this too (its documented that way)
DECL|method|testNoExecutionFromThread
specifier|public
name|void
name|testNoExecutionFromThread
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|EXECUTABLE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have been able to execute!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// ok
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

