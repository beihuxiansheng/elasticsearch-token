begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_comment
comment|/** Tests for Jarhell that change very important system properties... very evil! */
end_comment

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"modifies system properties intentionally"
argument_list|)
DECL|class|EvilJarHellTests
specifier|public
class|class
name|EvilJarHellTests
extends|extends
name|ESTestCase
block|{
DECL|method|makeJar
name|URL
name|makeJar
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|Manifest
name|manifest
parameter_list|,
name|String
modifier|...
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|jarpath
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|out
decl_stmt|;
if|if
condition|(
name|manifest
operator|==
literal|null
condition|)
block|{
name|out
operator|=
operator|new
name|JarOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|jarpath
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|JarOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|jarpath
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
argument_list|,
name|manifest
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|out
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|jarpath
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
DECL|method|testBootclasspathLeniency
specifier|public
name|void
name|testBootclasspathLeniency
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|previousJavaHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.home"
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
literal|null
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|,
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"bar.jar"
argument_list|,
literal|null
argument_list|,
literal|"DuplicateClass.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.home"
argument_list|,
name|previousJavaHome
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRequiredJDKVersionIsOK
specifier|public
name|void
name|testRequiredJDKVersionIsOK
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|previousJavaVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.specification.version"
argument_list|,
literal|"1.7"
argument_list|)
expr_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attributes
name|attributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0.0"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"X-Compile-Target-JDK"
argument_list|)
argument_list|,
literal|"1.7"
argument_list|)
expr_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
name|manifest
argument_list|,
literal|"Foo.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.specification.version"
argument_list|,
name|previousJavaVersion
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadJDKVersionProperty
specifier|public
name|void
name|testBadJDKVersionProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|previousJavaVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.specification.version"
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attributes
name|attributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0.0"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"X-Compile-Target-JDK"
argument_list|)
argument_list|,
literal|"1.7"
argument_list|)
expr_stmt|;
name|URL
index|[]
name|jars
init|=
block|{
name|makeJar
argument_list|(
name|dir
argument_list|,
literal|"foo.jar"
argument_list|,
name|manifest
argument_list|,
literal|"Foo.class"
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|JarHell
operator|.
name|checkJarHell
argument_list|(
name|jars
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.specification.version"
argument_list|,
name|previousJavaVersion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

