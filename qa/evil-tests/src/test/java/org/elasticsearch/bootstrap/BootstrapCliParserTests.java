begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|joptsimple
operator|.
name|OptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|CommandTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|ExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|UserError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|MockTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK_AND_EXIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
operator|.
name|CliTool
operator|.
name|ExitStatus
operator|.
name|USAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"modifies system properties intentionally"
argument_list|)
DECL|class|BootstrapCliParserTests
specifier|public
class|class
name|BootstrapCliParserTests
extends|extends
name|CommandTestCase
block|{
annotation|@
name|Override
DECL|method|newCommand
specifier|protected
name|Command
name|newCommand
parameter_list|()
block|{
return|return
operator|new
name|BootstrapCliParser
argument_list|()
return|;
block|}
DECL|field|propertiesToClear
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|propertiesToClear
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|this
operator|.
name|properties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|clearProperties
specifier|public
name|void
name|clearProperties
parameter_list|()
block|{
for|for
control|(
name|String
name|property
range|:
name|propertiesToClear
control|)
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
name|propertiesToClear
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"properties leaked"
argument_list|,
name|properties
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertShouldRun
name|void
name|assertShouldRun
parameter_list|(
name|boolean
name|shouldRun
parameter_list|)
block|{
name|BootstrapCliParser
name|parser
init|=
operator|(
name|BootstrapCliParser
operator|)
name|command
decl_stmt|;
name|assertEquals
argument_list|(
name|shouldRun
argument_list|,
name|parser
operator|.
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersion
specifier|public
name|void
name|testVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|output
init|=
name|execute
argument_list|(
literal|"-V"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|Build
operator|.
name|CURRENT
operator|.
name|shortHash
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|Build
operator|.
name|CURRENT
operator|.
name|date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|reset
argument_list|()
expr_stmt|;
name|output
operator|=
name|execute
argument_list|(
literal|"--version"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|Build
operator|.
name|CURRENT
operator|.
name|shortHash
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|Build
operator|.
name|CURRENT
operator|.
name|date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testPidfile
specifier|public
name|void
name|testPidfile
parameter_list|()
throws|throws
name|Exception
block|{
name|registerProperties
argument_list|(
literal|"es.pidfile"
argument_list|)
expr_stmt|;
comment|// missing argument
name|OptionException
name|e
init|=
name|expectThrows
argument_list|(
name|OptionException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|execute
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Option p/pidfile requires an argument"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// good cases
name|terminal
operator|.
name|reset
argument_list|()
expr_stmt|;
name|execute
argument_list|(
literal|"--pidfile"
argument_list|,
literal|"/tmp/pid"
argument_list|)
expr_stmt|;
name|assertSystemProperty
argument_list|(
literal|"es.pidfile"
argument_list|,
literal|"/tmp/pid"
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.pidfile"
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|reset
argument_list|()
expr_stmt|;
name|execute
argument_list|(
literal|"-p"
argument_list|,
literal|"/tmp/pid"
argument_list|)
expr_stmt|;
name|assertSystemProperty
argument_list|(
literal|"es.pidfile"
argument_list|,
literal|"/tmp/pid"
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDaemonize
specifier|public
name|void
name|testNoDaemonize
parameter_list|()
throws|throws
name|Exception
block|{
name|registerProperties
argument_list|(
literal|"es.foreground"
argument_list|)
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
name|assertSystemProperty
argument_list|(
literal|"es.foreground"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testDaemonize
specifier|public
name|void
name|testDaemonize
parameter_list|()
throws|throws
name|Exception
block|{
name|registerProperties
argument_list|(
literal|"es.foreground"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|assertSystemProperty
argument_list|(
literal|"es.foreground"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.foreground"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"--daemonize"
argument_list|)
expr_stmt|;
name|assertSystemProperty
argument_list|(
literal|"es.foreground"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfig
specifier|public
name|void
name|testConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|registerProperties
argument_list|(
literal|"es.foo"
argument_list|,
literal|"es.spam"
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"-Efoo=bar"
argument_list|,
literal|"-Espam=eggs"
argument_list|)
expr_stmt|;
name|assertSystemProperty
argument_list|(
literal|"es.foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertSystemProperty
argument_list|(
literal|"es.spam"
argument_list|,
literal|"eggs"
argument_list|)
expr_stmt|;
name|assertShouldRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfigMalformed
specifier|public
name|void
name|testConfigMalformed
parameter_list|()
throws|throws
name|Exception
block|{
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|execute
argument_list|(
literal|"-Efoo"
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Malformed elasticsearch setting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|registerProperties
specifier|private
name|void
name|registerProperties
parameter_list|(
name|String
modifier|...
name|systemProperties
parameter_list|)
block|{
name|propertiesToClear
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|systemProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSystemProperty
specifier|private
name|void
name|assertSystemProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected property %s to be %s, terminal output was %s"
argument_list|,
name|name
argument_list|,
name|expectedValue
argument_list|,
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|is
argument_list|(
name|expectedValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

