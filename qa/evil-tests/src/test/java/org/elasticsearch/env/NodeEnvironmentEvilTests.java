begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.env
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|env
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|PosixPermissionsResetter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_class
DECL|class|NodeEnvironmentEvilTests
specifier|public
class|class
name|NodeEnvironmentEvilTests
extends|extends
name|ESTestCase
block|{
DECL|field|isPosix
specifier|private
specifier|static
name|boolean
name|isPosix
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|checkPosix
specifier|public
specifier|static
name|void
name|checkPosix
parameter_list|()
throws|throws
name|IOException
block|{
name|isPosix
operator|=
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|createTempFile
argument_list|()
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
DECL|method|testMissingWritePermission
specifier|public
name|void
name|testMissingWritePermission
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"posix filesystem"
argument_list|,
name|isPosix
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|tempPaths
init|=
name|tmpPaths
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|randomFrom
argument_list|(
name|tempPaths
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|PosixPermissionsResetter
name|attr
init|=
operator|new
name|PosixPermissionsResetter
argument_list|(
name|path
argument_list|)
init|)
block|{
name|attr
operator|.
name|setPermissions
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_READ
argument_list|,
name|PosixFilePermission
operator|.
name|GROUP_READ
argument_list|,
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempPaths
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IOException
name|ioException
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ioException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioException
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMissingWritePermissionOnIndex
specifier|public
name|void
name|testMissingWritePermissionOnIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"posix filesystem"
argument_list|,
name|isPosix
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|tempPaths
init|=
name|tmpPaths
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|randomFrom
argument_list|(
name|tempPaths
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|fooIndex
init|=
name|path
operator|.
name|resolve
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|fooIndex
argument_list|)
expr_stmt|;
try|try
init|(
name|PosixPermissionsResetter
name|attr
init|=
operator|new
name|PosixPermissionsResetter
argument_list|(
name|fooIndex
argument_list|)
init|)
block|{
name|attr
operator|.
name|setPermissions
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_READ
argument_list|,
name|PosixFilePermission
operator|.
name|GROUP_READ
argument_list|,
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempPaths
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IOException
name|ioException
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ioException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioException
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"failed to write in data directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMissingWritePermissionOnShard
specifier|public
name|void
name|testMissingWritePermissionOnShard
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
literal|"posix filesystem"
argument_list|,
name|isPosix
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|tempPaths
init|=
name|tmpPaths
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|PathUtils
operator|.
name|get
argument_list|(
name|randomFrom
argument_list|(
name|tempPaths
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|fooIndex
init|=
name|path
operator|.
name|resolve
argument_list|(
literal|"nodes"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|fooShard
init|=
name|fooIndex
operator|.
name|resolve
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
name|Path
name|fooShardIndex
init|=
name|fooShard
operator|.
name|resolve
argument_list|(
literal|"index"
argument_list|)
decl_stmt|;
name|Path
name|fooShardTranslog
init|=
name|fooShard
operator|.
name|resolve
argument_list|(
literal|"translog"
argument_list|)
decl_stmt|;
name|Path
name|fooShardState
init|=
name|fooShard
operator|.
name|resolve
argument_list|(
literal|"_state"
argument_list|)
decl_stmt|;
name|Path
name|pick
init|=
name|randomFrom
argument_list|(
name|fooShard
argument_list|,
name|fooShardIndex
argument_list|,
name|fooShardTranslog
argument_list|,
name|fooShardState
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|pick
argument_list|)
expr_stmt|;
try|try
init|(
name|PosixPermissionsResetter
name|attr
init|=
operator|new
name|PosixPermissionsResetter
argument_list|(
name|pick
argument_list|)
init|)
block|{
name|attr
operator|.
name|setPermissions
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_READ
argument_list|,
name|PosixFilePermission
operator|.
name|GROUP_READ
argument_list|,
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tempPaths
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IOException
name|ioException
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ioException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioException
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"failed to write in data directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

