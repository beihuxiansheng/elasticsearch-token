begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ParametersFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Jimfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|MockTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|UserError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtilsForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|PosixPermissionsResetter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributeView
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"*"
argument_list|)
DECL|class|InstallPluginCommandTests
specifier|public
class|class
name|InstallPluginCommandTests
extends|extends
name|ESTestCase
block|{
DECL|field|temp
specifier|private
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|temp
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|isPosix
specifier|private
specifier|final
name|boolean
name|isPosix
decl_stmt|;
DECL|field|isReal
specifier|private
specifier|final
name|boolean
name|isReal
decl_stmt|;
DECL|field|javaIoTmpdir
specifier|private
specifier|final
name|String
name|javaIoTmpdir
decl_stmt|;
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"sets java.io.tmpdir"
argument_list|)
DECL|method|InstallPluginCommandTests
specifier|public
name|InstallPluginCommandTests
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|temp
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|temp
operator|=
name|temp
expr_stmt|;
name|this
operator|.
name|isPosix
operator|=
name|fs
operator|.
name|supportedFileAttributeViews
argument_list|()
operator|.
name|contains
argument_list|(
literal|"posix"
argument_list|)
expr_stmt|;
name|this
operator|.
name|isReal
operator|=
name|fs
operator|==
name|PathUtils
operator|.
name|getDefaultFileSystem
argument_list|()
expr_stmt|;
name|PathUtilsForTesting
operator|.
name|installMock
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|javaIoTmpdir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
name|temp
operator|.
name|apply
argument_list|(
literal|"tmpdir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"resets java.io.tmpdir"
argument_list|)
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
name|javaIoTmpdir
argument_list|)
expr_stmt|;
name|PathUtilsForTesting
operator|.
name|teardown
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ParametersFactory
DECL|method|parameters
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
class|class
name|Parameter
block|{
specifier|private
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|temp
decl_stmt|;
specifier|public
name|Parameter
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|String
name|root
parameter_list|)
block|{
name|this
argument_list|(
name|fileSystem
argument_list|,
name|s
lambda|->
block|{
try|try
block|{
return|return
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|fileSystem
operator|.
name|getPath
argument_list|(
name|root
argument_list|)
argument_list|,
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Parameter
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|temp
parameter_list|)
block|{
name|this
operator|.
name|fileSystem
operator|=
name|fileSystem
expr_stmt|;
name|this
operator|.
name|temp
operator|=
name|temp
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Parameter
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|Parameter
argument_list|(
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|Configuration
operator|.
name|windows
argument_list|()
argument_list|)
argument_list|,
literal|"c:\\"
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|Parameter
argument_list|(
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|toPosix
argument_list|(
name|Configuration
operator|.
name|osX
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|Parameter
argument_list|(
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|toPosix
argument_list|(
name|Configuration
operator|.
name|unix
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|Parameter
argument_list|(
name|PathUtils
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|,
name|LuceneTestCase
operator|::
name|createTempDir
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|parameters
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|new
name|Object
index|[]
block|{
name|p
operator|.
name|fileSystem
block|,
name|p
operator|.
name|temp
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toPosix
specifier|private
specifier|static
name|Configuration
name|toPosix
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
return|return
name|configuration
operator|.
name|toBuilder
argument_list|()
operator|.
name|setAttributeViews
argument_list|(
literal|"basic"
argument_list|,
literal|"owner"
argument_list|,
literal|"posix"
argument_list|,
literal|"unix"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Creates a test environment with bin, config and plugins directories. */
DECL|method|createEnv
specifier|static
name|Environment
name|createEnv
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|temp
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|home
init|=
name|temp
operator|.
name|apply
argument_list|(
literal|"install-plugin-command-tests"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"elasticsearch.yml"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|plugins
init|=
name|Files
operator|.
name|createDirectories
argument_list|(
name|home
operator|.
name|resolve
argument_list|(
literal|"plugins"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|plugins
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|home
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
return|;
block|}
DECL|method|createPluginDir
specifier|static
name|Path
name|createPluginDir
parameter_list|(
name|Function
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|temp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|temp
operator|.
name|apply
argument_list|(
literal|"pluginDir"
argument_list|)
return|;
block|}
comment|/** creates a fake jar file with empty class files */
DECL|method|writeJar
specifier|static
name|void
name|writeJar
parameter_list|(
name|Path
name|jar
parameter_list|,
name|String
modifier|...
name|classes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ZipOutputStream
name|stream
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|jar
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|clazz
range|:
name|classes
control|)
block|{
name|stream
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|clazz
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no package names, just support simple classes
block|}
block|}
block|}
DECL|method|writeZip
specifier|static
name|String
name|writeZip
parameter_list|(
name|Path
name|structure
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|zip
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|structure
operator|.
name|getFileName
argument_list|()
operator|+
literal|".zip"
argument_list|)
decl_stmt|;
try|try
init|(
name|ZipOutputStream
name|stream
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|zip
argument_list|)
argument_list|)
init|)
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|structure
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|target
init|=
operator|(
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
operator|+
literal|"/"
operator|)
operator|+
name|structure
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|stream
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|file
argument_list|,
name|stream
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|zip
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** creates a plugin .zip and returns the url for testing */
DECL|method|createPlugin
specifier|static
name|String
name|createPlugin
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|structure
parameter_list|)
throws|throws
name|IOException
block|{
name|PluginTestUtil
operator|.
name|writeProperties
argument_list|(
name|structure
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
name|name
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|)
expr_stmt|;
name|writeJar
argument_list|(
name|structure
operator|.
name|resolve
argument_list|(
literal|"plugin.jar"
argument_list|)
argument_list|,
literal|"FakePlugin"
argument_list|)
expr_stmt|;
return|return
name|writeZip
argument_list|(
name|structure
argument_list|,
literal|"elasticsearch"
argument_list|)
return|;
block|}
DECL|method|installPlugin
specifier|static
name|MockTerminal
name|installPlugin
parameter_list|(
name|String
name|pluginUrl
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|installPlugin
argument_list|(
name|pluginUrl
argument_list|,
name|env
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|installPlugin
specifier|static
name|MockTerminal
name|installPlugin
parameter_list|(
name|String
name|pluginUrl
parameter_list|,
name|Environment
name|env
parameter_list|,
name|boolean
name|jarHellCheck
parameter_list|)
throws|throws
name|Exception
block|{
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
operator|new
name|InstallPluginCommand
argument_list|(
name|env
argument_list|)
block|{
annotation|@
name|Override
name|void
name|jarHellCheck
parameter_list|(
name|Path
name|candidate
parameter_list|,
name|Path
name|pluginsDir
parameter_list|,
name|boolean
name|isolated
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|jarHellCheck
condition|)
block|{
name|super
operator|.
name|jarHellCheck
argument_list|(
name|candidate
argument_list|,
name|pluginsDir
argument_list|,
name|isolated
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|execute
argument_list|(
name|terminal
argument_list|,
name|pluginUrl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|terminal
return|;
block|}
DECL|method|assertPlugin
name|void
name|assertPlugin
parameter_list|(
name|String
name|name
parameter_list|,
name|Path
name|original
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|got
init|=
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"dir "
operator|+
name|name
operator|+
literal|" exists"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|got
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPosix
condition|)
block|{
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
init|=
name|Files
operator|.
name|getPosixFilePermissions
argument_list|(
name|got
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|perms
argument_list|,
name|containsInAnyOrder
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|,
name|PosixFilePermission
operator|.
name|OWNER_WRITE
argument_list|,
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|,
name|PosixFilePermission
operator|.
name|GROUP_READ
argument_list|,
name|PosixFilePermission
operator|.
name|GROUP_EXECUTE
argument_list|,
name|PosixFilePermission
operator|.
name|OTHERS_READ
argument_list|,
name|PosixFilePermission
operator|.
name|OTHERS_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"jar was copied"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|got
operator|.
name|resolve
argument_list|(
literal|"plugin.jar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"bin was not copied"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|got
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"config was not copied"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|got
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|original
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
argument_list|)
condition|)
block|{
name|Path
name|binDir
init|=
name|env
operator|.
name|binFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"bin dir exists"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|binDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bin is a dir"
argument_list|,
name|Files
operator|.
name|isDirectory
argument_list|(
name|binDir
argument_list|)
argument_list|)
expr_stmt|;
name|PosixFileAttributes
name|binAttributes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isPosix
condition|)
block|{
name|binAttributes
operator|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|env
operator|.
name|binFile
argument_list|()
argument_list|,
name|PosixFileAttributes
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|binDir
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|stream
control|)
block|{
name|assertFalse
argument_list|(
literal|"not a dir"
argument_list|,
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPosix
condition|)
block|{
name|PosixFileAttributes
name|attributes
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|file
argument_list|,
name|PosixFileAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|expectedPermissions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|binAttributes
operator|.
name|permissions
argument_list|()
argument_list|)
decl_stmt|;
name|expectedPermissions
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|)
expr_stmt|;
name|expectedPermissions
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|GROUP_EXECUTE
argument_list|)
expr_stmt|;
name|expectedPermissions
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_EXECUTE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPermissions
argument_list|,
name|attributes
operator|.
name|permissions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|original
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
argument_list|)
condition|)
block|{
name|Path
name|configDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"config dir exists"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|configDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"config is a dir"
argument_list|,
name|Files
operator|.
name|isDirectory
argument_list|(
name|configDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPosix
condition|)
block|{
name|Path
name|configRoot
init|=
name|env
operator|.
name|configFile
argument_list|()
decl_stmt|;
name|PosixFileAttributes
name|configAttributes
init|=
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|configRoot
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
operator|.
name|readAttributes
argument_list|()
decl_stmt|;
name|PosixFileAttributes
name|attributes
init|=
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|configDir
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
operator|.
name|readAttributes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|attributes
operator|.
name|owner
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|configAttributes
operator|.
name|owner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attributes
operator|.
name|group
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|configAttributes
operator|.
name|group
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|configDir
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|stream
control|)
block|{
name|assertFalse
argument_list|(
literal|"not a dir"
argument_list|,
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInstallCleaned
name|void
name|assertInstallCleaned
parameter_list|(
name|Environment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|stream
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|".installing"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Installation dir still exists, "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testSomethingWorks
specifier|public
name|void
name|testSomethingWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpaceInUrl
specifier|public
name|void
name|testSpaceInUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|Path
name|pluginZipWithSpaces
init|=
name|createTempFile
argument_list|(
literal|"foo bar"
argument_list|,
literal|".zip"
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|URL
argument_list|(
name|pluginZip
argument_list|)
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|pluginZipWithSpaces
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
name|installPlugin
argument_list|(
name|pluginZipWithSpaces
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testMalformedUrlNotMaven
specifier|public
name|void
name|testMalformedUrlNotMaven
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
comment|// has two colons, so it appears similar to maven coordinates
name|MalformedURLException
name|e
init|=
name|expectThrows
argument_list|(
name|MalformedURLException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
literal|"://host:1234"
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"no protocol"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPluginsDirMissing
specifier|public
name|void
name|testPluginsDirMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testPluginsDirReadOnly
specifier|public
name|void
name|testPluginsDirReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"posix and filesystem"
argument_list|,
name|isPosix
operator|&&
name|isReal
argument_list|)
expr_stmt|;
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
try|try
init|(
name|PosixPermissionsResetter
name|pluginsAttrs
init|=
operator|new
name|PosixPermissionsResetter
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
argument_list|)
init|)
block|{
name|pluginsAttrs
operator|.
name|setPermissions
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|IOException
name|e
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|env
operator|.
name|pluginsFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuiltinModule
specifier|public
name|void
name|testBuiltinModule
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"lang-groovy"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is a system module"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testJarHell
specifier|public
name|void
name|testJarHell
parameter_list|()
throws|throws
name|Exception
block|{
comment|// jar hell test needs a real filesystem
name|assumeTrue
argument_list|(
literal|"real filesystem"
argument_list|,
name|isReal
argument_list|)
expr_stmt|;
name|Environment
name|environment
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDirectory
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|writeJar
argument_list|(
name|pluginDirectory
operator|.
name|resolve
argument_list|(
literal|"other.jar"
argument_list|)
argument_list|,
literal|"FakePlugin"
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDirectory
argument_list|)
decl_stmt|;
comment|// adds plugin.jar with FakePlugin
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|environment
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jar hell"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|environment
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsolatedPlugins
specifier|public
name|void
name|testIsolatedPlugins
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
comment|// these both share the same FakePlugin class
name|Path
name|pluginDir1
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|String
name|pluginZip1
init|=
name|createPlugin
argument_list|(
literal|"fake1"
argument_list|,
name|pluginDir1
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip1
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|Path
name|pluginDir2
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|String
name|pluginZip2
init|=
name|createPlugin
argument_list|(
literal|"fake2"
argument_list|,
name|pluginDir2
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip2
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake1"
argument_list|,
name|pluginDir1
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake2"
argument_list|,
name|pluginDir2
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testPurgatoryJarHell
specifier|public
name|void
name|testPurgatoryJarHell
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"real filesystem"
argument_list|,
name|isReal
argument_list|)
expr_stmt|;
name|Environment
name|environment
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir1
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|PluginTestUtil
operator|.
name|writeProperties
argument_list|(
name|pluginDir1
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
literal|"fake1"
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|,
literal|"isolated"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|writeJar
argument_list|(
name|pluginDir1
operator|.
name|resolve
argument_list|(
literal|"plugin.jar"
argument_list|)
argument_list|,
literal|"FakePlugin"
argument_list|)
expr_stmt|;
name|String
name|pluginZip1
init|=
name|writeZip
argument_list|(
name|pluginDir1
argument_list|,
literal|"elasticsearch"
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip1
argument_list|,
name|environment
argument_list|)
expr_stmt|;
name|Path
name|pluginDir2
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|PluginTestUtil
operator|.
name|writeProperties
argument_list|(
name|pluginDir2
argument_list|,
literal|"description"
argument_list|,
literal|"fake desc"
argument_list|,
literal|"name"
argument_list|,
literal|"fake2"
argument_list|,
literal|"version"
argument_list|,
literal|"1.0"
argument_list|,
literal|"elasticsearch.version"
argument_list|,
name|Version
operator|.
name|CURRENT
operator|.
name|toString
argument_list|()
argument_list|,
literal|"java.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|,
literal|"classname"
argument_list|,
literal|"FakePlugin"
argument_list|,
literal|"isolated"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|writeJar
argument_list|(
name|pluginDir2
operator|.
name|resolve
argument_list|(
literal|"plugin.jar"
argument_list|)
argument_list|,
literal|"FakePlugin"
argument_list|)
expr_stmt|;
name|String
name|pluginZip2
init|=
name|writeZip
argument_list|(
name|pluginDir2
argument_list|,
literal|"elasticsearch"
argument_list|)
decl_stmt|;
name|IllegalStateException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip2
argument_list|,
name|environment
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jar hell"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|environment
argument_list|)
expr_stmt|;
block|}
DECL|method|testExistingPlugin
specifier|public
name|void
name|testExistingPlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"already exists"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBin
specifier|public
name|void
name|testBin
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|binDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|binDir
operator|.
name|resolve
argument_list|(
literal|"somescript"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinNotDir
specifier|public
name|void
name|testBinNotDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|binDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not a directory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinContainsDir
specifier|public
name|void
name|testBinContainsDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|dirInBinDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dirInBinDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dirInBinDir
operator|.
name|resolve
argument_list|(
literal|"somescript"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Directories not allowed in bin dir for plugin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinConflict
specifier|public
name|void
name|testBinConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|binDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|binDir
operator|.
name|resolve
argument_list|(
literal|"somescript"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"elasticsearch"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|FileAlreadyExistsException
name|e
init|=
name|expectThrows
argument_list|(
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|env
operator|.
name|binFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinPermissions
specifier|public
name|void
name|testBinPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"posix filesystem"
argument_list|,
name|isPosix
argument_list|)
expr_stmt|;
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|binDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|binDir
operator|.
name|resolve
argument_list|(
literal|"somescript"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
try|try
init|(
name|PosixPermissionsResetter
name|binAttrs
init|=
operator|new
name|PosixPermissionsResetter
argument_list|(
name|env
operator|.
name|binFile
argument_list|()
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
init|=
name|binAttrs
operator|.
name|getCopyPermissions
argument_list|()
decl_stmt|;
comment|// make sure at least one execute perm is missing, so we know we forced it during installation
name|perms
operator|.
name|remove
argument_list|(
name|PosixFilePermission
operator|.
name|GROUP_EXECUTE
argument_list|)
expr_stmt|;
name|binAttrs
operator|.
name|setPermissions
argument_list|(
name|perms
argument_list|)
expr_stmt|;
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testConfig
specifier|public
name|void
name|testConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|configDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|configDir
operator|.
name|resolve
argument_list|(
literal|"custom.yaml"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testExistingConfig
specifier|public
name|void
name|testExistingConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|envConfigDir
init|=
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"fake"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|envConfigDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|envConfigDir
operator|.
name|resolve
argument_list|(
literal|"custom.yaml"
argument_list|)
argument_list|,
literal|"existing config"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|configDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configDir
operator|.
name|resolve
argument_list|(
literal|"custom.yaml"
argument_list|)
argument_list|,
literal|"new config"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|configDir
operator|.
name|resolve
argument_list|(
literal|"other.yaml"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configLines
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|envConfigDir
operator|.
name|resolve
argument_list|(
literal|"custom.yaml"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configLines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"existing config"
argument_list|,
name|configLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|envConfigDir
operator|.
name|resolve
argument_list|(
literal|"other.yaml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfigNotDir
specifier|public
name|void
name|testConfigNotDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|configDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not a directory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfigContainsDir
specifier|public
name|void
name|testConfigContainsDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|dirInConfigDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dirInConfigDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|dirInConfigDir
operator|.
name|resolve
argument_list|(
literal|"myconfig.yml"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"fake"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Directories not allowed in config dir for plugin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfigConflict
specifier|public
name|void
name|testConfigConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Path
name|configDir
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|configDir
operator|.
name|resolve
argument_list|(
literal|"myconfig.yml"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|createPlugin
argument_list|(
literal|"elasticsearch.yml"
argument_list|,
name|pluginDir
argument_list|)
decl_stmt|;
name|FileAlreadyExistsException
name|e
init|=
name|expectThrows
argument_list|(
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|env
operator|.
name|configFile
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"elasticsearch.yml"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingDescriptor
specifier|public
name|void
name|testMissingDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
literal|"fake.yml"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|writeZip
argument_list|(
name|pluginDir
argument_list|,
literal|"elasticsearch"
argument_list|)
decl_stmt|;
name|NoSuchFileException
name|e
init|=
name|expectThrows
argument_list|(
name|NoSuchFileException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"plugin-descriptor.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingDirectory
specifier|public
name|void
name|testMissingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|pluginDir
init|=
name|createPluginDir
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|pluginDir
operator|.
name|resolve
argument_list|(
name|PluginInfo
operator|.
name|ES_PLUGIN_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pluginZip
init|=
name|writeZip
argument_list|(
name|pluginDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UserError
name|e
init|=
name|expectThrows
argument_list|(
name|UserError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"`elasticsearch` directory is missing in the plugin zip"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInstallCleaned
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|testZipRelativeOutsideEntryName
specifier|public
name|void
name|testZipRelativeOutsideEntryName
parameter_list|()
throws|throws
name|Exception
block|{
name|Environment
name|env
init|=
name|createEnv
argument_list|(
name|fs
argument_list|,
name|temp
argument_list|)
decl_stmt|;
name|Path
name|zip
init|=
name|createTempDir
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"broken.zip"
argument_list|)
decl_stmt|;
try|try
init|(
name|ZipOutputStream
name|stream
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|zip
argument_list|)
argument_list|)
init|)
block|{
name|stream
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
literal|"elasticsearch/../blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|pluginZip
init|=
name|zip
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|IOException
name|e
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|installPlugin
argument_list|(
name|pluginZip
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"resolving outside of plugin directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: test batch flag?
comment|// TODO: test checksum (need maven/official below)
comment|// TODO: test maven, official, and staging install...need tests with fixtures...
block|}
end_class

end_unit

