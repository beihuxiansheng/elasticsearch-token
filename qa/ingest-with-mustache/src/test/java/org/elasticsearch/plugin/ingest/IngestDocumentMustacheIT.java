begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
operator|.
name|IngestDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
operator|.
name|core
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|IngestDocumentMustacheIT
specifier|public
class|class
name|IngestDocumentMustacheIT
extends|extends
name|AbstractMustacheTests
block|{
DECL|method|testAccessMetaDataViaTemplate
specifier|public
name|void
name|testAccessMetaDataViaTemplate
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|templateService
operator|.
name|compile
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
literal|"1 {{foo}}"
argument_list|,
name|templateService
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1 bar"
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|templateService
operator|.
name|compile
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
literal|"2 {{_source.foo}}"
argument_list|,
name|templateService
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2 bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAccessMapMetaDataViaTemplate
specifier|public
name|void
name|testAccessMapMetaDataViaTemplate
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerObject
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"hello bar"
argument_list|)
expr_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"baz"
argument_list|,
literal|"hello baz"
argument_list|)
expr_stmt|;
name|innerObject
operator|.
name|put
argument_list|(
literal|"qux"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"fubar"
argument_list|,
literal|"hello qux and fubar"
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
name|innerObject
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|templateService
operator|.
name|compile
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
literal|"1 {{foo.bar}} {{foo.baz}} {{foo.qux.fubar}}"
argument_list|,
name|templateService
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1 hello bar hello baz hello qux and fubar"
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|templateService
operator|.
name|compile
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
literal|"2 {{_source.foo.bar}} {{_source.foo.baz}} {{_source.foo.qux.fubar}}"
argument_list|,
name|templateService
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2 hello bar hello baz hello qux and fubar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAccessListMetaDataViaTemplate
specifier|public
name|void
name|testAccessListMetaDataViaTemplate
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"list1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|value
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"list2"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|document
argument_list|)
decl_stmt|;
comment|// TODO: fix index based lookups in lists:
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|templateService
operator|.
name|compile
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
literal|"1 {{list1}} {{list2}}"
argument_list|,
name|templateService
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1 [foo, bar, null] [{field=value}, null]"
argument_list|)
argument_list|)
expr_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|templateService
operator|.
name|compile
argument_list|(
literal|"field1"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
literal|"2 {{_source.list1}} {{_source.list2}}"
argument_list|,
name|templateService
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"field1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2 [foo, bar, null] [{field=value}, null]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAccessIngestMetadataViaTemplate
specifier|public
name|void
name|testAccessIngestMetadataViaTemplate
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|document
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ingestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ingestMap
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
literal|"bogus_timestamp"
argument_list|)
expr_stmt|;
name|document
operator|.
name|put
argument_list|(
literal|"_ingest"
argument_list|,
name|ingestMap
argument_list|)
expr_stmt|;
name|IngestDocument
name|ingestDocument
init|=
operator|new
name|IngestDocument
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|ingestDocument
operator|.
name|setFieldValue
argument_list|(
name|templateService
operator|.
name|compile
argument_list|(
literal|"ingest_timestamp"
argument_list|)
argument_list|,
name|ValueSource
operator|.
name|wrap
argument_list|(
literal|"{{_ingest.timestamp}} and {{_source._ingest.timestamp}}"
argument_list|,
name|templateService
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ingestDocument
operator|.
name|getFieldValue
argument_list|(
literal|"ingest_timestamp"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ingestDocument
operator|.
name|getIngestMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"timestamp"
argument_list|)
operator|+
literal|" and bogus_timestamp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

