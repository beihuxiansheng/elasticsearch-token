begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.backwards
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|backwards
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SeqNoStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|ESRestTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|ObjectPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|randomAsciiOfLength
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|IndexingIT
specifier|public
class|class
name|IndexingIT
extends|extends
name|ESRestTestCase
block|{
DECL|method|assertOK
specifier|private
name|void
name|assertOK
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|200
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|201
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureGreen
specifier|private
name|void
name|ensureGreen
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"wait_for_status"
argument_list|,
literal|"green"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"wait_for_no_relocating_shards"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"_cluster/health"
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndex
specifier|private
name|void
name|createIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"PUT"
argument_list|,
name|name
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{ \"settings\": "
operator|+
name|Strings
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
operator|+
literal|" }"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateIndexSetting
specifier|private
name|void
name|updateIndexSetting
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndexSetting
argument_list|(
name|name
argument_list|,
name|settings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|updateIndexSetting
specifier|private
name|void
name|updateIndexSetting
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"PUT"
argument_list|,
name|name
operator|+
literal|"/_settings"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
name|Strings
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDocs
specifier|private
name|int
name|indexDocs
parameter_list|(
name|String
name|index
parameter_list|,
specifier|final
name|int
name|idStart
parameter_list|,
specifier|final
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|id
init|=
name|idStart
operator|+
name|i
decl_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"PUT"
argument_list|,
name|index
operator|+
literal|"/test/"
operator|+
name|id
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|StringEntity
argument_list|(
literal|"{\"test\": \"test_"
operator|+
name|randomAsciiOfLength
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|numDocs
return|;
block|}
comment|/**      * Indexes a document in<code>index</code> with<code>docId</code> then concurrently updates the same document      *<code>nUpdates</code> times      *      * @return the document version after updates      */
DECL|method|indexDocWithConcurrentUpdates
specifier|private
name|int
name|indexDocWithConcurrentUpdates
parameter_list|(
name|String
name|index
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
name|int
name|nUpdates
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|indexDocs
argument_list|(
name|index
argument_list|,
name|docId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|indexThreads
init|=
operator|new
name|Thread
index|[
name|nUpdates
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nUpdates
condition|;
name|i
operator|++
control|)
block|{
name|indexThreads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|indexDocs
argument_list|(
name|index
argument_list|,
name|docId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed while indexing ["
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|indexThreads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|indexThread
range|:
name|indexThreads
control|)
block|{
name|indexThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
return|return
name|nUpdates
operator|+
literal|1
return|;
block|}
DECL|method|testIndexVersionPropagation
specifier|public
name|void
name|testIndexVersionPropagation
parameter_list|()
throws|throws
name|Exception
block|{
name|Nodes
name|nodes
init|=
name|buildNodeAndVersions
argument_list|()
decl_stmt|;
name|assumeFalse
argument_list|(
literal|"new nodes is empty"
argument_list|,
name|nodes
operator|.
name|getNewNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"cluster discovered: {}"
argument_list|,
name|nodes
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|bwcNamesList
init|=
name|nodes
operator|.
name|getBWCNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Node
operator|::
name|getNodeName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|bwcNames
init|=
name|bwcNamesList
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_SHARDS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_REPLICAS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
name|bwcNames
argument_list|)
decl_stmt|;
specifier|final
name|String
name|index
init|=
literal|"indexversionprop"
decl_stmt|;
specifier|final
name|int
name|minUpdates
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|maxUpdates
init|=
literal|10
decl_stmt|;
name|createIndex
argument_list|(
name|index
argument_list|,
name|settings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|RestClient
name|newNodeClient
init|=
name|buildClient
argument_list|(
name|restClientSettings
argument_list|()
argument_list|,
name|nodes
operator|.
name|getNewNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Node
operator|::
name|getPublishAddress
argument_list|)
operator|.
name|toArray
argument_list|(
name|HttpHost
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
init|)
block|{
name|int
name|nUpdates
init|=
name|randomIntBetween
argument_list|(
name|minUpdates
argument_list|,
name|maxUpdates
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing docs with [{}] concurrent updates initially"
argument_list|,
name|nUpdates
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalVersionForDoc1
init|=
name|indexDocWithConcurrentUpdates
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
name|nUpdates
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"allowing shards on all nodes"
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putNull
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Shard
argument_list|>
name|shards
init|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|newNodeClient
argument_list|)
decl_stmt|;
name|Shard
name|primary
init|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|newNodeClient
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Shard
operator|::
name|isPrimary
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"primary resolved to: "
operator|+
name|primary
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
name|assertVersion
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|finalVersionForDoc1
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|nUpdates
operator|=
name|randomIntBetween
argument_list|(
name|minUpdates
argument_list|,
name|maxUpdates
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing docs with [{}] concurrent updates after allowing shards on all nodes"
argument_list|,
name|nUpdates
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalVersionForDoc2
init|=
name|indexDocWithConcurrentUpdates
argument_list|(
name|index
argument_list|,
literal|2
argument_list|,
name|nUpdates
argument_list|)
decl_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
name|primary
operator|=
name|shards
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Shard
operator|::
name|isPrimary
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"primary resolved to: "
operator|+
name|primary
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
name|assertVersion
argument_list|(
name|index
argument_list|,
literal|2
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|finalVersionForDoc2
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|primary
operator|=
name|shards
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Shard
operator|::
name|isPrimary
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"moving primary to new node by excluding {}"
argument_list|,
name|primary
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|primary
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|nUpdates
operator|=
name|randomIntBetween
argument_list|(
name|minUpdates
argument_list|,
name|maxUpdates
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing docs with [{}] concurrent updates after moving primary"
argument_list|,
name|nUpdates
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalVersionForDoc3
init|=
name|indexDocWithConcurrentUpdates
argument_list|(
name|index
argument_list|,
literal|3
argument_list|,
name|nUpdates
argument_list|)
decl_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
name|assertVersion
argument_list|(
name|index
argument_list|,
literal|3
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|finalVersionForDoc3
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"setting number of replicas to 0"
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|nUpdates
operator|=
name|randomIntBetween
argument_list|(
name|minUpdates
argument_list|,
name|maxUpdates
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing doc with [{}] concurrent updates after setting number of replicas to 0"
argument_list|,
name|nUpdates
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalVersionForDoc4
init|=
name|indexDocWithConcurrentUpdates
argument_list|(
name|index
argument_list|,
literal|4
argument_list|,
name|nUpdates
argument_list|)
decl_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
name|assertVersion
argument_list|(
name|index
argument_list|,
literal|4
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|finalVersionForDoc4
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"setting number of replicas to 1"
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|nUpdates
operator|=
name|randomIntBetween
argument_list|(
name|minUpdates
argument_list|,
name|maxUpdates
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing doc with [{}] concurrent updates after setting number of replicas to 1"
argument_list|,
name|nUpdates
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalVersionForDoc5
init|=
name|indexDocWithConcurrentUpdates
argument_list|(
name|index
argument_list|,
literal|5
argument_list|,
name|nUpdates
argument_list|)
decl_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
name|shards
operator|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
name|assertVersion
argument_list|(
name|index
argument_list|,
literal|5
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|finalVersionForDoc5
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_only_nodes:"
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|// the number of documents on the primary and on the recovered replica should match the number of indexed documents
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_primary"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_replica"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSeqNoCheckpoints
specifier|public
name|void
name|testSeqNoCheckpoints
parameter_list|()
throws|throws
name|Exception
block|{
name|Nodes
name|nodes
init|=
name|buildNodeAndVersions
argument_list|()
decl_stmt|;
name|assumeFalse
argument_list|(
literal|"new nodes is empty"
argument_list|,
name|nodes
operator|.
name|getNewNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"cluster discovered: {}"
argument_list|,
name|nodes
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|bwcNamesList
init|=
name|nodes
operator|.
name|getBWCNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Node
operator|::
name|getNodeName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|bwcNames
init|=
name|bwcNamesList
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
operator|.
name|Builder
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_SHARDS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|INDEX_NUMBER_OF_REPLICAS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|,
name|bwcNames
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|checkGlobalCheckpoints
init|=
name|nodes
operator|.
name|getMaster
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"master version is [{}], global checkpoints will be [{}]"
argument_list|,
name|nodes
operator|.
name|getMaster
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|checkGlobalCheckpoints
condition|?
literal|"checked"
else|:
literal|"not be checked"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|index
init|=
literal|"test"
decl_stmt|;
name|createIndex
argument_list|(
name|index
argument_list|,
name|settings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|RestClient
name|newNodeClient
init|=
name|buildClient
argument_list|(
name|restClientSettings
argument_list|()
argument_list|,
name|nodes
operator|.
name|getNewNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Node
operator|::
name|getPublishAddress
argument_list|)
operator|.
name|toArray
argument_list|(
name|HttpHost
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
init|)
block|{
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|numberOfInitialDocs
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing [{}] docs initially"
argument_list|,
name|numberOfInitialDocs
argument_list|)
expr_stmt|;
name|numDocs
operator|+=
name|indexDocs
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
name|numberOfInitialDocs
argument_list|)
expr_stmt|;
name|assertSeqNoOnShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|checkGlobalCheckpoints
argument_list|,
literal|0
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"allowing shards on all nodes"
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|putNull
argument_list|(
literal|"index.routing.allocation.include._name"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|bwcName
range|:
name|bwcNamesList
control|)
block|{
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_only_nodes:"
operator|+
name|bwcName
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|numberOfDocsAfterAllowingShardsOnAllNodes
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing [{}] docs after allowing shards on all nodes"
argument_list|,
name|numberOfDocsAfterAllowingShardsOnAllNodes
argument_list|)
expr_stmt|;
name|numDocs
operator|+=
name|indexDocs
argument_list|(
name|index
argument_list|,
name|numDocs
argument_list|,
name|numberOfDocsAfterAllowingShardsOnAllNodes
argument_list|)
expr_stmt|;
name|assertSeqNoOnShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|checkGlobalCheckpoints
argument_list|,
literal|0
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
name|Shard
name|primary
init|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|newNodeClient
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Shard
operator|::
name|isPrimary
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"moving primary to new node by excluding {}"
argument_list|,
name|primary
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|primary
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocsOnNewPrimary
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|numberOfDocsAfterMovingPrimary
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing [{}] docs after moving primary"
argument_list|,
name|numberOfDocsAfterMovingPrimary
argument_list|)
expr_stmt|;
name|numDocsOnNewPrimary
operator|+=
name|indexDocs
argument_list|(
name|index
argument_list|,
name|numDocs
argument_list|,
name|numberOfDocsAfterMovingPrimary
argument_list|)
expr_stmt|;
name|numDocs
operator|+=
name|numberOfDocsAfterMovingPrimary
expr_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
comment|// this forces a global checkpoint sync
name|assertSeqNoOnShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|checkGlobalCheckpoints
argument_list|,
name|numDocsOnNewPrimary
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
comment|/*              * Dropping the number of replicas to zero, and then increasing it to one triggers a recovery thus exercising any BWC-logic in              * the recovery code.              */
name|logger
operator|.
name|info
argument_list|(
literal|"setting number of replicas to 0"
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfDocsAfterDroppingReplicas
init|=
literal|1
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing [{}] docs after setting number of replicas to 0"
argument_list|,
name|numberOfDocsAfterDroppingReplicas
argument_list|)
expr_stmt|;
name|numDocsOnNewPrimary
operator|+=
name|indexDocs
argument_list|(
name|index
argument_list|,
name|numDocs
argument_list|,
name|numberOfDocsAfterDroppingReplicas
argument_list|)
expr_stmt|;
name|numDocs
operator|+=
name|numberOfDocsAfterDroppingReplicas
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"setting number of replicas to 1"
argument_list|)
expr_stmt|;
name|updateIndexSetting
argument_list|(
name|index
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertOK
argument_list|(
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"POST"
argument_list|,
name|index
operator|+
literal|"/_refresh"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the number of documents on the primary and on the recovered replica should match the number of indexed documents
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_primary"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|assertCount
argument_list|(
name|index
argument_list|,
literal|"_replica"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|assertSeqNoOnShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|checkGlobalCheckpoints
argument_list|,
name|numDocsOnNewPrimary
argument_list|,
name|newNodeClient
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCount
specifier|private
name|void
name|assertCount
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|String
name|preference
parameter_list|,
specifier|final
name|int
name|expectedCount
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Response
name|response
init|=
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
name|index
operator|+
literal|"/_count"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"preference"
argument_list|,
name|preference
argument_list|)
argument_list|)
decl_stmt|;
name|assertOK
argument_list|(
name|response
argument_list|)
expr_stmt|;
specifier|final
name|int
name|actualCount
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ObjectPath
operator|.
name|createFromResponse
argument_list|(
name|response
argument_list|)
operator|.
name|evaluate
argument_list|(
literal|"count"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actualCount
argument_list|,
name|equalTo
argument_list|(
name|expectedCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertVersion
specifier|private
name|void
name|assertVersion
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|String
name|preference
parameter_list|,
specifier|final
name|int
name|expectedVersion
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Response
name|response
init|=
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
name|index
operator|+
literal|"/test/"
operator|+
name|docId
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"preference"
argument_list|,
name|preference
argument_list|)
argument_list|)
decl_stmt|;
name|assertOK
argument_list|(
name|response
argument_list|)
expr_stmt|;
specifier|final
name|int
name|actualVersion
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ObjectPath
operator|.
name|createFromResponse
argument_list|(
name|response
argument_list|)
operator|.
name|evaluate
argument_list|(
literal|"_version"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"version mismatch for doc ["
operator|+
name|docId
operator|+
literal|"] preference ["
operator|+
name|preference
operator|+
literal|"]"
argument_list|,
name|actualVersion
argument_list|,
name|equalTo
argument_list|(
name|expectedVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSeqNoOnShards
specifier|private
name|void
name|assertSeqNoOnShards
parameter_list|(
name|String
name|index
parameter_list|,
name|Nodes
name|nodes
parameter_list|,
name|boolean
name|checkGlobalCheckpoints
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|RestClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|List
argument_list|<
name|Shard
argument_list|>
name|shards
init|=
name|buildShards
argument_list|(
name|index
argument_list|,
name|nodes
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|Shard
name|primaryShard
init|=
name|shards
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Shard
operator|::
name|isPrimary
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to find primary shard"
argument_list|,
name|primaryShard
argument_list|)
expr_stmt|;
specifier|final
name|long
name|expectedGlobalCkp
decl_stmt|;
specifier|final
name|long
name|expectMaxSeqNo
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"primary resolved to node {}"
argument_list|,
name|primaryShard
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|primaryShard
operator|.
name|getNode
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
condition|)
block|{
name|expectMaxSeqNo
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
name|expectedGlobalCkp
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|expectedGlobalCkp
operator|=
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
expr_stmt|;
name|expectMaxSeqNo
operator|=
name|SequenceNumbersService
operator|.
name|NO_OPS_PERFORMED
expr_stmt|;
block|}
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
name|shard
operator|.
name|getNode
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
condition|)
block|{
specifier|final
name|SeqNoStats
name|seqNoStats
init|=
name|shard
operator|.
name|getSeqNoStats
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"stats for {}, primary [{}]: [{}]"
argument_list|,
name|shard
operator|.
name|getNode
argument_list|()
argument_list|,
name|shard
operator|.
name|isPrimary
argument_list|()
argument_list|,
name|seqNoStats
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"max_seq no on "
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|+
literal|" is wrong"
argument_list|,
name|seqNoStats
operator|.
name|getMaxSeqNo
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectMaxSeqNo
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"localCheckpoint no on "
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|+
literal|" is wrong"
argument_list|,
name|seqNoStats
operator|.
name|getLocalCheckpoint
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectMaxSeqNo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkGlobalCheckpoints
condition|)
block|{
name|assertThat
argument_list|(
literal|"globalCheckpoint no on "
operator|+
name|shard
operator|.
name|getNode
argument_list|()
operator|+
literal|" is wrong"
argument_list|,
name|seqNoStats
operator|.
name|getGlobalCheckpoint
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedGlobalCkp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"skipping seq no test on {}"
argument_list|,
name|shard
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected io exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|buildShards
specifier|private
name|List
argument_list|<
name|Shard
argument_list|>
name|buildShards
parameter_list|(
name|String
name|index
parameter_list|,
name|Nodes
name|nodes
parameter_list|,
name|RestClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
name|index
operator|+
literal|"/_stats"
argument_list|,
name|singletonMap
argument_list|(
literal|"level"
argument_list|,
literal|"shards"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|shardStats
init|=
name|ObjectPath
operator|.
name|createFromResponse
argument_list|(
name|response
argument_list|)
operator|.
name|evaluate
argument_list|(
literal|"indices."
operator|+
name|index
operator|+
literal|".shards.0"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Shard
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|shard
range|:
name|shardStats
control|)
block|{
specifier|final
name|String
name|nodeId
init|=
name|ObjectPath
operator|.
name|evaluate
argument_list|(
name|shard
argument_list|,
literal|"routing.node"
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|primary
init|=
name|ObjectPath
operator|.
name|evaluate
argument_list|(
name|shard
argument_list|,
literal|"routing.primary"
argument_list|)
decl_stmt|;
specifier|final
name|Node
name|node
init|=
name|nodes
operator|.
name|getSafe
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
specifier|final
name|SeqNoStats
name|seqNoStats
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_6_0_0_alpha1_UNRELEASED
argument_list|)
condition|)
block|{
name|Integer
name|maxSeqNo
init|=
name|ObjectPath
operator|.
name|evaluate
argument_list|(
name|shard
argument_list|,
literal|"seq_no.max_seq_no"
argument_list|)
decl_stmt|;
name|Integer
name|localCheckpoint
init|=
name|ObjectPath
operator|.
name|evaluate
argument_list|(
name|shard
argument_list|,
literal|"seq_no.local_checkpoint"
argument_list|)
decl_stmt|;
name|Integer
name|globalCheckpoint
init|=
name|ObjectPath
operator|.
name|evaluate
argument_list|(
name|shard
argument_list|,
literal|"seq_no.global_checkpoint"
argument_list|)
decl_stmt|;
name|seqNoStats
operator|=
operator|new
name|SeqNoStats
argument_list|(
name|maxSeqNo
argument_list|,
name|localCheckpoint
argument_list|,
name|globalCheckpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|seqNoStats
operator|=
literal|null
expr_stmt|;
block|}
name|shards
operator|.
name|add
argument_list|(
operator|new
name|Shard
argument_list|(
name|node
argument_list|,
name|primary
argument_list|,
name|seqNoStats
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|shards
return|;
block|}
DECL|method|buildNodeAndVersions
specifier|private
name|Nodes
name|buildNodeAndVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|Response
name|response
init|=
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"_nodes"
argument_list|)
decl_stmt|;
name|ObjectPath
name|objectPath
init|=
name|ObjectPath
operator|.
name|createFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nodesAsMap
init|=
name|objectPath
operator|.
name|evaluate
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
name|Nodes
name|nodes
init|=
operator|new
name|Nodes
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|nodesAsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|Node
argument_list|(
name|id
argument_list|,
name|objectPath
operator|.
name|evaluate
argument_list|(
literal|"nodes."
operator|+
name|id
operator|+
literal|".name"
argument_list|)
argument_list|,
name|Version
operator|.
name|fromString
argument_list|(
name|objectPath
operator|.
name|evaluate
argument_list|(
literal|"nodes."
operator|+
name|id
operator|+
literal|".version"
argument_list|)
argument_list|)
argument_list|,
name|HttpHost
operator|.
name|create
argument_list|(
name|objectPath
operator|.
name|evaluate
argument_list|(
literal|"nodes."
operator|+
name|id
operator|+
literal|".http.publish_address"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|client
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"_cluster/state"
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|setMasterNodeId
argument_list|(
name|ObjectPath
operator|.
name|createFromResponse
argument_list|(
name|response
argument_list|)
operator|.
name|evaluate
argument_list|(
literal|"master_node"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
DECL|class|Nodes
specifier|final
class|class
name|Nodes
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
block|{
DECL|field|masterNodeId
specifier|private
name|String
name|masterNodeId
init|=
literal|null
decl_stmt|;
DECL|method|getMaster
specifier|public
name|Node
name|getMaster
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|masterNodeId
argument_list|)
return|;
block|}
DECL|method|setMasterNodeId
specifier|public
name|void
name|setMasterNodeId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"node with id ["
operator|+
name|id
operator|+
literal|"] not found. got:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|masterNodeId
operator|=
name|id
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|put
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|getNewNodes
specifier|public
name|List
argument_list|<
name|Node
argument_list|>
name|getNewNodes
parameter_list|()
block|{
name|Version
name|bwcVersion
init|=
name|getBWCVersion
argument_list|()
decl_stmt|;
return|return
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|n
operator|.
name|getVersion
argument_list|()
operator|.
name|after
argument_list|(
name|bwcVersion
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBWCNodes
specifier|public
name|List
argument_list|<
name|Node
argument_list|>
name|getBWCNodes
parameter_list|()
block|{
name|Version
name|bwcVersion
init|=
name|getBWCVersion
argument_list|()
decl_stmt|;
return|return
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|n
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|bwcVersion
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBWCVersion
specifier|public
name|Version
name|getBWCVersion
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no nodes available"
argument_list|)
throw|;
block|}
return|return
name|Version
operator|.
name|fromId
argument_list|(
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
name|node
operator|.
name|getVersion
argument_list|()
operator|.
name|id
argument_list|)
operator|.
name|min
argument_list|(
name|Integer
operator|::
name|compareTo
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getSafe
specifier|public
name|Node
name|getSafe
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Node
name|node
init|=
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"node with id ["
operator|+
name|id
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Nodes{"
operator|+
literal|"masterNodeId='"
operator|+
name|masterNodeId
operator|+
literal|"'\n"
operator|+
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Node
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|Node
specifier|final
class|class
name|Node
block|{
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|nodeName
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|Version
name|version
decl_stmt|;
DECL|field|publishAddress
specifier|private
specifier|final
name|HttpHost
name|publishAddress
decl_stmt|;
DECL|method|Node
name|Node
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|Version
name|version
parameter_list|,
name|HttpHost
name|publishAddress
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|publishAddress
operator|=
name|publishAddress
expr_stmt|;
block|}
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getNodeName
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
DECL|method|getPublishAddress
specifier|public
name|HttpHost
name|getPublishAddress
parameter_list|()
block|{
return|return
name|publishAddress
return|;
block|}
DECL|method|getVersion
specifier|public
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Node{"
operator|+
literal|"id='"
operator|+
name|id
operator|+
literal|'\''
operator|+
literal|", nodeName='"
operator|+
name|nodeName
operator|+
literal|'\''
operator|+
literal|", version="
operator|+
name|version
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|Shard
specifier|final
class|class
name|Shard
block|{
DECL|field|node
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
DECL|field|Primary
specifier|private
specifier|final
name|boolean
name|Primary
decl_stmt|;
DECL|field|seqNoStats
specifier|private
specifier|final
name|SeqNoStats
name|seqNoStats
decl_stmt|;
DECL|method|Shard
name|Shard
parameter_list|(
name|Node
name|node
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|SeqNoStats
name|seqNoStats
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|Primary
operator|=
name|primary
expr_stmt|;
name|this
operator|.
name|seqNoStats
operator|=
name|seqNoStats
expr_stmt|;
block|}
DECL|method|getNode
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
DECL|method|isPrimary
specifier|public
name|boolean
name|isPrimary
parameter_list|()
block|{
return|return
name|Primary
return|;
block|}
DECL|method|getSeqNoStats
specifier|public
name|SeqNoStats
name|getSeqNoStats
parameter_list|()
block|{
return|return
name|seqNoStats
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Shard{"
operator|+
literal|"node="
operator|+
name|node
operator|+
literal|", Primary="
operator|+
name|Primary
operator|+
literal|", seqNoStats="
operator|+
name|seqNoStats
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

