begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|NodeTests
specifier|public
class|class
name|NodeTests
extends|extends
name|LuceneTestCase
block|{
DECL|method|testSingleArgumentConstructor
specifier|public
name|void
name|testSingleArgumentConstructor
parameter_list|()
block|{
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
name|randomHost
argument_list|()
argument_list|,
name|randomPort
argument_list|()
argument_list|,
name|randomScheme
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
name|httpHost
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getHttpHost
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|httpHost
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getRoles
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getRoles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Node
operator|.
name|Role
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|Node
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node construction should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"host cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testThreeArgumentsConstructor
specifier|public
name|void
name|testThreeArgumentsConstructor
parameter_list|()
block|{
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
name|randomHost
argument_list|()
argument_list|,
name|randomPort
argument_list|()
argument_list|,
name|randomScheme
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Node
operator|.
name|Role
argument_list|>
name|roles
init|=
name|randomRoles
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|randomAttributes
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
name|httpHost
argument_list|,
name|roles
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getHttpHost
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|httpHost
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|attributes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|getRoles
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|roles
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
name|roles
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node construction should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"host cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|Node
argument_list|(
name|httpHost
argument_list|,
literal|null
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node construction should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"roles cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|Node
argument_list|(
name|httpHost
argument_list|,
name|roles
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"node construction should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"attributes cannot be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
name|randomHost
argument_list|()
argument_list|,
name|randomPort
argument_list|()
argument_list|,
name|randomScheme
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Node
operator|.
name|Role
argument_list|>
name|roles
init|=
name|randomRoles
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|randomAttributes
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
name|httpHost
argument_list|,
name|roles
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|String
name|expectedString
init|=
literal|"Node{"
operator|+
literal|"httpHost="
operator|+
name|httpHost
operator|.
name|toString
argument_list|()
operator|+
literal|", roles="
operator|+
name|roles
operator|.
name|toString
argument_list|()
operator|+
literal|", attributes="
operator|+
name|attributes
operator|.
name|toString
argument_list|()
operator|+
literal|'}'
decl_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedString
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomHost
specifier|private
specifier|static
name|String
name|randomHost
parameter_list|()
block|{
return|return
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
return|;
block|}
DECL|method|randomPort
specifier|private
specifier|static
name|int
name|randomPort
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
DECL|method|randomScheme
specifier|private
specifier|static
name|String
name|randomScheme
parameter_list|()
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"http"
else|:
literal|"https"
return|;
block|}
DECL|method|randomAttributes
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|randomAttributes
parameter_list|()
block|{
name|int
name|numAttributes
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|numAttributes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAttributes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
DECL|method|randomRoles
specifier|private
specifier|static
name|Set
argument_list|<
name|Node
operator|.
name|Role
argument_list|>
name|randomRoles
parameter_list|()
block|{
name|int
name|numRoles
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Node
operator|.
name|Role
argument_list|>
name|roles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|numRoles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numRoles
condition|;
name|j
operator|++
control|)
block|{
name|roles
operator|.
name|add
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Node
operator|.
name|Role
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|roles
return|;
block|}
block|}
end_class

end_unit

