begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_class
DECL|class|RestClientTests
specifier|public
class|class
name|RestClientTests
extends|extends
name|LuceneTestCase
block|{
static|static
block|{
name|LogManager
operator|.
name|getLogManager
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|testConstructor
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|IOException
block|{
name|CloseableHttpClient
name|httpClient
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ConnectionPool
name|connectionPool
init|=
operator|new
name|ConnectionPool
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Stream
argument_list|<
name|Connection
argument_list|>
name|nextConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|lastResortConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeAttempt
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{              }
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{              }
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{              }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{              }
block|}
decl_stmt|;
try|try
block|{
operator|new
name|RestClient
argument_list|(
literal|null
argument_list|,
name|connectionPool
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"transport creation should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"client cannot be null"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|RestClient
argument_list|(
name|httpClient
argument_list|,
literal|null
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"transport creation should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"connectionPool cannot be null"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|RestClient
argument_list|(
name|httpClient
argument_list|,
name|connectionPool
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"transport creation should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"maxRetryTimeout must be greater than 0"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|RestClient
name|client
init|=
operator|new
name|RestClient
argument_list|(
name|httpClient
argument_list|,
name|connectionPool
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

