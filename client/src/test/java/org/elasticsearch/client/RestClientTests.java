begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_class
DECL|class|RestClientTests
specifier|public
class|class
name|RestClientTests
extends|extends
name|LuceneTestCase
block|{
comment|//TODO this should be refactored into a base test!!
DECL|field|server
name|HttpServer
name|server
decl_stmt|;
DECL|field|clusterName
specifier|protected
name|String
name|clusterName
init|=
literal|"elasticsearch"
decl_stmt|;
DECL|field|additionalNodes
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|additionalNodes
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|server
operator|=
name|HttpServer
operator|.
name|create
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|server
operator|.
name|setExecutor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// creates a default executor
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|.
name|createContext
argument_list|(
literal|"/"
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
block|{
name|handle
argument_list|(
literal|"/"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|createContext
argument_list|(
literal|"/_cat/nodes"
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
block|{
name|handle
argument_list|(
literal|"/_cat/nodes"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|createContext
argument_list|(
literal|"/_cat/health"
argument_list|,
parameter_list|(
name|t
parameter_list|)
lambda|->
block|{
name|handle
argument_list|(
literal|"/_cat/health"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|handle
specifier|protected
name|void
name|handle
parameter_list|(
name|String
name|path
parameter_list|,
name|HttpExchange
name|t
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|response
decl_stmt|;
switch|switch
condition|(
name|path
condition|)
block|{
case|case
literal|"/"
case|:
name|response
operator|=
literal|"{}"
expr_stmt|;
break|break;
case|case
literal|"/_cat/nodes"
case|:
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"127.0.0.1:"
operator|+
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
operator|+
literal|" "
operator|+
literal|"d\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|additionalNodes
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|host
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"/_cat/health"
case|:
name|response
operator|=
name|clusterName
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no such handler "
operator|+
name|path
argument_list|)
throw|;
block|}
name|t
operator|.
name|sendResponseHeaders
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|t
operator|.
name|getResponseBody
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|response
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClustername
specifier|public
name|void
name|testGetClustername
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|client
init|=
operator|new
name|RestClient
argument_list|(
name|httpHost
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|clusterName
argument_list|,
name|client
operator|.
name|getClusterName
argument_list|(
name|httpHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFetchNodes
specifier|public
name|void
name|testFetchNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|additionalNodes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"127.0.0.2:9200 c"
argument_list|,
literal|"127.0.0.3:9200 d"
argument_list|)
expr_stmt|;
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|client
init|=
operator|new
name|RestClient
argument_list|(
name|httpHost
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|HttpHost
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|9200
argument_list|,
literal|"http"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|contains
argument_list|(
operator|new
name|HttpHost
argument_list|(
literal|"127.0.0.3"
argument_list|,
literal|9200
argument_list|,
literal|"http"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|contains
argument_list|(
name|httpHost
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimpleRetry
specifier|public
name|void
name|testSimpleRetry
parameter_list|()
throws|throws
name|IOException
block|{
name|additionalNodes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"127.0.0.2:9200 c"
argument_list|,
literal|"127.0.0.3:9200 d"
argument_list|)
expr_stmt|;
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|client
init|=
operator|new
name|RestClient
argument_list|(
name|httpHost
argument_list|)
init|)
block|{
name|client
operator|.
name|setNodes
argument_list|(
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|HttpResponse
name|httpResponse
init|=
name|client
operator|.
name|httpGet
argument_list|(
literal|"/_cat/health"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|httpGet
argument_list|(
literal|"/_cat/health"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"failed: connect timed out"
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"failed: Connection refused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBlacklist
specifier|public
name|void
name|testBlacklist
parameter_list|()
throws|throws
name|IOException
block|{
name|additionalNodes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"127.0.0.2:9200 c"
argument_list|,
literal|"127.0.0.3:9200 d"
argument_list|)
expr_stmt|;
name|HttpHost
name|httpHost
init|=
operator|new
name|HttpHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|client
init|=
operator|new
name|RestClient
argument_list|(
name|httpHost
argument_list|)
init|)
block|{
name|client
operator|.
name|setNodes
argument_list|(
name|client
operator|.
name|fetchNodes
argument_list|(
name|httpHost
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|client
operator|.
name|getNumHosts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|client
operator|.
name|getNumBlacklistedHosts
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|httpGet
argument_list|(
literal|"/_cat/health"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"failed: connect timed out"
argument_list|)
operator|||
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"failed: Connection refused"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|client
operator|.
name|getNumHosts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|client
operator|.
name|getNumBlacklistedHosts
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HttpHost
name|host
range|:
name|client
operator|.
name|getHostIterator
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|num
operator|++
expr_stmt|;
comment|// nothing here
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
for|for
control|(
name|HttpHost
name|host
range|:
name|client
operator|.
name|getHostIterator
argument_list|(
literal|true
argument_list|)
control|)
block|{
name|num
operator|++
expr_stmt|;
comment|// all there - we have to retry now
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

