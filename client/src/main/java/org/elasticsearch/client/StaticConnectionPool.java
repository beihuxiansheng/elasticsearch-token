begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Static implementation of {@link ConnectionPool}. Its underlying list of connections is immutable.  */
end_comment

begin_class
DECL|class|StaticConnectionPool
specifier|public
class|class
name|StaticConnectionPool
extends|extends
name|AbstractStaticConnectionPool
block|{
DECL|field|connections
specifier|private
specifier|final
name|List
argument_list|<
name|Connection
argument_list|>
name|connections
decl_stmt|;
DECL|method|StaticConnectionPool
specifier|public
name|StaticConnectionPool
parameter_list|(
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
if|if
condition|(
name|hosts
operator|==
literal|null
operator|||
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no hosts provided"
argument_list|)
throw|;
block|}
name|this
operator|.
name|connections
operator|=
name|createConnections
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConnections
specifier|protected
name|List
argument_list|<
name|Connection
argument_list|>
name|getConnections
parameter_list|()
block|{
return|return
name|connections
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|//no-op nothing to close
block|}
block|}
end_class

end_unit

