begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|StaticConnectionPool
specifier|public
class|class
name|StaticConnectionPool
extends|extends
name|AbstractStaticConnectionPool
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StaticConnectionPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|CloseableHttpClient
name|client
decl_stmt|;
DECL|field|pingEnabled
specifier|private
specifier|final
name|boolean
name|pingEnabled
decl_stmt|;
DECL|field|pingRequestConfig
specifier|private
specifier|final
name|RequestConfig
name|pingRequestConfig
decl_stmt|;
DECL|field|connections
specifier|private
specifier|final
name|List
argument_list|<
name|StatefulConnection
argument_list|>
name|connections
decl_stmt|;
DECL|method|StaticConnectionPool
specifier|public
name|StaticConnectionPool
parameter_list|(
name|CloseableHttpClient
name|client
parameter_list|,
name|boolean
name|pingEnabled
parameter_list|,
name|RequestConfig
name|pingRequestConfig
parameter_list|,
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|client
argument_list|,
literal|"client cannot be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pingRequestConfig
argument_list|,
literal|"pingRequestConfig cannot be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|==
literal|null
operator|||
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no hosts provided"
argument_list|)
throw|;
block|}
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|pingEnabled
operator|=
name|pingEnabled
expr_stmt|;
name|this
operator|.
name|pingRequestConfig
operator|=
name|pingRequestConfig
expr_stmt|;
name|this
operator|.
name|connections
operator|=
name|createConnections
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConnections
specifier|protected
name|List
argument_list|<
name|StatefulConnection
argument_list|>
name|getConnections
parameter_list|()
block|{
return|return
name|connections
return|;
block|}
annotation|@
name|Override
DECL|method|beforeAttempt
specifier|public
name|void
name|beforeAttempt
parameter_list|(
name|StatefulConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pingEnabled
operator|&&
name|connection
operator|.
name|shouldBeRetried
argument_list|()
condition|)
block|{
name|HttpHead
name|httpHead
init|=
operator|new
name|HttpHead
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|httpHead
operator|.
name|setConfig
argument_list|(
name|pingRequestConfig
argument_list|)
expr_stmt|;
name|StatusLine
name|statusLine
decl_stmt|;
try|try
init|(
name|CloseableHttpResponse
name|httpResponse
init|=
name|client
operator|.
name|execute
argument_list|(
name|connection
operator|.
name|getHost
argument_list|()
argument_list|,
name|httpHead
argument_list|)
init|)
block|{
name|statusLine
operator|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
expr_stmt|;
name|EntityUtils
operator|.
name|consume
argument_list|(
name|httpResponse
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|RequestLogger
operator|.
name|log
argument_list|(
name|logger
argument_list|,
literal|"ping failed"
argument_list|,
name|httpHead
operator|.
name|getRequestLine
argument_list|()
argument_list|,
name|connection
operator|.
name|getHost
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onFailure
argument_list|(
name|connection
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|>=
literal|300
condition|)
block|{
name|RequestLogger
operator|.
name|log
argument_list|(
name|logger
argument_list|,
literal|"ping failed"
argument_list|,
name|httpHead
operator|.
name|getRequestLine
argument_list|()
argument_list|,
name|connection
operator|.
name|getHost
argument_list|()
argument_list|,
name|statusLine
argument_list|)
expr_stmt|;
name|onFailure
argument_list|(
name|connection
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ElasticsearchResponseException
argument_list|(
name|httpHead
operator|.
name|getRequestLine
argument_list|()
argument_list|,
name|connection
operator|.
name|getHost
argument_list|()
argument_list|,
name|statusLine
argument_list|)
throw|;
block|}
else|else
block|{
name|RequestLogger
operator|.
name|log
argument_list|(
name|logger
argument_list|,
literal|"ping succeeded"
argument_list|,
name|httpHead
operator|.
name|getRequestLine
argument_list|()
argument_list|,
name|connection
operator|.
name|getHost
argument_list|()
argument_list|,
name|statusLine
argument_list|)
expr_stmt|;
name|onSuccess
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|//no-op nothing to close
block|}
block|}
end_class

end_unit

