begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_class
DECL|class|SniffingConnectionPool
specifier|public
class|class
name|SniffingConnectionPool
extends|extends
name|AbstractStaticConnectionPool
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SniffingConnectionPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sniffOnFailure
specifier|private
specifier|final
name|boolean
name|sniffOnFailure
decl_stmt|;
DECL|field|sniffer
specifier|private
specifier|final
name|Sniffer
name|sniffer
decl_stmt|;
DECL|field|connections
specifier|private
specifier|volatile
name|List
argument_list|<
name|StatefulConnection
argument_list|>
name|connections
decl_stmt|;
DECL|field|snifferTask
specifier|private
specifier|final
name|SnifferTask
name|snifferTask
decl_stmt|;
DECL|method|SniffingConnectionPool
specifier|public
name|SniffingConnectionPool
parameter_list|(
name|int
name|sniffInterval
parameter_list|,
name|boolean
name|sniffOnFailure
parameter_list|,
name|int
name|sniffAfterFailureDelay
parameter_list|,
name|CloseableHttpClient
name|client
parameter_list|,
name|RequestConfig
name|sniffRequestConfig
parameter_list|,
name|int
name|sniffRequestTimeout
parameter_list|,
name|Scheme
name|scheme
parameter_list|,
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
if|if
condition|(
name|sniffInterval
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sniffInterval must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sniffAfterFailureDelay
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sniffAfterFailureDelay must be greater than 0"
argument_list|)
throw|;
block|}
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scheme
argument_list|,
literal|"scheme cannot be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|==
literal|null
operator|||
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no hosts provided"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sniffOnFailure
operator|=
name|sniffOnFailure
expr_stmt|;
name|this
operator|.
name|sniffer
operator|=
operator|new
name|Sniffer
argument_list|(
name|client
argument_list|,
name|sniffRequestConfig
argument_list|,
name|sniffRequestTimeout
argument_list|,
name|scheme
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|connections
operator|=
name|createConnections
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
name|this
operator|.
name|snifferTask
operator|=
operator|new
name|SnifferTask
argument_list|(
name|sniffInterval
argument_list|,
name|sniffAfterFailureDelay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConnections
specifier|protected
name|List
argument_list|<
name|StatefulConnection
argument_list|>
name|getConnections
parameter_list|()
block|{
return|return
name|this
operator|.
name|connections
return|;
block|}
annotation|@
name|Override
DECL|method|beforeAttempt
specifier|public
name|void
name|beforeAttempt
parameter_list|(
name|StatefulConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|StatefulConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
name|sniffOnFailure
condition|)
block|{
comment|//re-sniff immediately but take out the node that failed
name|snifferTask
operator|.
name|sniffOnFailure
argument_list|(
name|connection
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|snifferTask
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|enum|Scheme
specifier|public
enum|enum
name|Scheme
block|{
DECL|enum constant|HTTP
DECL|enum constant|HTTPS
name|HTTP
block|,
name|HTTPS
block|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
DECL|class|SnifferTask
specifier|private
class|class
name|SnifferTask
implements|implements
name|Runnable
block|{
DECL|field|sniffInterval
specifier|private
specifier|final
name|int
name|sniffInterval
decl_stmt|;
DECL|field|sniffAfterFailureDelay
specifier|private
specifier|final
name|int
name|sniffAfterFailureDelay
decl_stmt|;
DECL|field|scheduledExecutorService
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduledExecutorService
decl_stmt|;
DECL|field|running
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|failure
specifier|private
specifier|volatile
name|boolean
name|failure
init|=
literal|false
decl_stmt|;
DECL|field|scheduledFuture
specifier|private
specifier|volatile
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledFuture
decl_stmt|;
DECL|method|SnifferTask
specifier|private
name|SnifferTask
parameter_list|(
name|int
name|sniffInterval
parameter_list|,
name|int
name|sniffAfterFailureDelay
parameter_list|)
block|{
name|this
operator|.
name|sniffInterval
operator|=
name|sniffInterval
expr_stmt|;
name|this
operator|.
name|sniffAfterFailureDelay
operator|=
name|sniffAfterFailureDelay
expr_stmt|;
name|this
operator|.
name|scheduledExecutorService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduledFuture
operator|=
name|this
operator|.
name|scheduledExecutorService
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sniff
argument_list|(
name|node
lambda|->
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|sniffOnFailure
name|void
name|sniffOnFailure
parameter_list|(
name|HttpHost
name|failedHost
parameter_list|)
block|{
comment|//sync sniff straightaway on failure
name|failure
operator|=
literal|true
expr_stmt|;
name|sniff
argument_list|(
name|host
lambda|->
name|host
operator|.
name|equals
argument_list|(
name|failedHost
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|sniff
name|void
name|sniff
parameter_list|(
name|Predicate
argument_list|<
name|HttpHost
argument_list|>
name|hostFilter
parameter_list|)
block|{
if|if
condition|(
name|running
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|Iterator
argument_list|<
name|StatefulConnection
argument_list|>
name|connectionIterator
init|=
name|nextConnection
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sniff
argument_list|(
name|connectionIterator
argument_list|,
name|hostFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StatefulConnection
name|connection
init|=
name|lastResortConnection
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"no healthy nodes available, trying "
operator|+
name|connection
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|sniff
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
name|connection
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|,
name|hostFilter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"error while sniffing nodes"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
comment|//regardless of whether and when the next sniff is scheduled, cancel it and schedule a new one with updated delay
name|this
operator|.
name|scheduledFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|failure
condition|)
block|{
name|this
operator|.
name|scheduledFuture
operator|=
name|this
operator|.
name|scheduledExecutorService
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|sniffAfterFailureDelay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|failure
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scheduledFuture
operator|=
name|this
operator|.
name|scheduledExecutorService
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|sniffInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"error while scheduling next sniffer task"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|sniff
name|void
name|sniff
parameter_list|(
name|Iterator
argument_list|<
name|StatefulConnection
argument_list|>
name|connectionIterator
parameter_list|,
name|Predicate
argument_list|<
name|HttpHost
argument_list|>
name|hostFilter
parameter_list|)
throws|throws
name|IOException
block|{
name|IOException
name|lastSeenException
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|connectionIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StatefulConnection
name|connection
init|=
name|connectionIterator
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|HttpHost
argument_list|>
name|sniffedNodes
init|=
name|sniffer
operator|.
name|sniffNodes
argument_list|(
name|connection
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|HttpHost
index|[]
name|filteredNodes
init|=
name|sniffedNodes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|hostFilter
argument_list|)
operator|.
name|toArray
argument_list|(
name|HttpHost
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"adding "
operator|+
name|filteredNodes
operator|.
name|length
operator|+
literal|" nodes out of "
operator|+
name|sniffedNodes
operator|.
name|size
argument_list|()
operator|+
literal|" sniffed nodes"
argument_list|)
expr_stmt|;
name|connections
operator|=
name|createConnections
argument_list|(
name|filteredNodes
argument_list|)
expr_stmt|;
name|onSuccess
argument_list|(
name|connection
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//here we have control over the request, if it fails something is really wrong, always call onFailure
name|onFailure
argument_list|(
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSeenException
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|lastSeenException
argument_list|)
expr_stmt|;
block|}
name|lastSeenException
operator|=
name|e
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to sniff nodes"
argument_list|,
name|lastSeenException
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown
name|void
name|shutdown
parameter_list|()
block|{
name|scheduledExecutorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|scheduledExecutorService
operator|.
name|awaitTermination
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|scheduledExecutorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

