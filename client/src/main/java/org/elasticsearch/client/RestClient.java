begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URLEncodedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicNameValuePair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|RestClient
specifier|public
class|class
name|RestClient
implements|implements
name|Closeable
block|{
DECL|field|client
specifier|private
specifier|final
name|CloseableHttpClient
name|client
decl_stmt|;
DECL|field|hosts
specifier|private
specifier|volatile
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|hosts
decl_stmt|;
DECL|field|scheme
specifier|private
specifier|final
name|String
name|scheme
decl_stmt|;
DECL|field|blackList
specifier|private
specifier|final
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|blackList
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|RestClient
specifier|public
name|RestClient
parameter_list|(
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
name|this
argument_list|(
literal|"http"
argument_list|,
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|setDefaultRequestConfig
argument_list|(
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setConnectTimeout
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
DECL|method|RestClient
specifier|public
name|RestClient
parameter_list|(
name|String
name|scheme
parameter_list|,
name|CloseableHttpClient
name|client
parameter_list|,
name|HttpHost
index|[]
name|hosts
parameter_list|)
block|{
if|if
condition|(
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"hosts must note be empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|hosts
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hosts
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|httpGet
specifier|public
name|HttpResponse
name|httpGet
parameter_list|(
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|httpGet
argument_list|(
name|getHostIterator
argument_list|(
literal|true
argument_list|)
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|httpGet
name|HttpResponse
name|httpGet
parameter_list|(
name|Iterable
argument_list|<
name|HttpHost
argument_list|>
name|hosts
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpUriRequest
name|request
init|=
operator|new
name|HttpGet
argument_list|(
name|buildUri
argument_list|(
name|endpoint
argument_list|,
name|pairs
argument_list|(
name|params
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|execute
argument_list|(
name|request
argument_list|,
name|hosts
argument_list|)
return|;
block|}
DECL|method|httpDelete
name|HttpResponse
name|httpDelete
parameter_list|(
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpUriRequest
name|request
init|=
operator|new
name|HttpDelete
argument_list|(
name|buildUri
argument_list|(
name|endpoint
argument_list|,
name|pairs
argument_list|(
name|params
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|execute
argument_list|(
name|request
argument_list|,
name|getHostIterator
argument_list|(
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|httpPut
name|HttpResponse
name|httpPut
parameter_list|(
name|String
name|endpoint
parameter_list|,
name|HttpEntity
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpPut
name|request
init|=
operator|new
name|HttpPut
argument_list|(
name|buildUri
argument_list|(
name|endpoint
argument_list|,
name|pairs
argument_list|(
name|params
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setEntity
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|execute
argument_list|(
name|request
argument_list|,
name|getHostIterator
argument_list|(
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|httpPost
name|HttpResponse
name|httpPost
parameter_list|(
name|String
name|endpoint
parameter_list|,
name|HttpEntity
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpPost
name|request
init|=
operator|new
name|HttpPost
argument_list|(
name|buildUri
argument_list|(
name|endpoint
argument_list|,
name|pairs
argument_list|(
name|params
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setEntity
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|execute
argument_list|(
name|request
argument_list|,
name|getHostIterator
argument_list|(
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|pairs
specifier|private
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|pairs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
return|return
name|options
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
operator|new
name|BasicNameValuePair
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|execute
specifier|public
name|HttpResponse
name|execute
parameter_list|(
name|HttpUriRequest
name|request
parameter_list|,
name|Iterable
argument_list|<
name|HttpHost
argument_list|>
name|retryHosts
parameter_list|)
throws|throws
name|IOException
block|{
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HttpHost
name|singleHost
range|:
name|retryHosts
control|)
block|{
try|try
block|{
return|return
name|client
operator|.
name|execute
argument_list|(
name|singleHost
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|hosts
operator|.
name|contains
argument_list|(
name|singleHost
argument_list|)
condition|)
block|{
name|blackList
operator|.
name|add
argument_list|(
name|singleHost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|exception
operator|.
name|addSuppressed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exception
operator|=
name|ex
expr_stmt|;
block|}
block|}
block|}
throw|throw
name|exception
throw|;
block|}
DECL|method|buildUri
specifier|public
name|URI
name|buildUri
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|query
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|path
argument_list|,
name|URLEncodedUtils
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|fetchNodes
specifier|public
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|fetchNodes
parameter_list|(
name|HttpHost
name|host
parameter_list|,
name|boolean
name|useClientNodes
parameter_list|,
name|boolean
name|local
parameter_list|,
name|boolean
name|checkAvailable
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpResponse
name|httpResponse
init|=
name|httpGet
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|host
argument_list|)
argument_list|,
literal|"/_cat/nodes"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"h"
argument_list|,
literal|"http,role"
argument_list|)
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to fetch nodes: "
operator|+
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
name|HttpEntity
name|entity
init|=
name|httpResponse
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|hosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|content
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|content
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
index|[]
name|split
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
assert|assert
name|split
operator|.
name|length
operator|==
literal|2
assert|;
name|String
name|boundAddress
init|=
name|split
index|[
literal|0
index|]
decl_stmt|;
name|String
name|role
init|=
name|split
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|split
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
literal|"d"
operator|.
name|equals
argument_list|(
name|role
operator|.
name|trim
argument_list|()
argument_list|)
operator|==
literal|false
operator|&&
name|useClientNodes
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
name|URI
name|boundAddressAsURI
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|boundAddress
argument_list|)
decl_stmt|;
name|HttpHost
name|newHost
init|=
operator|new
name|HttpHost
argument_list|(
name|boundAddressAsURI
operator|.
name|getHost
argument_list|()
argument_list|,
name|boundAddressAsURI
operator|.
name|getPort
argument_list|()
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAvailable
operator|==
literal|false
operator|||
name|isAvailable
argument_list|(
name|newHost
argument_list|)
condition|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|newHost
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|hosts
return|;
block|}
DECL|method|getClusterName
specifier|public
name|String
name|getClusterName
parameter_list|(
name|HttpHost
name|host
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpResponse
name|httpResponse
init|=
name|httpGet
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|host
argument_list|)
argument_list|,
literal|"/_cat/health"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"h"
argument_list|,
literal|"cluster"
argument_list|)
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to fetch nodes: "
operator|+
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
name|HttpEntity
name|entity
init|=
name|httpResponse
operator|.
name|getEntity
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|content
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|String
name|clusterName
init|=
name|content
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"clustername must not be empty"
argument_list|)
throw|;
block|}
return|return
name|clusterName
return|;
block|}
block|}
DECL|method|isAvailable
specifier|public
name|boolean
name|isAvailable
parameter_list|(
name|HttpHost
name|host
parameter_list|)
block|{
try|try
block|{
name|HttpResponse
name|httpResponse
init|=
name|httpGet
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|host
argument_list|)
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
return|return
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|200
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|setNodes
specifier|public
specifier|synchronized
name|void
name|setNodes
parameter_list|(
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|hosts
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|hosts
argument_list|)
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|retainAll
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
block|}
DECL|method|getHosts
specifier|public
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|getHosts
parameter_list|()
block|{
return|return
name|hosts
return|;
block|}
DECL|method|getHostIterator
specifier|protected
name|Iterable
argument_list|<
name|HttpHost
argument_list|>
name|getHostIterator
parameter_list|(
name|boolean
name|clearBlacklist
parameter_list|)
block|{
if|if
condition|(
name|hosts
operator|.
name|size
argument_list|()
operator|==
name|blackList
operator|.
name|size
argument_list|()
operator|&&
name|clearBlacklist
condition|)
block|{
name|blackList
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// lets try again
block|}
return|return
parameter_list|()
lambda|->
name|hosts
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|h
parameter_list|)
lambda|->
name|blackList
operator|.
name|contains
argument_list|(
name|h
argument_list|)
operator|==
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|getNumHosts
name|int
name|getNumHosts
parameter_list|()
block|{
return|return
name|hosts
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getNumBlacklistedHosts
name|int
name|getNumBlacklistedHosts
parameter_list|()
block|{
return|return
name|blackList
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

