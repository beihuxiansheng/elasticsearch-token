begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Represents an Elasticsearch node.  * Holds its http address as an {@link HttpHost} instance, as well as its optional set of roles and attributes.  * Roles and attributes can be populated in one of the two following ways:  * 1) using a connection pool that supports sniffing, so that all the info is retrieved from elasticsearch itself  * 2) manually passing the info through the {@link #Node(HttpHost, Set, Map)} constructor  * Roles and attributes may be taken into account as part of connection selection by the connection pool, which  * can be customized by passing in a predicate at connection pool creation.  */
end_comment

begin_class
DECL|class|Node
specifier|public
class|class
name|Node
block|{
DECL|field|httpHost
specifier|private
specifier|final
name|HttpHost
name|httpHost
decl_stmt|;
DECL|field|roles
specifier|private
specifier|final
name|Set
argument_list|<
name|Role
argument_list|>
name|roles
decl_stmt|;
DECL|field|attributes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
decl_stmt|;
comment|/**      * Creates a node given its http address as an {@link HttpHost} instance.      * Roles are not provided hence all possible roles will be assumed, as that is the default in Elasticsearch.      * No attributes will be associated with the node.      *      * @param httpHost the http address of the node      */
DECL|method|Node
specifier|public
name|Node
parameter_list|(
name|HttpHost
name|httpHost
parameter_list|)
block|{
name|this
argument_list|(
name|httpHost
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Role
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a node given its http address as an {@link HttpHost} instance, its set or roles and attributes.      *      * @param httpHost the http address of the node      * @param roles the set of roles that the node fulfills within the cluster      * @param attributes the attributes associated with the node      */
DECL|method|Node
specifier|public
name|Node
parameter_list|(
name|HttpHost
name|httpHost
parameter_list|,
name|Set
argument_list|<
name|Role
argument_list|>
name|roles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|httpHost
argument_list|,
literal|"host cannot be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|roles
argument_list|,
literal|"roles cannot be null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|attributes
argument_list|,
literal|"attributes cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpHost
operator|=
name|httpHost
expr_stmt|;
name|this
operator|.
name|roles
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|roles
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the http address of the node      */
DECL|method|getHttpHost
specifier|public
name|HttpHost
name|getHttpHost
parameter_list|()
block|{
return|return
name|httpHost
return|;
block|}
comment|/**      * Returns the set of roles associated with the node      */
DECL|method|getRoles
specifier|public
name|Set
argument_list|<
name|Role
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|roles
return|;
block|}
comment|/**      * Returns the set of attributes associated with the node      */
DECL|method|getAttributes
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Node{"
operator|+
literal|"httpHost="
operator|+
name|httpHost
operator|+
literal|", roles="
operator|+
name|roles
operator|+
literal|", attributes="
operator|+
name|attributes
operator|+
literal|'}'
return|;
block|}
comment|/**      * Holds all the potential roles that a node can fulfill within a cluster      */
DECL|enum|Role
specifier|public
enum|enum
name|Role
block|{
comment|/**          * Data node          */
DECL|enum constant|DATA
name|DATA
block|,
comment|/**          * Master eligible node          */
DECL|enum constant|MASTER
name|MASTER
block|,
comment|/**          * Ingest node          */
DECL|enum constant|INGEST
name|INGEST
block|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

