begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Pool of connections to the different hosts that belong to an elasticsearch cluster.  * It keeps track of the different hosts to communicate with and allows to retrieve a stream of connections to be used  * for each request. Marks connections as dead/alive when needed.  * Provides a stream of alive connections or dead ones that should be retried for each {@link #nextConnection()} call.  * In case the returned stream is empty a last resort dead connection should be retrieved by calling {@link #lastResortConnection()}  * and resurrected so that a last resort request attempt can be performed.  * The {@link #onSuccess(Connection)} method marks the connection provided as an argument alive.  * The {@link #onFailure(Connection)} method marks the connection provided as an argument dead.  * This base implementation doesn't define the list implementation that stores connections, so that concurrency can be  * handled in subclasses depending on the usecase (e.g. defining the list volatile or final when needed).  */
end_comment

begin_class
DECL|class|ConnectionPool
specifier|public
specifier|abstract
class|class
name|ConnectionPool
implements|implements
name|Closeable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConnectionPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lastConnectionIndex
specifier|private
specifier|final
name|AtomicInteger
name|lastConnectionIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Allows to retrieve the concrete list of connections. Not defined directly as a member      * of this class as subclasses may need to handle concurrency if the list can change, for      * instance defining the field as volatile. On the other hand static implementations      * can just make the list final instead.      */
DECL|method|getConnections
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Connection
argument_list|>
name|getConnections
parameter_list|()
function_decl|;
comment|/**      * Returns a stream of connections that should be used for a request call.      * Ideally, the first connection is retrieved from the stream and used successfully for the request.      * Otherwise, after each failure the next connection should be retrieved from the stream so that the request can be retried.      * The maximum total of attempts is equal to the number of connections that are available in the stream.      * It may happen that the stream is empty, in which case it means that there aren't healthy connections to use.      * Then {@link #lastResortConnection()} should be called to retrieve a non healthy connection and try it.      */
DECL|method|nextConnection
specifier|public
specifier|final
name|Iterator
argument_list|<
name|Connection
argument_list|>
name|nextConnection
parameter_list|()
block|{
name|List
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
name|getConnections
argument_list|()
decl_stmt|;
if|if
condition|(
name|connections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no connections available in the connection pool"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Connection
argument_list|>
name|sortedConnections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|connections
argument_list|)
decl_stmt|;
comment|//TODO is it possible to make this O(1)? (rotate is O(n))
name|Collections
operator|.
name|rotate
argument_list|(
name|sortedConnections
argument_list|,
name|sortedConnections
operator|.
name|size
argument_list|()
operator|-
name|lastConnectionIndex
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Connection
argument_list|>
name|connectionIterator
init|=
name|sortedConnections
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|connectionIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Connection
name|connection
init|=
name|connectionIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|isAlive
argument_list|()
operator|==
literal|false
operator|&&
name|connection
operator|.
name|shouldBeRetried
argument_list|()
operator|==
literal|false
condition|)
block|{
name|connectionIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|connectionIterator
return|;
block|}
comment|/**      * Helper method to be used by subclasses when needing to create a new list      * of connections given their corresponding hosts      */
DECL|method|createConnections
specifier|protected
specifier|final
name|List
argument_list|<
name|Connection
argument_list|>
name|createConnections
parameter_list|(
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
name|List
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HttpHost
name|host
range|:
name|hosts
control|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|host
argument_list|,
literal|"host cannot be null"
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
operator|new
name|Connection
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|connections
argument_list|)
return|;
block|}
comment|/**      * Returns a connection that is not necessarily healthy, but can be used for a request attempt. To be called as last resort      * only in case {@link #nextConnection()} returns an empty stream.      */
DECL|method|lastResortConnection
specifier|public
specifier|final
name|Connection
name|lastResortConnection
parameter_list|()
block|{
name|List
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
name|getConnections
argument_list|()
decl_stmt|;
if|if
condition|(
name|connections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no connections available in the connection pool"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Connection
argument_list|>
name|sortedConnections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|connections
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedConnections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Connection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Connection
name|o1
parameter_list|,
name|Connection
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getDeadUntil
argument_list|()
argument_list|,
name|o2
operator|.
name|getDeadUntil
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|sortedConnections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * Called after each successful request call.      * Receives as an argument the connection that was used for the successful request.      */
DECL|method|onSuccess
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|connection
operator|.
name|markAlive
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"marked connection alive for "
operator|+
name|connection
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called after each failed attempt.      * Receives as an argument the connection that was used for the failed attempt.      */
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|markDead
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"marked connection dead for "
operator|+
name|connection
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

