begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActiveShardCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_class
DECL|class|Request
specifier|final
class|class
name|Request
block|{
DECL|field|REQUEST_BODY_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|XContentType
name|REQUEST_BODY_CONTENT_TYPE
init|=
name|XContentType
operator|.
name|JSON
decl_stmt|;
DECL|field|method
specifier|final
name|String
name|method
decl_stmt|;
DECL|field|endpoint
specifier|final
name|String
name|endpoint
decl_stmt|;
DECL|field|params
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|field|entity
specifier|final
name|HttpEntity
name|entity
decl_stmt|;
DECL|method|Request
name|Request
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HttpEntity
name|entity
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Request{"
operator|+
literal|"method='"
operator|+
name|method
operator|+
literal|'\''
operator|+
literal|", endpoint='"
operator|+
name|endpoint
operator|+
literal|'\''
operator|+
literal|", params="
operator|+
name|params
operator|+
literal|", hasBody="
operator|+
operator|(
name|entity
operator|!=
literal|null
operator|)
operator|+
literal|'}'
return|;
block|}
DECL|method|delete
specifier|static
name|Request
name|delete
parameter_list|(
name|DeleteRequest
name|deleteRequest
parameter_list|)
block|{
name|String
name|endpoint
init|=
name|endpoint
argument_list|(
name|deleteRequest
operator|.
name|index
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|Params
name|parameters
init|=
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|withRouting
argument_list|(
name|deleteRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withParent
argument_list|(
name|deleteRequest
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withTimeout
argument_list|(
name|deleteRequest
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersion
argument_list|(
name|deleteRequest
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersionType
argument_list|(
name|deleteRequest
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRefreshPolicy
argument_list|(
name|deleteRequest
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withWaitForActiveShards
argument_list|(
name|deleteRequest
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Request
argument_list|(
name|HttpDelete
operator|.
name|METHOD_NAME
argument_list|,
name|endpoint
argument_list|,
name|parameters
operator|.
name|getParams
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|info
specifier|static
name|Request
name|info
parameter_list|()
block|{
return|return
operator|new
name|Request
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|bulk
specifier|static
name|Request
name|bulk
parameter_list|(
name|BulkRequest
name|bulkRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|Params
name|parameters
init|=
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|withTimeout
argument_list|(
name|bulkRequest
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRefreshPolicy
argument_list|(
name|bulkRequest
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// Bulk API only supports newline delimited JSON or Smile. Before executing
comment|// the bulk, we need to check that all requests have the same content-type
comment|// and this content-type is supported by the Bulk API.
name|XContentType
name|bulkContentType
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bulkRequest
operator|.
name|numberOfActions
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocWriteRequest
argument_list|<
name|?
argument_list|>
name|request
init|=
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DocWriteRequest
operator|.
name|OpType
name|opType
init|=
name|request
operator|.
name|opType
argument_list|()
decl_stmt|;
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
operator|||
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
condition|)
block|{
name|bulkContentType
operator|=
name|enforceSameContentType
argument_list|(
operator|(
name|IndexRequest
operator|)
name|request
argument_list|,
name|bulkContentType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
condition|)
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|(
name|UpdateRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|updateRequest
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bulkContentType
operator|=
name|enforceSameContentType
argument_list|(
name|updateRequest
operator|.
name|doc
argument_list|()
argument_list|,
name|bulkContentType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateRequest
operator|.
name|upsertRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bulkContentType
operator|=
name|enforceSameContentType
argument_list|(
name|updateRequest
operator|.
name|upsertRequest
argument_list|()
argument_list|,
name|bulkContentType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bulkContentType
operator|==
literal|null
condition|)
block|{
name|bulkContentType
operator|=
name|XContentType
operator|.
name|JSON
expr_stmt|;
block|}
name|byte
name|separator
init|=
name|bulkContentType
operator|.
name|xContent
argument_list|()
operator|.
name|streamSeparator
argument_list|()
decl_stmt|;
name|ContentType
name|requestContentType
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|bulkContentType
operator|.
name|mediaType
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|content
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|DocWriteRequest
argument_list|<
name|?
argument_list|>
name|request
range|:
name|bulkRequest
operator|.
name|requests
argument_list|()
control|)
block|{
name|DocWriteRequest
operator|.
name|OpType
name|opType
init|=
name|request
operator|.
name|opType
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|metadata
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|bulkContentType
operator|.
name|xContent
argument_list|()
argument_list|)
init|)
block|{
name|metadata
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|metadata
operator|.
name|startObject
argument_list|(
name|opType
operator|.
name|getLowercase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_index"
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_type"
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_id"
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|request
operator|.
name|routing
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_routing"
argument_list|,
name|request
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|request
operator|.
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_parent"
argument_list|,
name|request
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|version
argument_list|()
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_version"
argument_list|,
name|request
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|VersionType
name|versionType
init|=
name|request
operator|.
name|versionType
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
if|if
condition|(
name|versionType
operator|==
name|VersionType
operator|.
name|EXTERNAL
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_version_type"
argument_list|,
literal|"external"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionType
operator|==
name|VersionType
operator|.
name|EXTERNAL_GTE
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_version_type"
argument_list|,
literal|"external_gte"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionType
operator|==
name|VersionType
operator|.
name|FORCE
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_version_type"
argument_list|,
literal|"force"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
operator|||
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"pipeline"
argument_list|,
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
condition|)
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|(
name|UpdateRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_retry_on_conflict"
argument_list|,
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateRequest
operator|.
name|fetchSource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|field
argument_list|(
literal|"_source"
argument_list|,
name|updateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|metadata
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|metadata
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|BytesRef
name|metadataSource
init|=
name|metadata
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
name|content
operator|.
name|write
argument_list|(
name|metadataSource
operator|.
name|bytes
argument_list|,
name|metadataSource
operator|.
name|offset
argument_list|,
name|metadataSource
operator|.
name|length
argument_list|)
expr_stmt|;
name|content
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|BytesRef
name|source
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
operator|||
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|request
decl_stmt|;
name|BytesReference
name|indexSource
init|=
name|indexRequest
operator|.
name|source
argument_list|()
decl_stmt|;
name|XContentType
name|indexXContentType
init|=
name|indexRequest
operator|.
name|getContentType
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|,
name|indexSource
argument_list|,
name|indexXContentType
argument_list|)
init|)
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|bulkContentType
operator|.
name|xContent
argument_list|()
argument_list|)
init|)
block|{
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|source
operator|=
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
condition|)
block|{
name|source
operator|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
operator|(
name|UpdateRequest
operator|)
name|request
argument_list|,
name|bulkContentType
argument_list|,
literal|false
argument_list|)
operator|.
name|toBytesRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|write
argument_list|(
name|source
operator|.
name|bytes
argument_list|,
name|source
operator|.
name|offset
argument_list|,
name|source
operator|.
name|length
argument_list|)
expr_stmt|;
name|content
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
name|HttpEntity
name|entity
init|=
operator|new
name|ByteArrayEntity
argument_list|(
name|content
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|size
argument_list|()
argument_list|,
name|requestContentType
argument_list|)
decl_stmt|;
return|return
operator|new
name|Request
argument_list|(
name|HttpPost
operator|.
name|METHOD_NAME
argument_list|,
literal|"/_bulk"
argument_list|,
name|parameters
operator|.
name|getParams
argument_list|()
argument_list|,
name|entity
argument_list|)
return|;
block|}
DECL|method|exists
specifier|static
name|Request
name|exists
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|)
block|{
name|Request
name|request
init|=
name|get
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
return|return
operator|new
name|Request
argument_list|(
name|HttpHead
operator|.
name|METHOD_NAME
argument_list|,
name|request
operator|.
name|endpoint
argument_list|,
name|request
operator|.
name|params
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|get
specifier|static
name|Request
name|get
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|)
block|{
name|String
name|endpoint
init|=
name|endpoint
argument_list|(
name|getRequest
operator|.
name|index
argument_list|()
argument_list|,
name|getRequest
operator|.
name|type
argument_list|()
argument_list|,
name|getRequest
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|Params
name|parameters
init|=
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|withPreference
argument_list|(
name|getRequest
operator|.
name|preference
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRouting
argument_list|(
name|getRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withParent
argument_list|(
name|getRequest
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRefresh
argument_list|(
name|getRequest
operator|.
name|refresh
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRealtime
argument_list|(
name|getRequest
operator|.
name|realtime
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withStoredFields
argument_list|(
name|getRequest
operator|.
name|storedFields
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersion
argument_list|(
name|getRequest
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersionType
argument_list|(
name|getRequest
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withFetchSourceContext
argument_list|(
name|getRequest
operator|.
name|fetchSourceContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Request
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|,
name|endpoint
argument_list|,
name|parameters
operator|.
name|getParams
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|index
specifier|static
name|Request
name|index
parameter_list|(
name|IndexRequest
name|indexRequest
parameter_list|)
block|{
name|String
name|method
init|=
name|Strings
operator|.
name|hasLength
argument_list|(
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|)
condition|?
name|HttpPut
operator|.
name|METHOD_NAME
else|:
name|HttpPost
operator|.
name|METHOD_NAME
decl_stmt|;
name|boolean
name|isCreate
init|=
operator|(
name|indexRequest
operator|.
name|opType
argument_list|()
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
operator|)
decl_stmt|;
name|String
name|endpoint
init|=
name|endpoint
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|isCreate
condition|?
literal|"_create"
else|:
literal|null
argument_list|)
decl_stmt|;
name|Params
name|parameters
init|=
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|withRouting
argument_list|(
name|indexRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withParent
argument_list|(
name|indexRequest
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withTimeout
argument_list|(
name|indexRequest
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersion
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withPipeline
argument_list|(
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRefreshPolicy
argument_list|(
name|indexRequest
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withWaitForActiveShards
argument_list|(
name|indexRequest
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|source
init|=
name|indexRequest
operator|.
name|source
argument_list|()
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
name|ContentType
name|contentType
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|indexRequest
operator|.
name|getContentType
argument_list|()
operator|.
name|mediaType
argument_list|()
argument_list|)
decl_stmt|;
name|HttpEntity
name|entity
init|=
operator|new
name|ByteArrayEntity
argument_list|(
name|source
operator|.
name|bytes
argument_list|,
name|source
operator|.
name|offset
argument_list|,
name|source
operator|.
name|length
argument_list|,
name|contentType
argument_list|)
decl_stmt|;
return|return
operator|new
name|Request
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|parameters
operator|.
name|getParams
argument_list|()
argument_list|,
name|entity
argument_list|)
return|;
block|}
DECL|method|ping
specifier|static
name|Request
name|ping
parameter_list|()
block|{
return|return
operator|new
name|Request
argument_list|(
name|HttpHead
operator|.
name|METHOD_NAME
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|update
specifier|static
name|Request
name|update
parameter_list|(
name|UpdateRequest
name|updateRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|endpoint
init|=
name|endpoint
argument_list|(
name|updateRequest
operator|.
name|index
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|id
argument_list|()
argument_list|,
literal|"_update"
argument_list|)
decl_stmt|;
name|Params
name|parameters
init|=
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|withRouting
argument_list|(
name|updateRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withParent
argument_list|(
name|updateRequest
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withTimeout
argument_list|(
name|updateRequest
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRefreshPolicy
argument_list|(
name|updateRequest
operator|.
name|getRefreshPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withWaitForActiveShards
argument_list|(
name|updateRequest
operator|.
name|waitForActiveShards
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withDocAsUpsert
argument_list|(
name|updateRequest
operator|.
name|docAsUpsert
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withFetchSourceContext
argument_list|(
name|updateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withRetryOnConflict
argument_list|(
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersion
argument_list|(
name|updateRequest
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|withVersionType
argument_list|(
name|updateRequest
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
comment|// The Java API allows update requests with different content types
comment|// set for the partial document and the upsert document. This client
comment|// only accepts update requests that have the same content types set
comment|// for both doc and upsert.
name|XContentType
name|xContentType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|updateRequest
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xContentType
operator|=
name|updateRequest
operator|.
name|doc
argument_list|()
operator|.
name|getContentType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|updateRequest
operator|.
name|upsertRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XContentType
name|upsertContentType
init|=
name|updateRequest
operator|.
name|upsertRequest
argument_list|()
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|xContentType
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|xContentType
operator|!=
name|upsertContentType
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Update request cannot have different content types for doc ["
operator|+
name|xContentType
operator|+
literal|"]"
operator|+
literal|" and upsert ["
operator|+
name|upsertContentType
operator|+
literal|"] documents"
argument_list|)
throw|;
block|}
else|else
block|{
name|xContentType
operator|=
name|upsertContentType
expr_stmt|;
block|}
block|}
if|if
condition|(
name|xContentType
operator|==
literal|null
condition|)
block|{
name|xContentType
operator|=
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
expr_stmt|;
block|}
name|HttpEntity
name|entity
init|=
name|createEntity
argument_list|(
name|updateRequest
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
return|return
operator|new
name|Request
argument_list|(
name|HttpPost
operator|.
name|METHOD_NAME
argument_list|,
name|endpoint
argument_list|,
name|parameters
operator|.
name|getParams
argument_list|()
argument_list|,
name|entity
argument_list|)
return|;
block|}
DECL|method|search
specifier|static
name|Request
name|search
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|endpoint
init|=
name|endpoint
argument_list|(
name|searchRequest
operator|.
name|indices
argument_list|()
argument_list|,
name|searchRequest
operator|.
name|types
argument_list|()
argument_list|,
literal|"_search"
argument_list|)
decl_stmt|;
name|Params
name|params
init|=
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|params
operator|.
name|putParam
argument_list|(
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|withRouting
argument_list|(
name|searchRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|withPreference
argument_list|(
name|searchRequest
operator|.
name|preference
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|withIndicesOptions
argument_list|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|putParam
argument_list|(
literal|"search_type"
argument_list|,
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchRequest
operator|.
name|requestCache
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|putParam
argument_list|(
literal|"request_cache"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|searchRequest
operator|.
name|requestCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|putParam
argument_list|(
literal|"batched_reduce_size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|searchRequest
operator|.
name|getBatchedReduceSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchRequest
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|putParam
argument_list|(
literal|"scroll"
argument_list|,
name|searchRequest
operator|.
name|scroll
argument_list|()
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|searchRequest
operator|.
name|source
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|entity
operator|=
name|createEntity
argument_list|(
name|searchRequest
operator|.
name|source
argument_list|()
argument_list|,
name|REQUEST_BODY_CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Request
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|,
name|endpoint
argument_list|,
name|params
operator|.
name|getParams
argument_list|()
argument_list|,
name|entity
argument_list|)
return|;
block|}
DECL|method|createEntity
specifier|private
specifier|static
name|HttpEntity
name|createEntity
parameter_list|(
name|ToXContent
name|toXContent
parameter_list|,
name|XContentType
name|xContentType
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesRef
name|source
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|toXContent
argument_list|,
name|xContentType
argument_list|,
literal|false
argument_list|)
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
return|return
operator|new
name|ByteArrayEntity
argument_list|(
name|source
operator|.
name|bytes
argument_list|,
name|source
operator|.
name|offset
argument_list|,
name|source
operator|.
name|length
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|xContentType
operator|.
name|mediaType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|endpoint
specifier|static
name|String
name|endpoint
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|String
index|[]
name|types
parameter_list|,
name|String
name|endpoint
parameter_list|)
block|{
return|return
name|endpoint
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|indices
argument_list|)
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|types
argument_list|)
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Utility method to build request's endpoint.      */
DECL|method|endpoint
specifier|static
name|String
name|endpoint
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
name|StringJoiner
name|joiner
init|=
operator|new
name|StringJoiner
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|joiner
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|joiner
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Utility class to build request's parameters map and centralize all parameter names.      */
DECL|class|Params
specifier|static
class|class
name|Params
block|{
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Params
specifier|private
name|Params
parameter_list|()
block|{         }
DECL|method|putParam
name|Params
name|putParam
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Request parameter ["
operator|+
name|key
operator|+
literal|"] is already registered"
argument_list|)
throw|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|putParam
name|Params
name|putParam
parameter_list|(
name|String
name|key
parameter_list|,
name|TimeValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|putParam
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|getStringRep
argument_list|()
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withDocAsUpsert
name|Params
name|withDocAsUpsert
parameter_list|(
name|boolean
name|docAsUpsert
parameter_list|)
block|{
if|if
condition|(
name|docAsUpsert
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"doc_as_upsert"
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withFetchSourceContext
name|Params
name|withFetchSourceContext
parameter_list|(
name|FetchSourceContext
name|fetchSourceContext
parameter_list|)
block|{
if|if
condition|(
name|fetchSourceContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fetchSourceContext
operator|.
name|fetchSource
argument_list|()
operator|==
literal|false
condition|)
block|{
name|putParam
argument_list|(
literal|"_source"
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSourceContext
operator|.
name|includes
argument_list|()
operator|!=
literal|null
operator|&&
name|fetchSourceContext
operator|.
name|includes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|putParam
argument_list|(
literal|"_source_include"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|fetchSourceContext
operator|.
name|includes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSourceContext
operator|.
name|excludes
argument_list|()
operator|!=
literal|null
operator|&&
name|fetchSourceContext
operator|.
name|excludes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|putParam
argument_list|(
literal|"_source_exclude"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|fetchSourceContext
operator|.
name|excludes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|withParent
name|Params
name|withParent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
return|return
name|putParam
argument_list|(
literal|"parent"
argument_list|,
name|parent
argument_list|)
return|;
block|}
DECL|method|withPipeline
name|Params
name|withPipeline
parameter_list|(
name|String
name|pipeline
parameter_list|)
block|{
return|return
name|putParam
argument_list|(
literal|"pipeline"
argument_list|,
name|pipeline
argument_list|)
return|;
block|}
DECL|method|withPreference
name|Params
name|withPreference
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
return|return
name|putParam
argument_list|(
literal|"preference"
argument_list|,
name|preference
argument_list|)
return|;
block|}
DECL|method|withRealtime
name|Params
name|withRealtime
parameter_list|(
name|boolean
name|realtime
parameter_list|)
block|{
if|if
condition|(
name|realtime
operator|==
literal|false
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"realtime"
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withRefresh
name|Params
name|withRefresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
if|if
condition|(
name|refresh
condition|)
block|{
return|return
name|withRefreshPolicy
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|IMMEDIATE
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withRefreshPolicy
name|Params
name|withRefreshPolicy
parameter_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
parameter_list|)
block|{
if|if
condition|(
name|refreshPolicy
operator|!=
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"refresh"
argument_list|,
name|refreshPolicy
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withRetryOnConflict
name|Params
name|withRetryOnConflict
parameter_list|(
name|int
name|retryOnConflict
parameter_list|)
block|{
if|if
condition|(
name|retryOnConflict
operator|>
literal|0
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"retry_on_conflict"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|retryOnConflict
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withRouting
name|Params
name|withRouting
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
return|return
name|putParam
argument_list|(
literal|"routing"
argument_list|,
name|routing
argument_list|)
return|;
block|}
DECL|method|withStoredFields
name|Params
name|withStoredFields
parameter_list|(
name|String
index|[]
name|storedFields
parameter_list|)
block|{
if|if
condition|(
name|storedFields
operator|!=
literal|null
operator|&&
name|storedFields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"stored_fields"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|storedFields
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withTimeout
name|Params
name|withTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
return|return
name|putParam
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
return|;
block|}
DECL|method|withVersion
name|Params
name|withVersion
parameter_list|(
name|long
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"version"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withVersionType
name|Params
name|withVersionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
if|if
condition|(
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"version_type"
argument_list|,
name|versionType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withWaitForActiveShards
name|Params
name|withWaitForActiveShards
parameter_list|(
name|ActiveShardCount
name|activeShardCount
parameter_list|)
block|{
if|if
condition|(
name|activeShardCount
operator|!=
literal|null
operator|&&
name|activeShardCount
operator|!=
name|ActiveShardCount
operator|.
name|DEFAULT
condition|)
block|{
return|return
name|putParam
argument_list|(
literal|"wait_for_active_shards"
argument_list|,
name|activeShardCount
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
DECL|method|withIndicesOptions
name|Params
name|withIndicesOptions
parameter_list|(
name|IndicesOptions
name|indicesOptions
parameter_list|)
block|{
name|putParam
argument_list|(
literal|"ignore_unavailable"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|indicesOptions
operator|.
name|ignoreUnavailable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|putParam
argument_list|(
literal|"allow_no_indices"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|indicesOptions
operator|.
name|allowNoIndices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expandWildcards
decl_stmt|;
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
operator|==
literal|false
operator|&&
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
operator|==
literal|false
condition|)
block|{
name|expandWildcards
operator|=
literal|"none"
expr_stmt|;
block|}
else|else
block|{
name|StringJoiner
name|joiner
init|=
operator|new
name|StringJoiner
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsOpen
argument_list|()
condition|)
block|{
name|joiner
operator|.
name|add
argument_list|(
literal|"open"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indicesOptions
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|joiner
operator|.
name|add
argument_list|(
literal|"closed"
argument_list|)
expr_stmt|;
block|}
name|expandWildcards
operator|=
name|joiner
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|putParam
argument_list|(
literal|"expand_wildcards"
argument_list|,
name|expandWildcards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getParams
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|method|builder
specifier|static
name|Params
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Params
argument_list|()
return|;
block|}
block|}
comment|/**      * Ensure that the {@link IndexRequest}'s content type is supported by the Bulk API and that it conforms      * to the current {@link BulkRequest}'s content type (if it's known at the time of this method get called).      *      * @return the {@link IndexRequest}'s content type      */
DECL|method|enforceSameContentType
specifier|static
name|XContentType
name|enforceSameContentType
parameter_list|(
name|IndexRequest
name|indexRequest
parameter_list|,
annotation|@
name|Nullable
name|XContentType
name|xContentType
parameter_list|)
block|{
name|XContentType
name|requestContentType
init|=
name|indexRequest
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestContentType
operator|!=
name|XContentType
operator|.
name|JSON
operator|&&
name|requestContentType
operator|!=
name|XContentType
operator|.
name|SMILE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported content-type found for request with content-type ["
operator|+
name|requestContentType
operator|+
literal|"], only JSON and SMILE are supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|xContentType
operator|==
literal|null
condition|)
block|{
return|return
name|requestContentType
return|;
block|}
if|if
condition|(
name|requestContentType
operator|!=
name|xContentType
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Mismatching content-type found for request with content-type ["
operator|+
name|requestContentType
operator|+
literal|"], previous requests have content-type ["
operator|+
name|xContentType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|xContentType
return|;
block|}
block|}
end_class

end_unit

