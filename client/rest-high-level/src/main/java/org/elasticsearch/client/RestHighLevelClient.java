begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchStatusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ContextParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|aggregations
operator|.
name|ChildrenAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|join
operator|.
name|aggregations
operator|.
name|ParsedChildren
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|adjacency
operator|.
name|AdjacencyMatrixAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|adjacency
operator|.
name|ParsedAdjacencyMatrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filter
operator|.
name|FilterAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filter
operator|.
name|ParsedFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filters
operator|.
name|FiltersAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filters
operator|.
name|ParsedFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|geogrid
operator|.
name|GeoGridAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|geogrid
operator|.
name|ParsedGeoHashGrid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|global
operator|.
name|GlobalAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|global
operator|.
name|ParsedGlobal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|DateHistogramAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|HistogramAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|ParsedDateHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|ParsedHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|missing
operator|.
name|MissingAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|missing
operator|.
name|ParsedMissing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|nested
operator|.
name|NestedAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|nested
operator|.
name|ParsedNested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|nested
operator|.
name|ParsedReverseNested
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|nested
operator|.
name|ReverseNestedAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|ParsedRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|RangeAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|date
operator|.
name|DateRangeAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|date
operator|.
name|ParsedDateRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|geodistance
operator|.
name|GeoDistanceAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|range
operator|.
name|geodistance
operator|.
name|ParsedGeoDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|sampler
operator|.
name|InternalSampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|sampler
operator|.
name|ParsedSampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|ParsedSignificantLongTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|ParsedSignificantStringTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantLongTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantStringTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|DoubleTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|LongTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|ParsedDoubleTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|ParsedLongTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|ParsedStringTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|StringTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
operator|.
name|MatrixStatsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|matrix
operator|.
name|stats
operator|.
name|ParsedMatrixStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|avg
operator|.
name|AvgAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|avg
operator|.
name|ParsedAvg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|cardinality
operator|.
name|CardinalityAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|cardinality
operator|.
name|ParsedCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geobounds
operator|.
name|GeoBoundsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geobounds
operator|.
name|ParsedGeoBounds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geocentroid
operator|.
name|GeoCentroidAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geocentroid
operator|.
name|ParsedGeoCentroid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|max
operator|.
name|MaxAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|max
operator|.
name|ParsedMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|min
operator|.
name|MinAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|min
operator|.
name|ParsedMin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|hdr
operator|.
name|InternalHDRPercentileRanks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|hdr
operator|.
name|InternalHDRPercentiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|hdr
operator|.
name|ParsedHDRPercentileRanks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|hdr
operator|.
name|ParsedHDRPercentiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|InternalTDigestPercentileRanks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|InternalTDigestPercentiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|ParsedTDigestPercentileRanks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|ParsedTDigestPercentiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|scripted
operator|.
name|ParsedScriptedMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|scripted
operator|.
name|ScriptedMetricAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|ParsedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|StatsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ExtendedStatsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ParsedExtendedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|ParsedSum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|SumAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|valuecount
operator|.
name|ParsedValueCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|valuecount
operator|.
name|ValueCountAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|InternalSimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|ParsedSimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|InternalBucketMetricValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|ParsedBucketMetricValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|percentile
operator|.
name|ParsedPercentilesBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|percentile
operator|.
name|PercentilesBucketPipelineAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|stats
operator|.
name|ParsedStatsBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|stats
operator|.
name|StatsBucketPipelineAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ExtendedStatsBucketPipelineAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|bucketmetrics
operator|.
name|stats
operator|.
name|extended
operator|.
name|ParsedExtendedStatsBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|derivative
operator|.
name|DerivativePipelineAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|derivative
operator|.
name|ParsedDerivative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestion
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_comment
comment|/**  * High level REST client that wraps an instance of the low level {@link RestClient} and allows to build requests and read responses.  * The provided {@link RestClient} is externally built and closed.  * Can be sub-classed to expose additional client methods that make use of endpoints added to Elasticsearch through plugins, or to  * add support for custom response sections, again added to Elasticsearch through plugins.  */
end_comment

begin_class
DECL|class|RestHighLevelClient
specifier|public
class|class
name|RestHighLevelClient
block|{
DECL|field|client
specifier|private
specifier|final
name|RestClient
name|client
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|NamedXContentRegistry
name|registry
decl_stmt|;
comment|/**      * Creates a {@link RestHighLevelClient} given the low level {@link RestClient} that it should use to perform requests.      */
DECL|method|RestHighLevelClient
specifier|public
name|RestHighLevelClient
parameter_list|(
name|RestClient
name|restClient
parameter_list|)
block|{
name|this
argument_list|(
name|restClient
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a {@link RestHighLevelClient} given the low level {@link RestClient} that it should use to perform requests and      * a list of entries that allow to parse custom response sections added to Elasticsearch through plugins.      */
DECL|method|RestHighLevelClient
specifier|protected
name|RestHighLevelClient
parameter_list|(
name|RestClient
name|restClient
parameter_list|,
name|List
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
name|namedXContentEntries
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|registry
operator|=
operator|new
name|NamedXContentRegistry
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
name|getDefaultNamedXContents
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|,
name|namedXContentEntries
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes a bulk request using the Bulk API      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">Bulk API on elastic.co</a>      */
DECL|method|bulk
specifier|public
name|BulkResponse
name|bulk
parameter_list|(
name|BulkRequest
name|bulkRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|bulkRequest
argument_list|,
name|Request
operator|::
name|bulk
argument_list|,
name|BulkResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously executes a bulk request using the Bulk API      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">Bulk API on elastic.co</a>      */
DECL|method|bulkAsync
specifier|public
name|void
name|bulkAsync
parameter_list|(
name|BulkRequest
name|bulkRequest
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|bulkRequest
argument_list|,
name|Request
operator|::
name|bulk
argument_list|,
name|BulkResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pings the remote Elasticsearch cluster and returns true if the ping succeeded, false otherwise      */
DECL|method|ping
specifier|public
name|boolean
name|ping
parameter_list|(
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequest
argument_list|(
operator|new
name|MainRequest
argument_list|()
argument_list|,
parameter_list|(
name|request
parameter_list|)
lambda|->
name|Request
operator|.
name|ping
argument_list|()
argument_list|,
name|RestHighLevelClient
operator|::
name|convertExistsResponse
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Get the cluster info otherwise provided when sending an HTTP request to port 9200      */
DECL|method|info
specifier|public
name|MainResponse
name|info
parameter_list|(
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
operator|new
name|MainRequest
argument_list|()
argument_list|,
parameter_list|(
name|request
parameter_list|)
lambda|->
name|Request
operator|.
name|info
argument_list|()
argument_list|,
name|MainResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Retrieves a document by id using the Get API      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>      */
DECL|method|get
specifier|public
name|GetResponse
name|get
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|getRequest
argument_list|,
name|Request
operator|::
name|get
argument_list|,
name|GetResponse
operator|::
name|fromXContent
argument_list|,
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously retrieves a document by id using the Get API      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>      */
DECL|method|getAsync
specifier|public
name|void
name|getAsync
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|,
name|ActionListener
argument_list|<
name|GetResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|getRequest
argument_list|,
name|Request
operator|::
name|get
argument_list|,
name|GetResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks for the existence of a document. Returns true if it exists, false otherwise      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>      */
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequest
argument_list|(
name|getRequest
argument_list|,
name|Request
operator|::
name|exists
argument_list|,
name|RestHighLevelClient
operator|::
name|convertExistsResponse
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously checks for the existence of a document. Returns true if it exists, false otherwise      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html">Get API on elastic.co</a>      */
DECL|method|existsAsync
specifier|public
name|void
name|existsAsync
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|,
name|ActionListener
argument_list|<
name|Boolean
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsync
argument_list|(
name|getRequest
argument_list|,
name|Request
operator|::
name|exists
argument_list|,
name|RestHighLevelClient
operator|::
name|convertExistsResponse
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Index a document using the Index API      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">Index API on elastic.co</a>      */
DECL|method|index
specifier|public
name|IndexResponse
name|index
parameter_list|(
name|IndexRequest
name|indexRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|indexRequest
argument_list|,
name|Request
operator|::
name|index
argument_list|,
name|IndexResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously index a document using the Index API      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">Index API on elastic.co</a>      */
DECL|method|indexAsync
specifier|public
name|void
name|indexAsync
parameter_list|(
name|IndexRequest
name|indexRequest
parameter_list|,
name|ActionListener
argument_list|<
name|IndexResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|indexRequest
argument_list|,
name|Request
operator|::
name|index
argument_list|,
name|IndexResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates a document using the Update API      *<p>      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html">Update API on elastic.co</a>      */
DECL|method|update
specifier|public
name|UpdateResponse
name|update
parameter_list|(
name|UpdateRequest
name|updateRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|updateRequest
argument_list|,
name|Request
operator|::
name|update
argument_list|,
name|UpdateResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously updates a document using the Update API      *<p>      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html">Update API on elastic.co</a>      */
DECL|method|updateAsync
specifier|public
name|void
name|updateAsync
parameter_list|(
name|UpdateRequest
name|updateRequest
parameter_list|,
name|ActionListener
argument_list|<
name|UpdateResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|updateRequest
argument_list|,
name|Request
operator|::
name|update
argument_list|,
name|UpdateResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes a document by id using the Delete api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>      */
DECL|method|delete
specifier|public
name|DeleteResponse
name|delete
parameter_list|(
name|DeleteRequest
name|deleteRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|deleteRequest
argument_list|,
name|Request
operator|::
name|delete
argument_list|,
name|DeleteResponse
operator|::
name|fromXContent
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously deletes a document by id using the Delete api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>      */
DECL|method|deleteAsync
specifier|public
name|void
name|deleteAsync
parameter_list|(
name|DeleteRequest
name|deleteRequest
parameter_list|,
name|ActionListener
argument_list|<
name|DeleteResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|deleteRequest
argument_list|,
name|Request
operator|::
name|delete
argument_list|,
name|DeleteResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes a search using the Search api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API on elastic.co</a>      */
DECL|method|search
specifier|public
name|SearchResponse
name|search
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|searchRequest
argument_list|,
name|Request
operator|::
name|search
argument_list|,
name|SearchResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously executes a search using the Search api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html">Search API on elastic.co</a>      */
DECL|method|searchAsync
specifier|public
name|void
name|searchAsync
parameter_list|(
name|SearchRequest
name|searchRequest
parameter_list|,
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|searchRequest
argument_list|,
name|Request
operator|::
name|search
argument_list|,
name|SearchResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes a search using the Search Scroll api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll      * API on elastic.co</a>      */
DECL|method|searchScroll
specifier|public
name|SearchResponse
name|searchScroll
parameter_list|(
name|SearchScrollRequest
name|searchScrollRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|searchScrollRequest
argument_list|,
name|Request
operator|::
name|searchScroll
argument_list|,
name|SearchResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously executes a search using the Search Scroll api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll      * API on elastic.co</a>      */
DECL|method|searchScrollAsync
specifier|public
name|void
name|searchScrollAsync
parameter_list|(
name|SearchScrollRequest
name|searchScrollRequest
parameter_list|,
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|searchScrollRequest
argument_list|,
name|Request
operator|::
name|searchScroll
argument_list|,
name|SearchResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clears one or more scroll ids using the Clear Scroll api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#_clear_scroll_api">      * Clear Scroll API on elastic.co</a>      */
DECL|method|clearScroll
specifier|public
name|ClearScrollResponse
name|clearScroll
parameter_list|(
name|ClearScrollRequest
name|clearScrollRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|clearScrollRequest
argument_list|,
name|Request
operator|::
name|clearScroll
argument_list|,
name|ClearScrollResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Asynchronously clears one or more scroll ids using the Clear Scroll api      *      * See<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html#_clear_scroll_api">      * Clear Scroll API on elastic.co</a>      */
DECL|method|clearScrollAsync
specifier|public
name|void
name|clearScrollAsync
parameter_list|(
name|ClearScrollRequest
name|clearScrollRequest
parameter_list|,
name|ActionListener
argument_list|<
name|ClearScrollResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|clearScrollRequest
argument_list|,
name|Request
operator|::
name|clearScroll
argument_list|,
name|ClearScrollResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|performRequestAndParseEntity
specifier|private
parameter_list|<
name|Req
extends|extends
name|ActionRequest
parameter_list|,
name|Resp
parameter_list|>
name|Resp
name|performRequestAndParseEntity
parameter_list|(
name|Req
name|request
parameter_list|,
name|CheckedFunction
argument_list|<
name|Req
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
parameter_list|,
name|CheckedFunction
argument_list|<
name|XContentParser
argument_list|,
name|Resp
argument_list|,
name|IOException
argument_list|>
name|entityParser
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequest
argument_list|(
name|request
argument_list|,
name|requestConverter
argument_list|,
parameter_list|(
name|response
parameter_list|)
lambda|->
name|parseEntity
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|entityParser
argument_list|)
argument_list|,
name|ignores
argument_list|,
name|headers
argument_list|)
return|;
block|}
DECL|method|performRequest
parameter_list|<
name|Req
extends|extends
name|ActionRequest
parameter_list|,
name|Resp
parameter_list|>
name|Resp
name|performRequest
parameter_list|(
name|Req
name|request
parameter_list|,
name|CheckedFunction
argument_list|<
name|Req
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
parameter_list|,
name|CheckedFunction
argument_list|<
name|Response
argument_list|,
name|Resp
argument_list|,
name|IOException
argument_list|>
name|responseConverter
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|ActionRequestValidationException
name|validationException
init|=
name|request
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|validationException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|validationException
throw|;
block|}
name|Request
name|req
init|=
name|requestConverter
operator|.
name|apply
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Response
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|client
operator|.
name|performRequest
argument_list|(
name|req
operator|.
name|method
argument_list|,
name|req
operator|.
name|endpoint
argument_list|,
name|req
operator|.
name|params
argument_list|,
name|req
operator|.
name|entity
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ignores
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|responseConverter
operator|.
name|apply
argument_list|(
name|e
operator|.
name|getResponse
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|innerException
parameter_list|)
block|{
throw|throw
name|parseResponseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
name|parseResponseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|responseConverter
operator|.
name|apply
argument_list|(
name|response
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse response body for "
operator|+
name|response
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|performRequestAsyncAndParseEntity
specifier|private
parameter_list|<
name|Req
extends|extends
name|ActionRequest
parameter_list|,
name|Resp
parameter_list|>
name|void
name|performRequestAsyncAndParseEntity
parameter_list|(
name|Req
name|request
parameter_list|,
name|CheckedFunction
argument_list|<
name|Req
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
parameter_list|,
name|CheckedFunction
argument_list|<
name|XContentParser
argument_list|,
name|Resp
argument_list|,
name|IOException
argument_list|>
name|entityParser
parameter_list|,
name|ActionListener
argument_list|<
name|Resp
argument_list|>
name|listener
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsync
argument_list|(
name|request
argument_list|,
name|requestConverter
argument_list|,
parameter_list|(
name|response
parameter_list|)
lambda|->
name|parseEntity
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|entityParser
argument_list|)
argument_list|,
name|listener
argument_list|,
name|ignores
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|performRequestAsync
parameter_list|<
name|Req
extends|extends
name|ActionRequest
parameter_list|,
name|Resp
parameter_list|>
name|void
name|performRequestAsync
parameter_list|(
name|Req
name|request
parameter_list|,
name|CheckedFunction
argument_list|<
name|Req
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
parameter_list|,
name|CheckedFunction
argument_list|<
name|Response
argument_list|,
name|Resp
argument_list|,
name|IOException
argument_list|>
name|responseConverter
parameter_list|,
name|ActionListener
argument_list|<
name|Resp
argument_list|>
name|listener
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|ActionRequestValidationException
name|validationException
init|=
name|request
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|validationException
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|validationException
argument_list|)
expr_stmt|;
return|return;
block|}
name|Request
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|requestConverter
operator|.
name|apply
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|ResponseListener
name|responseListener
init|=
name|wrapResponseListener
argument_list|(
name|responseConverter
argument_list|,
name|listener
argument_list|,
name|ignores
argument_list|)
decl_stmt|;
name|client
operator|.
name|performRequestAsync
argument_list|(
name|req
operator|.
name|method
argument_list|,
name|req
operator|.
name|endpoint
argument_list|,
name|req
operator|.
name|params
argument_list|,
name|req
operator|.
name|entity
argument_list|,
name|responseListener
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|wrapResponseListener
parameter_list|<
name|Resp
parameter_list|>
name|ResponseListener
name|wrapResponseListener
parameter_list|(
name|CheckedFunction
argument_list|<
name|Response
argument_list|,
name|Resp
argument_list|,
name|IOException
argument_list|>
name|responseConverter
parameter_list|,
name|ActionListener
argument_list|<
name|Resp
argument_list|>
name|actionListener
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|)
block|{
return|return
operator|new
name|ResponseListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
try|try
block|{
name|actionListener
operator|.
name|onResponse
argument_list|(
name|responseConverter
operator|.
name|apply
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"Unable to parse response body for "
operator|+
name|response
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|onFailure
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|ResponseException
condition|)
block|{
name|ResponseException
name|responseException
init|=
operator|(
name|ResponseException
operator|)
name|exception
decl_stmt|;
name|Response
name|response
init|=
name|responseException
operator|.
name|getResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignores
operator|.
name|contains
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|actionListener
operator|.
name|onResponse
argument_list|(
name|responseConverter
operator|.
name|apply
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|innerException
parameter_list|)
block|{
comment|//the exception is ignored as we now try to parse the response as an error.
comment|//this covers cases like get where 404 can either be a valid document not found response,
comment|//or an error for which parsing is completely different. We try to consider the 404 response as a valid one
comment|//first. If parsing of the response breaks, we fall back to parsing it as an error.
name|actionListener
operator|.
name|onFailure
argument_list|(
name|parseResponseException
argument_list|(
name|responseException
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|actionListener
operator|.
name|onFailure
argument_list|(
name|parseResponseException
argument_list|(
name|responseException
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|actionListener
operator|.
name|onFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Converts a {@link ResponseException} obtained from the low level REST client into an {@link ElasticsearchException}.      * If a response body was returned, tries to parse it as an error returned from Elasticsearch.      * If no response body was returned or anything goes wrong while parsing the error, returns a new {@link ElasticsearchStatusException}      * that wraps the original {@link ResponseException}. The potential exception obtained while parsing is added to the returned      * exception as a suppressed exception. This method is guaranteed to not throw any exception eventually thrown while parsing.      */
DECL|method|parseResponseException
name|ElasticsearchStatusException
name|parseResponseException
parameter_list|(
name|ResponseException
name|responseException
parameter_list|)
block|{
name|Response
name|response
init|=
name|responseException
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|ElasticsearchStatusException
name|elasticsearchException
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|elasticsearchException
operator|=
operator|new
name|ElasticsearchStatusException
argument_list|(
name|responseException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|RestStatus
operator|.
name|fromCode
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
argument_list|,
name|responseException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|elasticsearchException
operator|=
name|parseEntity
argument_list|(
name|entity
argument_list|,
name|BytesRestResponse
operator|::
name|errorFromXContent
argument_list|)
expr_stmt|;
name|elasticsearchException
operator|.
name|addSuppressed
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RestStatus
name|restStatus
init|=
name|RestStatus
operator|.
name|fromCode
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
decl_stmt|;
name|elasticsearchException
operator|=
operator|new
name|ElasticsearchStatusException
argument_list|(
literal|"Unable to parse response body"
argument_list|,
name|restStatus
argument_list|,
name|responseException
argument_list|)
expr_stmt|;
name|elasticsearchException
operator|.
name|addSuppressed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|elasticsearchException
return|;
block|}
DECL|method|parseEntity
parameter_list|<
name|Resp
parameter_list|>
name|Resp
name|parseEntity
parameter_list|(
name|HttpEntity
name|entity
parameter_list|,
name|CheckedFunction
argument_list|<
name|XContentParser
argument_list|,
name|Resp
argument_list|,
name|IOException
argument_list|>
name|entityParser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Response body expected but not returned"
argument_list|)
throw|;
block|}
if|if
condition|(
name|entity
operator|.
name|getContentType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Elasticsearch didn't return the [Content-Type] header, unable to parse response body"
argument_list|)
throw|;
block|}
name|XContentType
name|xContentType
init|=
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xContentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported Content-Type: "
operator|+
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
try|try
init|(
name|XContentParser
name|parser
init|=
name|xContentType
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|registry
argument_list|,
name|entity
operator|.
name|getContent
argument_list|()
argument_list|)
init|)
block|{
return|return
name|entityParser
operator|.
name|apply
argument_list|(
name|parser
argument_list|)
return|;
block|}
block|}
DECL|method|convertExistsResponse
specifier|static
name|boolean
name|convertExistsResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
return|return
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|200
return|;
block|}
DECL|method|getDefaultNamedXContents
specifier|static
name|List
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
name|getDefaultNamedXContents
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ContextParser
argument_list|<
name|Object
argument_list|,
name|?
extends|extends
name|Aggregation
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CardinalityAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedCardinality
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InternalHDRPercentiles
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedHDRPercentiles
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InternalHDRPercentileRanks
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedHDRPercentileRanks
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InternalTDigestPercentiles
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedTDigestPercentiles
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InternalTDigestPercentileRanks
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedTDigestPercentileRanks
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|PercentilesBucketPipelineAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedPercentilesBucket
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|MinAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedMin
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|MaxAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedMax
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SumAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedSum
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|AvgAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedAvg
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ValueCountAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedValueCount
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InternalSimpleValue
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedSimpleValue
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DerivativePipelineAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedDerivative
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InternalBucketMetricValue
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedBucketMetricValue
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|StatsAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedStats
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|StatsBucketPipelineAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedStatsBucket
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ExtendedStatsAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedExtendedStats
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ExtendedStatsBucketPipelineAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedExtendedStatsBucket
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|GeoBoundsAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedGeoBounds
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|GeoCentroidAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedGeoCentroid
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|HistogramAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedHistogram
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DateHistogramAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedDateHistogram
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|StringTerms
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedStringTerms
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LongTerms
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedLongTerms
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DoubleTerms
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedDoubleTerms
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|MissingAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedMissing
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NestedAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedNested
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ReverseNestedAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedReverseNested
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|GlobalAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedGlobal
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|FilterAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedFilter
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|InternalSampler
operator|.
name|PARSER_NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedSampler
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|GeoGridAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedGeoHashGrid
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|RangeAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedRange
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DateRangeAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedDateRange
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|GeoDistanceAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedGeoDistance
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|FiltersAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedFilters
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|AdjacencyMatrixAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedAdjacencyMatrix
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SignificantLongTerms
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedSignificantLongTerms
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SignificantStringTerms
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedSignificantStringTerms
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ScriptedMetricAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedScriptedMetric
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ChildrenAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedChildren
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|MatrixStatsAggregationBuilder
operator|.
name|NAME
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
lambda|->
name|ParsedMatrixStats
operator|.
name|fromXContent
argument_list|(
name|p
argument_list|,
operator|(
name|String
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Aggregation
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Suggest
operator|.
name|Suggestion
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
name|TermSuggestion
operator|.
name|NAME
argument_list|)
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|context
parameter_list|)
lambda|->
name|TermSuggestion
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
operator|(
name|String
operator|)
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Suggest
operator|.
name|Suggestion
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
name|PhraseSuggestion
operator|.
name|NAME
argument_list|)
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|context
parameter_list|)
lambda|->
name|PhraseSuggestion
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
operator|(
name|String
operator|)
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|Suggest
operator|.
name|Suggestion
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
name|CompletionSuggestion
operator|.
name|NAME
argument_list|)
argument_list|,
parameter_list|(
name|parser
parameter_list|,
name|context
parameter_list|)
lambda|->
name|CompletionSuggestion
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|,
operator|(
name|String
operator|)
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|entries
return|;
block|}
block|}
end_class

end_unit

