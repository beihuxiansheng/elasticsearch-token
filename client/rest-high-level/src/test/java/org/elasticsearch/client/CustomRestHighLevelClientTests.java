begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|RequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicRequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicStatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ESRestHighLevelClientTestCase
operator|.
name|execute
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyMapOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyVararg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * Test and demonstrates how {@link RestHighLevelClient} can be extended to support custom endpoints.  */
end_comment

begin_class
DECL|class|CustomRestHighLevelClientTests
specifier|public
class|class
name|CustomRestHighLevelClientTests
extends|extends
name|ESTestCase
block|{
DECL|field|ENDPOINT
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT
init|=
literal|"/_custom"
decl_stmt|;
DECL|field|restHighLevelClient
specifier|private
name|CustomRestClient
name|restHighLevelClient
decl_stmt|;
annotation|@
name|Before
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initClients
specifier|public
name|void
name|initClients
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|restHighLevelClient
operator|==
literal|null
condition|)
block|{
specifier|final
name|RestClient
name|restClient
init|=
name|mock
argument_list|(
name|RestClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|restHighLevelClient
operator|=
operator|new
name|CustomRestClient
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|mock
lambda|->
name|mockPerformRequest
argument_list|(
operator|(
name|Header
operator|)
name|mock
operator|.
name|getArguments
argument_list|()
index|[
literal|4
index|]
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequest
argument_list|(
name|eq
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ENDPOINT
argument_list|)
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|mock
lambda|->
name|mockPerformRequestAsync
argument_list|(
operator|(
name|Header
operator|)
name|mock
operator|.
name|getArguments
argument_list|()
index|[
literal|5
index|]
argument_list|,
operator|(
name|ResponseListener
operator|)
name|mock
operator|.
name|getArguments
argument_list|()
index|[
literal|4
index|]
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequestAsync
argument_list|(
name|eq
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ENDPOINT
argument_list|)
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResponseListener
operator|.
name|class
argument_list|)
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCustomEndpoint
specifier|public
name|void
name|testCustomEndpoint
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MainRequest
name|request
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
specifier|final
name|Header
name|header
init|=
operator|new
name|BasicHeader
argument_list|(
literal|"node_name"
argument_list|,
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|MainResponse
name|response
init|=
name|execute
argument_list|(
name|request
argument_list|,
name|restHighLevelClient
operator|::
name|custom
argument_list|,
name|restHighLevelClient
operator|::
name|customAsync
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|,
name|response
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|execute
argument_list|(
name|request
argument_list|,
name|restHighLevelClient
operator|::
name|customAndParse
argument_list|,
name|restHighLevelClient
operator|::
name|customAndParseAsync
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|,
name|response
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * The {@link RestHighLevelClient} must declare the following execution methods using the<code>protected</code> modifier      * so that they can be used by subclasses to implement custom logic.      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"We're forced to uses Class#getDeclaredMethods() here because this test checks protected methods"
argument_list|)
DECL|method|testMethodsVisibility
specifier|public
name|void
name|testMethodsVisibility
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|String
index|[]
name|methodNames
init|=
operator|new
name|String
index|[]
block|{
literal|"performRequest"
block|,
literal|"performRequestAndParseEntity"
block|,
literal|"performRequestAsync"
block|,
literal|"performRequestAsyncAndParseEntity"
block|}
decl_stmt|;
for|for
control|(
name|String
name|methodName
range|:
name|methodNames
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|RestHighLevelClient
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Method "
operator|+
name|methodName
operator|+
literal|" must be protected"
argument_list|,
name|Modifier
operator|.
name|isProtected
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Failed to find method "
operator|+
name|methodName
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Mocks the asynchronous request execution by calling the {@link #mockPerformRequest(Header)} method.      */
DECL|method|mockPerformRequestAsync
specifier|private
name|Void
name|mockPerformRequestAsync
parameter_list|(
name|Header
name|httpHeader
parameter_list|,
name|ResponseListener
name|responseListener
parameter_list|)
block|{
try|try
block|{
name|responseListener
operator|.
name|onSuccess
argument_list|(
name|mockPerformRequest
argument_list|(
name|httpHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|responseListener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Mocks the synchronous request execution like if it was executed by Elasticsearch.      */
DECL|method|mockPerformRequest
specifier|private
name|Response
name|mockPerformRequest
parameter_list|(
name|Header
name|httpHeader
parameter_list|)
throws|throws
name|IOException
block|{
name|ProtocolVersion
name|protocol
init|=
operator|new
name|ProtocolVersion
argument_list|(
literal|"HTTP"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
operator|new
name|BasicStatusLine
argument_list|(
name|protocol
argument_list|,
literal|200
argument_list|,
literal|"OK"
argument_list|)
argument_list|)
decl_stmt|;
name|MainResponse
name|response
init|=
operator|new
name|MainResponse
argument_list|(
name|httpHeader
operator|.
name|getValue
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
name|ClusterName
operator|.
name|DEFAULT
argument_list|,
literal|"_na"
argument_list|,
name|Build
operator|.
name|CURRENT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BytesRef
name|bytesRef
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|response
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|,
literal|false
argument_list|)
operator|.
name|toBytesRef
argument_list|()
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|ByteArrayEntity
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|RequestLine
name|requestLine
init|=
operator|new
name|BasicRequestLine
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|,
name|ENDPOINT
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|requestLine
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
return|;
block|}
comment|/**      * A custom high level client that provides custom methods to execute a request and get its associate response back.      */
DECL|class|CustomRestClient
specifier|static
class|class
name|CustomRestClient
extends|extends
name|RestHighLevelClient
block|{
DECL|method|CustomRestClient
specifier|private
name|CustomRestClient
parameter_list|(
name|RestClient
name|restClient
parameter_list|)
block|{
name|super
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
DECL|method|custom
name|MainResponse
name|custom
parameter_list|(
name|MainRequest
name|mainRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|this
operator|::
name|toRequest
argument_list|,
name|this
operator|::
name|toResponse
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
DECL|method|customAndParse
name|MainResponse
name|customAndParse
parameter_list|(
name|MainRequest
name|mainRequest
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequestAndParseEntity
argument_list|(
name|mainRequest
argument_list|,
name|this
operator|::
name|toRequest
argument_list|,
name|MainResponse
operator|::
name|fromXContent
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
DECL|method|customAsync
name|void
name|customAsync
parameter_list|(
name|MainRequest
name|mainRequest
parameter_list|,
name|ActionListener
argument_list|<
name|MainResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsync
argument_list|(
name|mainRequest
argument_list|,
name|this
operator|::
name|toRequest
argument_list|,
name|this
operator|::
name|toResponse
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|customAndParseAsync
name|void
name|customAndParseAsync
parameter_list|(
name|MainRequest
name|mainRequest
parameter_list|,
name|ActionListener
argument_list|<
name|MainResponse
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequestAsyncAndParseEntity
argument_list|(
name|mainRequest
argument_list|,
name|this
operator|::
name|toRequest
argument_list|,
name|MainResponse
operator|::
name|fromXContent
argument_list|,
name|listener
argument_list|,
name|emptySet
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|toRequest
name|Request
name|toRequest
parameter_list|(
name|MainRequest
name|mainRequest
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Request
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|,
name|ENDPOINT
argument_list|,
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|toResponse
name|MainResponse
name|toResponse
parameter_list|(
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parseEntity
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|MainResponse
operator|::
name|fromXContent
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

