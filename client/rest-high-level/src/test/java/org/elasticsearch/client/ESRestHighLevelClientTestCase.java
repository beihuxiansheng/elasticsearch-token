begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|ESRestTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|ESRestHighLevelClientTestCase
specifier|public
specifier|abstract
class|class
name|ESRestHighLevelClientTestCase
extends|extends
name|ESRestTestCase
block|{
DECL|field|restHighLevelClient
specifier|private
specifier|static
name|RestHighLevelClient
name|restHighLevelClient
decl_stmt|;
annotation|@
name|Before
DECL|method|initHighLevelClient
specifier|public
name|void
name|initHighLevelClient
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|initClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|restHighLevelClient
operator|==
literal|null
condition|)
block|{
name|restHighLevelClient
operator|=
operator|new
name|RestHighLevelClient
argument_list|(
name|client
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|cleanupClient
specifier|public
specifier|static
name|void
name|cleanupClient
parameter_list|()
throws|throws
name|IOException
block|{
name|restHighLevelClient
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|highLevelClient
specifier|protected
specifier|static
name|RestHighLevelClient
name|highLevelClient
parameter_list|()
block|{
return|return
name|restHighLevelClient
return|;
block|}
comment|/**      * Executes the provided request using either the sync method or its async variant, both provided as functions      */
DECL|method|execute
specifier|protected
specifier|static
parameter_list|<
name|Req
parameter_list|,
name|Resp
parameter_list|>
name|Resp
name|execute
parameter_list|(
name|Req
name|request
parameter_list|,
name|SyncMethod
argument_list|<
name|Req
argument_list|,
name|Resp
argument_list|>
name|syncMethod
parameter_list|,
name|AsyncMethod
argument_list|<
name|Req
argument_list|,
name|Resp
argument_list|>
name|asyncMethod
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|syncMethod
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|headers
argument_list|)
return|;
block|}
else|else
block|{
name|PlainActionFuture
argument_list|<
name|Resp
argument_list|>
name|future
init|=
name|PlainActionFuture
operator|.
name|newFuture
argument_list|()
decl_stmt|;
name|asyncMethod
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|future
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|future
operator|.
name|actionGet
argument_list|()
return|;
block|}
block|}
annotation|@
name|FunctionalInterface
DECL|interface|SyncMethod
specifier|protected
interface|interface
name|SyncMethod
parameter_list|<
name|Request
parameter_list|,
name|Response
parameter_list|>
block|{
DECL|method|execute
name|Response
name|execute
parameter_list|(
name|Request
name|request
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|AsyncMethod
specifier|protected
interface|interface
name|AsyncMethod
parameter_list|<
name|Request
parameter_list|,
name|Response
parameter_list|>
block|{
DECL|method|execute
name|void
name|execute
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

