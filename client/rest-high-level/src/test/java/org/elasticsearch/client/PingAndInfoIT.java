begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|PingAndInfoIT
specifier|public
class|class
name|PingAndInfoIT
extends|extends
name|ESRestHighLevelClientTestCase
block|{
DECL|method|testPing
specifier|public
name|void
name|testPing
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|highLevelClient
argument_list|()
operator|.
name|ping
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testInfo
specifier|public
name|void
name|testInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|MainResponse
name|info
init|=
name|highLevelClient
argument_list|()
operator|.
name|info
argument_list|()
decl_stmt|;
comment|// compare with what the low level client outputs
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|infoAsMap
init|=
name|entityAsMap
argument_list|(
name|adminClient
argument_list|()
operator|.
name|performRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|infoAsMap
operator|.
name|get
argument_list|(
literal|"cluster_name"
argument_list|)
argument_list|,
name|info
operator|.
name|getClusterName
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoAsMap
operator|.
name|get
argument_list|(
literal|"cluster_uuid"
argument_list|)
argument_list|,
name|info
operator|.
name|getClusterUuid
argument_list|()
argument_list|)
expr_stmt|;
comment|// only check node name existence, might be a different one from what was hit by low level client in multi-node cluster
name|assertNotNull
argument_list|(
name|info
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|versionMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|infoAsMap
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|versionMap
operator|.
name|get
argument_list|(
literal|"build_hash"
argument_list|)
argument_list|,
name|info
operator|.
name|getBuild
argument_list|()
operator|.
name|shortHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionMap
operator|.
name|get
argument_list|(
literal|"build_date"
argument_list|)
argument_list|,
name|info
operator|.
name|getBuild
argument_list|()
operator|.
name|date
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionMap
operator|.
name|get
argument_list|(
literal|"build_snapshot"
argument_list|)
argument_list|,
name|info
operator|.
name|getBuild
argument_list|()
operator|.
name|isSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionMap
operator|.
name|get
argument_list|(
literal|"number"
argument_list|)
argument_list|,
name|info
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|versionMap
operator|.
name|get
argument_list|(
literal|"lucene_version"
argument_list|)
argument_list|,
name|info
operator|.
name|getVersion
argument_list|()
operator|.
name|luceneVersion
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

