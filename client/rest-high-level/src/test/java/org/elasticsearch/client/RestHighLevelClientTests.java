begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|RequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicRequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicStatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Build
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|main
operator|.
name|MainResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|cbor
operator|.
name|CborXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|smile
operator|.
name|SmileXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|matchers
operator|.
name|ArrayEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|matchers
operator|.
name|VarargMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyMapOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyVararg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|RestHighLevelClientTests
specifier|public
class|class
name|RestHighLevelClientTests
extends|extends
name|ESTestCase
block|{
DECL|field|HTTP_PROTOCOL
specifier|private
specifier|static
specifier|final
name|ProtocolVersion
name|HTTP_PROTOCOL
init|=
operator|new
name|ProtocolVersion
argument_list|(
literal|"http"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|REQUEST_LINE
specifier|private
specifier|static
specifier|final
name|RequestLine
name|REQUEST_LINE
init|=
operator|new
name|BasicRequestLine
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|HTTP_PROTOCOL
argument_list|)
decl_stmt|;
DECL|field|restClient
specifier|private
name|RestClient
name|restClient
decl_stmt|;
DECL|field|restHighLevelClient
specifier|private
name|RestHighLevelClient
name|restHighLevelClient
decl_stmt|;
annotation|@
name|Before
DECL|method|initClient
specifier|public
name|void
name|initClient
parameter_list|()
block|{
name|restClient
operator|=
name|mock
argument_list|(
name|RestClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|restHighLevelClient
operator|=
operator|new
name|RestHighLevelClient
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
DECL|method|testPingSuccessful
specifier|public
name|void
name|testPingSuccessful
parameter_list|()
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|mock
argument_list|(
name|Response
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|OK
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|restHighLevelClient
operator|.
name|ping
argument_list|(
name|headers
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequest
argument_list|(
name|eq
argument_list|(
literal|"HEAD"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|isNull
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
argument_list|,
name|argThat
argument_list|(
operator|new
name|HeadersVarargMatcher
argument_list|(
name|headers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPing404NotFound
specifier|public
name|void
name|testPing404NotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|mock
argument_list|(
name|Response
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|restHighLevelClient
operator|.
name|ping
argument_list|(
name|headers
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequest
argument_list|(
name|eq
argument_list|(
literal|"HEAD"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|isNull
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
argument_list|,
name|argThat
argument_list|(
operator|new
name|HeadersVarargMatcher
argument_list|(
name|headers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPingSocketTimeout
specifier|public
name|void
name|testPingSocketTimeout
parameter_list|()
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SocketTimeoutException
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SocketTimeoutException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|ping
argument_list|(
name|headers
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequest
argument_list|(
name|eq
argument_list|(
literal|"HEAD"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|isNull
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
argument_list|,
name|argThat
argument_list|(
operator|new
name|HeadersVarargMatcher
argument_list|(
name|headers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInfo
specifier|public
name|void
name|testInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|mock
argument_list|(
name|Response
operator|.
name|class
argument_list|)
decl_stmt|;
name|MainResponse
name|testInfo
init|=
operator|new
name|MainResponse
argument_list|(
literal|"nodeName"
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|,
operator|new
name|ClusterName
argument_list|(
literal|"clusterName"
argument_list|)
argument_list|,
literal|"clusterUuid"
argument_list|,
name|Build
operator|.
name|CURRENT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringEntity
argument_list|(
name|toXContent
argument_list|(
name|testInfo
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|,
literal|false
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|MainResponse
name|receivedInfo
init|=
name|restHighLevelClient
operator|.
name|info
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testInfo
argument_list|,
name|receivedInfo
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequest
argument_list|(
name|eq
argument_list|(
literal|"GET"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|isNull
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
argument_list|,
name|argThat
argument_list|(
operator|new
name|HeadersVarargMatcher
argument_list|(
name|headers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRequestValidation
specifier|public
name|void
name|testRequestValidation
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
operator|new
name|ActionRequestValidationException
argument_list|()
decl_stmt|;
name|validationException
operator|.
name|addValidationError
argument_list|(
literal|"validation error"
argument_list|)
expr_stmt|;
name|ActionRequest
name|request
init|=
operator|new
name|ActionRequest
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
return|return
name|validationException
return|;
block|}
block|}
decl_stmt|;
block|{
name|ActionRequestValidationException
name|actualException
init|=
name|expectThrows
argument_list|(
name|ActionRequestValidationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|validationException
argument_list|,
name|actualException
argument_list|)
expr_stmt|;
block|}
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|restHighLevelClient
operator|.
name|performRequestAsync
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|trackingActionListener
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|validationException
argument_list|,
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseEntity
specifier|public
name|void
name|testParseEntity
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|IllegalStateException
name|ise
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|parseEntity
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Response body expected but not returned"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|IllegalStateException
name|ise
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|parseEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|""
argument_list|,
operator|(
name|ContentType
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Elasticsearch didn't return the [Content-Type] header, unable to parse response body"
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringEntity
name|entity
init|=
operator|new
name|StringEntity
argument_list|(
literal|""
argument_list|,
name|ContentType
operator|.
name|APPLICATION_SVG_XML
argument_list|)
decl_stmt|;
name|IllegalStateException
name|ise
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|parseEntity
argument_list|(
name|entity
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unsupported Content-Type: "
operator|+
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|CheckedFunction
argument_list|<
name|XContentParser
argument_list|,
name|String
argument_list|,
name|IOException
argument_list|>
name|entityParser
init|=
name|parser
lambda|->
block|{
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|isValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
argument_list|,
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
decl_stmt|;
name|HttpEntity
name|jsonEntity
init|=
operator|new
name|StringEntity
argument_list|(
literal|"{\"field\":\"value\"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|restHighLevelClient
operator|.
name|parseEntity
argument_list|(
name|jsonEntity
argument_list|,
name|entityParser
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEntity
name|yamlEntity
init|=
operator|new
name|StringEntity
argument_list|(
literal|"---\nfield: value\n"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
literal|"application/yaml"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|restHighLevelClient
operator|.
name|parseEntity
argument_list|(
name|yamlEntity
argument_list|,
name|entityParser
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEntity
name|smileEntity
init|=
name|createBinaryEntity
argument_list|(
name|SmileXContent
operator|.
name|contentBuilder
argument_list|()
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
literal|"application/smile"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|restHighLevelClient
operator|.
name|parseEntity
argument_list|(
name|smileEntity
argument_list|,
name|entityParser
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEntity
name|cborEntity
init|=
name|createBinaryEntity
argument_list|(
name|CborXContent
operator|.
name|contentBuilder
argument_list|()
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
literal|"application/cbor"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|restHighLevelClient
operator|.
name|parseEntity
argument_list|(
name|cborEntity
argument_list|,
name|entityParser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createBinaryEntity
specifier|private
specifier|static
name|HttpEntity
name|createBinaryEntity
parameter_list|(
name|XContentBuilder
name|xContentBuilder
parameter_list|,
name|ContentType
name|contentType
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|xContentBuilder
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayEntity
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|toBytesRef
argument_list|()
operator|.
name|bytes
argument_list|,
name|contentType
argument_list|)
return|;
block|}
block|}
DECL|method|testConvertExistsResponse
specifier|public
name|void
name|testConvertExistsResponse
parameter_list|()
block|{
name|RestStatus
name|restStatus
init|=
name|randomBoolean
argument_list|()
condition|?
name|RestStatus
operator|.
name|OK
else|:
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|RestHighLevelClient
operator|.
name|convertExistsResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|restStatus
operator|==
name|RestStatus
operator|.
name|OK
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseResponseException
specifier|public
name|void
name|testParseResponseException
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|restHighLevelClient
operator|.
name|parseResponseException
argument_list|(
name|responseException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|responseException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":\"test error message\",\"status\":"
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|restHighLevelClient
operator|.
name|parseResponseException
argument_list|(
name|responseException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Elasticsearch exception [type=exception, reason=test error message]"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|{
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|restHighLevelClient
operator|.
name|parseResponseException
argument_list|(
name|responseException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse response body"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"status\":"
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|restHighLevelClient
operator|.
name|parseResponseException
argument_list|(
name|responseException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse response body"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPerformRequestOnSuccess
specifier|public
name|void
name|testPerformRequestOnSuccess
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockResponse
argument_list|)
expr_stmt|;
block|{
name|Integer
name|result
init|=
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|restStatus
operator|.
name|getStatus
argument_list|()
argument_list|,
name|result
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|IOException
name|ioe
init|=
name|expectThrows
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
block|{
throw|throw
argument_list|new
name|IllegalStateException
argument_list|()
argument_list|;
block|}
operator|,
name|Collections
operator|.
name|emptySet
argument_list|()
block|)
block|)
class|;
end_class

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"Unable to parse response body for Response{requestLine=GET / http/1.1, host=http://localhost:9200, "
operator|+
literal|"response=http/1.1 "
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|" "
operator|+
name|restStatus
operator|.
name|name
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}     }
DECL|method|testPerformRequestOnResponseExceptionWithoutEntity
specifier|public
name|void
name|testPerformRequestOnResponseExceptionWithoutEntity
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|mockResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|responseException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testPerformRequestOnResponseExceptionWithEntity
specifier|public
name|void
name|testPerformRequestOnResponseExceptionWithEntity
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":\"test error message\",\"status\":"
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|mockResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Elasticsearch exception [type=exception, reason=test error message]"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testPerformRequestOnResponseExceptionWithBrokenEntity
specifier|public
name|void
name|testPerformRequestOnResponseExceptionWithBrokenEntity
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|mockResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse response body"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|JsonParseException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testPerformRequestOnResponseExceptionWithBrokenEntity2
specifier|public
name|void
name|testPerformRequestOnResponseExceptionWithBrokenEntity2
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"status\":"
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|mockResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse response body"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testPerformRequestOnResponseExceptionWithIgnores
specifier|public
name|void
name|testPerformRequestOnResponseExceptionWithIgnores
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|mockResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
comment|//although we got an exception, we turn it into a successful response because the status code was provided among ignores
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|404
argument_list|)
argument_list|,
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testPerformRequestOnResponseExceptionWithIgnoresErrorNoBody
specifier|public
name|void
name|testPerformRequestOnResponseExceptionWithIgnoresErrorNoBody
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|mockResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
block|{
throw|throw
argument_list|new
name|IllegalStateException
argument_list|()
argument_list|;
block|}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|responseException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testPerformRequestOnResponseExceptionWithIgnoresErrorValidBody
name|void
name|testPerformRequestOnResponseExceptionWithIgnoresErrorValidBody
parameter_list|()
throws|throws
name|IOException
block|{
name|MainRequest
name|mainRequest
init|=
operator|new
name|MainRequest
argument_list|()
decl_stmt|;
name|CheckedFunction
argument_list|<
name|MainRequest
argument_list|,
name|Request
argument_list|,
name|IOException
argument_list|>
name|requestConverter
init|=
name|request
lambda|->
operator|new
name|Request
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":\"test error message\",\"status\":404}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|mockResponse
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|mockResponse
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|anyVararg
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
name|expectThrows
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|performRequest
argument_list|(
name|mainRequest
argument_list|,
name|requestConverter
argument_list|,
name|response
lambda|->
block|{
throw|throw
argument_list|new
name|IllegalStateException
argument_list|()
argument_list|;
block|}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"Elasticsearch exception [type=exception, reason=test error message]"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      public
DECL|method|testWrapResponseListenerOnSuccess
name|void
name|testWrapResponseListenerOnSuccess
parameter_list|()
block|{
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onSuccess
argument_list|(
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
operator|.
name|getStatus
argument_list|()
argument_list|,
name|trackingActionListener
operator|.
name|statusCode
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onSuccess
argument_list|(
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|IOException
name|ioe
init|=
operator|(
name|IOException
operator|)
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse response body for Response{requestLine=GET / http/1.1, host=http://localhost:9200, "
operator|+
literal|"response=http/1.1 "
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|" "
operator|+
name|restStatus
operator|.
name|name
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testWrapResponseListenerOnException
specifier|public
name|void
name|testWrapResponseListenerOnException
parameter_list|()
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|IllegalStateException
name|exception
init|=
operator|new
name|IllegalStateException
argument_list|()
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|exception
argument_list|,
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWrapResponseListenerOnResponseExceptionWithoutEntity
specifier|public
name|void
name|testWrapResponseListenerOnResponseExceptionWithoutEntity
parameter_list|()
throws|throws
name|IOException
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
operator|(
name|ElasticsearchException
operator|)
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|responseException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWrapResponseListenerOnResponseExceptionWithEntity
specifier|public
name|void
name|testWrapResponseListenerOnResponseExceptionWithEntity
parameter_list|()
throws|throws
name|IOException
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":\"test error message\",\"status\":"
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
operator|(
name|ElasticsearchException
operator|)
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Elasticsearch exception [type=exception, reason=test error message]"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWrapResponseListenerOnResponseExceptionWithBrokenEntity
specifier|public
name|void
name|testWrapResponseListenerOnResponseExceptionWithBrokenEntity
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
operator|(
name|ElasticsearchException
operator|)
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse response body"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|JsonParseException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|RestStatus
name|restStatus
init|=
name|randomFrom
argument_list|(
name|RestStatus
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|restStatus
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"status\":"
operator|+
name|restStatus
operator|.
name|getStatus
argument_list|()
operator|+
literal|"}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
operator|(
name|ElasticsearchException
operator|)
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to parse response body"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|restStatus
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testWrapResponseListenerOnResponseExceptionWithIgnores
specifier|public
name|void
name|testWrapResponseListenerOnResponseExceptionWithIgnores
parameter_list|()
throws|throws
name|IOException
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
comment|//although we got an exception, we turn it into a successful response because the status code was provided among ignores
name|assertNull
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|404
argument_list|,
name|trackingActionListener
operator|.
name|statusCode
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWrapResponseListenerOnResponseExceptionWithIgnoresErrorNoBody
specifier|public
name|void
name|testWrapResponseListenerOnResponseExceptionWithIgnoresErrorNoBody
parameter_list|()
throws|throws
name|IOException
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
comment|//response parsing throws exception while handling ignores. same as when GetResponse#fromXContent throws error when trying
comment|//to parse a 404 response which contains an error rather than a valid document not found response.
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
operator|(
name|ElasticsearchException
operator|)
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|responseException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWrapResponseListenerOnResponseExceptionWithIgnoresErrorValidBody
specifier|public
name|void
name|testWrapResponseListenerOnResponseExceptionWithIgnoresErrorValidBody
parameter_list|()
throws|throws
name|IOException
block|{
name|TrackingActionListener
name|trackingActionListener
init|=
operator|new
name|TrackingActionListener
argument_list|()
decl_stmt|;
comment|//response parsing throws exception while handling ignores. same as when GetResponse#fromXContent throws error when trying
comment|//to parse a 404 response which contains an error rather than a valid document not found response.
name|ResponseListener
name|responseListener
init|=
name|restHighLevelClient
operator|.
name|wrapResponseListener
argument_list|(
name|response
lambda|->
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
argument_list|,
name|trackingActionListener
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|404
argument_list|)
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|newStatusLine
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"{\"error\":\"test error message\",\"status\":404}"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|REQUEST_LINE
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ElasticsearchException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ElasticsearchException
name|elasticsearchException
init|=
operator|(
name|ElasticsearchException
operator|)
name|trackingActionListener
operator|.
name|exception
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|,
name|elasticsearchException
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|responseException
argument_list|,
name|elasticsearchException
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Elasticsearch exception [type=exception, reason=test error message]"
argument_list|,
name|elasticsearchException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testNamedXContents
specifier|public
name|void
name|testNamedXContents
parameter_list|()
block|{
name|List
argument_list|<
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|>
name|namedXContents
init|=
name|RestHighLevelClient
operator|.
name|getNamedXContents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|namedXContents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|TrackingActionListener
specifier|private
specifier|static
class|class
name|TrackingActionListener
implements|implements
name|ActionListener
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|statusCode
specifier|private
specifier|final
name|AtomicInteger
name|statusCode
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|exception
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|Integer
name|statusCode
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|this
operator|.
name|statusCode
operator|.
name|compareAndSet
argument_list|(
operator|-
literal|1
argument_list|,
name|statusCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|exception
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|HeadersVarargMatcher
specifier|private
specifier|static
class|class
name|HeadersVarargMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|Header
index|[]
argument_list|>
implements|implements
name|VarargMatcher
block|{
DECL|field|expectedHeaders
specifier|private
name|Header
index|[]
name|expectedHeaders
decl_stmt|;
DECL|method|HeadersVarargMatcher
name|HeadersVarargMatcher
parameter_list|(
name|Header
modifier|...
name|expectedHeaders
parameter_list|)
block|{
name|this
operator|.
name|expectedHeaders
operator|=
name|expectedHeaders
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|varargArgument
parameter_list|)
block|{
if|if
condition|(
name|varargArgument
operator|instanceof
name|Header
index|[]
condition|)
block|{
name|Header
index|[]
name|actualHeaders
init|=
operator|(
name|Header
index|[]
operator|)
name|varargArgument
decl_stmt|;
return|return
operator|new
name|ArrayEquals
argument_list|(
name|expectedHeaders
argument_list|)
operator|.
name|matches
argument_list|(
name|actualHeaders
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_function
DECL|method|newStatusLine
specifier|private
specifier|static
name|StatusLine
name|newStatusLine
parameter_list|(
name|RestStatus
name|restStatus
parameter_list|)
block|{
return|return
operator|new
name|BasicStatusLine
argument_list|(
name|HTTP_PROTOCOL
argument_list|,
name|restStatus
operator|.
name|getStatus
argument_list|()
argument_list|,
name|restStatus
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

