begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|matchers
operator|.
name|ArrayEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|matchers
operator|.
name|VarargMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|RestHighLevelClientTests
specifier|public
class|class
name|RestHighLevelClientTests
extends|extends
name|ESTestCase
block|{
DECL|field|restClient
specifier|private
name|RestClient
name|restClient
decl_stmt|;
DECL|field|restHighLevelClient
specifier|private
name|RestHighLevelClient
name|restHighLevelClient
decl_stmt|;
annotation|@
name|Before
DECL|method|initClient
specifier|public
name|void
name|initClient
parameter_list|()
throws|throws
name|IOException
block|{
name|restClient
operator|=
name|mock
argument_list|(
name|RestClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|restHighLevelClient
operator|=
operator|new
name|RestHighLevelClient
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
DECL|method|testPing
specifier|public
name|void
name|testPing
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|restHighLevelClient
operator|.
name|ping
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequest
argument_list|(
name|eq
argument_list|(
literal|"HEAD"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|argThat
argument_list|(
operator|new
name|HeadersVarargMatcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPingFailure
specifier|public
name|void
name|testPingFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IllegalStateException
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|restHighLevelClient
operator|.
name|ping
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPingFailed
specifier|public
name|void
name|testPingFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|restClient
operator|.
name|performRequest
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SocketTimeoutException
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|restHighLevelClient
operator|.
name|ping
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPingWithHeaders
specifier|public
name|void
name|testPingWithHeaders
parameter_list|()
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|restHighLevelClient
operator|.
name|ping
argument_list|(
name|headers
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|restClient
argument_list|)
operator|.
name|performRequest
argument_list|(
name|eq
argument_list|(
literal|"HEAD"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|argThat
argument_list|(
operator|new
name|HeadersVarargMatcher
argument_list|(
name|headers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|HeadersVarargMatcher
specifier|private
class|class
name|HeadersVarargMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|Header
index|[]
argument_list|>
implements|implements
name|VarargMatcher
block|{
DECL|field|expectedHeaders
specifier|private
name|Header
index|[]
name|expectedHeaders
decl_stmt|;
DECL|method|HeadersVarargMatcher
name|HeadersVarargMatcher
parameter_list|(
name|Header
modifier|...
name|expectedHeaders
parameter_list|)
block|{
name|this
operator|.
name|expectedHeaders
operator|=
name|expectedHeaders
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|varargArgument
parameter_list|)
block|{
if|if
condition|(
name|varargArgument
operator|instanceof
name|Header
index|[]
condition|)
block|{
name|Header
index|[]
name|actualHeaders
init|=
operator|(
name|Header
index|[]
operator|)
name|varargArgument
decl_stmt|;
return|return
operator|new
name|ArrayEquals
argument_list|(
name|expectedHeaders
argument_list|)
operator|.
name|matches
argument_list|(
name|actualHeaders
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

