begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkShardRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchScrollRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|WriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicatedWriteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|ValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
operator|.
name|CollapseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|QueryRescorerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Request
operator|.
name|enforceSameContentType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_class
DECL|class|RequestTests
specifier|public
class|class
name|RequestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testPing
specifier|public
name|void
name|testPing
parameter_list|()
block|{
name|Request
name|request
init|=
name|Request
operator|.
name|ping
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HEAD"
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
DECL|method|testInfo
specifier|public
name|void
name|testInfo
parameter_list|()
block|{
name|Request
name|request
init|=
name|Request
operator|.
name|info
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GET"
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|getAndExistsTest
argument_list|(
name|Request
operator|::
name|get
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelete
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|index
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DeleteRequest
name|deleteRequest
init|=
operator|new
name|DeleteRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setRandomTimeout
argument_list|(
name|deleteRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
name|setRandomRefreshPolicy
argument_list|(
name|deleteRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
name|setRandomVersion
argument_list|(
name|deleteRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
name|setRandomVersionType
argument_list|(
name|deleteRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|routing
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|deleteRequest
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"routing"
argument_list|,
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|parent
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|deleteRequest
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"parent"
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
name|Request
name|request
init|=
name|Request
operator|.
name|delete
argument_list|(
name|deleteRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|index
operator|+
literal|"/"
operator|+
name|type
operator|+
literal|"/"
operator|+
name|id
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|request
operator|.
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DELETE"
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|testExists
specifier|public
name|void
name|testExists
parameter_list|()
block|{
name|getAndExistsTest
argument_list|(
name|Request
operator|::
name|exists
argument_list|,
literal|"HEAD"
argument_list|)
expr_stmt|;
block|}
DECL|method|getAndExistsTest
specifier|private
specifier|static
name|void
name|getAndExistsTest
parameter_list|(
name|Function
argument_list|<
name|GetRequest
argument_list|,
name|Request
argument_list|>
name|requestConverter
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|String
name|index
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|GetRequest
name|getRequest
init|=
operator|new
name|GetRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|preference
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|getRequest
operator|.
name|preference
argument_list|(
name|preference
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"preference"
argument_list|,
name|preference
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|routing
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|getRequest
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"routing"
argument_list|,
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|realtime
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|realtime
argument_list|(
name|realtime
argument_list|)
expr_stmt|;
if|if
condition|(
name|realtime
operator|==
literal|false
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"realtime"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|refresh
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|refresh
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
if|if
condition|(
name|refresh
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"refresh"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|long
name|version
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|VersionType
name|versionType
init|=
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|getRequest
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version_type"
argument_list|,
name|versionType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numStoredFields
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
index|[]
name|storedFields
init|=
operator|new
name|String
index|[
name|numStoredFields
index|]
decl_stmt|;
name|StringBuilder
name|storedFieldsParam
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStoredFields
condition|;
name|i
operator|++
control|)
block|{
name|String
name|storedField
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|storedFields
index|[
name|i
index|]
operator|=
name|storedField
expr_stmt|;
name|storedFieldsParam
operator|.
name|append
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numStoredFields
operator|-
literal|1
condition|)
block|{
name|storedFieldsParam
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|getRequest
operator|.
name|storedFields
argument_list|(
name|storedFields
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"stored_fields"
argument_list|,
name|storedFieldsParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomizeFetchSourceContextParams
argument_list|(
name|getRequest
operator|::
name|fetchSourceContext
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
block|}
block|}
name|Request
name|request
init|=
name|requestConverter
operator|.
name|apply
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|index
operator|+
literal|"/"
operator|+
name|type
operator|+
literal|"/"
operator|+
name|id
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|request
operator|.
name|params
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|method
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndex
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|index
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
else|:
literal|null
decl_stmt|;
name|indexRequest
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|method
init|=
literal|"POST"
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|method
operator|=
literal|"PUT"
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|indexRequest
operator|.
name|opType
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
block|}
name|setRandomTimeout
argument_list|(
name|indexRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
name|setRandomRefreshPolicy
argument_list|(
name|indexRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
comment|// There is some logic around _create endpoint and version/version type
if|if
condition|(
name|indexRequest
operator|.
name|opType
argument_list|()
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
condition|)
block|{
name|indexRequest
operator|.
name|version
argument_list|(
name|randomFrom
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|)
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|Versions
operator|.
name|MATCH_DELETED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setRandomVersion
argument_list|(
name|indexRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
name|setRandomVersionType
argument_list|(
name|indexRequest
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|routing
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"routing"
argument_list|,
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|parent
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"parent"
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|pipeline
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|indexRequest
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"pipeline"
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
block|}
block|}
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nbFields
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbFields
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field_"
operator|+
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|indexRequest
operator|.
name|source
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|Request
name|request
init|=
name|Request
operator|.
name|index
argument_list|(
name|indexRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRequest
operator|.
name|opType
argument_list|()
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
condition|)
block|{
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|index
operator|+
literal|"/"
operator|+
name|type
operator|+
literal|"/"
operator|+
name|id
operator|+
literal|"/_create"
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|index
operator|+
literal|"/"
operator|+
name|type
operator|+
literal|"/"
operator|+
name|id
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|index
operator|+
literal|"/"
operator|+
name|type
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|request
operator|.
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|method
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
name|request
operator|.
name|entity
decl_stmt|;
name|assertTrue
argument_list|(
name|entity
operator|instanceof
name|ByteArrayEntity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|indexRequest
operator|.
name|getContentType
argument_list|()
operator|.
name|mediaType
argument_list|()
argument_list|,
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|entity
operator|.
name|getContent
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|nbFields
argument_list|,
name|parser
operator|.
name|map
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpdate
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|index
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|detectNoop
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|BytesReference
name|source
init|=
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|doc
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|docAsUpsert
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|docAsUpsert
argument_list|(
name|docAsUpsert
argument_list|)
expr_stmt|;
if|if
condition|(
name|docAsUpsert
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"doc_as_upsert"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|updateRequest
operator|.
name|script
argument_list|(
name|mockScript
argument_list|(
literal|"_value + 1"
argument_list|)
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|scriptedUpsert
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|BytesReference
name|source
init|=
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|upsert
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|routing
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"routing"
argument_list|,
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|parent
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"parent"
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|timeout
init|=
name|randomTimeValue
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|timeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
name|ReplicationRequest
operator|.
name|DEFAULT_TIMEOUT
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
init|=
name|randomFrom
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|setRefreshPolicy
argument_list|(
name|refreshPolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|refreshPolicy
operator|!=
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"refresh"
argument_list|,
name|refreshPolicy
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|waitForActiveShards
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|waitForActiveShards
argument_list|(
name|waitForActiveShards
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"wait_for_active_shards"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|waitForActiveShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|long
name|version
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|VersionType
name|versionType
init|=
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version_type"
argument_list|,
name|versionType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|retryOnConflict
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|updateRequest
operator|.
name|retryOnConflict
argument_list|(
name|retryOnConflict
argument_list|)
expr_stmt|;
if|if
condition|(
name|retryOnConflict
operator|>
literal|0
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"retry_on_conflict"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|retryOnConflict
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomizeFetchSourceContextParams
argument_list|(
name|updateRequest
operator|::
name|fetchSource
argument_list|,
name|expectedParams
argument_list|)
expr_stmt|;
block|}
name|Request
name|request
init|=
name|Request
operator|.
name|update
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|index
operator|+
literal|"/"
operator|+
name|type
operator|+
literal|"/"
operator|+
name|id
operator|+
literal|"/_update"
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|request
operator|.
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"POST"
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
name|request
operator|.
name|entity
decl_stmt|;
name|assertTrue
argument_list|(
name|entity
operator|instanceof
name|ByteArrayEntity
argument_list|)
expr_stmt|;
name|UpdateRequest
name|parsedUpdateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|XContentType
name|entityContentType
init|=
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|entityContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|entity
operator|.
name|getContent
argument_list|()
argument_list|)
init|)
block|{
name|parsedUpdateRequest
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|scriptedUpsert
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|scriptedUpsert
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|docAsUpsert
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|docAsUpsert
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|detectNoop
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|detectNoop
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|script
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|script
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateRequest
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertToXContentEquivalent
argument_list|(
name|updateRequest
operator|.
name|doc
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|doc
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|parsedUpdateRequest
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateRequest
operator|.
name|upsertRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertToXContentEquivalent
argument_list|(
name|updateRequest
operator|.
name|upsertRequest
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|upsertRequest
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|parsedUpdateRequest
operator|.
name|upsertRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUpdateWithDifferentContentTypes
specifier|public
name|void
name|testUpdateWithDifferentContentTypes
parameter_list|()
throws|throws
name|IOException
block|{
name|IllegalStateException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|doc
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"doc"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|upsert
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"upsert"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|YAML
argument_list|)
argument_list|)
expr_stmt|;
name|Request
operator|.
name|update
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Update request cannot have different content types for doc [JSON] and upsert [YAML] documents"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBulk
specifier|public
name|void
name|testBulk
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|timeout
init|=
name|randomTimeValue
argument_list|()
decl_stmt|;
name|bulkRequest
operator|.
name|timeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
name|BulkShardRequest
operator|.
name|DEFAULT_TIMEOUT
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
init|=
name|randomFrom
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|bulkRequest
operator|.
name|setRefreshPolicy
argument_list|(
name|refreshPolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|refreshPolicy
operator|!=
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"refresh"
argument_list|,
name|refreshPolicy
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|XContentType
operator|.
name|SMILE
argument_list|)
decl_stmt|;
name|int
name|nbItems
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbItems
condition|;
name|i
operator|++
control|)
block|{
name|String
name|index
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|BytesReference
name|source
init|=
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|DocWriteRequest
operator|.
name|OpType
name|opType
init|=
name|randomFrom
argument_list|(
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|DocWriteRequest
argument_list|<
name|?
argument_list|>
name|docWriteRequest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|docWriteRequest
operator|=
name|indexRequest
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|indexRequest
operator|.
name|setPipeline
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|indexRequest
operator|.
name|parent
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|CREATE
condition|)
block|{
name|IndexRequest
name|createRequest
init|=
operator|new
name|IndexRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|xContentType
argument_list|)
operator|.
name|create
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|docWriteRequest
operator|=
name|createRequest
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|createRequest
operator|.
name|parent
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
condition|)
block|{
specifier|final
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|doc
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|xContentType
argument_list|)
argument_list|)
decl_stmt|;
name|docWriteRequest
operator|=
name|updateRequest
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updateRequest
operator|.
name|retryOnConflict
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomizeFetchSourceContextParams
argument_list|(
name|updateRequest
operator|::
name|fetchSource
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updateRequest
operator|.
name|parent
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|DELETE
condition|)
block|{
name|docWriteRequest
operator|=
operator|new
name|DeleteRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|docWriteRequest
operator|.
name|routing
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|docWriteRequest
operator|.
name|version
argument_list|(
name|randomNonNegativeLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|docWriteRequest
operator|.
name|versionType
argument_list|(
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bulkRequest
operator|.
name|add
argument_list|(
name|docWriteRequest
argument_list|)
expr_stmt|;
block|}
name|Request
name|request
init|=
name|Request
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/_bulk"
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|request
operator|.
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"POST"
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xContentType
operator|.
name|mediaType
argument_list|()
argument_list|,
name|request
operator|.
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|request
operator|.
name|entity
operator|.
name|getContentLength
argument_list|()
index|]
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
name|request
operator|.
name|entity
operator|.
name|getContent
argument_list|()
init|)
block|{
name|Streams
operator|.
name|readFully
argument_list|(
name|inputStream
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|BulkRequest
name|parsedBulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|parsedBulkRequest
operator|.
name|add
argument_list|(
name|content
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|length
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bulkRequest
operator|.
name|numberOfActions
argument_list|()
argument_list|,
name|parsedBulkRequest
operator|.
name|numberOfActions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bulkRequest
operator|.
name|numberOfActions
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocWriteRequest
argument_list|<
name|?
argument_list|>
name|originalRequest
init|=
name|bulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DocWriteRequest
argument_list|<
name|?
argument_list|>
name|parsedRequest
init|=
name|parsedBulkRequest
operator|.
name|requests
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|opType
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|opType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|index
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|type
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|id
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|routing
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|parent
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|version
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalRequest
operator|.
name|versionType
argument_list|()
argument_list|,
name|parsedRequest
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
name|DocWriteRequest
operator|.
name|OpType
name|opType
init|=
name|originalRequest
operator|.
name|opType
argument_list|()
decl_stmt|;
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|INDEX
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|originalRequest
decl_stmt|;
name|IndexRequest
name|parsedIndexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|parsedRequest
decl_stmt|;
name|assertEquals
argument_list|(
name|indexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|parsedIndexRequest
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|assertToXContentEquivalent
argument_list|(
name|indexRequest
operator|.
name|source
argument_list|()
argument_list|,
name|parsedIndexRequest
operator|.
name|source
argument_list|()
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opType
operator|==
name|DocWriteRequest
operator|.
name|OpType
operator|.
name|UPDATE
condition|)
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|(
name|UpdateRequest
operator|)
name|originalRequest
decl_stmt|;
name|UpdateRequest
name|parsedUpdateRequest
init|=
operator|(
name|UpdateRequest
operator|)
name|parsedRequest
decl_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|retryOnConflict
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|updateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|fetchSource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateRequest
operator|.
name|doc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertToXContentEquivalent
argument_list|(
name|updateRequest
operator|.
name|doc
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
name|parsedUpdateRequest
operator|.
name|doc
argument_list|()
operator|.
name|source
argument_list|()
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|parsedUpdateRequest
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testBulkWithDifferentContentTypes
specifier|public
name|void
name|testBulkWithDifferentContentTypes
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|UpdateRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|script
argument_list|(
name|mockScript
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
name|Request
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentType
operator|.
name|JSON
operator|.
name|mediaType
argument_list|()
argument_list|,
name|request
operator|.
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|XContentType
operator|.
name|SMILE
argument_list|)
decl_stmt|;
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|Request
name|request
init|=
name|Request
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|xContentType
operator|.
name|mediaType
argument_list|()
argument_list|,
name|request
operator|.
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|XContentType
operator|.
name|SMILE
argument_list|)
decl_stmt|;
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|updateRequest
operator|.
name|doc
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateRequest
operator|.
name|upsert
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Request
name|request
init|=
name|Request
operator|.
name|bulk
argument_list|(
operator|new
name|BulkRequest
argument_list|()
operator|.
name|add
argument_list|(
name|updateRequest
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|xContentType
operator|.
name|mediaType
argument_list|()
argument_list|,
name|request
operator|.
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|SMILE
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Request
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatching content-type found for request with content-type [JSON], "
operator|+
literal|"previous requests have content-type [SMILE]"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|UpdateRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|doc
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
operator|.
name|upsert
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|SMILE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Request
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatching content-type found for request with content-type [SMILE], "
operator|+
literal|"previous requests have content-type [JSON]"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|CBOR
argument_list|,
name|XContentType
operator|.
name|YAML
argument_list|)
decl_stmt|;
name|BulkRequest
name|bulkRequest
init|=
operator|new
name|BulkRequest
argument_list|()
decl_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|DeleteRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|JSON
argument_list|)
argument_list|)
expr_stmt|;
name|bulkRequest
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"index"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Request
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unsupported content-type found for request with content-type ["
operator|+
name|xContentType
operator|+
literal|"], only JSON and SMILE are supported"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSearch
specifier|public
name|void
name|testSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|int
name|numIndices
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[
name|numIndices
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
literal|"index-"
operator|+
name|randomAlphaOfLengthBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|searchRequest
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|int
name|numTypes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[
name|numTypes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTypes
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
literal|"type-"
operator|+
name|randomAlphaOfLengthBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|searchRequest
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchRequest
operator|.
name|routing
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"routing"
argument_list|,
name|searchRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchRequest
operator|.
name|preference
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"preference"
argument_list|,
name|searchRequest
operator|.
name|preference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchRequest
operator|.
name|searchType
argument_list|(
name|randomFrom
argument_list|(
name|SearchType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expectedParams
operator|.
name|put
argument_list|(
literal|"search_type"
argument_list|,
name|searchRequest
operator|.
name|searchType
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchRequest
operator|.
name|requestCache
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"request_cache"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|searchRequest
operator|.
name|requestCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchRequest
operator|.
name|setBatchedReduceSize
argument_list|(
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expectedParams
operator|.
name|put
argument_list|(
literal|"batched_reduce_size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|searchRequest
operator|.
name|getBatchedReduceSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchRequest
operator|.
name|scroll
argument_list|(
name|randomTimeValue
argument_list|()
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"scroll"
argument_list|,
name|searchRequest
operator|.
name|scroll
argument_list|()
operator|.
name|keepAlive
argument_list|()
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchRequest
operator|.
name|indicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expectedParams
operator|.
name|put
argument_list|(
literal|"ignore_unavailable"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
operator|.
name|ignoreUnavailable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"allow_no_indices"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
operator|.
name|allowNoIndices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
operator|.
name|expandWildcardsOpen
argument_list|()
operator|&&
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"expand_wildcards"
argument_list|,
literal|"open,closed"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
operator|.
name|expandWildcardsOpen
argument_list|()
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"expand_wildcards"
argument_list|,
literal|"open"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRequest
operator|.
name|indicesOptions
argument_list|()
operator|.
name|expandWildcardsClosed
argument_list|()
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"expand_wildcards"
argument_list|,
literal|"closed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"expand_wildcards"
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
block|}
name|SearchSourceBuilder
name|searchSourceBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|=
operator|new
name|SearchSourceBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|size
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|from
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|minScore
argument_list|(
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|explain
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|profile
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|highlighter
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|query
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|aggregation
argument_list|(
operator|new
name|TermsAggregationBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|ValueType
operator|.
name|STRING
argument_list|)
operator|.
name|field
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|suggest
argument_list|(
operator|new
name|SuggestBuilder
argument_list|()
operator|.
name|addSuggestion
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|CompletionSuggestionBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|addRescorer
argument_list|(
operator|new
name|QueryRescorerBuilder
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchSourceBuilder
operator|.
name|collapse
argument_list|(
operator|new
name|CollapseBuilder
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|searchRequest
operator|.
name|source
argument_list|(
name|searchSourceBuilder
argument_list|)
expr_stmt|;
block|}
name|Request
name|request
init|=
name|Request
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|)
decl_stmt|;
name|StringJoiner
name|endpoint
init|=
operator|new
name|StringJoiner
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|index
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|endpoint
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|types
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|endpoint
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|add
argument_list|(
literal|"_search"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|toString
argument_list|()
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|request
operator|.
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchSourceBuilder
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertToXContentBody
argument_list|(
name|searchSourceBuilder
argument_list|,
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSearchScroll
specifier|public
name|void
name|testSearchScroll
parameter_list|()
throws|throws
name|IOException
block|{
name|SearchScrollRequest
name|searchScrollRequest
init|=
operator|new
name|SearchScrollRequest
argument_list|()
decl_stmt|;
name|searchScrollRequest
operator|.
name|scrollId
argument_list|(
name|randomAlphaOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|searchScrollRequest
operator|.
name|scroll
argument_list|(
name|randomPositiveTimeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Request
name|request
init|=
name|Request
operator|.
name|searchScroll
argument_list|(
name|searchScrollRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GET"
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/_search/scroll"
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertToXContentBody
argument_list|(
name|searchScrollRequest
argument_list|,
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
block|}
DECL|method|assertToXContentBody
specifier|private
specifier|static
name|void
name|assertToXContentBody
parameter_list|(
name|ToXContent
name|expectedBody
parameter_list|,
name|HttpEntity
name|actualEntity
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesReference
name|expectedBytes
init|=
name|XContentHelper
operator|.
name|toXContent
argument_list|(
name|expectedBody
argument_list|,
name|Request
operator|.
name|REQUEST_BODY_CONTENT_TYPE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XContentType
operator|.
name|JSON
operator|.
name|mediaType
argument_list|()
argument_list|,
name|actualEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBytes
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|EntityUtils
operator|.
name|toByteArray
argument_list|(
name|actualEntity
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParams
specifier|public
name|void
name|testParams
parameter_list|()
block|{
specifier|final
name|int
name|nbParams
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Request
operator|.
name|Params
name|params
init|=
name|Request
operator|.
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbParams
condition|;
name|i
operator|++
control|)
block|{
name|String
name|paramName
init|=
literal|"p_"
operator|+
name|i
decl_stmt|;
name|String
name|paramValue
init|=
name|randomAlphaOfLength
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|params
operator|.
name|putParam
argument_list|(
name|paramName
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestParams
init|=
name|params
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|nbParams
argument_list|,
name|requestParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|requestParams
argument_list|)
expr_stmt|;
block|}
DECL|method|testParamsNoDuplicates
specifier|public
name|void
name|testParamsNoDuplicates
parameter_list|()
block|{
name|Request
operator|.
name|Params
name|params
init|=
name|Request
operator|.
name|Params
operator|.
name|builder
argument_list|()
decl_stmt|;
name|params
operator|.
name|putParam
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|params
operator|.
name|putParam
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Request parameter [test] is already registered"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestParams
init|=
name|params
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|requestParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|requestParams
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEndpoint
specifier|public
name|void
name|testEndpoint
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|Request
operator|.
name|endpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|Request
operator|.
name|endpoint
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|Request
operator|.
name|endpoint
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|Request
operator|.
name|endpoint
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/_create"
argument_list|,
name|Request
operator|.
name|endpoint
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"_create"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c/_create"
argument_list|,
name|Request
operator|.
name|endpoint
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"_create"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/_create"
argument_list|,
name|Request
operator|.
name|endpoint
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"_create"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnforceSameContentType
specifier|public
name|void
name|testEnforceSameContentType
parameter_list|()
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|XContentType
operator|.
name|SMILE
argument_list|)
decl_stmt|;
name|IndexRequest
name|indexRequest
init|=
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|xContentType
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|xContentType
argument_list|,
name|enforceSameContentType
argument_list|(
name|indexRequest
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xContentType
argument_list|,
name|enforceSameContentType
argument_list|(
name|indexRequest
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
name|XContentType
name|bulkContentType
init|=
name|randomBoolean
argument_list|()
condition|?
name|xContentType
else|:
literal|null
decl_stmt|;
name|IllegalArgumentException
name|exception
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|enforceSameContentType
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|CBOR
argument_list|)
argument_list|,
name|bulkContentType
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unsupported content-type found for request with content-type [CBOR], only JSON and SMILE are supported"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|enforceSameContentType
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|XContentType
operator|.
name|YAML
argument_list|)
argument_list|,
name|bulkContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unsupported content-type found for request with content-type [YAML], only JSON and SMILE are supported"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|XContentType
name|requestContentType
init|=
name|xContentType
operator|==
name|XContentType
operator|.
name|JSON
condition|?
name|XContentType
operator|.
name|SMILE
else|:
name|XContentType
operator|.
name|JSON
decl_stmt|;
name|exception
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|enforceSameContentType
argument_list|(
operator|new
name|IndexRequest
argument_list|()
operator|.
name|source
argument_list|(
name|singletonMap
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|,
name|requestContentType
argument_list|)
argument_list|,
name|xContentType
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatching content-type found for request with content-type ["
operator|+
name|requestContentType
operator|+
literal|"], "
operator|+
literal|"previous requests have content-type ["
operator|+
name|xContentType
operator|+
literal|"]"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Randomize the {@link FetchSourceContext} request parameters.      */
DECL|method|randomizeFetchSourceContextParams
specifier|private
specifier|static
name|void
name|randomizeFetchSourceContextParams
parameter_list|(
name|Consumer
argument_list|<
name|FetchSourceContext
argument_list|>
name|consumer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|fetchSource
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
operator|new
name|FetchSourceContext
argument_list|(
name|fetchSource
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchSource
operator|==
literal|false
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"_source"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|numIncludes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|includes
init|=
operator|new
name|String
index|[
name|numIncludes
index|]
decl_stmt|;
name|StringBuilder
name|includesParam
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIncludes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|include
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|includes
index|[
name|i
index|]
operator|=
name|include
expr_stmt|;
name|includesParam
operator|.
name|append
argument_list|(
name|include
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numIncludes
operator|-
literal|1
condition|)
block|{
name|includesParam
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numIncludes
operator|>
literal|0
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"_source_include"
argument_list|,
name|includesParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numExcludes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|excludes
init|=
operator|new
name|String
index|[
name|numExcludes
index|]
decl_stmt|;
name|StringBuilder
name|excludesParam
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numExcludes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|exclude
init|=
name|randomAlphaOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|excludes
index|[
name|i
index|]
operator|=
name|exclude
expr_stmt|;
name|excludesParam
operator|.
name|append
argument_list|(
name|exclude
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numExcludes
operator|-
literal|1
condition|)
block|{
name|excludesParam
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numExcludes
operator|>
literal|0
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"_source_exclude"
argument_list|,
name|excludesParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|accept
argument_list|(
operator|new
name|FetchSourceContext
argument_list|(
literal|true
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setRandomTimeout
specifier|private
specifier|static
name|void
name|setRandomTimeout
parameter_list|(
name|ReplicationRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|timeout
init|=
name|randomTimeValue
argument_list|()
decl_stmt|;
name|request
operator|.
name|timeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
name|ReplicationRequest
operator|.
name|DEFAULT_TIMEOUT
operator|.
name|getStringRep
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRandomRefreshPolicy
specifier|private
specifier|static
name|void
name|setRandomRefreshPolicy
parameter_list|(
name|ReplicatedWriteRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|WriteRequest
operator|.
name|RefreshPolicy
name|refreshPolicy
init|=
name|randomFrom
argument_list|(
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRefreshPolicy
argument_list|(
name|refreshPolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|refreshPolicy
operator|!=
name|WriteRequest
operator|.
name|RefreshPolicy
operator|.
name|NONE
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"refresh"
argument_list|,
name|refreshPolicy
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setRandomVersion
specifier|private
specifier|static
name|void
name|setRandomVersion
parameter_list|(
name|DocWriteRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|long
name|version
init|=
name|randomFrom
argument_list|(
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|Versions
operator|.
name|MATCH_DELETED
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
name|randomNonNegativeLong
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setRandomVersionType
specifier|private
specifier|static
name|void
name|setRandomVersionType
parameter_list|(
name|DocWriteRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|VersionType
name|versionType
init|=
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version_type"
argument_list|,
name|versionType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

