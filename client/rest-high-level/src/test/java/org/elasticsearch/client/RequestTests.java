begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|FetchSourceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|RequestTests
specifier|public
class|class
name|RequestTests
extends|extends
name|ESTestCase
block|{
DECL|method|testPing
specifier|public
name|void
name|testPing
parameter_list|()
block|{
name|Request
name|request
init|=
name|Request
operator|.
name|ping
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HEAD"
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|getAndExistsTest
argument_list|(
name|Request
operator|::
name|get
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExists
specifier|public
name|void
name|testExists
parameter_list|()
block|{
name|getAndExistsTest
argument_list|(
name|Request
operator|::
name|exists
argument_list|,
literal|"HEAD"
argument_list|)
expr_stmt|;
block|}
DECL|method|getAndExistsTest
specifier|private
specifier|static
name|void
name|getAndExistsTest
parameter_list|(
name|Function
argument_list|<
name|GetRequest
argument_list|,
name|Request
argument_list|>
name|requestConverter
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|String
name|index
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|GetRequest
name|getRequest
init|=
operator|new
name|GetRequest
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|preference
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|getRequest
operator|.
name|preference
argument_list|(
name|preference
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"preference"
argument_list|,
name|preference
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|String
name|routing
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|getRequest
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"routing"
argument_list|,
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|realtime
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|realtime
argument_list|(
name|realtime
argument_list|)
expr_stmt|;
if|if
condition|(
name|realtime
operator|==
literal|false
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"realtime"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|refresh
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|refresh
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
if|if
condition|(
name|refresh
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"refresh"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|long
name|version
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|VersionType
name|versionType
init|=
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|getRequest
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionType
operator|!=
name|VersionType
operator|.
name|INTERNAL
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"version_type"
argument_list|,
name|versionType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numStoredFields
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
index|[]
name|storedFields
init|=
operator|new
name|String
index|[
name|numStoredFields
index|]
decl_stmt|;
name|StringBuilder
name|storedFieldsParam
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStoredFields
condition|;
name|i
operator|++
control|)
block|{
name|String
name|storedField
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|storedFields
index|[
name|i
index|]
operator|=
name|storedField
expr_stmt|;
name|storedFieldsParam
operator|.
name|append
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numStoredFields
operator|-
literal|1
condition|)
block|{
name|storedFieldsParam
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|getRequest
operator|.
name|storedFields
argument_list|(
name|storedFields
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"stored_fields"
argument_list|,
name|storedFieldsParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|boolean
name|fetchSource
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|fetchSourceContext
argument_list|(
operator|new
name|FetchSourceContext
argument_list|(
name|fetchSource
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchSource
operator|==
literal|false
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"_source"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|numIncludes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|includes
init|=
operator|new
name|String
index|[
name|numIncludes
index|]
decl_stmt|;
name|StringBuilder
name|includesParam
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIncludes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|include
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|includes
index|[
name|i
index|]
operator|=
name|include
expr_stmt|;
name|includesParam
operator|.
name|append
argument_list|(
name|include
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numIncludes
operator|-
literal|1
condition|)
block|{
name|includesParam
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numIncludes
operator|>
literal|0
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"_source_include"
argument_list|,
name|includesParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numExcludes
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|excludes
init|=
operator|new
name|String
index|[
name|numExcludes
index|]
decl_stmt|;
name|StringBuilder
name|excludesParam
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numExcludes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|exclude
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|excludes
index|[
name|i
index|]
operator|=
name|exclude
expr_stmt|;
name|excludesParam
operator|.
name|append
argument_list|(
name|exclude
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numExcludes
operator|-
literal|1
condition|)
block|{
name|excludesParam
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numExcludes
operator|>
literal|0
condition|)
block|{
name|expectedParams
operator|.
name|put
argument_list|(
literal|"_source_exclude"
argument_list|,
name|excludesParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getRequest
operator|.
name|fetchSourceContext
argument_list|(
operator|new
name|FetchSourceContext
argument_list|(
literal|true
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Request
name|request
init|=
name|requestConverter
operator|.
name|apply
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|index
operator|+
literal|"/"
operator|+
name|type
operator|+
literal|"/"
operator|+
name|id
argument_list|,
name|request
operator|.
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|request
operator|.
name|params
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|entity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|method
argument_list|,
name|request
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

