begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.sniff
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|sniff
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Sniffer builder. Helps creating a new {@link Sniffer}.  */
end_comment

begin_class
DECL|class|SnifferBuilder
specifier|public
specifier|final
class|class
name|SnifferBuilder
block|{
DECL|field|DEFAULT_SNIFF_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SNIFF_INTERVAL
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SNIFF_AFTER_FAILURE_DELAY
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SNIFF_AFTER_FAILURE_DELAY
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|restClient
specifier|private
specifier|final
name|RestClient
name|restClient
decl_stmt|;
DECL|field|sniffIntervalMillis
specifier|private
name|long
name|sniffIntervalMillis
init|=
name|DEFAULT_SNIFF_INTERVAL
decl_stmt|;
DECL|field|sniffAfterFailureDelayMillis
specifier|private
name|long
name|sniffAfterFailureDelayMillis
init|=
name|DEFAULT_SNIFF_AFTER_FAILURE_DELAY
decl_stmt|;
DECL|field|hostsSniffer
specifier|private
name|HostsSniffer
name|hostsSniffer
decl_stmt|;
comment|/**      * Creates a new builder instance by providing the {@link RestClient} that will be used to communicate with elasticsearch      */
DECL|method|SnifferBuilder
name|SnifferBuilder
parameter_list|(
name|RestClient
name|restClient
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|restClient
argument_list|,
literal|"restClient cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|restClient
operator|=
name|restClient
expr_stmt|;
block|}
comment|/**      * Sets the interval between consecutive ordinary sniff executions in milliseconds. Will be honoured when      * sniffOnFailure is disabled or when there are no failures between consecutive sniff executions.      * @throws IllegalArgumentException if sniffIntervalMillis is not greater than 0      */
DECL|method|setSniffIntervalMillis
specifier|public
name|SnifferBuilder
name|setSniffIntervalMillis
parameter_list|(
name|int
name|sniffIntervalMillis
parameter_list|)
block|{
if|if
condition|(
name|sniffIntervalMillis
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sniffIntervalMillis must be greater than 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sniffIntervalMillis
operator|=
name|sniffIntervalMillis
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the delay of a sniff execution scheduled after a failure (in milliseconds)      */
DECL|method|setSniffAfterFailureDelayMillis
specifier|public
name|SnifferBuilder
name|setSniffAfterFailureDelayMillis
parameter_list|(
name|int
name|sniffAfterFailureDelayMillis
parameter_list|)
block|{
if|if
condition|(
name|sniffAfterFailureDelayMillis
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sniffAfterFailureDelayMillis must be greater than 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sniffAfterFailureDelayMillis
operator|=
name|sniffAfterFailureDelayMillis
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the {@link HostsSniffer} to be used to read hosts. A default instance of {@link ElasticsearchHostsSniffer}      * is created when not provided. This method can be used to change the configuration of the {@link ElasticsearchHostsSniffer},      * or to provide a different implementation (e.g. in case hosts need to taken from a different source).      */
DECL|method|setHostsSniffer
specifier|public
name|SnifferBuilder
name|setHostsSniffer
parameter_list|(
name|HostsSniffer
name|hostsSniffer
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hostsSniffer
argument_list|,
literal|"hostsSniffer cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostsSniffer
operator|=
name|hostsSniffer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates the {@link Sniffer} based on the provided configuration.      */
DECL|method|build
specifier|public
name|Sniffer
name|build
parameter_list|()
block|{
if|if
condition|(
name|hostsSniffer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|hostsSniffer
operator|=
operator|new
name|ElasticsearchHostsSniffer
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Sniffer
argument_list|(
name|restClient
argument_list|,
name|hostsSniffer
argument_list|,
name|sniffIntervalMillis
argument_list|,
name|sniffAfterFailureDelayMillis
argument_list|)
return|;
block|}
block|}
end_class

end_unit

