begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.sniff
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|sniff
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * {@link org.elasticsearch.client.RestClient.FailureListener} implementation that allows to perform  * sniffing on failure. Gets notified whenever a failure happens and uses a {@link Sniffer} instance  * to manually reload hosts and sets them back to the {@link RestClient}. The {@link Sniffer} instance  * needs to be lazily set through {@link #setSniffer(Sniffer)}.  */
end_comment

begin_class
DECL|class|SniffOnFailureListener
specifier|public
class|class
name|SniffOnFailureListener
extends|extends
name|RestClient
operator|.
name|FailureListener
block|{
DECL|field|sniffer
specifier|private
specifier|volatile
name|Sniffer
name|sniffer
decl_stmt|;
DECL|field|set
specifier|private
specifier|final
name|AtomicBoolean
name|set
decl_stmt|;
DECL|method|SniffOnFailureListener
specifier|public
name|SniffOnFailureListener
parameter_list|()
block|{
name|this
operator|.
name|set
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the {@link Sniffer} instance used to perform sniffing      * @throws IllegalStateException if the sniffer was already set, as it can only be set once      */
DECL|method|setSniffer
specifier|public
name|void
name|setSniffer
parameter_list|(
name|Sniffer
name|sniffer
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|sniffer
argument_list|,
literal|"sniffer must not be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|set
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|this
operator|.
name|sniffer
operator|=
name|sniffer
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"sniffer can only be set once"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|HttpHost
name|host
parameter_list|)
block|{
if|if
condition|(
name|sniffer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"sniffer was not set, unable to sniff on failure"
argument_list|)
throw|;
block|}
comment|//re-sniff immediately but take out the node that failed
name|sniffer
operator|.
name|sniffOnFailure
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

