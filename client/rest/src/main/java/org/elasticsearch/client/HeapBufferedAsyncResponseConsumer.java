begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ContentTooLongException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|ContentDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|IOControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|entity
operator|.
name|ContentBufferEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|AbstractAsyncResponseConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|ByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|HeapByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|SimpleInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link org.apache.http.nio.protocol.HttpAsyncResponseConsumer}. Buffers the whole  * response content in heap memory, meaning that the size of the buffer is equal to the content-length of the response.  * Limits the size of responses that can be read to {@link #DEFAULT_BUFFER_LIMIT} by default, configurable value.  * Throws an exception in case the entity is longer than the configured buffer limit.  */
end_comment

begin_class
DECL|class|HeapBufferedAsyncResponseConsumer
specifier|public
class|class
name|HeapBufferedAsyncResponseConsumer
extends|extends
name|AbstractAsyncResponseConsumer
argument_list|<
name|HttpResponse
argument_list|>
block|{
comment|//default buffer limit is 10MB
DECL|field|DEFAULT_BUFFER_LIMIT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_LIMIT
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|bufferLimit
specifier|private
specifier|final
name|int
name|bufferLimit
decl_stmt|;
DECL|field|response
specifier|private
specifier|volatile
name|HttpResponse
name|response
decl_stmt|;
DECL|field|buf
specifier|private
specifier|volatile
name|SimpleInputBuffer
name|buf
decl_stmt|;
comment|/**      * Creates a new instance of this consumer with a buffer limit of {@link #DEFAULT_BUFFER_LIMIT}      */
DECL|method|HeapBufferedAsyncResponseConsumer
specifier|public
name|HeapBufferedAsyncResponseConsumer
parameter_list|()
block|{
name|this
operator|.
name|bufferLimit
operator|=
name|DEFAULT_BUFFER_LIMIT
expr_stmt|;
block|}
comment|/**      * Creates a new instance of this consumer with the provided buffer limit      */
DECL|method|HeapBufferedAsyncResponseConsumer
specifier|public
name|HeapBufferedAsyncResponseConsumer
parameter_list|(
name|int
name|bufferLimit
parameter_list|)
block|{
name|this
operator|.
name|bufferLimit
operator|=
name|bufferLimit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponseReceived
specifier|protected
name|void
name|onResponseReceived
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onEntityEnclosed
specifier|protected
name|void
name|onEntityEnclosed
parameter_list|(
name|HttpEntity
name|entity
parameter_list|,
name|ContentType
name|contentType
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|len
init|=
name|entity
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|bufferLimit
condition|)
block|{
throw|throw
operator|new
name|ContentTooLongException
argument_list|(
literal|"entity content is too long ["
operator|+
name|len
operator|+
literal|"] for the configured buffer limit ["
operator|+
name|bufferLimit
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
name|len
operator|=
literal|4096
expr_stmt|;
block|}
name|this
operator|.
name|buf
operator|=
operator|new
name|SimpleInputBuffer
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|,
name|getByteBufferAllocator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|response
operator|.
name|setEntity
argument_list|(
operator|new
name|ContentBufferEntity
argument_list|(
name|entity
argument_list|,
name|this
operator|.
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the instance of {@link ByteBufferAllocator} to use for content buffering.      * Allows to plug in any {@link ByteBufferAllocator} implementation.      */
DECL|method|getByteBufferAllocator
specifier|protected
name|ByteBufferAllocator
name|getByteBufferAllocator
parameter_list|()
block|{
return|return
name|HeapByteBufferAllocator
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|onContentReceived
specifier|protected
name|void
name|onContentReceived
parameter_list|(
name|ContentDecoder
name|decoder
parameter_list|,
name|IOControl
name|ioctrl
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|buf
operator|.
name|consumeContent
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildResult
specifier|protected
name|HttpResponse
name|buildResult
parameter_list|(
name|HttpContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|releaseResources
specifier|protected
name|void
name|releaseResources
parameter_list|()
block|{
name|response
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

